
KPD_LCD_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  000035cc  00003640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000027b4  00000000  00000000  00003758  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000da9  00000000  00000000  00005f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00006cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00006e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00007047  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00009452  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000a7d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000b9b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000bb70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000be66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c7d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 23 18 	call	0x3046	; 0x3046 <main>
      7a:	0c 94 e4 1a 	jmp	0x35c8	; 0x35c8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d5 1a 	jmp	0x35aa	; 0x35aa <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d5 1a 	jmp	0x35aa	; 0x35aa <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 d5 1a 	jmp	0x35aa	; 0x35aa <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 d5 1a 	jmp	0x35aa	; 0x35aa <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 d5 1a 	jmp	0x35aa	; 0x35aa <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e8 59       	subi	r30, 0x98	; 152
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <CAL_u8OperandNOD>:
/*Module*/
#include "DIO_interface.h"
#include "APP_interface.h"

u8 CAL_u8OperandNOD(u32 Copy_Operand)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <CAL_u8OperandNOD+0x6>
     e24:	00 d0       	rcall	.+0      	; 0xe26 <CAL_u8OperandNOD+0x8>
     e26:	0f 92       	push	r0
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	6a 83       	std	Y+2, r22	; 0x02
     e2e:	7b 83       	std	Y+3, r23	; 0x03
     e30:	8c 83       	std	Y+4, r24	; 0x04
     e32:	9d 83       	std	Y+5, r25	; 0x05
	u8 Local_u8NOD = 0;
     e34:	19 82       	std	Y+1, r1	; 0x01
     e36:	15 c0       	rjmp	.+42     	; 0xe62 <CAL_u8OperandNOD+0x44>

	/*Loop to get the Number of Digits*/
	while(Copy_Operand != 0)
	{
		/*Dividing the Integer number by 10 till we have a result of Division Zero*/
		Copy_Operand /= 10;
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	9b 81       	ldd	r25, Y+3	; 0x03
     e3c:	ac 81       	ldd	r26, Y+4	; 0x04
     e3e:	bd 81       	ldd	r27, Y+5	; 0x05
     e40:	2a e0       	ldi	r18, 0x0A	; 10
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	50 e0       	ldi	r21, 0x00	; 0
     e48:	bc 01       	movw	r22, r24
     e4a:	cd 01       	movw	r24, r26
     e4c:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__udivmodsi4>
     e50:	da 01       	movw	r26, r20
     e52:	c9 01       	movw	r24, r18
     e54:	8a 83       	std	Y+2, r24	; 0x02
     e56:	9b 83       	std	Y+3, r25	; 0x03
     e58:	ac 83       	std	Y+4, r26	; 0x04
     e5a:	bd 83       	std	Y+5, r27	; 0x05

		/*With each Division Add 1 to Number of Digits*/
		Local_u8NOD++;
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	8f 5f       	subi	r24, 0xFF	; 255
     e60:	89 83       	std	Y+1, r24	; 0x01
u8 CAL_u8OperandNOD(u32 Copy_Operand)
{
	u8 Local_u8NOD = 0;

	/*Loop to get the Number of Digits*/
	while(Copy_Operand != 0)
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	9b 81       	ldd	r25, Y+3	; 0x03
     e66:	ac 81       	ldd	r26, Y+4	; 0x04
     e68:	bd 81       	ldd	r27, Y+5	; 0x05
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	a1 05       	cpc	r26, r1
     e6e:	b1 05       	cpc	r27, r1
     e70:	19 f7       	brne	.-58     	; 0xe38 <CAL_u8OperandNOD+0x1a>

		/*With each Division Add 1 to Number of Digits*/
		Local_u8NOD++;
	}

	return Local_u8NOD;
     e72:	89 81       	ldd	r24, Y+1	; 0x01
}
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <DIO_u8SetPortDirection>:
 * Input		: Port Number, Direction
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPortDirection(u8 Copy_u8PortNB, u8 Copy_u8Dir)
{
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	00 d0       	rcall	.+0      	; 0xe8a <DIO_u8SetPortDirection+0x6>
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <DIO_u8SetPortDirection+0x8>
     e8c:	0f 92       	push	r0
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	8a 83       	std	Y+2, r24	; 0x02
     e94:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
     e96:	19 82       	std	Y+1, r1	; 0x01
	}

	else
		{
			/*Switch for the PORT Number if it 0 -> 3 it is OK else return Error*/
			switch(Copy_u8PortNB)
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	3d 83       	std	Y+5, r19	; 0x05
     ea0:	2c 83       	std	Y+4, r18	; 0x04
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	9d 81       	ldd	r25, Y+5	; 0x05
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	91 05       	cpc	r25, r1
     eaa:	d1 f0       	breq	.+52     	; 0xee0 <DIO_u8SetPortDirection+0x5c>
     eac:	2c 81       	ldd	r18, Y+4	; 0x04
     eae:	3d 81       	ldd	r19, Y+5	; 0x05
     eb0:	22 30       	cpi	r18, 0x02	; 2
     eb2:	31 05       	cpc	r19, r1
     eb4:	2c f4       	brge	.+10     	; 0xec0 <DIO_u8SetPortDirection+0x3c>
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	9d 81       	ldd	r25, Y+5	; 0x05
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	61 f0       	breq	.+24     	; 0xed6 <DIO_u8SetPortDirection+0x52>
     ebe:	1f c0       	rjmp	.+62     	; 0xefe <DIO_u8SetPortDirection+0x7a>
     ec0:	2c 81       	ldd	r18, Y+4	; 0x04
     ec2:	3d 81       	ldd	r19, Y+5	; 0x05
     ec4:	22 30       	cpi	r18, 0x02	; 2
     ec6:	31 05       	cpc	r19, r1
     ec8:	81 f0       	breq	.+32     	; 0xeea <DIO_u8SetPortDirection+0x66>
     eca:	8c 81       	ldd	r24, Y+4	; 0x04
     ecc:	9d 81       	ldd	r25, Y+5	; 0x05
     ece:	83 30       	cpi	r24, 0x03	; 3
     ed0:	91 05       	cpc	r25, r1
     ed2:	81 f0       	breq	.+32     	; 0xef4 <DIO_u8SetPortDirection+0x70>
     ed4:	14 c0       	rjmp	.+40     	; 0xefe <DIO_u8SetPortDirection+0x7a>
			{
			case DIO_PORT_0:
				DDRA = Copy_u8Dir;
     ed6:	ea e3       	ldi	r30, 0x3A	; 58
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	80 83       	st	Z, r24
     ede:	11 c0       	rjmp	.+34     	; 0xf02 <DIO_u8SetPortDirection+0x7e>
				break;

			case DIO_PORT_1:
				DDRB = Copy_u8Dir;
     ee0:	e7 e3       	ldi	r30, 0x37	; 55
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	80 83       	st	Z, r24
     ee8:	0c c0       	rjmp	.+24     	; 0xf02 <DIO_u8SetPortDirection+0x7e>
				break;

			case DIO_PORT_2:
				DDRC = Copy_u8Dir;
     eea:	e4 e3       	ldi	r30, 0x34	; 52
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	80 83       	st	Z, r24
     ef2:	07 c0       	rjmp	.+14     	; 0xf02 <DIO_u8SetPortDirection+0x7e>
				break;

			case DIO_PORT_3:
				DDRD = Copy_u8Dir;
     ef4:	e1 e3       	ldi	r30, 0x31	; 49
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	80 83       	st	Z, r24
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_u8SetPortDirection+0x7e>
				break;

			default:
				Local_u8Error = 1;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}

	return Local_u8Error;
     f02:	89 81       	ldd	r24, Y+1	; 0x01
}
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <DIO_u8SetPortValue>:
 * Input		: Port Number, Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPortValue(u8 Copy_u8PortNB, u8 Copy_u8Value)
{
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	00 d0       	rcall	.+0      	; 0xf1a <DIO_u8SetPortValue+0x6>
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <DIO_u8SetPortValue+0x8>
     f1c:	0f 92       	push	r0
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	8a 83       	std	Y+2, r24	; 0x02
     f24:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
     f26:	19 82       	std	Y+1, r1	; 0x01
		Local_u8Error = 1;
	}
	else
		{
			/*Switch for the PORT Number if it 0 -> 3 it is OK else return Error*/
			switch(Copy_u8PortNB)
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	3d 83       	std	Y+5, r19	; 0x05
     f30:	2c 83       	std	Y+4, r18	; 0x04
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	9d 81       	ldd	r25, Y+5	; 0x05
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	91 05       	cpc	r25, r1
     f3a:	d1 f0       	breq	.+52     	; 0xf70 <DIO_u8SetPortValue+0x5c>
     f3c:	2c 81       	ldd	r18, Y+4	; 0x04
     f3e:	3d 81       	ldd	r19, Y+5	; 0x05
     f40:	22 30       	cpi	r18, 0x02	; 2
     f42:	31 05       	cpc	r19, r1
     f44:	2c f4       	brge	.+10     	; 0xf50 <DIO_u8SetPortValue+0x3c>
     f46:	8c 81       	ldd	r24, Y+4	; 0x04
     f48:	9d 81       	ldd	r25, Y+5	; 0x05
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	61 f0       	breq	.+24     	; 0xf66 <DIO_u8SetPortValue+0x52>
     f4e:	1f c0       	rjmp	.+62     	; 0xf8e <DIO_u8SetPortValue+0x7a>
     f50:	2c 81       	ldd	r18, Y+4	; 0x04
     f52:	3d 81       	ldd	r19, Y+5	; 0x05
     f54:	22 30       	cpi	r18, 0x02	; 2
     f56:	31 05       	cpc	r19, r1
     f58:	81 f0       	breq	.+32     	; 0xf7a <DIO_u8SetPortValue+0x66>
     f5a:	8c 81       	ldd	r24, Y+4	; 0x04
     f5c:	9d 81       	ldd	r25, Y+5	; 0x05
     f5e:	83 30       	cpi	r24, 0x03	; 3
     f60:	91 05       	cpc	r25, r1
     f62:	81 f0       	breq	.+32     	; 0xf84 <DIO_u8SetPortValue+0x70>
     f64:	14 c0       	rjmp	.+40     	; 0xf8e <DIO_u8SetPortValue+0x7a>
			{
			case DIO_PORT_0:
				PORTA = Copy_u8Value;
     f66:	eb e3       	ldi	r30, 0x3B	; 59
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	80 83       	st	Z, r24
     f6e:	11 c0       	rjmp	.+34     	; 0xf92 <DIO_u8SetPortValue+0x7e>
				break;

			case DIO_PORT_1:
				PORTB = Copy_u8Value;
     f70:	e8 e3       	ldi	r30, 0x38	; 56
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	80 83       	st	Z, r24
     f78:	0c c0       	rjmp	.+24     	; 0xf92 <DIO_u8SetPortValue+0x7e>
				break;

			case DIO_PORT_2:
				PORTC = Copy_u8Value;
     f7a:	e5 e3       	ldi	r30, 0x35	; 53
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	80 83       	st	Z, r24
     f82:	07 c0       	rjmp	.+14     	; 0xf92 <DIO_u8SetPortValue+0x7e>
				break;

			case DIO_PORT_3:
				PORTD = Copy_u8Value;
     f84:	e2 e3       	ldi	r30, 0x32	; 50
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	80 83       	st	Z, r24
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <DIO_u8SetPortValue+0x7e>
				break;

			default:
				Local_u8Error = 1;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}

	return Local_u8Error;
     f92:	89 81       	ldd	r24, Y+1	; 0x01
}
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <DIO_u8SetPinDirection>:
 * Input		: Port Number, Pin Number, Direction
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPinDirection(u8 Copy_u8PortNB, u8 Copy_u8PinNB, u8 Copy_u8Dir)
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <DIO_u8SetPinDirection+0x6>
     faa:	00 d0       	rcall	.+0      	; 0xfac <DIO_u8SetPinDirection+0x8>
     fac:	00 d0       	rcall	.+0      	; 0xfae <DIO_u8SetPinDirection+0xa>
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	8a 83       	std	Y+2, r24	; 0x02
     fb4:	6b 83       	std	Y+3, r22	; 0x03
     fb6:	4c 83       	std	Y+4, r20	; 0x04
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
     fb8:	19 82       	std	Y+1, r1	; 0x01

	/*Check that the PIN Number is between 0 -> 7 else Return Local Error with ONE*/
	if(Copy_u8PinNB > DIO_PIN_7)
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	88 30       	cpi	r24, 0x08	; 8
     fbe:	10 f0       	brcs	.+4      	; 0xfc4 <DIO_u8SetPinDirection+0x20>
	{
		Local_u8Error = 1;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Check if the Direction is Input or Output Else return Local Error with one*/
	if((Copy_u8Dir != DIO_INPUT) && (Copy_u8Dir != DIO_OUTPUT))
     fc4:	8c 81       	ldd	r24, Y+4	; 0x04
     fc6:	88 23       	and	r24, r24
     fc8:	31 f0       	breq	.+12     	; 0xfd6 <DIO_u8SetPinDirection+0x32>
     fca:	8c 81       	ldd	r24, Y+4	; 0x04
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	19 f0       	breq	.+6      	; 0xfd6 <DIO_u8SetPinDirection+0x32>
	{
		Local_u8Error = 1;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	ac c0       	rjmp	.+344    	; 0x112e <DIO_u8SetPinDirection+0x18a>
	}

	/*Else Check for the PORT number is between 0 -> 3*/
	else
	{
		switch(Copy_u8PortNB)
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	3e 83       	std	Y+6, r19	; 0x06
     fde:	2d 83       	std	Y+5, r18	; 0x05
     fe0:	6d 81       	ldd	r22, Y+5	; 0x05
     fe2:	7e 81       	ldd	r23, Y+6	; 0x06
     fe4:	61 30       	cpi	r22, 0x01	; 1
     fe6:	71 05       	cpc	r23, r1
     fe8:	d1 f1       	breq	.+116    	; 0x105e <DIO_u8SetPinDirection+0xba>
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	82 30       	cpi	r24, 0x02	; 2
     ff0:	91 05       	cpc	r25, r1
     ff2:	34 f4       	brge	.+12     	; 0x1000 <DIO_u8SetPinDirection+0x5c>
     ff4:	2d 81       	ldd	r18, Y+5	; 0x05
     ff6:	3e 81       	ldd	r19, Y+6	; 0x06
     ff8:	21 15       	cp	r18, r1
     ffa:	31 05       	cpc	r19, r1
     ffc:	71 f0       	breq	.+28     	; 0x101a <DIO_u8SetPinDirection+0x76>
     ffe:	95 c0       	rjmp	.+298    	; 0x112a <DIO_u8SetPinDirection+0x186>
    1000:	6d 81       	ldd	r22, Y+5	; 0x05
    1002:	7e 81       	ldd	r23, Y+6	; 0x06
    1004:	62 30       	cpi	r22, 0x02	; 2
    1006:	71 05       	cpc	r23, r1
    1008:	09 f4       	brne	.+2      	; 0x100c <DIO_u8SetPinDirection+0x68>
    100a:	4b c0       	rjmp	.+150    	; 0x10a2 <DIO_u8SetPinDirection+0xfe>
    100c:	8d 81       	ldd	r24, Y+5	; 0x05
    100e:	9e 81       	ldd	r25, Y+6	; 0x06
    1010:	83 30       	cpi	r24, 0x03	; 3
    1012:	91 05       	cpc	r25, r1
    1014:	09 f4       	brne	.+2      	; 0x1018 <DIO_u8SetPinDirection+0x74>
    1016:	67 c0       	rjmp	.+206    	; 0x10e6 <DIO_u8SetPinDirection+0x142>
    1018:	88 c0       	rjmp	.+272    	; 0x112a <DIO_u8SetPinDirection+0x186>
		{
		case DIO_PORT_0:
			ASSIGN_BIT(DDRA, Copy_u8PinNB, Copy_u8Dir);
    101a:	aa e3       	ldi	r26, 0x3A	; 58
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ea e3       	ldi	r30, 0x3A	; 58
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_u8SetPinDirection+0x92>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	2a 95       	dec	r18
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_u8SetPinDirection+0x8e>
    103a:	80 95       	com	r24
    103c:	48 23       	and	r20, r24
    103e:	8c 81       	ldd	r24, Y+4	; 0x04
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	b9 01       	movw	r22, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO_u8SetPinDirection+0xae>
    104e:	66 0f       	add	r22, r22
    1050:	77 1f       	adc	r23, r23
    1052:	8a 95       	dec	r24
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO_u8SetPinDirection+0xaa>
    1056:	cb 01       	movw	r24, r22
    1058:	84 2b       	or	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	68 c0       	rjmp	.+208    	; 0x112e <DIO_u8SetPinDirection+0x18a>
			break;

		case DIO_PORT_1:
			ASSIGN_BIT(DDRB, Copy_u8PinNB, Copy_u8Dir);
    105e:	a7 e3       	ldi	r26, 0x37	; 55
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e7 e3       	ldi	r30, 0x37	; 55
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_u8SetPinDirection+0xd6>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	2a 95       	dec	r18
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_u8SetPinDirection+0xd2>
    107e:	80 95       	com	r24
    1080:	48 23       	and	r20, r24
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	b9 01       	movw	r22, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <DIO_u8SetPinDirection+0xf2>
    1092:	66 0f       	add	r22, r22
    1094:	77 1f       	adc	r23, r23
    1096:	8a 95       	dec	r24
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <DIO_u8SetPinDirection+0xee>
    109a:	cb 01       	movw	r24, r22
    109c:	84 2b       	or	r24, r20
    109e:	8c 93       	st	X, r24
    10a0:	46 c0       	rjmp	.+140    	; 0x112e <DIO_u8SetPinDirection+0x18a>
			break;

		case DIO_PORT_2:
			ASSIGN_BIT(DDRC, Copy_u8PinNB, Copy_u8Dir);
    10a2:	a4 e3       	ldi	r26, 0x34	; 52
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e4 e3       	ldi	r30, 0x34	; 52
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <DIO_u8SetPinDirection+0x11a>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	2a 95       	dec	r18
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <DIO_u8SetPinDirection+0x116>
    10c2:	80 95       	com	r24
    10c4:	48 23       	and	r20, r24
    10c6:	8c 81       	ldd	r24, Y+4	; 0x04
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	88 2f       	mov	r24, r24
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	b9 01       	movw	r22, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_u8SetPinDirection+0x136>
    10d6:	66 0f       	add	r22, r22
    10d8:	77 1f       	adc	r23, r23
    10da:	8a 95       	dec	r24
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_u8SetPinDirection+0x132>
    10de:	cb 01       	movw	r24, r22
    10e0:	84 2b       	or	r24, r20
    10e2:	8c 93       	st	X, r24
    10e4:	24 c0       	rjmp	.+72     	; 0x112e <DIO_u8SetPinDirection+0x18a>
			break;

		case DIO_PORT_3:
			ASSIGN_BIT(DDRD, Copy_u8PinNB, Copy_u8Dir);
    10e6:	a1 e3       	ldi	r26, 0x31	; 49
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e1 e3       	ldi	r30, 0x31	; 49
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	48 2f       	mov	r20, r24
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_u8SetPinDirection+0x15e>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	2a 95       	dec	r18
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_u8SetPinDirection+0x15a>
    1106:	80 95       	com	r24
    1108:	48 23       	and	r20, r24
    110a:	8c 81       	ldd	r24, Y+4	; 0x04
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	88 2f       	mov	r24, r24
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	b9 01       	movw	r22, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_u8SetPinDirection+0x17a>
    111a:	66 0f       	add	r22, r22
    111c:	77 1f       	adc	r23, r23
    111e:	8a 95       	dec	r24
    1120:	e2 f7       	brpl	.-8      	; 0x111a <DIO_u8SetPinDirection+0x176>
    1122:	cb 01       	movw	r24, r22
    1124:	84 2b       	or	r24, r20
    1126:	8c 93       	st	X, r24
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_u8SetPinDirection+0x18a>
			break;

		default:
			Local_u8Error = 1;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_u8Error;
    112e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1130:	26 96       	adiw	r28, 0x06	; 6
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <DIO_u8SetPinValue>:
 * Input		: Port Number, Pin Number, Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPinValue(u8 Copy_u8PortNB, u8 Copy_u8PinNB, u8 Copy_u8Value)
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	00 d0       	rcall	.+0      	; 0x1148 <DIO_u8SetPinValue+0x6>
    1148:	00 d0       	rcall	.+0      	; 0x114a <DIO_u8SetPinValue+0x8>
    114a:	00 d0       	rcall	.+0      	; 0x114c <DIO_u8SetPinValue+0xa>
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	8a 83       	std	Y+2, r24	; 0x02
    1152:	6b 83       	std	Y+3, r22	; 0x03
    1154:	4c 83       	std	Y+4, r20	; 0x04
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    1156:	19 82       	std	Y+1, r1	; 0x01

	/*Check that the PIN Number is between 0 -> 7 else Return Local Error with ONE*/
	if(Copy_u8PinNB > DIO_PIN_7)
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 30       	cpi	r24, 0x08	; 8
    115c:	10 f0       	brcs	.+4      	; 0x1162 <DIO_u8SetPinValue+0x20>
	{
		Local_u8Error = 1;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Check if the Direction is Input or Output Else return Local Error with one*/
	if((Copy_u8Value != DIO_HIGH) && (Copy_u8Value != DIO_LOW))
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	31 f0       	breq	.+12     	; 0x1174 <DIO_u8SetPinValue+0x32>
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	88 23       	and	r24, r24
    116c:	19 f0       	breq	.+6      	; 0x1174 <DIO_u8SetPinValue+0x32>
	{
		Local_u8Error = 1;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	ac c0       	rjmp	.+344    	; 0x12cc <DIO_u8SetPinValue+0x18a>
	}

	/*Else Check for the PORT number is between 0 -> 3*/
	else
	{
		switch(Copy_u8PortNB)
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	3e 83       	std	Y+6, r19	; 0x06
    117c:	2d 83       	std	Y+5, r18	; 0x05
    117e:	6d 81       	ldd	r22, Y+5	; 0x05
    1180:	7e 81       	ldd	r23, Y+6	; 0x06
    1182:	61 30       	cpi	r22, 0x01	; 1
    1184:	71 05       	cpc	r23, r1
    1186:	d1 f1       	breq	.+116    	; 0x11fc <DIO_u8SetPinValue+0xba>
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	91 05       	cpc	r25, r1
    1190:	34 f4       	brge	.+12     	; 0x119e <DIO_u8SetPinValue+0x5c>
    1192:	2d 81       	ldd	r18, Y+5	; 0x05
    1194:	3e 81       	ldd	r19, Y+6	; 0x06
    1196:	21 15       	cp	r18, r1
    1198:	31 05       	cpc	r19, r1
    119a:	71 f0       	breq	.+28     	; 0x11b8 <DIO_u8SetPinValue+0x76>
    119c:	95 c0       	rjmp	.+298    	; 0x12c8 <DIO_u8SetPinValue+0x186>
    119e:	6d 81       	ldd	r22, Y+5	; 0x05
    11a0:	7e 81       	ldd	r23, Y+6	; 0x06
    11a2:	62 30       	cpi	r22, 0x02	; 2
    11a4:	71 05       	cpc	r23, r1
    11a6:	09 f4       	brne	.+2      	; 0x11aa <DIO_u8SetPinValue+0x68>
    11a8:	4b c0       	rjmp	.+150    	; 0x1240 <DIO_u8SetPinValue+0xfe>
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
    11ac:	9e 81       	ldd	r25, Y+6	; 0x06
    11ae:	83 30       	cpi	r24, 0x03	; 3
    11b0:	91 05       	cpc	r25, r1
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <DIO_u8SetPinValue+0x74>
    11b4:	67 c0       	rjmp	.+206    	; 0x1284 <DIO_u8SetPinValue+0x142>
    11b6:	88 c0       	rjmp	.+272    	; 0x12c8 <DIO_u8SetPinValue+0x186>
		{
		case DIO_PORT_0:
			ASSIGN_BIT(PORTA, Copy_u8PinNB, Copy_u8Value);
    11b8:	ab e3       	ldi	r26, 0x3B	; 59
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	eb e3       	ldi	r30, 0x3B	; 59
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <DIO_u8SetPinValue+0x92>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	2a 95       	dec	r18
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <DIO_u8SetPinValue+0x8e>
    11d8:	80 95       	com	r24
    11da:	48 23       	and	r20, r24
    11dc:	8c 81       	ldd	r24, Y+4	; 0x04
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	88 2f       	mov	r24, r24
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	b9 01       	movw	r22, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_u8SetPinValue+0xae>
    11ec:	66 0f       	add	r22, r22
    11ee:	77 1f       	adc	r23, r23
    11f0:	8a 95       	dec	r24
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_u8SetPinValue+0xaa>
    11f4:	cb 01       	movw	r24, r22
    11f6:	84 2b       	or	r24, r20
    11f8:	8c 93       	st	X, r24
    11fa:	68 c0       	rjmp	.+208    	; 0x12cc <DIO_u8SetPinValue+0x18a>
			break;

		case DIO_PORT_1:
			ASSIGN_BIT(PORTB, Copy_u8PinNB, Copy_u8Value);
    11fc:	a8 e3       	ldi	r26, 0x38	; 56
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e8 e3       	ldi	r30, 0x38	; 56
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_u8SetPinValue+0xd6>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	2a 95       	dec	r18
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_u8SetPinValue+0xd2>
    121c:	80 95       	com	r24
    121e:	48 23       	and	r20, r24
    1220:	8c 81       	ldd	r24, Y+4	; 0x04
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	88 2f       	mov	r24, r24
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	b9 01       	movw	r22, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_u8SetPinValue+0xf2>
    1230:	66 0f       	add	r22, r22
    1232:	77 1f       	adc	r23, r23
    1234:	8a 95       	dec	r24
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_u8SetPinValue+0xee>
    1238:	cb 01       	movw	r24, r22
    123a:	84 2b       	or	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	46 c0       	rjmp	.+140    	; 0x12cc <DIO_u8SetPinValue+0x18a>
			break;

		case DIO_PORT_2:
			ASSIGN_BIT(PORTC, Copy_u8PinNB, Copy_u8Value);
    1240:	a5 e3       	ldi	r26, 0x35	; 53
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e5 e3       	ldi	r30, 0x35	; 53
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 c0       	rjmp	.+4      	; 0x125c <DIO_u8SetPinValue+0x11a>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	2a 95       	dec	r18
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <DIO_u8SetPinValue+0x116>
    1260:	80 95       	com	r24
    1262:	48 23       	and	r20, r24
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	88 2f       	mov	r24, r24
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	b9 01       	movw	r22, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_u8SetPinValue+0x136>
    1274:	66 0f       	add	r22, r22
    1276:	77 1f       	adc	r23, r23
    1278:	8a 95       	dec	r24
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_u8SetPinValue+0x132>
    127c:	cb 01       	movw	r24, r22
    127e:	84 2b       	or	r24, r20
    1280:	8c 93       	st	X, r24
    1282:	24 c0       	rjmp	.+72     	; 0x12cc <DIO_u8SetPinValue+0x18a>
			break;

		case DIO_PORT_3:
			ASSIGN_BIT(PORTD, Copy_u8PinNB, Copy_u8Value);
    1284:	a2 e3       	ldi	r26, 0x32	; 50
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e2 e3       	ldi	r30, 0x32	; 50
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	48 2f       	mov	r20, r24
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <DIO_u8SetPinValue+0x15e>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	2a 95       	dec	r18
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <DIO_u8SetPinValue+0x15a>
    12a4:	80 95       	com	r24
    12a6:	48 23       	and	r20, r24
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	88 2f       	mov	r24, r24
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	b9 01       	movw	r22, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_u8SetPinValue+0x17a>
    12b8:	66 0f       	add	r22, r22
    12ba:	77 1f       	adc	r23, r23
    12bc:	8a 95       	dec	r24
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_u8SetPinValue+0x176>
    12c0:	cb 01       	movw	r24, r22
    12c2:	84 2b       	or	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_u8SetPinValue+0x18a>
			break;

		default:
			Local_u8Error = 1;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_u8Error;
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ce:	26 96       	adiw	r28, 0x06	; 6
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <DIO_u8GetPortValue>:
 * Input		: Port Number, Pointer for a Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8GetPortValue(u8 Copy_u8PortNB, u8 * Copy_u8Value)
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <DIO_u8GetPortValue+0x6>
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <DIO_u8GetPortValue+0x8>
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <DIO_u8GetPortValue+0xa>
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	8a 83       	std	Y+2, r24	; 0x02
    12f0:	7c 83       	std	Y+4, r23	; 0x04
    12f2:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    12f4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Value == NULL_POINTER)
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	19 f4       	brne	.+6      	; 0x1304 <DIO_u8GetPortValue+0x24>
	{
		Local_u8Error = 1;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	3d c0       	rjmp	.+122    	; 0x137e <DIO_u8GetPortValue+0x9e>
	}

	else
	{
		/*Switch for the PORT Number if it 0 -> 3 it is OK else return Error*/
		switch(Copy_u8PortNB)
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	3e 83       	std	Y+6, r19	; 0x06
    130c:	2d 83       	std	Y+5, r18	; 0x05
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	91 05       	cpc	r25, r1
    1316:	e1 f0       	breq	.+56     	; 0x1350 <DIO_u8GetPortValue+0x70>
    1318:	2d 81       	ldd	r18, Y+5	; 0x05
    131a:	3e 81       	ldd	r19, Y+6	; 0x06
    131c:	22 30       	cpi	r18, 0x02	; 2
    131e:	31 05       	cpc	r19, r1
    1320:	2c f4       	brge	.+10     	; 0x132c <DIO_u8GetPortValue+0x4c>
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	9e 81       	ldd	r25, Y+6	; 0x06
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	61 f0       	breq	.+24     	; 0x1342 <DIO_u8GetPortValue+0x62>
    132a:	27 c0       	rjmp	.+78     	; 0x137a <DIO_u8GetPortValue+0x9a>
    132c:	2d 81       	ldd	r18, Y+5	; 0x05
    132e:	3e 81       	ldd	r19, Y+6	; 0x06
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	31 05       	cpc	r19, r1
    1334:	a1 f0       	breq	.+40     	; 0x135e <DIO_u8GetPortValue+0x7e>
    1336:	8d 81       	ldd	r24, Y+5	; 0x05
    1338:	9e 81       	ldd	r25, Y+6	; 0x06
    133a:	83 30       	cpi	r24, 0x03	; 3
    133c:	91 05       	cpc	r25, r1
    133e:	b1 f0       	breq	.+44     	; 0x136c <DIO_u8GetPortValue+0x8c>
    1340:	1c c0       	rjmp	.+56     	; 0x137a <DIO_u8GetPortValue+0x9a>
		{
		case DIO_PORT_0:
			*Copy_u8Value = PINA;
    1342:	e9 e3       	ldi	r30, 0x39	; 57
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	eb 81       	ldd	r30, Y+3	; 0x03
    134a:	fc 81       	ldd	r31, Y+4	; 0x04
    134c:	80 83       	st	Z, r24
    134e:	17 c0       	rjmp	.+46     	; 0x137e <DIO_u8GetPortValue+0x9e>
			break;

		case DIO_PORT_1:
			*Copy_u8Value = PINB;
    1350:	e6 e3       	ldi	r30, 0x36	; 54
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	eb 81       	ldd	r30, Y+3	; 0x03
    1358:	fc 81       	ldd	r31, Y+4	; 0x04
    135a:	80 83       	st	Z, r24
    135c:	10 c0       	rjmp	.+32     	; 0x137e <DIO_u8GetPortValue+0x9e>
			break;

		case DIO_PORT_2:
			*Copy_u8Value = PINC;
    135e:	e3 e3       	ldi	r30, 0x33	; 51
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	eb 81       	ldd	r30, Y+3	; 0x03
    1366:	fc 81       	ldd	r31, Y+4	; 0x04
    1368:	80 83       	st	Z, r24
    136a:	09 c0       	rjmp	.+18     	; 0x137e <DIO_u8GetPortValue+0x9e>
			break;

		case DIO_PORT_3:
			*Copy_u8Value = PIND;
    136c:	e0 e3       	ldi	r30, 0x30	; 48
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	eb 81       	ldd	r30, Y+3	; 0x03
    1374:	fc 81       	ldd	r31, Y+4	; 0x04
    1376:	80 83       	st	Z, r24
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_u8GetPortValue+0x9e>
			break;

		default:
			Local_u8Error = 1;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

	}
	return Local_u8Error;
    137e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1380:	26 96       	adiw	r28, 0x06	; 6
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <DIO_u8GetPinValue>:
 * Input		: Port Number, Pin Number, Pointer for a Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8GetPinValue(u8 Copy_u8PortNB, u8 Copy_u8PinNB, u8 * Copy_u8Value)
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	27 97       	sbiw	r28, 0x07	; 7
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	8a 83       	std	Y+2, r24	; 0x02
    13a8:	6b 83       	std	Y+3, r22	; 0x03
    13aa:	5d 83       	std	Y+5, r21	; 0x05
    13ac:	4c 83       	std	Y+4, r20	; 0x04
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    13ae:	19 82       	std	Y+1, r1	; 0x01

	/*Check that the PIN Number is between 0 -> 7 else Return Local Error with ONE*/
	if(Copy_u8Value == NULL_POINTER)
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	9d 81       	ldd	r25, Y+5	; 0x05
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	11 f4       	brne	.+4      	; 0x13bc <DIO_u8GetPinValue+0x2a>
	{
		Local_u8Error = 1;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	89 83       	std	Y+1, r24	; 0x01
	}
	if(Copy_u8PinNB > DIO_PIN_7)
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	88 30       	cpi	r24, 0x08	; 8
    13c0:	18 f0       	brcs	.+6      	; 0x13c8 <DIO_u8GetPinValue+0x36>
	{
		Local_u8Error = 1;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	73 c0       	rjmp	.+230    	; 0x14ae <DIO_u8GetPinValue+0x11c>
	}

	else
	{
		switch(Copy_u8PortNB)
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	3f 83       	std	Y+7, r19	; 0x07
    13d0:	2e 83       	std	Y+6, r18	; 0x06
    13d2:	4e 81       	ldd	r20, Y+6	; 0x06
    13d4:	5f 81       	ldd	r21, Y+7	; 0x07
    13d6:	41 30       	cpi	r20, 0x01	; 1
    13d8:	51 05       	cpc	r21, r1
    13da:	59 f1       	breq	.+86     	; 0x1432 <DIO_u8GetPinValue+0xa0>
    13dc:	8e 81       	ldd	r24, Y+6	; 0x06
    13de:	9f 81       	ldd	r25, Y+7	; 0x07
    13e0:	82 30       	cpi	r24, 0x02	; 2
    13e2:	91 05       	cpc	r25, r1
    13e4:	34 f4       	brge	.+12     	; 0x13f2 <DIO_u8GetPinValue+0x60>
    13e6:	2e 81       	ldd	r18, Y+6	; 0x06
    13e8:	3f 81       	ldd	r19, Y+7	; 0x07
    13ea:	21 15       	cp	r18, r1
    13ec:	31 05       	cpc	r19, r1
    13ee:	69 f0       	breq	.+26     	; 0x140a <DIO_u8GetPinValue+0x78>
    13f0:	5c c0       	rjmp	.+184    	; 0x14aa <DIO_u8GetPinValue+0x118>
    13f2:	4e 81       	ldd	r20, Y+6	; 0x06
    13f4:	5f 81       	ldd	r21, Y+7	; 0x07
    13f6:	42 30       	cpi	r20, 0x02	; 2
    13f8:	51 05       	cpc	r21, r1
    13fa:	79 f1       	breq	.+94     	; 0x145a <DIO_u8GetPinValue+0xc8>
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	83 30       	cpi	r24, 0x03	; 3
    1402:	91 05       	cpc	r25, r1
    1404:	09 f4       	brne	.+2      	; 0x1408 <DIO_u8GetPinValue+0x76>
    1406:	3d c0       	rjmp	.+122    	; 0x1482 <DIO_u8GetPinValue+0xf0>
    1408:	50 c0       	rjmp	.+160    	; 0x14aa <DIO_u8GetPinValue+0x118>
		{
		case DIO_PORT_0:
			*Copy_u8Value = GET_BIT(PINA, Copy_u8PinNB);
    140a:	e9 e3       	ldi	r30, 0x39	; 57
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	88 2f       	mov	r24, r24
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	a9 01       	movw	r20, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_u8GetPinValue+0x90>
    141e:	55 95       	asr	r21
    1420:	47 95       	ror	r20
    1422:	8a 95       	dec	r24
    1424:	e2 f7       	brpl	.-8      	; 0x141e <DIO_u8GetPinValue+0x8c>
    1426:	ca 01       	movw	r24, r20
    1428:	81 70       	andi	r24, 0x01	; 1
    142a:	ec 81       	ldd	r30, Y+4	; 0x04
    142c:	fd 81       	ldd	r31, Y+5	; 0x05
    142e:	80 83       	st	Z, r24
    1430:	3e c0       	rjmp	.+124    	; 0x14ae <DIO_u8GetPinValue+0x11c>
			break;

		case DIO_PORT_1:
			*Copy_u8Value = GET_BIT(PINB, Copy_u8PinNB);
    1432:	e6 e3       	ldi	r30, 0x36	; 54
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	a9 01       	movw	r20, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <DIO_u8GetPinValue+0xb8>
    1446:	55 95       	asr	r21
    1448:	47 95       	ror	r20
    144a:	8a 95       	dec	r24
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <DIO_u8GetPinValue+0xb4>
    144e:	ca 01       	movw	r24, r20
    1450:	81 70       	andi	r24, 0x01	; 1
    1452:	ec 81       	ldd	r30, Y+4	; 0x04
    1454:	fd 81       	ldd	r31, Y+5	; 0x05
    1456:	80 83       	st	Z, r24
    1458:	2a c0       	rjmp	.+84     	; 0x14ae <DIO_u8GetPinValue+0x11c>
			break;

		case DIO_PORT_2:
			*Copy_u8Value = GET_BIT(PINC, Copy_u8PinNB);
    145a:	e3 e3       	ldi	r30, 0x33	; 51
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	88 2f       	mov	r24, r24
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	a9 01       	movw	r20, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <DIO_u8GetPinValue+0xe0>
    146e:	55 95       	asr	r21
    1470:	47 95       	ror	r20
    1472:	8a 95       	dec	r24
    1474:	e2 f7       	brpl	.-8      	; 0x146e <DIO_u8GetPinValue+0xdc>
    1476:	ca 01       	movw	r24, r20
    1478:	81 70       	andi	r24, 0x01	; 1
    147a:	ec 81       	ldd	r30, Y+4	; 0x04
    147c:	fd 81       	ldd	r31, Y+5	; 0x05
    147e:	80 83       	st	Z, r24
    1480:	16 c0       	rjmp	.+44     	; 0x14ae <DIO_u8GetPinValue+0x11c>
			break;

		case DIO_PORT_3:
			*Copy_u8Value = GET_BIT(PIND, Copy_u8PinNB);
    1482:	e0 e3       	ldi	r30, 0x30	; 48
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	88 2f       	mov	r24, r24
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	a9 01       	movw	r20, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_u8GetPinValue+0x108>
    1496:	55 95       	asr	r21
    1498:	47 95       	ror	r20
    149a:	8a 95       	dec	r24
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <DIO_u8GetPinValue+0x104>
    149e:	ca 01       	movw	r24, r20
    14a0:	81 70       	andi	r24, 0x01	; 1
    14a2:	ec 81       	ldd	r30, Y+4	; 0x04
    14a4:	fd 81       	ldd	r31, Y+5	; 0x05
    14a6:	80 83       	st	Z, r24
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <DIO_u8GetPinValue+0x11c>
			break;

		default:
			Local_u8Error = 1;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return Local_u8Error;
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b0:	27 96       	adiw	r28, 0x07	; 7
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <DIO_u8TogglePinValue>:
 * Input		: Port Number, Pin Number
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8TogglePinValue(u8 Copy_u8PortNB, u8 Copy_u8PinNB)
{
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <DIO_u8TogglePinValue+0x6>
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <DIO_u8TogglePinValue+0x8>
    14ca:	0f 92       	push	r0
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	8a 83       	std	Y+2, r24	; 0x02
    14d2:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    14d4:	19 82       	std	Y+1, r1	; 0x01

	/*Check that the PIN Number is between 0 -> 7 else Return Local Error with ONE*/
	if(Copy_u8PinNB > DIO_PIN_7 || Copy_u8PortNB > 3)
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	88 30       	cpi	r24, 0x08	; 8
    14da:	18 f4       	brcc	.+6      	; 0x14e2 <DIO_u8TogglePinValue+0x20>
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	84 30       	cpi	r24, 0x04	; 4
    14e0:	18 f0       	brcs	.+6      	; 0x14e8 <DIO_u8TogglePinValue+0x26>
	{
		Local_u8Error = 1;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	71 c0       	rjmp	.+226    	; 0x15ca <DIO_u8TogglePinValue+0x108>
	}

	/*Else Check for the PORT number is between 0 -> 3*/
	else
	{
		switch(Copy_u8PortNB)
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	3d 83       	std	Y+5, r19	; 0x05
    14f0:	2c 83       	std	Y+4, r18	; 0x04
    14f2:	8c 81       	ldd	r24, Y+4	; 0x04
    14f4:	9d 81       	ldd	r25, Y+5	; 0x05
    14f6:	81 30       	cpi	r24, 0x01	; 1
    14f8:	91 05       	cpc	r25, r1
    14fa:	49 f1       	breq	.+82     	; 0x154e <DIO_u8TogglePinValue+0x8c>
    14fc:	2c 81       	ldd	r18, Y+4	; 0x04
    14fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1500:	22 30       	cpi	r18, 0x02	; 2
    1502:	31 05       	cpc	r19, r1
    1504:	2c f4       	brge	.+10     	; 0x1510 <DIO_u8TogglePinValue+0x4e>
    1506:	8c 81       	ldd	r24, Y+4	; 0x04
    1508:	9d 81       	ldd	r25, Y+5	; 0x05
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	61 f0       	breq	.+24     	; 0x1526 <DIO_u8TogglePinValue+0x64>
    150e:	5b c0       	rjmp	.+182    	; 0x15c6 <DIO_u8TogglePinValue+0x104>
    1510:	2c 81       	ldd	r18, Y+4	; 0x04
    1512:	3d 81       	ldd	r19, Y+5	; 0x05
    1514:	22 30       	cpi	r18, 0x02	; 2
    1516:	31 05       	cpc	r19, r1
    1518:	71 f1       	breq	.+92     	; 0x1576 <DIO_u8TogglePinValue+0xb4>
    151a:	8c 81       	ldd	r24, Y+4	; 0x04
    151c:	9d 81       	ldd	r25, Y+5	; 0x05
    151e:	83 30       	cpi	r24, 0x03	; 3
    1520:	91 05       	cpc	r25, r1
    1522:	e9 f1       	breq	.+122    	; 0x159e <DIO_u8TogglePinValue+0xdc>
    1524:	50 c0       	rjmp	.+160    	; 0x15c6 <DIO_u8TogglePinValue+0x104>
		{
		case DIO_PORT_0:
			TOGGLE_BIT(PORTA, Copy_u8PinNB);
    1526:	ab e3       	ldi	r26, 0x3B	; 59
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	eb e3       	ldi	r30, 0x3B	; 59
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	48 2f       	mov	r20, r24
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 2e       	mov	r0, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <DIO_u8TogglePinValue+0x82>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	0a 94       	dec	r0
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <DIO_u8TogglePinValue+0x7e>
    1548:	84 27       	eor	r24, r20
    154a:	8c 93       	st	X, r24
    154c:	3e c0       	rjmp	.+124    	; 0x15ca <DIO_u8TogglePinValue+0x108>
			break;

		case DIO_PORT_1:
			TOGGLE_BIT(PORTB, Copy_u8PinNB);
    154e:	a8 e3       	ldi	r26, 0x38	; 56
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e8 e3       	ldi	r30, 0x38	; 56
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 2e       	mov	r0, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <DIO_u8TogglePinValue+0xaa>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <DIO_u8TogglePinValue+0xa6>
    1570:	84 27       	eor	r24, r20
    1572:	8c 93       	st	X, r24
    1574:	2a c0       	rjmp	.+84     	; 0x15ca <DIO_u8TogglePinValue+0x108>
			break;

		case DIO_PORT_2:
			TOGGLE_BIT(PORTC, Copy_u8PinNB);
    1576:	a5 e3       	ldi	r26, 0x35	; 53
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e5 e3       	ldi	r30, 0x35	; 53
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	48 2f       	mov	r20, r24
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	02 2e       	mov	r0, r18
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <DIO_u8TogglePinValue+0xd2>
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	0a 94       	dec	r0
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <DIO_u8TogglePinValue+0xce>
    1598:	84 27       	eor	r24, r20
    159a:	8c 93       	st	X, r24
    159c:	16 c0       	rjmp	.+44     	; 0x15ca <DIO_u8TogglePinValue+0x108>
			break;

		case DIO_PORT_3:
			TOGGLE_BIT(PORTD, Copy_u8PinNB);
    159e:	a2 e3       	ldi	r26, 0x32	; 50
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e2 e3       	ldi	r30, 0x32	; 50
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	48 2f       	mov	r20, r24
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	02 2e       	mov	r0, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <DIO_u8TogglePinValue+0xfa>
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	0a 94       	dec	r0
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <DIO_u8TogglePinValue+0xf6>
    15c0:	84 27       	eor	r24, r20
    15c2:	8c 93       	st	X, r24
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <DIO_u8TogglePinValue+0x108>
			break;

		default:
			Local_u8Error = 1;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_u8Error;
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <KPD_u8Initialization>:
 * Input		: Non
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 KPD_u8Initialization()
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	0f 92       	push	r0
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
	/*Local Variable*/
	u8 Local_u8Error = 0;
    15e6:	19 82       	std	Y+1, r1	; 0x01

	/*Check for the KPD Port is OK*/
#if KPD_PORT < 4
	/*KeyPad Initialization*/
	DIO_u8SetPortDirection(KPD_PORT, 0x0f);
    15e8:	83 e0       	ldi	r24, 0x03	; 3
    15ea:	6f e0       	ldi	r22, 0x0F	; 15
    15ec:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_u8SetPortDirection>

	/*Pull Up Activation for KeyPad*/
	DIO_u8SetPortValue(KPD_PORT, 0xff);
    15f0:	83 e0       	ldi	r24, 0x03	; 3
    15f2:	6f ef       	ldi	r22, 0xFF	; 255
    15f4:	0e 94 8a 07 	call	0xf14	; 0xf14 <DIO_u8SetPortValue>

#elif
	Local_u8Error = 1;

#endif
	return Local_u8Error;
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <KPD_u8GetPressedKey>:
 * Input		: Pointer for the Pressed key
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 KPD_u8GetPressedKey(u8 *Copy_u8KeyNB)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <KPD_u8GetPressedKey+0x6>
    1608:	00 d0       	rcall	.+0      	; 0x160a <KPD_u8GetPressedKey+0x8>
    160a:	00 d0       	rcall	.+0      	; 0x160c <KPD_u8GetPressedKey+0xa>
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	9e 83       	std	Y+6, r25	; 0x06
    1612:	8d 83       	std	Y+5, r24	; 0x05
	/*Local Variables*/
	u8 Local_u8Error = 0;
    1614:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8ColID = 0, Local_u8RowID = 0, Local_u8PinState = 0;
    1616:	1a 82       	std	Y+2, r1	; 0x02
    1618:	19 82       	std	Y+1, r1	; 0x01
    161a:	1c 82       	std	Y+4, r1	; 0x04

	/*Looping for the Column and inside each column loop on Rows*/
	for(Local_u8ColID = 0; Local_u8ColID < COL_NB; Local_u8ColID++)
    161c:	1a 82       	std	Y+2, r1	; 0x02
    161e:	48 c0       	rjmp	.+144    	; 0x16b0 <KPD_u8GetPressedKey+0xae>
	{
		/*Before set the Column as LOW make it as GND*/
		DIO_u8SetPinValue(KPD_PORT, Local_u8ColID, DIO_LOW);
    1620:	83 e0       	ldi	r24, 0x03	; 3
    1622:	6a 81       	ldd	r22, Y+2	; 0x02
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_u8SetPinValue>

		/*Loop for the Rows Check the Value from the Button if Pressed*/
		for(Local_u8RowID = 0; Local_u8RowID < ROW_NB; Local_u8RowID++)
    162a:	19 82       	std	Y+1, r1	; 0x01
    162c:	36 c0       	rjmp	.+108    	; 0x169a <KPD_u8GetPressedKey+0x98>
		{
			/*We Add Four for the Row because the Rows Pins starts from Pin 4 -> 7*/
			DIO_u8GetPinValue(KPD_PORT, (Local_u8RowID + ROW_START_AFTER), &Local_u8PinState);
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	98 2f       	mov	r25, r24
    1632:	9c 5f       	subi	r25, 0xFC	; 252
    1634:	9e 01       	movw	r18, r28
    1636:	2c 5f       	subi	r18, 0xFC	; 252
    1638:	3f 4f       	sbci	r19, 0xFF	; 255
    163a:	83 e0       	ldi	r24, 0x03	; 3
    163c:	69 2f       	mov	r22, r25
    163e:	a9 01       	movw	r20, r18
    1640:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8GetPinValue>

			/*if the Value equals LOW that means the button is pressed*/
			if(Local_u8PinState == DIO_LOW)
    1644:	8c 81       	ldd	r24, Y+4	; 0x04
    1646:	88 23       	and	r24, r24
    1648:	29 f5       	brne	.+74     	; 0x1694 <KPD_u8GetPressedKey+0x92>
			{
				/*Send the Value through the pointer*/
				*Copy_u8KeyNB = Local_u8KeyGrid[Local_u8RowID][Local_u8ColID];
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	48 2f       	mov	r20, r24
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	ca 01       	movw	r24, r20
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	82 0f       	add	r24, r18
    1662:	93 1f       	adc	r25, r19
    1664:	fc 01       	movw	r30, r24
    1666:	e8 59       	subi	r30, 0x98	; 152
    1668:	fe 4f       	sbci	r31, 0xFE	; 254
    166a:	80 81       	ld	r24, Z
    166c:	ed 81       	ldd	r30, Y+5	; 0x05
    166e:	fe 81       	ldd	r31, Y+6	; 0x06
    1670:	80 83       	st	Z, r24
				Local_u8Error = 1;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	8b 83       	std	Y+3, r24	; 0x03
    1676:	0b c0       	rjmp	.+22     	; 0x168e <KPD_u8GetPressedKey+0x8c>

				/*Blocking state do not do anything while the button is pressed*/
				while(Local_u8PinState != DIO_HIGH)
				{
					DIO_u8GetPinValue(KPD_PORT, (Local_u8RowID + ROW_START_AFTER), &Local_u8PinState);
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	98 2f       	mov	r25, r24
    167c:	9c 5f       	subi	r25, 0xFC	; 252
    167e:	9e 01       	movw	r18, r28
    1680:	2c 5f       	subi	r18, 0xFC	; 252
    1682:	3f 4f       	sbci	r19, 0xFF	; 255
    1684:	83 e0       	ldi	r24, 0x03	; 3
    1686:	69 2f       	mov	r22, r25
    1688:	a9 01       	movw	r20, r18
    168a:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8GetPinValue>
				/*Send the Value through the pointer*/
				*Copy_u8KeyNB = Local_u8KeyGrid[Local_u8RowID][Local_u8ColID];
				Local_u8Error = 1;

				/*Blocking state do not do anything while the button is pressed*/
				while(Local_u8PinState != DIO_HIGH)
    168e:	8c 81       	ldd	r24, Y+4	; 0x04
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	91 f7       	brne	.-28     	; 0x1678 <KPD_u8GetPressedKey+0x76>
	{
		/*Before set the Column as LOW make it as GND*/
		DIO_u8SetPinValue(KPD_PORT, Local_u8ColID, DIO_LOW);

		/*Loop for the Rows Check the Value from the Button if Pressed*/
		for(Local_u8RowID = 0; Local_u8RowID < ROW_NB; Local_u8RowID++)
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	8f 5f       	subi	r24, 0xFF	; 255
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	84 30       	cpi	r24, 0x04	; 4
    169e:	38 f2       	brcs	.-114    	; 0x162e <KPD_u8GetPressedKey+0x2c>
					DIO_u8GetPinValue(KPD_PORT, (Local_u8RowID + ROW_START_AFTER), &Local_u8PinState);
				}
			}
		}
		/*de-activate the current column*/
		DIO_u8SetPinValue(KPD_PORT, Local_u8ColID, DIO_HIGH);
    16a0:	83 e0       	ldi	r24, 0x03	; 3
    16a2:	6a 81       	ldd	r22, Y+2	; 0x02
    16a4:	41 e0       	ldi	r20, 0x01	; 1
    16a6:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_u8SetPinValue>
	/*Local Variables*/
	u8 Local_u8Error = 0;
	u8 Local_u8ColID = 0, Local_u8RowID = 0, Local_u8PinState = 0;

	/*Looping for the Column and inside each column loop on Rows*/
	for(Local_u8ColID = 0; Local_u8ColID < COL_NB; Local_u8ColID++)
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	8f 5f       	subi	r24, 0xFF	; 255
    16ae:	8a 83       	std	Y+2, r24	; 0x02
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	84 30       	cpi	r24, 0x04	; 4
    16b4:	08 f4       	brcc	.+2      	; 0x16b8 <KPD_u8GetPressedKey+0xb6>
    16b6:	b4 cf       	rjmp	.-152    	; 0x1620 <KPD_u8GetPressedKey+0x1e>
			}
		}
		/*de-activate the current column*/
		DIO_u8SetPinValue(KPD_PORT, Local_u8ColID, DIO_HIGH);
	}
	return Local_u8Error;
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    16ba:	26 96       	adiw	r28, 0x06	; 6
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <LCD_voidWriteCommand>:
/* Description	: Send a Command to LCD through the Data PORT
 * Input		: Command
 * Output		: Non
 */
void LCD_voidWriteCommand(u8 Copy_u8Command)
{
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	2f 97       	sbiw	r28, 0x0f	; 15
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	de bf       	out	0x3e, r29	; 62
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	8f 87       	std	Y+15, r24	; 0x0f
	/*Make Sure that the Enable PIN is LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    16e2:	82 e0       	ldi	r24, 0x02	; 2
    16e4:	62 e0       	ldi	r22, 0x02	; 2
    16e6:	40 e0       	ldi	r20, 0x00	; 0
    16e8:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_u8SetPinValue>

	/*Make Sure that the Register Select PIN is LOW as (RS -> LOW for Command) (RS -> HIGH for Data)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_LOW);
    16ec:	82 e0       	ldi	r24, 0x02	; 2
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_u8SetPinValue>

	/*Make Sure that the Read Write PIN is LOW as (RW -> LOW for Write) (RW -> HIGH for Read)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_LOW);
    16f6:	82 e0       	ldi	r24, 0x02	; 2
    16f8:	61 e0       	ldi	r22, 0x01	; 1
    16fa:	40 e0       	ldi	r20, 0x00	; 0
    16fc:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_u8SetPinValue>

	/*Send the Command on Data Pins D0 -> D7*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Command);
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	6f 85       	ldd	r22, Y+15	; 0x0f
    1704:	0e 94 8a 07 	call	0xf14	; 0xf14 <DIO_u8SetPortValue>

	/*Enable Sequence*/
	/*Make the Enable Pin HIGH*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_HIGH);
    1708:	82 e0       	ldi	r24, 0x02	; 2
    170a:	62 e0       	ldi	r22, 0x02	; 2
    170c:	41 e0       	ldi	r20, 0x01	; 1
    170e:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_u8SetPinValue>
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	a0 e0       	ldi	r26, 0x00	; 0
    1718:	b0 e4       	ldi	r27, 0x40	; 64
    171a:	8b 87       	std	Y+11, r24	; 0x0b
    171c:	9c 87       	std	Y+12, r25	; 0x0c
    171e:	ad 87       	std	Y+13, r26	; 0x0d
    1720:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1722:	6b 85       	ldd	r22, Y+11	; 0x0b
    1724:	7c 85       	ldd	r23, Y+12	; 0x0c
    1726:	8d 85       	ldd	r24, Y+13	; 0x0d
    1728:	9e 85       	ldd	r25, Y+14	; 0x0e
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	4a ef       	ldi	r20, 0xFA	; 250
    1730:	54 e4       	ldi	r21, 0x44	; 68
    1732:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	8f 83       	std	Y+7, r24	; 0x07
    173c:	98 87       	std	Y+8, r25	; 0x08
    173e:	a9 87       	std	Y+9, r26	; 0x09
    1740:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1742:	6f 81       	ldd	r22, Y+7	; 0x07
    1744:	78 85       	ldd	r23, Y+8	; 0x08
    1746:	89 85       	ldd	r24, Y+9	; 0x09
    1748:	9a 85       	ldd	r25, Y+10	; 0x0a
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e8       	ldi	r20, 0x80	; 128
    1750:	5f e3       	ldi	r21, 0x3F	; 63
    1752:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1756:	88 23       	and	r24, r24
    1758:	2c f4       	brge	.+10     	; 0x1764 <LCD_voidWriteCommand+0x98>
		__ticks = 1;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
    1762:	3f c0       	rjmp	.+126    	; 0x17e2 <LCD_voidWriteCommand+0x116>
	else if (__tmp > 65535)
    1764:	6f 81       	ldd	r22, Y+7	; 0x07
    1766:	78 85       	ldd	r23, Y+8	; 0x08
    1768:	89 85       	ldd	r24, Y+9	; 0x09
    176a:	9a 85       	ldd	r25, Y+10	; 0x0a
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	3f ef       	ldi	r19, 0xFF	; 255
    1770:	4f e7       	ldi	r20, 0x7F	; 127
    1772:	57 e4       	ldi	r21, 0x47	; 71
    1774:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1778:	18 16       	cp	r1, r24
    177a:	4c f5       	brge	.+82     	; 0x17ce <LCD_voidWriteCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177c:	6b 85       	ldd	r22, Y+11	; 0x0b
    177e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1780:	8d 85       	ldd	r24, Y+13	; 0x0d
    1782:	9e 85       	ldd	r25, Y+14	; 0x0e
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	40 e2       	ldi	r20, 0x20	; 32
    178a:	51 e4       	ldi	r21, 0x41	; 65
    178c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	bc 01       	movw	r22, r24
    1796:	cd 01       	movw	r24, r26
    1798:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	9e 83       	std	Y+6, r25	; 0x06
    17a2:	8d 83       	std	Y+5, r24	; 0x05
    17a4:	0f c0       	rjmp	.+30     	; 0x17c4 <LCD_voidWriteCommand+0xf8>
    17a6:	88 ec       	ldi	r24, 0xC8	; 200
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	9c 83       	std	Y+4, r25	; 0x04
    17ac:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <LCD_voidWriteCommand+0xe6>
    17b6:	9c 83       	std	Y+4, r25	; 0x04
    17b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ba:	8d 81       	ldd	r24, Y+5	; 0x05
    17bc:	9e 81       	ldd	r25, Y+6	; 0x06
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	9e 83       	std	Y+6, r25	; 0x06
    17c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c4:	8d 81       	ldd	r24, Y+5	; 0x05
    17c6:	9e 81       	ldd	r25, Y+6	; 0x06
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	69 f7       	brne	.-38     	; 0x17a6 <LCD_voidWriteCommand+0xda>
    17cc:	14 c0       	rjmp	.+40     	; 0x17f6 <LCD_voidWriteCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ce:	6f 81       	ldd	r22, Y+7	; 0x07
    17d0:	78 85       	ldd	r23, Y+8	; 0x08
    17d2:	89 85       	ldd	r24, Y+9	; 0x09
    17d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	9e 83       	std	Y+6, r25	; 0x06
    17e0:	8d 83       	std	Y+5, r24	; 0x05
    17e2:	8d 81       	ldd	r24, Y+5	; 0x05
    17e4:	9e 81       	ldd	r25, Y+6	; 0x06
    17e6:	9a 83       	std	Y+2, r25	; 0x02
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <LCD_voidWriteCommand+0x122>
    17f2:	9a 83       	std	Y+2, r25	; 0x02
    17f4:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for 2 msec.*/
	_delay_ms(2);

	/*Re-Make Enable Pin as LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    17f6:	82 e0       	ldi	r24, 0x02	; 2
    17f8:	62 e0       	ldi	r22, 0x02	; 2
    17fa:	40 e0       	ldi	r20, 0x00	; 0
    17fc:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_u8SetPinValue>
}
    1800:	2f 96       	adiw	r28, 0x0f	; 15
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <LCD_voidWriteData>:
/* Description	: Send a Data to LCD through the Data PORT
 * Input		: Data
 * Output		: Non
 */
void LCD_voidWriteData(u8 Copy_u8Data)
{
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	2f 97       	sbiw	r28, 0x0f	; 15
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	8f 87       	std	Y+15, r24	; 0x0f
	/*Make Sure that the Enable PIN is LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    1828:	82 e0       	ldi	r24, 0x02	; 2
    182a:	62 e0       	ldi	r22, 0x02	; 2
    182c:	40 e0       	ldi	r20, 0x00	; 0
    182e:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_u8SetPinValue>

	/*Make Sure that the Register Select PIN is LOW as (RS -> LOW for Command) (RS -> HIGH for Data)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_HIGH);
    1832:	82 e0       	ldi	r24, 0x02	; 2
    1834:	60 e0       	ldi	r22, 0x00	; 0
    1836:	41 e0       	ldi	r20, 0x01	; 1
    1838:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_u8SetPinValue>

	/*Make Sure that the Read Write PIN is LOW as (RW -> LOW for Write) (RW -> HIGH for Read)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_LOW);
    183c:	82 e0       	ldi	r24, 0x02	; 2
    183e:	61 e0       	ldi	r22, 0x01	; 1
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_u8SetPinValue>

	/*Send the Command on Data Pins D0 -> D7*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Data);
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	6f 85       	ldd	r22, Y+15	; 0x0f
    184a:	0e 94 8a 07 	call	0xf14	; 0xf14 <DIO_u8SetPortValue>

	/*Enable Sequence*/
	/*Make the Enable Pin HIGH*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_HIGH);
    184e:	82 e0       	ldi	r24, 0x02	; 2
    1850:	62 e0       	ldi	r22, 0x02	; 2
    1852:	41 e0       	ldi	r20, 0x01	; 1
    1854:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_u8SetPinValue>
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	a0 e0       	ldi	r26, 0x00	; 0
    185e:	b0 e4       	ldi	r27, 0x40	; 64
    1860:	8b 87       	std	Y+11, r24	; 0x0b
    1862:	9c 87       	std	Y+12, r25	; 0x0c
    1864:	ad 87       	std	Y+13, r26	; 0x0d
    1866:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1868:	6b 85       	ldd	r22, Y+11	; 0x0b
    186a:	7c 85       	ldd	r23, Y+12	; 0x0c
    186c:	8d 85       	ldd	r24, Y+13	; 0x0d
    186e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	4a ef       	ldi	r20, 0xFA	; 250
    1876:	54 e4       	ldi	r21, 0x44	; 68
    1878:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	8f 83       	std	Y+7, r24	; 0x07
    1882:	98 87       	std	Y+8, r25	; 0x08
    1884:	a9 87       	std	Y+9, r26	; 0x09
    1886:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1888:	6f 81       	ldd	r22, Y+7	; 0x07
    188a:	78 85       	ldd	r23, Y+8	; 0x08
    188c:	89 85       	ldd	r24, Y+9	; 0x09
    188e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e8       	ldi	r20, 0x80	; 128
    1896:	5f e3       	ldi	r21, 0x3F	; 63
    1898:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    189c:	88 23       	and	r24, r24
    189e:	2c f4       	brge	.+10     	; 0x18aa <LCD_voidWriteData+0x98>
		__ticks = 1;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	9e 83       	std	Y+6, r25	; 0x06
    18a6:	8d 83       	std	Y+5, r24	; 0x05
    18a8:	3f c0       	rjmp	.+126    	; 0x1928 <LCD_voidWriteData+0x116>
	else if (__tmp > 65535)
    18aa:	6f 81       	ldd	r22, Y+7	; 0x07
    18ac:	78 85       	ldd	r23, Y+8	; 0x08
    18ae:	89 85       	ldd	r24, Y+9	; 0x09
    18b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	3f ef       	ldi	r19, 0xFF	; 255
    18b6:	4f e7       	ldi	r20, 0x7F	; 127
    18b8:	57 e4       	ldi	r21, 0x47	; 71
    18ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18be:	18 16       	cp	r1, r24
    18c0:	4c f5       	brge	.+82     	; 0x1914 <LCD_voidWriteData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e2       	ldi	r20, 0x20	; 32
    18d0:	51 e4       	ldi	r21, 0x41	; 65
    18d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	bc 01       	movw	r22, r24
    18dc:	cd 01       	movw	r24, r26
    18de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	9e 83       	std	Y+6, r25	; 0x06
    18e8:	8d 83       	std	Y+5, r24	; 0x05
    18ea:	0f c0       	rjmp	.+30     	; 0x190a <LCD_voidWriteData+0xf8>
    18ec:	88 ec       	ldi	r24, 0xC8	; 200
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	9c 83       	std	Y+4, r25	; 0x04
    18f2:	8b 83       	std	Y+3, r24	; 0x03
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	f1 f7       	brne	.-4      	; 0x18f8 <LCD_voidWriteData+0xe6>
    18fc:	9c 83       	std	Y+4, r25	; 0x04
    18fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1900:	8d 81       	ldd	r24, Y+5	; 0x05
    1902:	9e 81       	ldd	r25, Y+6	; 0x06
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	9e 83       	std	Y+6, r25	; 0x06
    1908:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190a:	8d 81       	ldd	r24, Y+5	; 0x05
    190c:	9e 81       	ldd	r25, Y+6	; 0x06
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	69 f7       	brne	.-38     	; 0x18ec <LCD_voidWriteData+0xda>
    1912:	14 c0       	rjmp	.+40     	; 0x193c <LCD_voidWriteData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1914:	6f 81       	ldd	r22, Y+7	; 0x07
    1916:	78 85       	ldd	r23, Y+8	; 0x08
    1918:	89 85       	ldd	r24, Y+9	; 0x09
    191a:	9a 85       	ldd	r25, Y+10	; 0x0a
    191c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	9e 83       	std	Y+6, r25	; 0x06
    1926:	8d 83       	std	Y+5, r24	; 0x05
    1928:	8d 81       	ldd	r24, Y+5	; 0x05
    192a:	9e 81       	ldd	r25, Y+6	; 0x06
    192c:	9a 83       	std	Y+2, r25	; 0x02
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <LCD_voidWriteData+0x122>
    1938:	9a 83       	std	Y+2, r25	; 0x02
    193a:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for 2 msec.*/
	_delay_ms(2);

	/*Re-Make Enable Pin as LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    193c:	82 e0       	ldi	r24, 0x02	; 2
    193e:	62 e0       	ldi	r22, 0x02	; 2
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_u8SetPinValue>
}
    1946:	2f 96       	adiw	r28, 0x0f	; 15
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <LCD_voidInitialization>:
/* Description	: Initializing the LCD
 * Input		: Non
 * Output		: Non
 */
void LCD_voidInitialization(void)
{
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	c6 55       	subi	r28, 0x56	; 86
    1966:	d0 40       	sbci	r29, 0x00	; 0
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPortDirection(LCD_DATA_PORT, DIO_MAX_PORT_VALUE);
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	6f ef       	ldi	r22, 0xFF	; 255
    1976:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_OUTPUT);
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	41 e0       	ldi	r20, 0x01	; 1
    1980:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_OUTPUT);
    1984:	82 e0       	ldi	r24, 0x02	; 2
    1986:	61 e0       	ldi	r22, 0x01	; 1
    1988:	41 e0       	ldi	r20, 0x01	; 1
    198a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_E_PIN, DIO_OUTPUT);
    198e:	82 e0       	ldi	r24, 0x02	; 2
    1990:	62 e0       	ldi	r22, 0x02	; 2
    1992:	41 e0       	ldi	r20, 0x01	; 1
    1994:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <DIO_u8SetPinDirection>
    1998:	fe 01       	movw	r30, r28
    199a:	ed 5a       	subi	r30, 0xAD	; 173
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	ac e0       	ldi	r26, 0x0C	; 12
    19a4:	b2 e4       	ldi	r27, 0x42	; 66
    19a6:	80 83       	st	Z, r24
    19a8:	91 83       	std	Z+1, r25	; 0x01
    19aa:	a2 83       	std	Z+2, r26	; 0x02
    19ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ae:	8e 01       	movw	r16, r28
    19b0:	01 5b       	subi	r16, 0xB1	; 177
    19b2:	1f 4f       	sbci	r17, 0xFF	; 255
    19b4:	fe 01       	movw	r30, r28
    19b6:	ed 5a       	subi	r30, 0xAD	; 173
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	60 81       	ld	r22, Z
    19bc:	71 81       	ldd	r23, Z+1	; 0x01
    19be:	82 81       	ldd	r24, Z+2	; 0x02
    19c0:	93 81       	ldd	r25, Z+3	; 0x03
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	4a ef       	ldi	r20, 0xFA	; 250
    19c8:	54 e4       	ldi	r21, 0x44	; 68
    19ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	f8 01       	movw	r30, r16
    19d4:	80 83       	st	Z, r24
    19d6:	91 83       	std	Z+1, r25	; 0x01
    19d8:	a2 83       	std	Z+2, r26	; 0x02
    19da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19dc:	fe 01       	movw	r30, r28
    19de:	e1 5b       	subi	r30, 0xB1	; 177
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	60 81       	ld	r22, Z
    19e4:	71 81       	ldd	r23, Z+1	; 0x01
    19e6:	82 81       	ldd	r24, Z+2	; 0x02
    19e8:	93 81       	ldd	r25, Z+3	; 0x03
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e8       	ldi	r20, 0x80	; 128
    19f0:	5f e3       	ldi	r21, 0x3F	; 63
    19f2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19f6:	88 23       	and	r24, r24
    19f8:	44 f4       	brge	.+16     	; 0x1a0a <LCD_voidInitialization+0xb2>
		__ticks = 1;
    19fa:	fe 01       	movw	r30, r28
    19fc:	e3 5b       	subi	r30, 0xB3	; 179
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	91 83       	std	Z+1, r25	; 0x01
    1a06:	80 83       	st	Z, r24
    1a08:	64 c0       	rjmp	.+200    	; 0x1ad2 <LCD_voidInitialization+0x17a>
	else if (__tmp > 65535)
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	e1 5b       	subi	r30, 0xB1	; 177
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	60 81       	ld	r22, Z
    1a12:	71 81       	ldd	r23, Z+1	; 0x01
    1a14:	82 81       	ldd	r24, Z+2	; 0x02
    1a16:	93 81       	ldd	r25, Z+3	; 0x03
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	3f ef       	ldi	r19, 0xFF	; 255
    1a1c:	4f e7       	ldi	r20, 0x7F	; 127
    1a1e:	57 e4       	ldi	r21, 0x47	; 71
    1a20:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a24:	18 16       	cp	r1, r24
    1a26:	0c f0       	brlt	.+2      	; 0x1a2a <LCD_voidInitialization+0xd2>
    1a28:	43 c0       	rjmp	.+134    	; 0x1ab0 <LCD_voidInitialization+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	ed 5a       	subi	r30, 0xAD	; 173
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	60 81       	ld	r22, Z
    1a32:	71 81       	ldd	r23, Z+1	; 0x01
    1a34:	82 81       	ldd	r24, Z+2	; 0x02
    1a36:	93 81       	ldd	r25, Z+3	; 0x03
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	40 e2       	ldi	r20, 0x20	; 32
    1a3e:	51 e4       	ldi	r21, 0x41	; 65
    1a40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	8e 01       	movw	r16, r28
    1a4a:	03 5b       	subi	r16, 0xB3	; 179
    1a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4e:	bc 01       	movw	r22, r24
    1a50:	cd 01       	movw	r24, r26
    1a52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	f8 01       	movw	r30, r16
    1a5c:	91 83       	std	Z+1, r25	; 0x01
    1a5e:	80 83       	st	Z, r24
    1a60:	1f c0       	rjmp	.+62     	; 0x1aa0 <LCD_voidInitialization+0x148>
    1a62:	fe 01       	movw	r30, r28
    1a64:	e5 5b       	subi	r30, 0xB5	; 181
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	88 ec       	ldi	r24, 0xC8	; 200
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	91 83       	std	Z+1, r25	; 0x01
    1a6e:	80 83       	st	Z, r24
    1a70:	fe 01       	movw	r30, r28
    1a72:	e5 5b       	subi	r30, 0xB5	; 181
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	80 81       	ld	r24, Z
    1a78:	91 81       	ldd	r25, Z+1	; 0x01
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <LCD_voidInitialization+0x122>
    1a7e:	fe 01       	movw	r30, r28
    1a80:	e5 5b       	subi	r30, 0xB5	; 181
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a88:	de 01       	movw	r26, r28
    1a8a:	a3 5b       	subi	r26, 0xB3	; 179
    1a8c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e3 5b       	subi	r30, 0xB3	; 179
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	80 81       	ld	r24, Z
    1a96:	91 81       	ldd	r25, Z+1	; 0x01
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	11 96       	adiw	r26, 0x01	; 1
    1a9c:	9c 93       	st	X, r25
    1a9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	e3 5b       	subi	r30, 0xB3	; 179
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	80 81       	ld	r24, Z
    1aa8:	91 81       	ldd	r25, Z+1	; 0x01
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	d1 f6       	brne	.-76     	; 0x1a62 <LCD_voidInitialization+0x10a>
    1aae:	27 c0       	rjmp	.+78     	; 0x1afe <LCD_voidInitialization+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab0:	8e 01       	movw	r16, r28
    1ab2:	03 5b       	subi	r16, 0xB3	; 179
    1ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e1 5b       	subi	r30, 0xB1	; 177
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	60 81       	ld	r22, Z
    1abe:	71 81       	ldd	r23, Z+1	; 0x01
    1ac0:	82 81       	ldd	r24, Z+2	; 0x02
    1ac2:	93 81       	ldd	r25, Z+3	; 0x03
    1ac4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	f8 01       	movw	r30, r16
    1ace:	91 83       	std	Z+1, r25	; 0x01
    1ad0:	80 83       	st	Z, r24
    1ad2:	de 01       	movw	r26, r28
    1ad4:	a7 5b       	subi	r26, 0xB7	; 183
    1ad6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ad8:	fe 01       	movw	r30, r28
    1ada:	e3 5b       	subi	r30, 0xB3	; 179
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	80 81       	ld	r24, Z
    1ae0:	91 81       	ldd	r25, Z+1	; 0x01
    1ae2:	8d 93       	st	X+, r24
    1ae4:	9c 93       	st	X, r25
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	e7 5b       	subi	r30, 0xB7	; 183
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	80 81       	ld	r24, Z
    1aee:	91 81       	ldd	r25, Z+1	; 0x01
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <LCD_voidInitialization+0x198>
    1af4:	fe 01       	movw	r30, r28
    1af6:	e7 5b       	subi	r30, 0xB7	; 183
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	91 83       	std	Z+1, r25	; 0x01
    1afc:	80 83       	st	Z, r24
	 *				-> 5*8  -> 0
	 *
	 *DB3	Number of Lines(N) -> 1 Line  -> 0
	 *						   -> 2 Lines -> 1
	 */
	LCD_voidWriteCommand(0b00111100);
    1afe:	8c e3       	ldi	r24, 0x3C	; 60
    1b00:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_voidWriteCommand>
    1b04:	fe 01       	movw	r30, r28
    1b06:	eb 5b       	subi	r30, 0xBB	; 187
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	a4 e3       	ldi	r26, 0x34	; 52
    1b10:	b2 e4       	ldi	r27, 0x42	; 66
    1b12:	80 83       	st	Z, r24
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	a2 83       	std	Z+2, r26	; 0x02
    1b18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b1a:	8e 01       	movw	r16, r28
    1b1c:	0f 5b       	subi	r16, 0xBF	; 191
    1b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b20:	fe 01       	movw	r30, r28
    1b22:	eb 5b       	subi	r30, 0xBB	; 187
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	60 81       	ld	r22, Z
    1b28:	71 81       	ldd	r23, Z+1	; 0x01
    1b2a:	82 81       	ldd	r24, Z+2	; 0x02
    1b2c:	93 81       	ldd	r25, Z+3	; 0x03
    1b2e:	2b ea       	ldi	r18, 0xAB	; 171
    1b30:	3a ea       	ldi	r19, 0xAA	; 170
    1b32:	4a e2       	ldi	r20, 0x2A	; 42
    1b34:	50 e4       	ldi	r21, 0x40	; 64
    1b36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	f8 01       	movw	r30, r16
    1b40:	80 83       	st	Z, r24
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	a2 83       	std	Z+2, r26	; 0x02
    1b46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b48:	fe 01       	movw	r30, r28
    1b4a:	ef 5b       	subi	r30, 0xBF	; 191
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	60 81       	ld	r22, Z
    1b50:	71 81       	ldd	r23, Z+1	; 0x01
    1b52:	82 81       	ldd	r24, Z+2	; 0x02
    1b54:	93 81       	ldd	r25, Z+3	; 0x03
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e8       	ldi	r20, 0x80	; 128
    1b5c:	5f e3       	ldi	r21, 0x3F	; 63
    1b5e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b62:	88 23       	and	r24, r24
    1b64:	34 f4       	brge	.+12     	; 0x1b72 <LCD_voidInitialization+0x21a>
		__ticks = 1;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	fe 01       	movw	r30, r28
    1b6a:	e0 5c       	subi	r30, 0xC0	; 192
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 83       	st	Z, r24
    1b70:	9d c0       	rjmp	.+314    	; 0x1cac <LCD_voidInitialization+0x354>
	else if (__tmp > 255)
    1b72:	fe 01       	movw	r30, r28
    1b74:	ef 5b       	subi	r30, 0xBF	; 191
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	60 81       	ld	r22, Z
    1b7a:	71 81       	ldd	r23, Z+1	; 0x01
    1b7c:	82 81       	ldd	r24, Z+2	; 0x02
    1b7e:	93 81       	ldd	r25, Z+3	; 0x03
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	4f e7       	ldi	r20, 0x7F	; 127
    1b86:	53 e4       	ldi	r21, 0x43	; 67
    1b88:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b8c:	18 16       	cp	r1, r24
    1b8e:	0c f0       	brlt	.+2      	; 0x1b92 <LCD_voidInitialization+0x23a>
    1b90:	7e c0       	rjmp	.+252    	; 0x1c8e <LCD_voidInitialization+0x336>
	{
		_delay_ms(__us / 1000.0);
    1b92:	fe 01       	movw	r30, r28
    1b94:	eb 5b       	subi	r30, 0xBB	; 187
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	60 81       	ld	r22, Z
    1b9a:	71 81       	ldd	r23, Z+1	; 0x01
    1b9c:	82 81       	ldd	r24, Z+2	; 0x02
    1b9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	4a e7       	ldi	r20, 0x7A	; 122
    1ba6:	54 e4       	ldi	r21, 0x44	; 68
    1ba8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	8c af       	std	Y+60, r24	; 0x3c
    1bb2:	9d af       	std	Y+61, r25	; 0x3d
    1bb4:	ae af       	std	Y+62, r26	; 0x3e
    1bb6:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb8:	6c ad       	ldd	r22, Y+60	; 0x3c
    1bba:	7d ad       	ldd	r23, Y+61	; 0x3d
    1bbc:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bbe:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	4a ef       	ldi	r20, 0xFA	; 250
    1bc6:	54 e4       	ldi	r21, 0x44	; 68
    1bc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	88 af       	std	Y+56, r24	; 0x38
    1bd2:	99 af       	std	Y+57, r25	; 0x39
    1bd4:	aa af       	std	Y+58, r26	; 0x3a
    1bd6:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1bd8:	68 ad       	ldd	r22, Y+56	; 0x38
    1bda:	79 ad       	ldd	r23, Y+57	; 0x39
    1bdc:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bde:	9b ad       	ldd	r25, Y+59	; 0x3b
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e8       	ldi	r20, 0x80	; 128
    1be6:	5f e3       	ldi	r21, 0x3F	; 63
    1be8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bec:	88 23       	and	r24, r24
    1bee:	2c f4       	brge	.+10     	; 0x1bfa <LCD_voidInitialization+0x2a2>
		__ticks = 1;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9f ab       	std	Y+55, r25	; 0x37
    1bf6:	8e ab       	std	Y+54, r24	; 0x36
    1bf8:	3f c0       	rjmp	.+126    	; 0x1c78 <LCD_voidInitialization+0x320>
	else if (__tmp > 65535)
    1bfa:	68 ad       	ldd	r22, Y+56	; 0x38
    1bfc:	79 ad       	ldd	r23, Y+57	; 0x39
    1bfe:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c00:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	3f ef       	ldi	r19, 0xFF	; 255
    1c06:	4f e7       	ldi	r20, 0x7F	; 127
    1c08:	57 e4       	ldi	r21, 0x47	; 71
    1c0a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c0e:	18 16       	cp	r1, r24
    1c10:	4c f5       	brge	.+82     	; 0x1c64 <LCD_voidInitialization+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c12:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c14:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c16:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c18:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e2       	ldi	r20, 0x20	; 32
    1c20:	51 e4       	ldi	r21, 0x41	; 65
    1c22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	9f ab       	std	Y+55, r25	; 0x37
    1c38:	8e ab       	std	Y+54, r24	; 0x36
    1c3a:	0f c0       	rjmp	.+30     	; 0x1c5a <LCD_voidInitialization+0x302>
    1c3c:	88 ec       	ldi	r24, 0xC8	; 200
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	9d ab       	std	Y+53, r25	; 0x35
    1c42:	8c ab       	std	Y+52, r24	; 0x34
    1c44:	8c a9       	ldd	r24, Y+52	; 0x34
    1c46:	9d a9       	ldd	r25, Y+53	; 0x35
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <LCD_voidInitialization+0x2f0>
    1c4c:	9d ab       	std	Y+53, r25	; 0x35
    1c4e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c50:	8e a9       	ldd	r24, Y+54	; 0x36
    1c52:	9f a9       	ldd	r25, Y+55	; 0x37
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	9f ab       	std	Y+55, r25	; 0x37
    1c58:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5a:	8e a9       	ldd	r24, Y+54	; 0x36
    1c5c:	9f a9       	ldd	r25, Y+55	; 0x37
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	69 f7       	brne	.-38     	; 0x1c3c <LCD_voidInitialization+0x2e4>
    1c62:	2d c0       	rjmp	.+90     	; 0x1cbe <LCD_voidInitialization+0x366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c64:	68 ad       	ldd	r22, Y+56	; 0x38
    1c66:	79 ad       	ldd	r23, Y+57	; 0x39
    1c68:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c6a:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	9f ab       	std	Y+55, r25	; 0x37
    1c76:	8e ab       	std	Y+54, r24	; 0x36
    1c78:	8e a9       	ldd	r24, Y+54	; 0x36
    1c7a:	9f a9       	ldd	r25, Y+55	; 0x37
    1c7c:	9b ab       	std	Y+51, r25	; 0x33
    1c7e:	8a ab       	std	Y+50, r24	; 0x32
    1c80:	8a a9       	ldd	r24, Y+50	; 0x32
    1c82:	9b a9       	ldd	r25, Y+51	; 0x33
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <LCD_voidInitialization+0x32c>
    1c88:	9b ab       	std	Y+51, r25	; 0x33
    1c8a:	8a ab       	std	Y+50, r24	; 0x32
    1c8c:	18 c0       	rjmp	.+48     	; 0x1cbe <LCD_voidInitialization+0x366>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c8e:	fe 01       	movw	r30, r28
    1c90:	ef 5b       	subi	r30, 0xBF	; 191
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	60 81       	ld	r22, Z
    1c96:	71 81       	ldd	r23, Z+1	; 0x01
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	e0 5c       	subi	r30, 0xC0	; 192
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	80 83       	st	Z, r24
    1cac:	fe 01       	movw	r30, r28
    1cae:	e0 5c       	subi	r30, 0xC0	; 192
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	80 81       	ld	r24, Z
    1cb4:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cb6:	89 a9       	ldd	r24, Y+49	; 0x31
    1cb8:	8a 95       	dec	r24
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <LCD_voidInitialization+0x360>
    1cbc:	89 ab       	std	Y+49, r24	; 0x31
	 * 				  -> OFF -> 0
	 *
	 * DB2 	Display(D) -> ON  -> 1
	 * 				   -> OFF -> 0
	 */
	LCD_voidWriteCommand(0b00001100);
    1cbe:	8c e0       	ldi	r24, 0x0C	; 12
    1cc0:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_voidWriteCommand>
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	a0 e8       	ldi	r26, 0x80	; 128
    1cca:	b0 e4       	ldi	r27, 0x40	; 64
    1ccc:	8d a7       	std	Y+45, r24	; 0x2d
    1cce:	9e a7       	std	Y+46, r25	; 0x2e
    1cd0:	af a7       	std	Y+47, r26	; 0x2f
    1cd2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cd4:	6d a5       	ldd	r22, Y+45	; 0x2d
    1cd6:	7e a5       	ldd	r23, Y+46	; 0x2e
    1cd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cda:	98 a9       	ldd	r25, Y+48	; 0x30
    1cdc:	2b ea       	ldi	r18, 0xAB	; 171
    1cde:	3a ea       	ldi	r19, 0xAA	; 170
    1ce0:	4a e2       	ldi	r20, 0x2A	; 42
    1ce2:	50 e4       	ldi	r21, 0x40	; 64
    1ce4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	89 a7       	std	Y+41, r24	; 0x29
    1cee:	9a a7       	std	Y+42, r25	; 0x2a
    1cf0:	ab a7       	std	Y+43, r26	; 0x2b
    1cf2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1cf4:	69 a5       	ldd	r22, Y+41	; 0x29
    1cf6:	7a a5       	ldd	r23, Y+42	; 0x2a
    1cf8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cfa:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e8       	ldi	r20, 0x80	; 128
    1d02:	5f e3       	ldi	r21, 0x3F	; 63
    1d04:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d08:	88 23       	and	r24, r24
    1d0a:	1c f4       	brge	.+6      	; 0x1d12 <LCD_voidInitialization+0x3ba>
		__ticks = 1;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	88 a7       	std	Y+40, r24	; 0x28
    1d10:	91 c0       	rjmp	.+290    	; 0x1e34 <LCD_voidInitialization+0x4dc>
	else if (__tmp > 255)
    1d12:	69 a5       	ldd	r22, Y+41	; 0x29
    1d14:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d16:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d18:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	4f e7       	ldi	r20, 0x7F	; 127
    1d20:	53 e4       	ldi	r21, 0x43	; 67
    1d22:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d26:	18 16       	cp	r1, r24
    1d28:	0c f0       	brlt	.+2      	; 0x1d2c <LCD_voidInitialization+0x3d4>
    1d2a:	7b c0       	rjmp	.+246    	; 0x1e22 <LCD_voidInitialization+0x4ca>
	{
		_delay_ms(__us / 1000.0);
    1d2c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d2e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d30:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d32:	98 a9       	ldd	r25, Y+48	; 0x30
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	4a e7       	ldi	r20, 0x7A	; 122
    1d3a:	54 e4       	ldi	r21, 0x44	; 68
    1d3c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	8c a3       	std	Y+36, r24	; 0x24
    1d46:	9d a3       	std	Y+37, r25	; 0x25
    1d48:	ae a3       	std	Y+38, r26	; 0x26
    1d4a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4c:	6c a1       	ldd	r22, Y+36	; 0x24
    1d4e:	7d a1       	ldd	r23, Y+37	; 0x25
    1d50:	8e a1       	ldd	r24, Y+38	; 0x26
    1d52:	9f a1       	ldd	r25, Y+39	; 0x27
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	4a ef       	ldi	r20, 0xFA	; 250
    1d5a:	54 e4       	ldi	r21, 0x44	; 68
    1d5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	88 a3       	std	Y+32, r24	; 0x20
    1d66:	99 a3       	std	Y+33, r25	; 0x21
    1d68:	aa a3       	std	Y+34, r26	; 0x22
    1d6a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1d6c:	68 a1       	ldd	r22, Y+32	; 0x20
    1d6e:	79 a1       	ldd	r23, Y+33	; 0x21
    1d70:	8a a1       	ldd	r24, Y+34	; 0x22
    1d72:	9b a1       	ldd	r25, Y+35	; 0x23
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e8       	ldi	r20, 0x80	; 128
    1d7a:	5f e3       	ldi	r21, 0x3F	; 63
    1d7c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d80:	88 23       	and	r24, r24
    1d82:	2c f4       	brge	.+10     	; 0x1d8e <LCD_voidInitialization+0x436>
		__ticks = 1;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	9f 8f       	std	Y+31, r25	; 0x1f
    1d8a:	8e 8f       	std	Y+30, r24	; 0x1e
    1d8c:	3f c0       	rjmp	.+126    	; 0x1e0c <LCD_voidInitialization+0x4b4>
	else if (__tmp > 65535)
    1d8e:	68 a1       	ldd	r22, Y+32	; 0x20
    1d90:	79 a1       	ldd	r23, Y+33	; 0x21
    1d92:	8a a1       	ldd	r24, Y+34	; 0x22
    1d94:	9b a1       	ldd	r25, Y+35	; 0x23
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	3f ef       	ldi	r19, 0xFF	; 255
    1d9a:	4f e7       	ldi	r20, 0x7F	; 127
    1d9c:	57 e4       	ldi	r21, 0x47	; 71
    1d9e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1da2:	18 16       	cp	r1, r24
    1da4:	4c f5       	brge	.+82     	; 0x1df8 <LCD_voidInitialization+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da6:	6c a1       	ldd	r22, Y+36	; 0x24
    1da8:	7d a1       	ldd	r23, Y+37	; 0x25
    1daa:	8e a1       	ldd	r24, Y+38	; 0x26
    1dac:	9f a1       	ldd	r25, Y+39	; 0x27
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e2       	ldi	r20, 0x20	; 32
    1db4:	51 e4       	ldi	r21, 0x41	; 65
    1db6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	bc 01       	movw	r22, r24
    1dc0:	cd 01       	movw	r24, r26
    1dc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	9f 8f       	std	Y+31, r25	; 0x1f
    1dcc:	8e 8f       	std	Y+30, r24	; 0x1e
    1dce:	0f c0       	rjmp	.+30     	; 0x1dee <LCD_voidInitialization+0x496>
    1dd0:	88 ec       	ldi	r24, 0xC8	; 200
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	9d 8f       	std	Y+29, r25	; 0x1d
    1dd6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dd8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dda:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <LCD_voidInitialization+0x484>
    1de0:	9d 8f       	std	Y+29, r25	; 0x1d
    1de2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1de6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	9f 8f       	std	Y+31, r25	; 0x1f
    1dec:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1df0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	69 f7       	brne	.-38     	; 0x1dd0 <LCD_voidInitialization+0x478>
    1df6:	24 c0       	rjmp	.+72     	; 0x1e40 <LCD_voidInitialization+0x4e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df8:	68 a1       	ldd	r22, Y+32	; 0x20
    1dfa:	79 a1       	ldd	r23, Y+33	; 0x21
    1dfc:	8a a1       	ldd	r24, Y+34	; 0x22
    1dfe:	9b a1       	ldd	r25, Y+35	; 0x23
    1e00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	9f 8f       	std	Y+31, r25	; 0x1f
    1e0a:	8e 8f       	std	Y+30, r24	; 0x1e
    1e0c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e0e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e10:	9b 8f       	std	Y+27, r25	; 0x1b
    1e12:	8a 8f       	std	Y+26, r24	; 0x1a
    1e14:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e16:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <LCD_voidInitialization+0x4c0>
    1e1c:	9b 8f       	std	Y+27, r25	; 0x1b
    1e1e:	8a 8f       	std	Y+26, r24	; 0x1a
    1e20:	0f c0       	rjmp	.+30     	; 0x1e40 <LCD_voidInitialization+0x4e8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e22:	69 a5       	ldd	r22, Y+41	; 0x29
    1e24:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e26:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e28:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	88 a7       	std	Y+40, r24	; 0x28
    1e34:	88 a5       	ldd	r24, Y+40	; 0x28
    1e36:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e38:	89 8d       	ldd	r24, Y+25	; 0x19
    1e3a:	8a 95       	dec	r24
    1e3c:	f1 f7       	brne	.-4      	; 0x1e3a <LCD_voidInitialization+0x4e2>
    1e3e:	89 8f       	std	Y+25, r24	; 0x19

	/*Delay to Process Display ON/OFF Control*/
	_delay_us(4);

	/*Clear LCD*/
	LCD_voidWriteCommand(0b00000001);
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_voidWriteCommand>
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	a8 ec       	ldi	r26, 0xC8	; 200
    1e4c:	b4 e4       	ldi	r27, 0x44	; 68
    1e4e:	8d 8b       	std	Y+21, r24	; 0x15
    1e50:	9e 8b       	std	Y+22, r25	; 0x16
    1e52:	af 8b       	std	Y+23, r26	; 0x17
    1e54:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e56:	6d 89       	ldd	r22, Y+21	; 0x15
    1e58:	7e 89       	ldd	r23, Y+22	; 0x16
    1e5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5e:	2b ea       	ldi	r18, 0xAB	; 171
    1e60:	3a ea       	ldi	r19, 0xAA	; 170
    1e62:	4a e2       	ldi	r20, 0x2A	; 42
    1e64:	50 e4       	ldi	r21, 0x40	; 64
    1e66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	89 8b       	std	Y+17, r24	; 0x11
    1e70:	9a 8b       	std	Y+18, r25	; 0x12
    1e72:	ab 8b       	std	Y+19, r26	; 0x13
    1e74:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e76:	69 89       	ldd	r22, Y+17	; 0x11
    1e78:	7a 89       	ldd	r23, Y+18	; 0x12
    1e7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e8       	ldi	r20, 0x80	; 128
    1e84:	5f e3       	ldi	r21, 0x3F	; 63
    1e86:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e8a:	88 23       	and	r24, r24
    1e8c:	1c f4       	brge	.+6      	; 0x1e94 <LCD_voidInitialization+0x53c>
		__ticks = 1;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	88 8b       	std	Y+16, r24	; 0x10
    1e92:	91 c0       	rjmp	.+290    	; 0x1fb6 <LCD_voidInitialization+0x65e>
	else if (__tmp > 255)
    1e94:	69 89       	ldd	r22, Y+17	; 0x11
    1e96:	7a 89       	ldd	r23, Y+18	; 0x12
    1e98:	8b 89       	ldd	r24, Y+19	; 0x13
    1e9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	4f e7       	ldi	r20, 0x7F	; 127
    1ea2:	53 e4       	ldi	r21, 0x43	; 67
    1ea4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ea8:	18 16       	cp	r1, r24
    1eaa:	0c f0       	brlt	.+2      	; 0x1eae <LCD_voidInitialization+0x556>
    1eac:	7b c0       	rjmp	.+246    	; 0x1fa4 <LCD_voidInitialization+0x64c>
	{
		_delay_ms(__us / 1000.0);
    1eae:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	4a e7       	ldi	r20, 0x7A	; 122
    1ebc:	54 e4       	ldi	r21, 0x44	; 68
    1ebe:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	8c 87       	std	Y+12, r24	; 0x0c
    1ec8:	9d 87       	std	Y+13, r25	; 0x0d
    1eca:	ae 87       	std	Y+14, r26	; 0x0e
    1ecc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ed0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ed2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ed4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	4a ef       	ldi	r20, 0xFA	; 250
    1edc:	54 e4       	ldi	r21, 0x44	; 68
    1ede:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	88 87       	std	Y+8, r24	; 0x08
    1ee8:	99 87       	std	Y+9, r25	; 0x09
    1eea:	aa 87       	std	Y+10, r26	; 0x0a
    1eec:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1eee:	68 85       	ldd	r22, Y+8	; 0x08
    1ef0:	79 85       	ldd	r23, Y+9	; 0x09
    1ef2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ef4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e8       	ldi	r20, 0x80	; 128
    1efc:	5f e3       	ldi	r21, 0x3F	; 63
    1efe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f02:	88 23       	and	r24, r24
    1f04:	2c f4       	brge	.+10     	; 0x1f10 <LCD_voidInitialization+0x5b8>
		__ticks = 1;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9f 83       	std	Y+7, r25	; 0x07
    1f0c:	8e 83       	std	Y+6, r24	; 0x06
    1f0e:	3f c0       	rjmp	.+126    	; 0x1f8e <LCD_voidInitialization+0x636>
	else if (__tmp > 65535)
    1f10:	68 85       	ldd	r22, Y+8	; 0x08
    1f12:	79 85       	ldd	r23, Y+9	; 0x09
    1f14:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f16:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	3f ef       	ldi	r19, 0xFF	; 255
    1f1c:	4f e7       	ldi	r20, 0x7F	; 127
    1f1e:	57 e4       	ldi	r21, 0x47	; 71
    1f20:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f24:	18 16       	cp	r1, r24
    1f26:	4c f5       	brge	.+82     	; 0x1f7a <LCD_voidInitialization+0x622>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f28:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e2       	ldi	r20, 0x20	; 32
    1f36:	51 e4       	ldi	r21, 0x41	; 65
    1f38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	bc 01       	movw	r22, r24
    1f42:	cd 01       	movw	r24, r26
    1f44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9f 83       	std	Y+7, r25	; 0x07
    1f4e:	8e 83       	std	Y+6, r24	; 0x06
    1f50:	0f c0       	rjmp	.+30     	; 0x1f70 <LCD_voidInitialization+0x618>
    1f52:	88 ec       	ldi	r24, 0xC8	; 200
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	9d 83       	std	Y+5, r25	; 0x05
    1f58:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <LCD_voidInitialization+0x606>
    1f62:	9d 83       	std	Y+5, r25	; 0x05
    1f64:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f66:	8e 81       	ldd	r24, Y+6	; 0x06
    1f68:	9f 81       	ldd	r25, Y+7	; 0x07
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	9f 83       	std	Y+7, r25	; 0x07
    1f6e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f70:	8e 81       	ldd	r24, Y+6	; 0x06
    1f72:	9f 81       	ldd	r25, Y+7	; 0x07
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	69 f7       	brne	.-38     	; 0x1f52 <LCD_voidInitialization+0x5fa>
    1f78:	24 c0       	rjmp	.+72     	; 0x1fc2 <LCD_voidInitialization+0x66a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7a:	68 85       	ldd	r22, Y+8	; 0x08
    1f7c:	79 85       	ldd	r23, Y+9	; 0x09
    1f7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f80:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9f 83       	std	Y+7, r25	; 0x07
    1f8c:	8e 83       	std	Y+6, r24	; 0x06
    1f8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f90:	9f 81       	ldd	r25, Y+7	; 0x07
    1f92:	9b 83       	std	Y+3, r25	; 0x03
    1f94:	8a 83       	std	Y+2, r24	; 0x02
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	9b 81       	ldd	r25, Y+3	; 0x03
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <LCD_voidInitialization+0x642>
    1f9e:	9b 83       	std	Y+3, r25	; 0x03
    1fa0:	8a 83       	std	Y+2, r24	; 0x02
    1fa2:	0f c0       	rjmp	.+30     	; 0x1fc2 <LCD_voidInitialization+0x66a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fa4:	69 89       	ldd	r22, Y+17	; 0x11
    1fa6:	7a 89       	ldd	r23, Y+18	; 0x12
    1fa8:	8b 89       	ldd	r24, Y+19	; 0x13
    1faa:	9c 89       	ldd	r25, Y+20	; 0x14
    1fac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	88 8b       	std	Y+16, r24	; 0x10
    1fb6:	88 89       	ldd	r24, Y+16	; 0x10
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	8a 95       	dec	r24
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <LCD_voidInitialization+0x664>
    1fc0:	89 83       	std	Y+1, r24	; 0x01

	/*Delay for Process Clearing LCD*/
	_delay_us(1600);
}
    1fc2:	ca 5a       	subi	r28, 0xAA	; 170
    1fc4:	df 4f       	sbci	r29, 0xFF	; 255
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	1f 91       	pop	r17
    1fd6:	0f 91       	pop	r16
    1fd8:	08 95       	ret

00001fda <LCD_voidClearLCD>:
/* Description	: Clear LCD
 * Input		: Non
 * Output		: Non
 */
void LCD_voidClearLCD(void)
{
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
	/*Clear LCD*/
	LCD_voidWriteCommand(0b00000001);
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_voidWriteCommand>
}
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <LCD_u8WriteString>:
 * Input		: Array of Strings, Size of this Array
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8WriteString(u8 *Copy_u8String, u8 Copy_u8StrSize)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <LCD_u8WriteString+0x6>
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <LCD_u8WriteString+0x8>
    1ff6:	0f 92       	push	r0
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	9c 83       	std	Y+4, r25	; 0x04
    1ffe:	8b 83       	std	Y+3, r24	; 0x03
    2000:	6d 83       	std	Y+5, r22	; 0x05
	/*Local Variables*/
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0;
    2002:	1a 82       	std	Y+2, r1	; 0x02
    2004:	19 82       	std	Y+1, r1	; 0x01

	/*Loop on the Array of the Strings and print it one by one*/
	for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Copy_u8StrSize; Local_u8LoopCtr++)
    2006:	19 82       	std	Y+1, r1	; 0x01
    2008:	0e c0       	rjmp	.+28     	; 0x2026 <LCD_u8WriteString+0x38>
	{
		LCD_voidWriteData(Copy_u8String[Local_u8LoopCtr]);
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	9c 81       	ldd	r25, Y+4	; 0x04
    2014:	fc 01       	movw	r30, r24
    2016:	e2 0f       	add	r30, r18
    2018:	f3 1f       	adc	r31, r19
    201a:	80 81       	ld	r24, Z
    201c:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>
{
	/*Local Variables*/
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0;

	/*Loop on the Array of the Strings and print it one by one*/
	for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Copy_u8StrSize; Local_u8LoopCtr++)
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	8f 5f       	subi	r24, 0xFF	; 255
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	99 81       	ldd	r25, Y+1	; 0x01
    2028:	8d 81       	ldd	r24, Y+5	; 0x05
    202a:	98 17       	cp	r25, r24
    202c:	70 f3       	brcs	.-36     	; 0x200a <LCD_u8WriteString+0x1c>
	{
		LCD_voidWriteData(Copy_u8String[Local_u8LoopCtr]);
	}

	return Local_u8Error;
    202e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <LCD_u8GoToXY>:
 * Input		: X Position, Y Position
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8GoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	00 d0       	rcall	.+0      	; 0x2046 <LCD_u8GoToXY+0x6>
    2046:	00 d0       	rcall	.+0      	; 0x2048 <LCD_u8GoToXY+0x8>
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	8b 83       	std	Y+3, r24	; 0x03
    204e:	6c 83       	std	Y+4, r22	; 0x04
	/*Local Variables*/
	u8 Local_u8Error = 0, Local_u8Address = 0;
    2050:	1a 82       	std	Y+2, r1	; 0x02
    2052:	19 82       	std	Y+1, r1	; 0x01
//			 * of the Memory and the X position we need and the Command for AC eight's Bit 0b1(128)
//			 */
//			Local_u8Address = DDRAM_LINE2_FIRST_LOCATION + Copy_u8XPos + AC_REG_COMMAND;
//		}

		Local_u8Address = Copy_u8XPos + (Copy_u8YPos * DDRAM_LINE2_FIRST_LOCATION) +  AC_REG_COMMAND;
    2054:	8c 81       	ldd	r24, Y+4	; 0x04
    2056:	88 2f       	mov	r24, r24
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	00 24       	eor	r0, r0
    205c:	96 95       	lsr	r25
    205e:	87 95       	ror	r24
    2060:	07 94       	ror	r0
    2062:	96 95       	lsr	r25
    2064:	87 95       	ror	r24
    2066:	07 94       	ror	r0
    2068:	98 2f       	mov	r25, r24
    206a:	80 2d       	mov	r24, r0
    206c:	98 2f       	mov	r25, r24
    206e:	8b 81       	ldd	r24, Y+3	; 0x03
    2070:	89 0f       	add	r24, r25
    2072:	80 58       	subi	r24, 0x80	; 128
    2074:	89 83       	std	Y+1, r24	; 0x01

		/*Send the Command with the Needed Position*/
		LCD_voidWriteCommand(Local_u8Address);
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_voidWriteCommand>
//	}

	return Local_u8Error;
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <LCD_u8WriteSpecialChar>:
 * Input		: An Array of the Special Characters we have only 8 Positions
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8WriteSpecialChar(u8 *Copy_u8SpecialChar, u8 Copy_ArraySize)
{
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	00 d0       	rcall	.+0      	; 0x2092 <LCD_u8WriteSpecialChar+0x6>
    2092:	00 d0       	rcall	.+0      	; 0x2094 <LCD_u8WriteSpecialChar+0x8>
    2094:	0f 92       	push	r0
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	9c 83       	std	Y+4, r25	; 0x04
    209c:	8b 83       	std	Y+3, r24	; 0x03
    209e:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0;
    20a0:	1a 82       	std	Y+2, r1	; 0x02
    20a2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_ArraySize > MAX_NB_BITS_SPECIAL_CHAR)
    20a4:	8d 81       	ldd	r24, Y+5	; 0x05
    20a6:	81 34       	cpi	r24, 0x41	; 65
    20a8:	18 f0       	brcs	.+6      	; 0x20b0 <LCD_u8WriteSpecialChar+0x24>
	{
		Local_u8Error = 1;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	8a 83       	std	Y+2, r24	; 0x02
    20ae:	1a c0       	rjmp	.+52     	; 0x20e4 <LCD_u8WriteSpecialChar+0x58>
	}

	else
	{
		/*Move the AC Register to Points to CGRAM command = 0b01 and the other 6 bits are the Position in CGRAM memory*/
		LCD_voidWriteCommand(0b01000000);
    20b0:	80 e4       	ldi	r24, 0x40	; 64
    20b2:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_voidWriteCommand>

		/*Looping on the Array of the Special Char and Write it in CGRAM*/
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < MAX_NB_BITS_SPECIAL_CHAR; Local_u8LoopCtr++)
    20b6:	19 82       	std	Y+1, r1	; 0x01
    20b8:	0e c0       	rjmp	.+28     	; 0x20d6 <LCD_u8WriteSpecialChar+0x4a>
		{
			LCD_voidWriteData(Copy_u8SpecialChar[Local_u8LoopCtr]);
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	fc 01       	movw	r30, r24
    20c6:	e2 0f       	add	r30, r18
    20c8:	f3 1f       	adc	r31, r19
    20ca:	80 81       	ld	r24, Z
    20cc:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>
	{
		/*Move the AC Register to Points to CGRAM command = 0b01 and the other 6 bits are the Position in CGRAM memory*/
		LCD_voidWriteCommand(0b01000000);

		/*Looping on the Array of the Special Char and Write it in CGRAM*/
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < MAX_NB_BITS_SPECIAL_CHAR; Local_u8LoopCtr++)
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	8f 5f       	subi	r24, 0xFF	; 255
    20d4:	89 83       	std	Y+1, r24	; 0x01
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	80 34       	cpi	r24, 0x40	; 64
    20da:	78 f3       	brcs	.-34     	; 0x20ba <LCD_u8WriteSpecialChar+0x2e>
		{
			LCD_voidWriteData(Copy_u8SpecialChar[Local_u8LoopCtr]);
		}

		/*Back AC Register to points to the DDRAM*/
		LCD_u8GoToXY(0, 0);
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	60 e0       	ldi	r22, 0x00	; 0
    20e0:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
	}
	return Local_u8Error;
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <LCD_u8WriteINT>:
 * Input		: The Integer Number, X position, Y Position
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8WriteINT(u32 Copy_u32INT, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	61 97       	sbiw	r28, 0x11	; 17
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	de bf       	out	0x3e, r29	; 62
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	cd bf       	out	0x3d, r28	; 61
    210a:	6a 87       	std	Y+10, r22	; 0x0a
    210c:	7b 87       	std	Y+11, r23	; 0x0b
    210e:	8c 87       	std	Y+12, r24	; 0x0c
    2110:	9d 87       	std	Y+13, r25	; 0x0d
    2112:	4e 87       	std	Y+14, r20	; 0x0e
    2114:	2f 87       	std	Y+15, r18	; 0x0f
	/* Local_u8LoopCtr: 	to Iterator for the loop
	 * Local_u8NOD: 		Number of Digits to make the positions of ones, tens, ...
	 * Local_u8CopyNOD: 	Copy of Number of Digits for the iteration in loop
	 * Local_u8Reminder: 	to save the Reminder (%) and check on it
	 */
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0, Local_u8NOD = 0, Local_u8CopyNOD = 0, Local_u8Reminder = 0;
    2116:	19 86       	std	Y+9, r1	; 0x09
    2118:	18 86       	std	Y+8, r1	; 0x08
    211a:	1f 82       	std	Y+7, r1	; 0x07
    211c:	1e 82       	std	Y+6, r1	; 0x06
    211e:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Temp = 0;
    2120:	19 82       	std	Y+1, r1	; 0x01
    2122:	1a 82       	std	Y+2, r1	; 0x02
    2124:	1b 82       	std	Y+3, r1	; 0x03
    2126:	1c 82       	std	Y+4, r1	; 0x04

	/*Checking on the Integer Number if it within the u32 range
	 * Check on the X position as we have 0 -> 15 position
	 * Check on the Y Position as we have 0 -> 1
	 */
	if(Copy_u32INT > MAX_U32_NB || Copy_u8XPos > 15 || Copy_u8YPos > 1)
    2128:	8e 85       	ldd	r24, Y+14	; 0x0e
    212a:	80 31       	cpi	r24, 0x10	; 16
    212c:	18 f4       	brcc	.+6      	; 0x2134 <LCD_u8WriteINT+0x3e>
    212e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2130:	82 30       	cpi	r24, 0x02	; 2
    2132:	18 f0       	brcs	.+6      	; 0x213a <LCD_u8WriteINT+0x44>
	{
		Local_u8Error = 1;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	89 87       	std	Y+9, r24	; 0x09
    2138:	40 c1       	rjmp	.+640    	; 0x23ba <LCD_u8WriteINT+0x2c4>

	/*if the Check is Okay with no problems*/
	else
	{
		/*Check if the Number is ZERO (0)*/
		if(Copy_u32INT == 0)
    213a:	8a 85       	ldd	r24, Y+10	; 0x0a
    213c:	9b 85       	ldd	r25, Y+11	; 0x0b
    213e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2140:	bd 85       	ldd	r27, Y+13	; 0x0d
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	a1 05       	cpc	r26, r1
    2146:	b1 05       	cpc	r27, r1
    2148:	39 f4       	brne	.+14     	; 0x2158 <LCD_u8WriteINT+0x62>
		{
			LCD_u8GoToXY((Copy_u8XPos), Copy_u8YPos);
    214a:	8e 85       	ldd	r24, Y+14	; 0x0e
    214c:	6f 85       	ldd	r22, Y+15	; 0x0f
    214e:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
			LCD_voidWriteData(48);
    2152:	80 e3       	ldi	r24, 0x30	; 48
    2154:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>
		}
		/*Putting the Integer Value in a temporary Variable to use in our calculation without losing it*/
		Local_u32Temp = Copy_u32INT;
    2158:	8a 85       	ldd	r24, Y+10	; 0x0a
    215a:	9b 85       	ldd	r25, Y+11	; 0x0b
    215c:	ac 85       	ldd	r26, Y+12	; 0x0c
    215e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2160:	89 83       	std	Y+1, r24	; 0x01
    2162:	9a 83       	std	Y+2, r25	; 0x02
    2164:	ab 83       	std	Y+3, r26	; 0x03
    2166:	bc 83       	std	Y+4, r27	; 0x04
    2168:	15 c0       	rjmp	.+42     	; 0x2194 <LCD_u8WriteINT+0x9e>

		/*Loop to get the Number of Digits*/
		while(Local_u32Temp != 0)
		{
			/*Dividing the Integer number by 10 till we have a result of Division Zero*/
			Local_u32Temp /= 10;
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	9a 81       	ldd	r25, Y+2	; 0x02
    216e:	ab 81       	ldd	r26, Y+3	; 0x03
    2170:	bc 81       	ldd	r27, Y+4	; 0x04
    2172:	2a e0       	ldi	r18, 0x0A	; 10
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e0       	ldi	r20, 0x00	; 0
    2178:	50 e0       	ldi	r21, 0x00	; 0
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__udivmodsi4>
    2182:	da 01       	movw	r26, r20
    2184:	c9 01       	movw	r24, r18
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	9a 83       	std	Y+2, r25	; 0x02
    218a:	ab 83       	std	Y+3, r26	; 0x03
    218c:	bc 83       	std	Y+4, r27	; 0x04

			/*With each Division Add 1 to Number of Digits*/
			Local_u8NOD++;
    218e:	8f 81       	ldd	r24, Y+7	; 0x07
    2190:	8f 5f       	subi	r24, 0xFF	; 255
    2192:	8f 83       	std	Y+7, r24	; 0x07
		}
		/*Putting the Integer Value in a temporary Variable to use in our calculation without losing it*/
		Local_u32Temp = Copy_u32INT;

		/*Loop to get the Number of Digits*/
		while(Local_u32Temp != 0)
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	ab 81       	ldd	r26, Y+3	; 0x03
    219a:	bc 81       	ldd	r27, Y+4	; 0x04
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	a1 05       	cpc	r26, r1
    21a0:	b1 05       	cpc	r27, r1
    21a2:	19 f7       	brne	.-58     	; 0x216a <LCD_u8WriteINT+0x74>
			/*With each Division Add 1 to Number of Digits*/
			Local_u8NOD++;
		}

		/*Make a Copy from the Number of Digits to use it in looping*/
		Local_u8CopyNOD = Local_u8NOD;
    21a4:	8f 81       	ldd	r24, Y+7	; 0x07
    21a6:	8e 83       	std	Y+6, r24	; 0x06

		/*Re-Make a copy of the Integer Number*/
		Local_u32Temp = Copy_u32INT;
    21a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    21aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    21ac:	ac 85       	ldd	r26, Y+12	; 0x0c
    21ae:	bd 85       	ldd	r27, Y+13	; 0x0d
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	9a 83       	std	Y+2, r25	; 0x02
    21b4:	ab 83       	std	Y+3, r26	; 0x03
    21b6:	bc 83       	std	Y+4, r27	; 0x04

		/*Now we have the Integer number and the Number of Digits so we will loop and in each loop
		 * we will make a Reminder from ones, tens and so on till our reminder be Zero
		 * and loop to print this number with the position on LCD
		 */
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Local_u8CopyNOD; Local_u8LoopCtr++)
    21b8:	18 86       	std	Y+8, r1	; 0x08
    21ba:	fa c0       	rjmp	.+500    	; 0x23b0 <LCD_u8WriteINT+0x2ba>
		{
			/*Getting the Ones at first time and in second iteration tens and so on*/
			Local_u8Reminder = Local_u32Temp % 10;
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	9a 81       	ldd	r25, Y+2	; 0x02
    21c0:	ab 81       	ldd	r26, Y+3	; 0x03
    21c2:	bc 81       	ldd	r27, Y+4	; 0x04
    21c4:	2a e0       	ldi	r18, 0x0A	; 10
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	50 e0       	ldi	r21, 0x00	; 0
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__udivmodsi4>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	8d 83       	std	Y+5, r24	; 0x05

			/*By Switch we will print the number by the ASCII Code*/
			switch(Local_u8Reminder)
    21da:	8d 81       	ldd	r24, Y+5	; 0x05
    21dc:	28 2f       	mov	r18, r24
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	39 8b       	std	Y+17, r19	; 0x11
    21e2:	28 8b       	std	Y+16, r18	; 0x10
    21e4:	88 89       	ldd	r24, Y+16	; 0x10
    21e6:	99 89       	ldd	r25, Y+17	; 0x11
    21e8:	84 30       	cpi	r24, 0x04	; 4
    21ea:	91 05       	cpc	r25, r1
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <LCD_u8WriteINT+0xfa>
    21ee:	7b c0       	rjmp	.+246    	; 0x22e6 <LCD_u8WriteINT+0x1f0>
    21f0:	28 89       	ldd	r18, Y+16	; 0x10
    21f2:	39 89       	ldd	r19, Y+17	; 0x11
    21f4:	25 30       	cpi	r18, 0x05	; 5
    21f6:	31 05       	cpc	r19, r1
    21f8:	ec f4       	brge	.+58     	; 0x2234 <LCD_u8WriteINT+0x13e>
    21fa:	88 89       	ldd	r24, Y+16	; 0x10
    21fc:	99 89       	ldd	r25, Y+17	; 0x11
    21fe:	81 30       	cpi	r24, 0x01	; 1
    2200:	91 05       	cpc	r25, r1
    2202:	09 f4       	brne	.+2      	; 0x2206 <LCD_u8WriteINT+0x110>
    2204:	49 c0       	rjmp	.+146    	; 0x2298 <LCD_u8WriteINT+0x1a2>
    2206:	28 89       	ldd	r18, Y+16	; 0x10
    2208:	39 89       	ldd	r19, Y+17	; 0x11
    220a:	22 30       	cpi	r18, 0x02	; 2
    220c:	31 05       	cpc	r19, r1
    220e:	2c f4       	brge	.+10     	; 0x221a <LCD_u8WriteINT+0x124>
    2210:	88 89       	ldd	r24, Y+16	; 0x10
    2212:	99 89       	ldd	r25, Y+17	; 0x11
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	99 f1       	breq	.+102    	; 0x227e <LCD_u8WriteINT+0x188>
    2218:	b4 c0       	rjmp	.+360    	; 0x2382 <LCD_u8WriteINT+0x28c>
    221a:	28 89       	ldd	r18, Y+16	; 0x10
    221c:	39 89       	ldd	r19, Y+17	; 0x11
    221e:	22 30       	cpi	r18, 0x02	; 2
    2220:	31 05       	cpc	r19, r1
    2222:	09 f4       	brne	.+2      	; 0x2226 <LCD_u8WriteINT+0x130>
    2224:	46 c0       	rjmp	.+140    	; 0x22b2 <LCD_u8WriteINT+0x1bc>
    2226:	88 89       	ldd	r24, Y+16	; 0x10
    2228:	99 89       	ldd	r25, Y+17	; 0x11
    222a:	83 30       	cpi	r24, 0x03	; 3
    222c:	91 05       	cpc	r25, r1
    222e:	09 f4       	brne	.+2      	; 0x2232 <LCD_u8WriteINT+0x13c>
    2230:	4d c0       	rjmp	.+154    	; 0x22cc <LCD_u8WriteINT+0x1d6>
    2232:	a7 c0       	rjmp	.+334    	; 0x2382 <LCD_u8WriteINT+0x28c>
    2234:	28 89       	ldd	r18, Y+16	; 0x10
    2236:	39 89       	ldd	r19, Y+17	; 0x11
    2238:	27 30       	cpi	r18, 0x07	; 7
    223a:	31 05       	cpc	r19, r1
    223c:	09 f4       	brne	.+2      	; 0x2240 <LCD_u8WriteINT+0x14a>
    223e:	7a c0       	rjmp	.+244    	; 0x2334 <LCD_u8WriteINT+0x23e>
    2240:	88 89       	ldd	r24, Y+16	; 0x10
    2242:	99 89       	ldd	r25, Y+17	; 0x11
    2244:	88 30       	cpi	r24, 0x08	; 8
    2246:	91 05       	cpc	r25, r1
    2248:	6c f4       	brge	.+26     	; 0x2264 <LCD_u8WriteINT+0x16e>
    224a:	28 89       	ldd	r18, Y+16	; 0x10
    224c:	39 89       	ldd	r19, Y+17	; 0x11
    224e:	25 30       	cpi	r18, 0x05	; 5
    2250:	31 05       	cpc	r19, r1
    2252:	09 f4       	brne	.+2      	; 0x2256 <LCD_u8WriteINT+0x160>
    2254:	55 c0       	rjmp	.+170    	; 0x2300 <LCD_u8WriteINT+0x20a>
    2256:	88 89       	ldd	r24, Y+16	; 0x10
    2258:	99 89       	ldd	r25, Y+17	; 0x11
    225a:	86 30       	cpi	r24, 0x06	; 6
    225c:	91 05       	cpc	r25, r1
    225e:	09 f4       	brne	.+2      	; 0x2262 <LCD_u8WriteINT+0x16c>
    2260:	5c c0       	rjmp	.+184    	; 0x231a <LCD_u8WriteINT+0x224>
    2262:	8f c0       	rjmp	.+286    	; 0x2382 <LCD_u8WriteINT+0x28c>
    2264:	28 89       	ldd	r18, Y+16	; 0x10
    2266:	39 89       	ldd	r19, Y+17	; 0x11
    2268:	28 30       	cpi	r18, 0x08	; 8
    226a:	31 05       	cpc	r19, r1
    226c:	09 f4       	brne	.+2      	; 0x2270 <LCD_u8WriteINT+0x17a>
    226e:	6f c0       	rjmp	.+222    	; 0x234e <LCD_u8WriteINT+0x258>
    2270:	88 89       	ldd	r24, Y+16	; 0x10
    2272:	99 89       	ldd	r25, Y+17	; 0x11
    2274:	89 30       	cpi	r24, 0x09	; 9
    2276:	91 05       	cpc	r25, r1
    2278:	09 f4       	brne	.+2      	; 0x227c <LCD_u8WriteINT+0x186>
    227a:	76 c0       	rjmp	.+236    	; 0x2368 <LCD_u8WriteINT+0x272>
    227c:	82 c0       	rjmp	.+260    	; 0x2382 <LCD_u8WriteINT+0x28c>
			 * (2 - 1) + 6 = 7 in space 7 will be 5 //TENS
			 * (1 - 1) + 6 = 6 in Space 6 will be 5 //Hundreds
			 * and so on
			 */
			case 0:		//ZERO ASCII Code is 48
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    227e:	8f 81       	ldd	r24, Y+7	; 0x07
    2280:	81 50       	subi	r24, 0x01	; 1
    2282:	8f 83       	std	Y+7, r24	; 0x07
    2284:	9f 81       	ldd	r25, Y+7	; 0x07
    2286:	8e 85       	ldd	r24, Y+14	; 0x0e
    2288:	89 0f       	add	r24, r25
    228a:	6f 85       	ldd	r22, Y+15	; 0x0f
    228c:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
				LCD_voidWriteData(48);
    2290:	80 e3       	ldi	r24, 0x30	; 48
    2292:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>
    2296:	77 c0       	rjmp	.+238    	; 0x2386 <LCD_u8WriteINT+0x290>
				break;

			case 1:		//ONE ASCII Code is 49
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    2298:	8f 81       	ldd	r24, Y+7	; 0x07
    229a:	81 50       	subi	r24, 0x01	; 1
    229c:	8f 83       	std	Y+7, r24	; 0x07
    229e:	9f 81       	ldd	r25, Y+7	; 0x07
    22a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    22a2:	89 0f       	add	r24, r25
    22a4:	6f 85       	ldd	r22, Y+15	; 0x0f
    22a6:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
				LCD_voidWriteData(49);
    22aa:	81 e3       	ldi	r24, 0x31	; 49
    22ac:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>
    22b0:	6a c0       	rjmp	.+212    	; 0x2386 <LCD_u8WriteINT+0x290>
				break;

			case 2:		//TWO ASCII Code is 50
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    22b2:	8f 81       	ldd	r24, Y+7	; 0x07
    22b4:	81 50       	subi	r24, 0x01	; 1
    22b6:	8f 83       	std	Y+7, r24	; 0x07
    22b8:	9f 81       	ldd	r25, Y+7	; 0x07
    22ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    22bc:	89 0f       	add	r24, r25
    22be:	6f 85       	ldd	r22, Y+15	; 0x0f
    22c0:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
				LCD_voidWriteData(50);
    22c4:	82 e3       	ldi	r24, 0x32	; 50
    22c6:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>
    22ca:	5d c0       	rjmp	.+186    	; 0x2386 <LCD_u8WriteINT+0x290>
				break;

			case 3:		//THREE ASCII Code is 51
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    22cc:	8f 81       	ldd	r24, Y+7	; 0x07
    22ce:	81 50       	subi	r24, 0x01	; 1
    22d0:	8f 83       	std	Y+7, r24	; 0x07
    22d2:	9f 81       	ldd	r25, Y+7	; 0x07
    22d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    22d6:	89 0f       	add	r24, r25
    22d8:	6f 85       	ldd	r22, Y+15	; 0x0f
    22da:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
				LCD_voidWriteData(51);
    22de:	83 e3       	ldi	r24, 0x33	; 51
    22e0:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>
    22e4:	50 c0       	rjmp	.+160    	; 0x2386 <LCD_u8WriteINT+0x290>
				break;

			case 4:		//FOUR ASCII Code is 52
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    22e6:	8f 81       	ldd	r24, Y+7	; 0x07
    22e8:	81 50       	subi	r24, 0x01	; 1
    22ea:	8f 83       	std	Y+7, r24	; 0x07
    22ec:	9f 81       	ldd	r25, Y+7	; 0x07
    22ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    22f0:	89 0f       	add	r24, r25
    22f2:	6f 85       	ldd	r22, Y+15	; 0x0f
    22f4:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
				LCD_voidWriteData(52);
    22f8:	84 e3       	ldi	r24, 0x34	; 52
    22fa:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>
    22fe:	43 c0       	rjmp	.+134    	; 0x2386 <LCD_u8WriteINT+0x290>
				break;

			case 5:		//FIVE ASCII Code is 53
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    2300:	8f 81       	ldd	r24, Y+7	; 0x07
    2302:	81 50       	subi	r24, 0x01	; 1
    2304:	8f 83       	std	Y+7, r24	; 0x07
    2306:	9f 81       	ldd	r25, Y+7	; 0x07
    2308:	8e 85       	ldd	r24, Y+14	; 0x0e
    230a:	89 0f       	add	r24, r25
    230c:	6f 85       	ldd	r22, Y+15	; 0x0f
    230e:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
				LCD_voidWriteData(53);
    2312:	85 e3       	ldi	r24, 0x35	; 53
    2314:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>
    2318:	36 c0       	rjmp	.+108    	; 0x2386 <LCD_u8WriteINT+0x290>
				break;

			case 6:		//SIX ASCII Code is 54
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    231a:	8f 81       	ldd	r24, Y+7	; 0x07
    231c:	81 50       	subi	r24, 0x01	; 1
    231e:	8f 83       	std	Y+7, r24	; 0x07
    2320:	9f 81       	ldd	r25, Y+7	; 0x07
    2322:	8e 85       	ldd	r24, Y+14	; 0x0e
    2324:	89 0f       	add	r24, r25
    2326:	6f 85       	ldd	r22, Y+15	; 0x0f
    2328:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
				LCD_voidWriteData(54);
    232c:	86 e3       	ldi	r24, 0x36	; 54
    232e:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>
    2332:	29 c0       	rjmp	.+82     	; 0x2386 <LCD_u8WriteINT+0x290>
				break;

			case 7:		//SEVEN ASCII Code is 55
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    2334:	8f 81       	ldd	r24, Y+7	; 0x07
    2336:	81 50       	subi	r24, 0x01	; 1
    2338:	8f 83       	std	Y+7, r24	; 0x07
    233a:	9f 81       	ldd	r25, Y+7	; 0x07
    233c:	8e 85       	ldd	r24, Y+14	; 0x0e
    233e:	89 0f       	add	r24, r25
    2340:	6f 85       	ldd	r22, Y+15	; 0x0f
    2342:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
				LCD_voidWriteData(55);
    2346:	87 e3       	ldi	r24, 0x37	; 55
    2348:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>
    234c:	1c c0       	rjmp	.+56     	; 0x2386 <LCD_u8WriteINT+0x290>
				break;

			case 8:		//EIGHT ASCII Code is 56
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    234e:	8f 81       	ldd	r24, Y+7	; 0x07
    2350:	81 50       	subi	r24, 0x01	; 1
    2352:	8f 83       	std	Y+7, r24	; 0x07
    2354:	9f 81       	ldd	r25, Y+7	; 0x07
    2356:	8e 85       	ldd	r24, Y+14	; 0x0e
    2358:	89 0f       	add	r24, r25
    235a:	6f 85       	ldd	r22, Y+15	; 0x0f
    235c:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
				LCD_voidWriteData(56);
    2360:	88 e3       	ldi	r24, 0x38	; 56
    2362:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>
    2366:	0f c0       	rjmp	.+30     	; 0x2386 <LCD_u8WriteINT+0x290>
				break;

			case 9:		//NINE ASCII Code is 57
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    2368:	8f 81       	ldd	r24, Y+7	; 0x07
    236a:	81 50       	subi	r24, 0x01	; 1
    236c:	8f 83       	std	Y+7, r24	; 0x07
    236e:	9f 81       	ldd	r25, Y+7	; 0x07
    2370:	8e 85       	ldd	r24, Y+14	; 0x0e
    2372:	89 0f       	add	r24, r25
    2374:	6f 85       	ldd	r22, Y+15	; 0x0f
    2376:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
				LCD_voidWriteData(57);
    237a:	89 e3       	ldi	r24, 0x39	; 57
    237c:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <LCD_u8WriteINT+0x290>
				break;

			default:
				Local_u8Error = 1;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	89 87       	std	Y+9, r24	; 0x09
				break;
			}

			/*Dividing The Temp by 10 to get the Tens, Hundreds ... in every Iteration*/
			Local_u32Temp /= 10;
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	ab 81       	ldd	r26, Y+3	; 0x03
    238c:	bc 81       	ldd	r27, Y+4	; 0x04
    238e:	2a e0       	ldi	r18, 0x0A	; 10
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e0       	ldi	r20, 0x00	; 0
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	bc 01       	movw	r22, r24
    2398:	cd 01       	movw	r24, r26
    239a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__udivmodsi4>
    239e:	da 01       	movw	r26, r20
    23a0:	c9 01       	movw	r24, r18
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	9a 83       	std	Y+2, r25	; 0x02
    23a6:	ab 83       	std	Y+3, r26	; 0x03
    23a8:	bc 83       	std	Y+4, r27	; 0x04

		/*Now we have the Integer number and the Number of Digits so we will loop and in each loop
		 * we will make a Reminder from ones, tens and so on till our reminder be Zero
		 * and loop to print this number with the position on LCD
		 */
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Local_u8CopyNOD; Local_u8LoopCtr++)
    23aa:	88 85       	ldd	r24, Y+8	; 0x08
    23ac:	8f 5f       	subi	r24, 0xFF	; 255
    23ae:	88 87       	std	Y+8, r24	; 0x08
    23b0:	98 85       	ldd	r25, Y+8	; 0x08
    23b2:	8e 81       	ldd	r24, Y+6	; 0x06
    23b4:	98 17       	cp	r25, r24
    23b6:	08 f4       	brcc	.+2      	; 0x23ba <LCD_u8WriteINT+0x2c4>
    23b8:	01 cf       	rjmp	.-510    	; 0x21bc <LCD_u8WriteINT+0xc6>
			/*Dividing The Temp by 10 to get the Tens, Hundreds ... in every Iteration*/
			Local_u32Temp /= 10;
		}
	}

	return Local_u8Error;
    23ba:	89 85       	ldd	r24, Y+9	; 0x09
}
    23bc:	61 96       	adiw	r28, 0x11	; 17
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	f8 94       	cli
    23c2:	de bf       	out	0x3e, r29	; 62
    23c4:	0f be       	out	0x3f, r0	; 63
    23c6:	cd bf       	out	0x3d, r28	; 61
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <LCD_u8StringScroll>:
 * Input		: The String, String size, Time in between, Left or Right, First Line or Second one
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8StringScroll(u8 *Copy_u8String, u8 Copy_u8StrSize, u16 Copy_u16Time, u8 Copy_u8RorL, u8 Copy_u8YPos)
{
    23ce:	0f 93       	push	r16
    23d0:	1f 93       	push	r17
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
    23da:	c0 56       	subi	r28, 0x60	; 96
    23dc:	d0 40       	sbci	r29, 0x00	; 0
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	fe 01       	movw	r30, r28
    23ea:	e6 5a       	subi	r30, 0xA6	; 166
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	91 83       	std	Z+1, r25	; 0x01
    23f0:	80 83       	st	Z, r24
    23f2:	fe 01       	movw	r30, r28
    23f4:	e4 5a       	subi	r30, 0xA4	; 164
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	60 83       	st	Z, r22
    23fa:	fe 01       	movw	r30, r28
    23fc:	e3 5a       	subi	r30, 0xA3	; 163
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	51 83       	std	Z+1, r21	; 0x01
    2402:	40 83       	st	Z, r20
    2404:	fe 01       	movw	r30, r28
    2406:	e1 5a       	subi	r30, 0xA1	; 161
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	20 83       	st	Z, r18
    240c:	fe 01       	movw	r30, r28
    240e:	e0 5a       	subi	r30, 0xA0	; 160
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	00 83       	st	Z, r16
	/*Local Variables*/
	u8 Local_u8Error = 0;
    2414:	fe 01       	movw	r30, r28
    2416:	e7 5a       	subi	r30, 0xA7	; 167
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	10 82       	st	Z, r1
	u8 Local_u8Move = 0, Local_u8Move2 = 0, Local_u8Move3 = 0;
    241c:	fe 01       	movw	r30, r28
    241e:	e8 5a       	subi	r30, 0xA8	; 168
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	10 82       	st	Z, r1
    2424:	fe 01       	movw	r30, r28
    2426:	e9 5a       	subi	r30, 0xA9	; 169
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	10 82       	st	Z, r1
    242c:	fe 01       	movw	r30, r28
    242e:	ea 5a       	subi	r30, 0xAA	; 170
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	10 82       	st	Z, r1
	u8 Copy_u8StringSize = Copy_u8StrSize;
    2434:	de 01       	movw	r26, r28
    2436:	ab 5a       	subi	r26, 0xAB	; 171
    2438:	bf 4f       	sbci	r27, 0xFF	; 255
    243a:	fe 01       	movw	r30, r28
    243c:	e4 5a       	subi	r30, 0xA4	; 164
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 81       	ld	r24, Z
    2442:	8c 93       	st	X, r24

	/* Check for String Size as the maximum is 20 Char
	 * Check for the Y Position 0 or 1
	 * Check for the Scrolling Direction Left Or Right
	 */
	if(Copy_u8StrSize > LCD_MAX_CHAR || Copy_u8YPos > 1 || Copy_u8RorL > 1)
    2444:	fe 01       	movw	r30, r28
    2446:	e4 5a       	subi	r30, 0xA4	; 164
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	80 81       	ld	r24, Z
    244c:	85 31       	cpi	r24, 0x15	; 21
    244e:	60 f4       	brcc	.+24     	; 0x2468 <LCD_u8StringScroll+0x9a>
    2450:	fe 01       	movw	r30, r28
    2452:	e0 5a       	subi	r30, 0xA0	; 160
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	80 81       	ld	r24, Z
    2458:	82 30       	cpi	r24, 0x02	; 2
    245a:	30 f4       	brcc	.+12     	; 0x2468 <LCD_u8StringScroll+0x9a>
    245c:	fe 01       	movw	r30, r28
    245e:	e1 5a       	subi	r30, 0xA1	; 161
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	80 81       	ld	r24, Z
    2464:	82 30       	cpi	r24, 0x02	; 2
    2466:	30 f0       	brcs	.+12     	; 0x2474 <LCD_u8StringScroll+0xa6>
	{
		Local_u8Error = 1;
    2468:	fe 01       	movw	r30, r28
    246a:	e7 5a       	subi	r30, 0xA7	; 167
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	80 83       	st	Z, r24
    2472:	d9 c5       	rjmp	.+2994   	; 0x3026 <LCD_u8StringScroll+0xc58>
	}

	else
	{
		/*This if Scrolling is to Right in Line 1*/
		if(Copy_u8RorL == LCD_SCROLL_TO_RIGHT && Copy_u8YPos == 0)
    2474:	fe 01       	movw	r30, r28
    2476:	e1 5a       	subi	r30, 0xA1	; 161
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	80 81       	ld	r24, Z
    247c:	81 30       	cpi	r24, 0x01	; 1
    247e:	09 f0       	breq	.+2      	; 0x2482 <LCD_u8StringScroll+0xb4>
    2480:	e9 c1       	rjmp	.+978    	; 0x2854 <LCD_u8StringScroll+0x486>
    2482:	fe 01       	movw	r30, r28
    2484:	e0 5a       	subi	r30, 0xA0	; 160
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	80 81       	ld	r24, Z
    248a:	88 23       	and	r24, r24
    248c:	09 f0       	breq	.+2      	; 0x2490 <LCD_u8StringScroll+0xc2>
    248e:	e2 c1       	rjmp	.+964    	; 0x2854 <LCD_u8StringScroll+0x486>
		{
			/*Make the Move2 = Over flow of the first lone - string size*/
			Local_u8Move2 = LCD_OV_LINE_1 - (Copy_u8StrSize);
    2490:	de 01       	movw	r26, r28
    2492:	a9 5a       	subi	r26, 0xA9	; 169
    2494:	bf 4f       	sbci	r27, 0xFF	; 255
    2496:	fe 01       	movw	r30, r28
    2498:	e4 5a       	subi	r30, 0xA4	; 164
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	97 e6       	ldi	r25, 0x67	; 103
    249e:	80 81       	ld	r24, Z
    24a0:	29 2f       	mov	r18, r25
    24a2:	28 1b       	sub	r18, r24
    24a4:	82 2f       	mov	r24, r18
    24a6:	8c 93       	st	X, r24

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move <= LCD_MAX_SCROLL_LINE; Local_u8Move++)
    24a8:	fe 01       	movw	r30, r28
    24aa:	e8 5a       	subi	r30, 0xA8	; 168
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	10 82       	st	Z, r1
    24b0:	c9 c1       	rjmp	.+914    	; 0x2844 <LCD_u8StringScroll+0x476>
			{
				/*if string bigger than 16*/
				if(Local_u8Move >= (LCD_LINE_NB_OF_DIGITS - Copy_u8StrSize))
    24b2:	fe 01       	movw	r30, r28
    24b4:	e8 5a       	subi	r30, 0xA8	; 168
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	80 81       	ld	r24, Z
    24ba:	48 2f       	mov	r20, r24
    24bc:	50 e0       	ldi	r21, 0x00	; 0
    24be:	fe 01       	movw	r30, r28
    24c0:	e4 5a       	subi	r30, 0xA4	; 164
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	80 81       	ld	r24, Z
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	80 e1       	ldi	r24, 0x10	; 16
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	82 1b       	sub	r24, r18
    24d0:	93 0b       	sbc	r25, r19
    24d2:	48 17       	cp	r20, r24
    24d4:	59 07       	cpc	r21, r25
    24d6:	0c f4       	brge	.+2      	; 0x24da <LCD_u8StringScroll+0x10c>
    24d8:	06 c1       	rjmp	.+524    	; 0x26e6 <LCD_u8StringScroll+0x318>
				{
					/*first print the string in the shown position in 16*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    24da:	fe 01       	movw	r30, r28
    24dc:	e8 5a       	subi	r30, 0xA8	; 168
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	de 01       	movw	r26, r28
    24e2:	a0 5a       	subi	r26, 0xA0	; 160
    24e4:	bf 4f       	sbci	r27, 0xFF	; 255
    24e6:	80 81       	ld	r24, Z
    24e8:	6c 91       	ld	r22, X
    24ea:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    24ee:	fe 01       	movw	r30, r28
    24f0:	e6 5a       	subi	r30, 0xA6	; 166
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	80 81       	ld	r24, Z
    24f6:	91 81       	ldd	r25, Z+1	; 0x01
    24f8:	fe 01       	movw	r30, r28
    24fa:	e4 5a       	subi	r30, 0xA4	; 164
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	60 81       	ld	r22, Z
    2500:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_u8WriteString>

					/*print the string in un-shown position */
					LCD_u8GoToXY(Local_u8Move2, Copy_u8YPos);
    2504:	fe 01       	movw	r30, r28
    2506:	e9 5a       	subi	r30, 0xA9	; 169
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	de 01       	movw	r26, r28
    250c:	a0 5a       	subi	r26, 0xA0	; 160
    250e:	bf 4f       	sbci	r27, 0xFF	; 255
    2510:	80 81       	ld	r24, Z
    2512:	6c 91       	ld	r22, X
    2514:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2518:	fe 01       	movw	r30, r28
    251a:	e6 5a       	subi	r30, 0xA6	; 166
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	80 81       	ld	r24, Z
    2520:	91 81       	ldd	r25, Z+1	; 0x01
    2522:	fe 01       	movw	r30, r28
    2524:	e4 5a       	subi	r30, 0xA4	; 164
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	60 81       	ld	r22, Z
    252a:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_u8WriteString>

//					LCD_u8WriteINT(Local_u8Move, 10, 1);
//					LCD_u8WriteINT(Copy_u8StrSize, 5, 1);

					/*delay with the given time*/
					_delay_ms(Copy_u16Time);
    252e:	fe 01       	movw	r30, r28
    2530:	e3 5a       	subi	r30, 0xA3	; 163
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	80 81       	ld	r24, Z
    2536:	91 81       	ldd	r25, Z+1	; 0x01
    2538:	cc 01       	movw	r24, r24
    253a:	a0 e0       	ldi	r26, 0x00	; 0
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	bc 01       	movw	r22, r24
    2540:	cd 01       	movw	r24, r26
    2542:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	fe 01       	movw	r30, r28
    254c:	ef 5a       	subi	r30, 0xAF	; 175
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	80 83       	st	Z, r24
    2552:	91 83       	std	Z+1, r25	; 0x01
    2554:	a2 83       	std	Z+2, r26	; 0x02
    2556:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2558:	8e 01       	movw	r16, r28
    255a:	03 5b       	subi	r16, 0xB3	; 179
    255c:	1f 4f       	sbci	r17, 0xFF	; 255
    255e:	fe 01       	movw	r30, r28
    2560:	ef 5a       	subi	r30, 0xAF	; 175
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	60 81       	ld	r22, Z
    2566:	71 81       	ldd	r23, Z+1	; 0x01
    2568:	82 81       	ldd	r24, Z+2	; 0x02
    256a:	93 81       	ldd	r25, Z+3	; 0x03
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	4a ef       	ldi	r20, 0xFA	; 250
    2572:	54 e4       	ldi	r21, 0x44	; 68
    2574:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	f8 01       	movw	r30, r16
    257e:	80 83       	st	Z, r24
    2580:	91 83       	std	Z+1, r25	; 0x01
    2582:	a2 83       	std	Z+2, r26	; 0x02
    2584:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2586:	fe 01       	movw	r30, r28
    2588:	e3 5b       	subi	r30, 0xB3	; 179
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	60 81       	ld	r22, Z
    258e:	71 81       	ldd	r23, Z+1	; 0x01
    2590:	82 81       	ldd	r24, Z+2	; 0x02
    2592:	93 81       	ldd	r25, Z+3	; 0x03
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e8       	ldi	r20, 0x80	; 128
    259a:	5f e3       	ldi	r21, 0x3F	; 63
    259c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25a0:	88 23       	and	r24, r24
    25a2:	44 f4       	brge	.+16     	; 0x25b4 <LCD_u8StringScroll+0x1e6>
		__ticks = 1;
    25a4:	fe 01       	movw	r30, r28
    25a6:	e5 5b       	subi	r30, 0xB5	; 181
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	91 83       	std	Z+1, r25	; 0x01
    25b0:	80 83       	st	Z, r24
    25b2:	64 c0       	rjmp	.+200    	; 0x267c <LCD_u8StringScroll+0x2ae>
	else if (__tmp > 65535)
    25b4:	fe 01       	movw	r30, r28
    25b6:	e3 5b       	subi	r30, 0xB3	; 179
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	60 81       	ld	r22, Z
    25bc:	71 81       	ldd	r23, Z+1	; 0x01
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	3f ef       	ldi	r19, 0xFF	; 255
    25c6:	4f e7       	ldi	r20, 0x7F	; 127
    25c8:	57 e4       	ldi	r21, 0x47	; 71
    25ca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25ce:	18 16       	cp	r1, r24
    25d0:	0c f0       	brlt	.+2      	; 0x25d4 <LCD_u8StringScroll+0x206>
    25d2:	43 c0       	rjmp	.+134    	; 0x265a <LCD_u8StringScroll+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d4:	fe 01       	movw	r30, r28
    25d6:	ef 5a       	subi	r30, 0xAF	; 175
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	60 81       	ld	r22, Z
    25dc:	71 81       	ldd	r23, Z+1	; 0x01
    25de:	82 81       	ldd	r24, Z+2	; 0x02
    25e0:	93 81       	ldd	r25, Z+3	; 0x03
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e2       	ldi	r20, 0x20	; 32
    25e8:	51 e4       	ldi	r21, 0x41	; 65
    25ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	8e 01       	movw	r16, r28
    25f4:	05 5b       	subi	r16, 0xB5	; 181
    25f6:	1f 4f       	sbci	r17, 0xFF	; 255
    25f8:	bc 01       	movw	r22, r24
    25fa:	cd 01       	movw	r24, r26
    25fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	f8 01       	movw	r30, r16
    2606:	91 83       	std	Z+1, r25	; 0x01
    2608:	80 83       	st	Z, r24
    260a:	1f c0       	rjmp	.+62     	; 0x264a <LCD_u8StringScroll+0x27c>
    260c:	fe 01       	movw	r30, r28
    260e:	e7 5b       	subi	r30, 0xB7	; 183
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	88 ec       	ldi	r24, 0xC8	; 200
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	91 83       	std	Z+1, r25	; 0x01
    2618:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    261a:	fe 01       	movw	r30, r28
    261c:	e7 5b       	subi	r30, 0xB7	; 183
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	80 81       	ld	r24, Z
    2622:	91 81       	ldd	r25, Z+1	; 0x01
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <LCD_u8StringScroll+0x256>
    2628:	fe 01       	movw	r30, r28
    262a:	e7 5b       	subi	r30, 0xB7	; 183
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	91 83       	std	Z+1, r25	; 0x01
    2630:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2632:	de 01       	movw	r26, r28
    2634:	a5 5b       	subi	r26, 0xB5	; 181
    2636:	bf 4f       	sbci	r27, 0xFF	; 255
    2638:	fe 01       	movw	r30, r28
    263a:	e5 5b       	subi	r30, 0xB5	; 181
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	80 81       	ld	r24, Z
    2640:	91 81       	ldd	r25, Z+1	; 0x01
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	11 96       	adiw	r26, 0x01	; 1
    2646:	9c 93       	st	X, r25
    2648:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264a:	fe 01       	movw	r30, r28
    264c:	e5 5b       	subi	r30, 0xB5	; 181
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	d1 f6       	brne	.-76     	; 0x260c <LCD_u8StringScroll+0x23e>
    2658:	27 c0       	rjmp	.+78     	; 0x26a8 <LCD_u8StringScroll+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265a:	8e 01       	movw	r16, r28
    265c:	05 5b       	subi	r16, 0xB5	; 181
    265e:	1f 4f       	sbci	r17, 0xFF	; 255
    2660:	fe 01       	movw	r30, r28
    2662:	e3 5b       	subi	r30, 0xB3	; 179
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	60 81       	ld	r22, Z
    2668:	71 81       	ldd	r23, Z+1	; 0x01
    266a:	82 81       	ldd	r24, Z+2	; 0x02
    266c:	93 81       	ldd	r25, Z+3	; 0x03
    266e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	f8 01       	movw	r30, r16
    2678:	91 83       	std	Z+1, r25	; 0x01
    267a:	80 83       	st	Z, r24
    267c:	de 01       	movw	r26, r28
    267e:	a9 5b       	subi	r26, 0xB9	; 185
    2680:	bf 4f       	sbci	r27, 0xFF	; 255
    2682:	fe 01       	movw	r30, r28
    2684:	e5 5b       	subi	r30, 0xB5	; 181
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	80 81       	ld	r24, Z
    268a:	91 81       	ldd	r25, Z+1	; 0x01
    268c:	8d 93       	st	X+, r24
    268e:	9c 93       	st	X, r25
    2690:	fe 01       	movw	r30, r28
    2692:	e9 5b       	subi	r30, 0xB9	; 185
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	80 81       	ld	r24, Z
    2698:	91 81       	ldd	r25, Z+1	; 0x01
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	f1 f7       	brne	.-4      	; 0x269a <LCD_u8StringScroll+0x2cc>
    269e:	fe 01       	movw	r30, r28
    26a0:	e9 5b       	subi	r30, 0xB9	; 185
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	91 83       	std	Z+1, r25	; 0x01
    26a6:	80 83       	st	Z, r24

					/*Clear the LCD*/
					LCD_voidClearLCD();
    26a8:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_voidClearLCD>

					/*increment Move 2*/
					Local_u8Move2++;
    26ac:	de 01       	movw	r26, r28
    26ae:	a9 5a       	subi	r26, 0xA9	; 169
    26b0:	bf 4f       	sbci	r27, 0xFF	; 255
    26b2:	fe 01       	movw	r30, r28
    26b4:	e9 5a       	subi	r30, 0xA9	; 169
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	80 81       	ld	r24, Z
    26ba:	8f 5f       	subi	r24, 0xFF	; 255
    26bc:	8c 93       	st	X, r24

					/*if Move 2 = 16 give it its initial value and break the loop*/
					if(Local_u8Move2 == LCD_OV_LINE_1)
    26be:	fe 01       	movw	r30, r28
    26c0:	e9 5a       	subi	r30, 0xA9	; 169
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	80 81       	ld	r24, Z
    26c6:	87 36       	cpi	r24, 0x67	; 103
    26c8:	09 f0       	breq	.+2      	; 0x26cc <LCD_u8StringScroll+0x2fe>
    26ca:	b3 c0       	rjmp	.+358    	; 0x2832 <LCD_u8StringScroll+0x464>
					{
						Local_u8Move2 = LCD_OV_LINE_1 - (Copy_u8StrSize);
    26cc:	de 01       	movw	r26, r28
    26ce:	a9 5a       	subi	r26, 0xA9	; 169
    26d0:	bf 4f       	sbci	r27, 0xFF	; 255
    26d2:	fe 01       	movw	r30, r28
    26d4:	e4 5a       	subi	r30, 0xA4	; 164
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	97 e6       	ldi	r25, 0x67	; 103
    26da:	80 81       	ld	r24, Z
    26dc:	f9 2f       	mov	r31, r25
    26de:	f8 1b       	sub	r31, r24
    26e0:	8f 2f       	mov	r24, r31
    26e2:	8c 93       	st	X, r24
    26e4:	a0 c4       	rjmp	.+2368   	; 0x3026 <LCD_u8StringScroll+0xc58>

				/*else mean string < 16*/
				else
				{
					/*Print the string*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    26e6:	fe 01       	movw	r30, r28
    26e8:	e8 5a       	subi	r30, 0xA8	; 168
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	de 01       	movw	r26, r28
    26ee:	a0 5a       	subi	r26, 0xA0	; 160
    26f0:	bf 4f       	sbci	r27, 0xFF	; 255
    26f2:	80 81       	ld	r24, Z
    26f4:	6c 91       	ld	r22, X
    26f6:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    26fa:	fe 01       	movw	r30, r28
    26fc:	e6 5a       	subi	r30, 0xA6	; 166
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	80 81       	ld	r24, Z
    2702:	91 81       	ldd	r25, Z+1	; 0x01
    2704:	fe 01       	movw	r30, r28
    2706:	e4 5a       	subi	r30, 0xA4	; 164
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	60 81       	ld	r22, Z
    270c:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_u8WriteString>

//					LCD_u8WriteINT(Local_u8Move, 10, 1);
//					LCD_u8WriteINT(Copy_u8StrSize, 5, 1);

					/*Delay the given time*/
					_delay_ms(Copy_u16Time);
    2710:	fe 01       	movw	r30, r28
    2712:	e3 5a       	subi	r30, 0xA3	; 163
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	80 81       	ld	r24, Z
    2718:	91 81       	ldd	r25, Z+1	; 0x01
    271a:	cc 01       	movw	r24, r24
    271c:	a0 e0       	ldi	r26, 0x00	; 0
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	bc 01       	movw	r22, r24
    2722:	cd 01       	movw	r24, r26
    2724:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	fe 01       	movw	r30, r28
    272e:	ed 5b       	subi	r30, 0xBD	; 189
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	80 83       	st	Z, r24
    2734:	91 83       	std	Z+1, r25	; 0x01
    2736:	a2 83       	std	Z+2, r26	; 0x02
    2738:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273a:	8e 01       	movw	r16, r28
    273c:	01 5c       	subi	r16, 0xC1	; 193
    273e:	1f 4f       	sbci	r17, 0xFF	; 255
    2740:	fe 01       	movw	r30, r28
    2742:	ed 5b       	subi	r30, 0xBD	; 189
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	60 81       	ld	r22, Z
    2748:	71 81       	ldd	r23, Z+1	; 0x01
    274a:	82 81       	ldd	r24, Z+2	; 0x02
    274c:	93 81       	ldd	r25, Z+3	; 0x03
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	4a ef       	ldi	r20, 0xFA	; 250
    2754:	54 e4       	ldi	r21, 0x44	; 68
    2756:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	f8 01       	movw	r30, r16
    2760:	80 83       	st	Z, r24
    2762:	91 83       	std	Z+1, r25	; 0x01
    2764:	a2 83       	std	Z+2, r26	; 0x02
    2766:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2768:	fe 01       	movw	r30, r28
    276a:	ff 96       	adiw	r30, 0x3f	; 63
    276c:	60 81       	ld	r22, Z
    276e:	71 81       	ldd	r23, Z+1	; 0x01
    2770:	82 81       	ldd	r24, Z+2	; 0x02
    2772:	93 81       	ldd	r25, Z+3	; 0x03
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e8       	ldi	r20, 0x80	; 128
    277a:	5f e3       	ldi	r21, 0x3F	; 63
    277c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2780:	88 23       	and	r24, r24
    2782:	2c f4       	brge	.+10     	; 0x278e <LCD_u8StringScroll+0x3c0>
		__ticks = 1;
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	9e af       	std	Y+62, r25	; 0x3e
    278a:	8d af       	std	Y+61, r24	; 0x3d
    278c:	46 c0       	rjmp	.+140    	; 0x281a <LCD_u8StringScroll+0x44c>
	else if (__tmp > 65535)
    278e:	fe 01       	movw	r30, r28
    2790:	ff 96       	adiw	r30, 0x3f	; 63
    2792:	60 81       	ld	r22, Z
    2794:	71 81       	ldd	r23, Z+1	; 0x01
    2796:	82 81       	ldd	r24, Z+2	; 0x02
    2798:	93 81       	ldd	r25, Z+3	; 0x03
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	3f ef       	ldi	r19, 0xFF	; 255
    279e:	4f e7       	ldi	r20, 0x7F	; 127
    27a0:	57 e4       	ldi	r21, 0x47	; 71
    27a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27a6:	18 16       	cp	r1, r24
    27a8:	64 f5       	brge	.+88     	; 0x2802 <LCD_u8StringScroll+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27aa:	fe 01       	movw	r30, r28
    27ac:	ed 5b       	subi	r30, 0xBD	; 189
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	60 81       	ld	r22, Z
    27b2:	71 81       	ldd	r23, Z+1	; 0x01
    27b4:	82 81       	ldd	r24, Z+2	; 0x02
    27b6:	93 81       	ldd	r25, Z+3	; 0x03
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e2       	ldi	r20, 0x20	; 32
    27be:	51 e4       	ldi	r21, 0x41	; 65
    27c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	bc 01       	movw	r22, r24
    27ca:	cd 01       	movw	r24, r26
    27cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9e af       	std	Y+62, r25	; 0x3e
    27d6:	8d af       	std	Y+61, r24	; 0x3d
    27d8:	0f c0       	rjmp	.+30     	; 0x27f8 <LCD_u8StringScroll+0x42a>
    27da:	88 ec       	ldi	r24, 0xC8	; 200
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	9c af       	std	Y+60, r25	; 0x3c
    27e0:	8b af       	std	Y+59, r24	; 0x3b
    27e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    27e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <LCD_u8StringScroll+0x418>
    27ea:	9c af       	std	Y+60, r25	; 0x3c
    27ec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    27f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	9e af       	std	Y+62, r25	; 0x3e
    27f6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    27fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	69 f7       	brne	.-38     	; 0x27da <LCD_u8StringScroll+0x40c>
    2800:	16 c0       	rjmp	.+44     	; 0x282e <LCD_u8StringScroll+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2802:	fe 01       	movw	r30, r28
    2804:	ff 96       	adiw	r30, 0x3f	; 63
    2806:	60 81       	ld	r22, Z
    2808:	71 81       	ldd	r23, Z+1	; 0x01
    280a:	82 81       	ldd	r24, Z+2	; 0x02
    280c:	93 81       	ldd	r25, Z+3	; 0x03
    280e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	9e af       	std	Y+62, r25	; 0x3e
    2818:	8d af       	std	Y+61, r24	; 0x3d
    281a:	8d ad       	ldd	r24, Y+61	; 0x3d
    281c:	9e ad       	ldd	r25, Y+62	; 0x3e
    281e:	9a af       	std	Y+58, r25	; 0x3a
    2820:	89 af       	std	Y+57, r24	; 0x39
    2822:	89 ad       	ldd	r24, Y+57	; 0x39
    2824:	9a ad       	ldd	r25, Y+58	; 0x3a
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	f1 f7       	brne	.-4      	; 0x2826 <LCD_u8StringScroll+0x458>
    282a:	9a af       	std	Y+58, r25	; 0x3a
    282c:	89 af       	std	Y+57, r24	; 0x39

					/*Clear LCD*/
					LCD_voidClearLCD();
    282e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_voidClearLCD>
		{
			/*Make the Move2 = Over flow of the first lone - string size*/
			Local_u8Move2 = LCD_OV_LINE_1 - (Copy_u8StrSize);

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move <= LCD_MAX_SCROLL_LINE; Local_u8Move++)
    2832:	de 01       	movw	r26, r28
    2834:	a8 5a       	subi	r26, 0xA8	; 168
    2836:	bf 4f       	sbci	r27, 0xFF	; 255
    2838:	fe 01       	movw	r30, r28
    283a:	e8 5a       	subi	r30, 0xA8	; 168
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	80 81       	ld	r24, Z
    2840:	8f 5f       	subi	r24, 0xFF	; 255
    2842:	8c 93       	st	X, r24
    2844:	fe 01       	movw	r30, r28
    2846:	e8 5a       	subi	r30, 0xA8	; 168
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	80 81       	ld	r24, Z
    284c:	8a 32       	cpi	r24, 0x2A	; 42
    284e:	08 f4       	brcc	.+2      	; 0x2852 <LCD_u8StringScroll+0x484>
    2850:	30 ce       	rjmp	.-928    	; 0x24b2 <LCD_u8StringScroll+0xe4>
    2852:	e9 c3       	rjmp	.+2002   	; 0x3026 <LCD_u8StringScroll+0xc58>
				}
			}
		}

		/*else mean scroll to left in Line 1*/
		else if(Copy_u8RorL == LCD_SCROLL_TO_LEFT && Copy_u8YPos == 0)
    2854:	fe 01       	movw	r30, r28
    2856:	e1 5a       	subi	r30, 0xA1	; 161
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	80 81       	ld	r24, Z
    285c:	88 23       	and	r24, r24
    285e:	09 f0       	breq	.+2      	; 0x2862 <LCD_u8StringScroll+0x494>
    2860:	20 c1       	rjmp	.+576    	; 0x2aa2 <LCD_u8StringScroll+0x6d4>
    2862:	fe 01       	movw	r30, r28
    2864:	e0 5a       	subi	r30, 0xA0	; 160
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	80 81       	ld	r24, Z
    286a:	88 23       	and	r24, r24
    286c:	09 f0       	breq	.+2      	; 0x2870 <LCD_u8StringScroll+0x4a2>
    286e:	19 c1       	rjmp	.+562    	; 0x2aa2 <LCD_u8StringScroll+0x6d4>
		{
			/*Move2 = over flow + string size + 1 to make space between the last and first char in string */
			Local_u8Move2 = LCD_OV_LINE_1 + (Copy_u8StrSize + 1);
    2870:	de 01       	movw	r26, r28
    2872:	a9 5a       	subi	r26, 0xA9	; 169
    2874:	bf 4f       	sbci	r27, 0xFF	; 255
    2876:	fe 01       	movw	r30, r28
    2878:	e4 5a       	subi	r30, 0xA4	; 164
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	80 81       	ld	r24, Z
    287e:	88 59       	subi	r24, 0x98	; 152
    2880:	8c 93       	st	X, r24

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    2882:	fe 01       	movw	r30, r28
    2884:	ea 5a       	subi	r30, 0xAA	; 170
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	80 e1       	ldi	r24, 0x10	; 16
    288a:	80 83       	st	Z, r24

			/*make the Move = 104 (Over Flow + 1 (First char on LCD)) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_1 + 1); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    288c:	fe 01       	movw	r30, r28
    288e:	e8 5a       	subi	r30, 0xA8	; 168
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	88 e6       	ldi	r24, 0x68	; 104
    2894:	80 83       	st	Z, r24
    2896:	f9 c0       	rjmp	.+498    	; 0x2a8a <LCD_u8StringScroll+0x6bc>
			{
				/*Print LCD with the Move as X position*/
				LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2898:	fe 01       	movw	r30, r28
    289a:	e8 5a       	subi	r30, 0xA8	; 168
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	de 01       	movw	r26, r28
    28a0:	a0 5a       	subi	r26, 0xA0	; 160
    28a2:	bf 4f       	sbci	r27, 0xFF	; 255
    28a4:	80 81       	ld	r24, Z
    28a6:	6c 91       	ld	r22, X
    28a8:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
				LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    28ac:	fe 01       	movw	r30, r28
    28ae:	e6 5a       	subi	r30, 0xA6	; 166
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	80 81       	ld	r24, Z
    28b4:	91 81       	ldd	r25, Z+1	; 0x01
    28b6:	fe 01       	movw	r30, r28
    28b8:	e4 5a       	subi	r30, 0xA4	; 164
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	60 81       	ld	r22, Z
    28be:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_u8WriteString>

				/*if String size less than 16*/
				if(Copy_u8StrSize < LCD_LINE_NB_OF_DIGITS)
    28c2:	fe 01       	movw	r30, r28
    28c4:	e4 5a       	subi	r30, 0xA4	; 164
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	80 81       	ld	r24, Z
    28ca:	80 31       	cpi	r24, 0x10	; 16
    28cc:	f8 f4       	brcc	.+62     	; 0x290c <LCD_u8StringScroll+0x53e>
				{
					/*print with move 3 as X position*/
					LCD_u8GoToXY(Local_u8Move3 , Copy_u8YPos);
    28ce:	fe 01       	movw	r30, r28
    28d0:	ea 5a       	subi	r30, 0xAA	; 170
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	de 01       	movw	r26, r28
    28d6:	a0 5a       	subi	r26, 0xA0	; 160
    28d8:	bf 4f       	sbci	r27, 0xFF	; 255
    28da:	80 81       	ld	r24, Z
    28dc:	6c 91       	ld	r22, X
    28de:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    28e2:	fe 01       	movw	r30, r28
    28e4:	e6 5a       	subi	r30, 0xA6	; 166
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	80 81       	ld	r24, Z
    28ea:	91 81       	ldd	r25, Z+1	; 0x01
    28ec:	fe 01       	movw	r30, r28
    28ee:	e4 5a       	subi	r30, 0xA4	; 164
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	60 81       	ld	r22, Z
    28f4:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_u8WriteString>

					/*De-crement move 3*/
					Local_u8Move3--;
    28f8:	de 01       	movw	r26, r28
    28fa:	aa 5a       	subi	r26, 0xAA	; 170
    28fc:	bf 4f       	sbci	r27, 0xFF	; 255
    28fe:	fe 01       	movw	r30, r28
    2900:	ea 5a       	subi	r30, 0xAA	; 170
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	80 81       	ld	r24, Z
    2906:	81 50       	subi	r24, 0x01	; 1
    2908:	8c 93       	st	X, r24
    290a:	1e c0       	rjmp	.+60     	; 0x2948 <LCD_u8StringScroll+0x57a>

				/*else mean string > 16*/
				else
				{
					/*print with the copy of string size as X position*/
					LCD_u8GoToXY(Copy_u8StringSize, Copy_u8YPos);
    290c:	fe 01       	movw	r30, r28
    290e:	eb 5a       	subi	r30, 0xAB	; 171
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	de 01       	movw	r26, r28
    2914:	a0 5a       	subi	r26, 0xA0	; 160
    2916:	bf 4f       	sbci	r27, 0xFF	; 255
    2918:	80 81       	ld	r24, Z
    291a:	6c 91       	ld	r22, X
    291c:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2920:	fe 01       	movw	r30, r28
    2922:	e6 5a       	subi	r30, 0xA6	; 166
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	80 81       	ld	r24, Z
    2928:	91 81       	ldd	r25, Z+1	; 0x01
    292a:	fe 01       	movw	r30, r28
    292c:	e4 5a       	subi	r30, 0xA4	; 164
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	60 81       	ld	r22, Z
    2932:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_u8WriteString>

					/*de-crement the copy of the sting size*/
					Copy_u8StringSize--;
    2936:	de 01       	movw	r26, r28
    2938:	ab 5a       	subi	r26, 0xAB	; 171
    293a:	bf 4f       	sbci	r27, 0xFF	; 255
    293c:	fe 01       	movw	r30, r28
    293e:	eb 5a       	subi	r30, 0xAB	; 171
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	80 81       	ld	r24, Z
    2944:	81 50       	subi	r24, 0x01	; 1
    2946:	8c 93       	st	X, r24
//				LCD_u8WriteINT(Local_u8Move, 10, 1);
//				LCD_u8WriteINT(Copy_u8StrSize, 5, 1);
//				LCD_u8WriteINT(Copy_u8StringSize, 1, 1);

				/*Delay with the given time*/
				_delay_ms(Copy_u16Time);
    2948:	fe 01       	movw	r30, r28
    294a:	e3 5a       	subi	r30, 0xA3	; 163
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	80 81       	ld	r24, Z
    2950:	91 81       	ldd	r25, Z+1	; 0x01
    2952:	cc 01       	movw	r24, r24
    2954:	a0 e0       	ldi	r26, 0x00	; 0
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	bc 01       	movw	r22, r24
    295a:	cd 01       	movw	r24, r26
    295c:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	8d ab       	std	Y+53, r24	; 0x35
    2966:	9e ab       	std	Y+54, r25	; 0x36
    2968:	af ab       	std	Y+55, r26	; 0x37
    296a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296c:	6d a9       	ldd	r22, Y+53	; 0x35
    296e:	7e a9       	ldd	r23, Y+54	; 0x36
    2970:	8f a9       	ldd	r24, Y+55	; 0x37
    2972:	98 ad       	ldd	r25, Y+56	; 0x38
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	4a ef       	ldi	r20, 0xFA	; 250
    297a:	54 e4       	ldi	r21, 0x44	; 68
    297c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	89 ab       	std	Y+49, r24	; 0x31
    2986:	9a ab       	std	Y+50, r25	; 0x32
    2988:	ab ab       	std	Y+51, r26	; 0x33
    298a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    298c:	69 a9       	ldd	r22, Y+49	; 0x31
    298e:	7a a9       	ldd	r23, Y+50	; 0x32
    2990:	8b a9       	ldd	r24, Y+51	; 0x33
    2992:	9c a9       	ldd	r25, Y+52	; 0x34
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	40 e8       	ldi	r20, 0x80	; 128
    299a:	5f e3       	ldi	r21, 0x3F	; 63
    299c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29a0:	88 23       	and	r24, r24
    29a2:	2c f4       	brge	.+10     	; 0x29ae <LCD_u8StringScroll+0x5e0>
		__ticks = 1;
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	98 ab       	std	Y+48, r25	; 0x30
    29aa:	8f a7       	std	Y+47, r24	; 0x2f
    29ac:	3f c0       	rjmp	.+126    	; 0x2a2c <LCD_u8StringScroll+0x65e>
	else if (__tmp > 65535)
    29ae:	69 a9       	ldd	r22, Y+49	; 0x31
    29b0:	7a a9       	ldd	r23, Y+50	; 0x32
    29b2:	8b a9       	ldd	r24, Y+51	; 0x33
    29b4:	9c a9       	ldd	r25, Y+52	; 0x34
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	3f ef       	ldi	r19, 0xFF	; 255
    29ba:	4f e7       	ldi	r20, 0x7F	; 127
    29bc:	57 e4       	ldi	r21, 0x47	; 71
    29be:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29c2:	18 16       	cp	r1, r24
    29c4:	4c f5       	brge	.+82     	; 0x2a18 <LCD_u8StringScroll+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c6:	6d a9       	ldd	r22, Y+53	; 0x35
    29c8:	7e a9       	ldd	r23, Y+54	; 0x36
    29ca:	8f a9       	ldd	r24, Y+55	; 0x37
    29cc:	98 ad       	ldd	r25, Y+56	; 0x38
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e2       	ldi	r20, 0x20	; 32
    29d4:	51 e4       	ldi	r21, 0x41	; 65
    29d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	bc 01       	movw	r22, r24
    29e0:	cd 01       	movw	r24, r26
    29e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	98 ab       	std	Y+48, r25	; 0x30
    29ec:	8f a7       	std	Y+47, r24	; 0x2f
    29ee:	0f c0       	rjmp	.+30     	; 0x2a0e <LCD_u8StringScroll+0x640>
    29f0:	88 ec       	ldi	r24, 0xC8	; 200
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	9e a7       	std	Y+46, r25	; 0x2e
    29f6:	8d a7       	std	Y+45, r24	; 0x2d
    29f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    29fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <LCD_u8StringScroll+0x62e>
    2a00:	9e a7       	std	Y+46, r25	; 0x2e
    2a02:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a04:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a06:	98 a9       	ldd	r25, Y+48	; 0x30
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	98 ab       	std	Y+48, r25	; 0x30
    2a0c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a10:	98 a9       	ldd	r25, Y+48	; 0x30
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	69 f7       	brne	.-38     	; 0x29f0 <LCD_u8StringScroll+0x622>
    2a16:	14 c0       	rjmp	.+40     	; 0x2a40 <LCD_u8StringScroll+0x672>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a18:	69 a9       	ldd	r22, Y+49	; 0x31
    2a1a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a1c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a1e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	98 ab       	std	Y+48, r25	; 0x30
    2a2a:	8f a7       	std	Y+47, r24	; 0x2f
    2a2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a2e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a30:	9c a7       	std	Y+44, r25	; 0x2c
    2a32:	8b a7       	std	Y+43, r24	; 0x2b
    2a34:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a36:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <LCD_u8StringScroll+0x66a>
    2a3c:	9c a7       	std	Y+44, r25	; 0x2c
    2a3e:	8b a7       	std	Y+43, r24	; 0x2b

				/*Clear LCD*/
				LCD_voidClearLCD();
    2a40:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_voidClearLCD>

				/*if Move 3 = 0 or Copy of string size = 0 re-intiate their value and break the loop*/
				if(Local_u8Move3 == 0 || Copy_u8StringSize == 0)
    2a44:	fe 01       	movw	r30, r28
    2a46:	ea 5a       	subi	r30, 0xAA	; 170
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	80 81       	ld	r24, Z
    2a4c:	88 23       	and	r24, r24
    2a4e:	31 f0       	breq	.+12     	; 0x2a5c <LCD_u8StringScroll+0x68e>
    2a50:	fe 01       	movw	r30, r28
    2a52:	eb 5a       	subi	r30, 0xAB	; 171
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	80 81       	ld	r24, Z
    2a58:	88 23       	and	r24, r24
    2a5a:	71 f4       	brne	.+28     	; 0x2a78 <LCD_u8StringScroll+0x6aa>
				{
					Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	ea 5a       	subi	r30, 0xAA	; 170
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	80 e1       	ldi	r24, 0x10	; 16
    2a64:	80 83       	st	Z, r24
					Copy_u8StringSize = Copy_u8StrSize;
    2a66:	de 01       	movw	r26, r28
    2a68:	ab 5a       	subi	r26, 0xAB	; 171
    2a6a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	e4 5a       	subi	r30, 0xA4	; 164
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	80 81       	ld	r24, Z
    2a74:	8c 93       	st	X, r24
    2a76:	d7 c2       	rjmp	.+1454   	; 0x3026 <LCD_u8StringScroll+0xc58>

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;

			/*make the Move = 104 (Over Flow + 1 (First char on LCD)) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_1 + 1); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    2a78:	de 01       	movw	r26, r28
    2a7a:	a8 5a       	subi	r26, 0xA8	; 168
    2a7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a7e:	fe 01       	movw	r30, r28
    2a80:	e8 5a       	subi	r30, 0xA8	; 168
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	80 81       	ld	r24, Z
    2a86:	81 50       	subi	r24, 0x01	; 1
    2a88:	8c 93       	st	X, r24
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	e8 5a       	subi	r30, 0xA8	; 168
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	de 01       	movw	r26, r28
    2a92:	a9 5a       	subi	r26, 0xA9	; 169
    2a94:	bf 4f       	sbci	r27, 0xFF	; 255
    2a96:	90 81       	ld	r25, Z
    2a98:	8c 91       	ld	r24, X
    2a9a:	89 17       	cp	r24, r25
    2a9c:	08 f0       	brcs	.+2      	; 0x2aa0 <LCD_u8StringScroll+0x6d2>
    2a9e:	fc ce       	rjmp	.-520    	; 0x2898 <LCD_u8StringScroll+0x4ca>
    2aa0:	c2 c2       	rjmp	.+1412   	; 0x3026 <LCD_u8StringScroll+0xc58>
				}
			}
		}

		/*This if Scrolling is to Right in Line 2*/
		else if(Copy_u8RorL == LCD_SCROLL_TO_RIGHT && Copy_u8YPos == 1)
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	e1 5a       	subi	r30, 0xA1	; 161
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	80 81       	ld	r24, Z
    2aaa:	81 30       	cpi	r24, 0x01	; 1
    2aac:	09 f0       	breq	.+2      	; 0x2ab0 <LCD_u8StringScroll+0x6e2>
    2aae:	95 c1       	rjmp	.+810    	; 0x2dda <LCD_u8StringScroll+0xa0c>
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	e0 5a       	subi	r30, 0xA0	; 160
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	80 81       	ld	r24, Z
    2ab8:	81 30       	cpi	r24, 0x01	; 1
    2aba:	09 f0       	breq	.+2      	; 0x2abe <LCD_u8StringScroll+0x6f0>
    2abc:	8e c1       	rjmp	.+796    	; 0x2dda <LCD_u8StringScroll+0xa0c>
		{
			/*Make the Move2 = Over flow of the second line - string size*/
			Local_u8Move2 = LCD_OV_LINE_2 - Copy_u8StrSize;
    2abe:	de 01       	movw	r26, r28
    2ac0:	a9 5a       	subi	r26, 0xA9	; 169
    2ac2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	e4 5a       	subi	r30, 0xA4	; 164
    2ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aca:	98 ee       	ldi	r25, 0xE8	; 232
    2acc:	80 81       	ld	r24, Z
    2ace:	f9 2f       	mov	r31, r25
    2ad0:	f8 1b       	sub	r31, r24
    2ad2:	8f 2f       	mov	r24, r31
    2ad4:	8c 93       	st	X, r24

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move < LCD_MAX_SCROLL_LINE; Local_u8Move++)
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	e8 5a       	subi	r30, 0xA8	; 168
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	10 82       	st	Z, r1
    2ade:	75 c1       	rjmp	.+746    	; 0x2dca <LCD_u8StringScroll+0x9fc>
			{
				/*if string bigger than 16*/
				if(Local_u8Move >= (LCD_LINE_NB_OF_DIGITS - Copy_u8StrSize))
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	e8 5a       	subi	r30, 0xA8	; 168
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	80 81       	ld	r24, Z
    2ae8:	48 2f       	mov	r20, r24
    2aea:	50 e0       	ldi	r21, 0x00	; 0
    2aec:	fe 01       	movw	r30, r28
    2aee:	e4 5a       	subi	r30, 0xA4	; 164
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	80 81       	ld	r24, Z
    2af4:	28 2f       	mov	r18, r24
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	80 e1       	ldi	r24, 0x10	; 16
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	82 1b       	sub	r24, r18
    2afe:	93 0b       	sbc	r25, r19
    2b00:	48 17       	cp	r20, r24
    2b02:	59 07       	cpc	r21, r25
    2b04:	0c f4       	brge	.+2      	; 0x2b08 <LCD_u8StringScroll+0x73a>
    2b06:	c5 c0       	rjmp	.+394    	; 0x2c92 <LCD_u8StringScroll+0x8c4>
				{
					/*first print the string in the shown position in 16*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2b08:	fe 01       	movw	r30, r28
    2b0a:	e8 5a       	subi	r30, 0xA8	; 168
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	de 01       	movw	r26, r28
    2b10:	a0 5a       	subi	r26, 0xA0	; 160
    2b12:	bf 4f       	sbci	r27, 0xFF	; 255
    2b14:	80 81       	ld	r24, Z
    2b16:	6c 91       	ld	r22, X
    2b18:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	e6 5a       	subi	r30, 0xA6	; 166
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	80 81       	ld	r24, Z
    2b24:	91 81       	ldd	r25, Z+1	; 0x01
    2b26:	fe 01       	movw	r30, r28
    2b28:	e4 5a       	subi	r30, 0xA4	; 164
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	60 81       	ld	r22, Z
    2b2e:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_u8WriteString>

					/*print the string in un-shown position */
					LCD_u8GoToXY(Local_u8Move2, Copy_u8YPos);
    2b32:	fe 01       	movw	r30, r28
    2b34:	e9 5a       	subi	r30, 0xA9	; 169
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	de 01       	movw	r26, r28
    2b3a:	a0 5a       	subi	r26, 0xA0	; 160
    2b3c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b3e:	80 81       	ld	r24, Z
    2b40:	6c 91       	ld	r22, X
    2b42:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2b46:	fe 01       	movw	r30, r28
    2b48:	e6 5a       	subi	r30, 0xA6	; 166
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	80 81       	ld	r24, Z
    2b4e:	91 81       	ldd	r25, Z+1	; 0x01
    2b50:	fe 01       	movw	r30, r28
    2b52:	e4 5a       	subi	r30, 0xA4	; 164
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	60 81       	ld	r22, Z
    2b58:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_u8WriteString>
//					LCD_u8WriteINT(Local_u8Move, 0, 0);
//					LCD_u8WriteINT(Local_u8Move2, 5, 0);
//					LCD_u8WriteINT(Copy_u8StrSize, 10, 0);

					/*delay with the given time*/
					_delay_ms(Copy_u16Time);
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	e3 5a       	subi	r30, 0xA3	; 163
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	80 81       	ld	r24, Z
    2b64:	91 81       	ldd	r25, Z+1	; 0x01
    2b66:	cc 01       	movw	r24, r24
    2b68:	a0 e0       	ldi	r26, 0x00	; 0
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	bc 01       	movw	r22, r24
    2b6e:	cd 01       	movw	r24, r26
    2b70:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	8f a3       	std	Y+39, r24	; 0x27
    2b7a:	98 a7       	std	Y+40, r25	; 0x28
    2b7c:	a9 a7       	std	Y+41, r26	; 0x29
    2b7e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b80:	6f a1       	ldd	r22, Y+39	; 0x27
    2b82:	78 a5       	ldd	r23, Y+40	; 0x28
    2b84:	89 a5       	ldd	r24, Y+41	; 0x29
    2b86:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	4a ef       	ldi	r20, 0xFA	; 250
    2b8e:	54 e4       	ldi	r21, 0x44	; 68
    2b90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	8b a3       	std	Y+35, r24	; 0x23
    2b9a:	9c a3       	std	Y+36, r25	; 0x24
    2b9c:	ad a3       	std	Y+37, r26	; 0x25
    2b9e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ba0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ba6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	40 e8       	ldi	r20, 0x80	; 128
    2bae:	5f e3       	ldi	r21, 0x3F	; 63
    2bb0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2bb4:	88 23       	and	r24, r24
    2bb6:	2c f4       	brge	.+10     	; 0x2bc2 <LCD_u8StringScroll+0x7f4>
		__ticks = 1;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	9a a3       	std	Y+34, r25	; 0x22
    2bbe:	89 a3       	std	Y+33, r24	; 0x21
    2bc0:	3f c0       	rjmp	.+126    	; 0x2c40 <LCD_u8StringScroll+0x872>
	else if (__tmp > 65535)
    2bc2:	6b a1       	ldd	r22, Y+35	; 0x23
    2bc4:	7c a1       	ldd	r23, Y+36	; 0x24
    2bc6:	8d a1       	ldd	r24, Y+37	; 0x25
    2bc8:	9e a1       	ldd	r25, Y+38	; 0x26
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	3f ef       	ldi	r19, 0xFF	; 255
    2bce:	4f e7       	ldi	r20, 0x7F	; 127
    2bd0:	57 e4       	ldi	r21, 0x47	; 71
    2bd2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2bd6:	18 16       	cp	r1, r24
    2bd8:	4c f5       	brge	.+82     	; 0x2c2c <LCD_u8StringScroll+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bda:	6f a1       	ldd	r22, Y+39	; 0x27
    2bdc:	78 a5       	ldd	r23, Y+40	; 0x28
    2bde:	89 a5       	ldd	r24, Y+41	; 0x29
    2be0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	40 e2       	ldi	r20, 0x20	; 32
    2be8:	51 e4       	ldi	r21, 0x41	; 65
    2bea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	bc 01       	movw	r22, r24
    2bf4:	cd 01       	movw	r24, r26
    2bf6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	9a a3       	std	Y+34, r25	; 0x22
    2c00:	89 a3       	std	Y+33, r24	; 0x21
    2c02:	0f c0       	rjmp	.+30     	; 0x2c22 <LCD_u8StringScroll+0x854>
    2c04:	88 ec       	ldi	r24, 0xC8	; 200
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	98 a3       	std	Y+32, r25	; 0x20
    2c0a:	8f 8f       	std	Y+31, r24	; 0x1f
    2c0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c0e:	98 a1       	ldd	r25, Y+32	; 0x20
    2c10:	01 97       	sbiw	r24, 0x01	; 1
    2c12:	f1 f7       	brne	.-4      	; 0x2c10 <LCD_u8StringScroll+0x842>
    2c14:	98 a3       	std	Y+32, r25	; 0x20
    2c16:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c18:	89 a1       	ldd	r24, Y+33	; 0x21
    2c1a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	9a a3       	std	Y+34, r25	; 0x22
    2c20:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c22:	89 a1       	ldd	r24, Y+33	; 0x21
    2c24:	9a a1       	ldd	r25, Y+34	; 0x22
    2c26:	00 97       	sbiw	r24, 0x00	; 0
    2c28:	69 f7       	brne	.-38     	; 0x2c04 <LCD_u8StringScroll+0x836>
    2c2a:	14 c0       	rjmp	.+40     	; 0x2c54 <LCD_u8StringScroll+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c2c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c2e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c30:	8d a1       	ldd	r24, Y+37	; 0x25
    2c32:	9e a1       	ldd	r25, Y+38	; 0x26
    2c34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	9a a3       	std	Y+34, r25	; 0x22
    2c3e:	89 a3       	std	Y+33, r24	; 0x21
    2c40:	89 a1       	ldd	r24, Y+33	; 0x21
    2c42:	9a a1       	ldd	r25, Y+34	; 0x22
    2c44:	9e 8f       	std	Y+30, r25	; 0x1e
    2c46:	8d 8f       	std	Y+29, r24	; 0x1d
    2c48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <LCD_u8StringScroll+0x87e>
    2c50:	9e 8f       	std	Y+30, r25	; 0x1e
    2c52:	8d 8f       	std	Y+29, r24	; 0x1d

					/*Clear the LCD*/
					LCD_voidClearLCD();
    2c54:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_voidClearLCD>

					/*Increment Move 2*/
					Local_u8Move2++;
    2c58:	de 01       	movw	r26, r28
    2c5a:	a9 5a       	subi	r26, 0xA9	; 169
    2c5c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c5e:	fe 01       	movw	r30, r28
    2c60:	e9 5a       	subi	r30, 0xA9	; 169
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	80 81       	ld	r24, Z
    2c66:	8f 5f       	subi	r24, 0xFF	; 255
    2c68:	8c 93       	st	X, r24

					/*if Move 2 = 323 the over flow of line two give it its initial value and break the loop*/
					if(Local_u8Move2 == LCD_OV_LINE_2)
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	e9 5a       	subi	r30, 0xA9	; 169
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	80 81       	ld	r24, Z
    2c72:	88 3e       	cpi	r24, 0xE8	; 232
    2c74:	09 f0       	breq	.+2      	; 0x2c78 <LCD_u8StringScroll+0x8aa>
    2c76:	a0 c0       	rjmp	.+320    	; 0x2db8 <LCD_u8StringScroll+0x9ea>
					{
						Local_u8Move2 = LCD_OV_LINE_2 - Copy_u8StrSize;
    2c78:	de 01       	movw	r26, r28
    2c7a:	a9 5a       	subi	r26, 0xA9	; 169
    2c7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c7e:	fe 01       	movw	r30, r28
    2c80:	e4 5a       	subi	r30, 0xA4	; 164
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	98 ee       	ldi	r25, 0xE8	; 232
    2c86:	80 81       	ld	r24, Z
    2c88:	29 2f       	mov	r18, r25
    2c8a:	28 1b       	sub	r18, r24
    2c8c:	82 2f       	mov	r24, r18
    2c8e:	8c 93       	st	X, r24
    2c90:	ca c1       	rjmp	.+916    	; 0x3026 <LCD_u8StringScroll+0xc58>

				/*else mean string < 16*/
				else
				{
					/*Print the string*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2c92:	fe 01       	movw	r30, r28
    2c94:	e8 5a       	subi	r30, 0xA8	; 168
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	de 01       	movw	r26, r28
    2c9a:	a0 5a       	subi	r26, 0xA0	; 160
    2c9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c9e:	80 81       	ld	r24, Z
    2ca0:	6c 91       	ld	r22, X
    2ca2:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	e6 5a       	subi	r30, 0xA6	; 166
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	80 81       	ld	r24, Z
    2cae:	91 81       	ldd	r25, Z+1	; 0x01
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	e4 5a       	subi	r30, 0xA4	; 164
    2cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb6:	60 81       	ld	r22, Z
    2cb8:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_u8WriteString>
//					LCD_u8WriteINT(Local_u8Move, 0, 0);
//					LCD_u8WriteINT(Local_u8Move2, 5, 0);
//					LCD_u8WriteINT(Copy_u8StrSize, 10, 0);

					/*Delay the given time*/
					_delay_ms(Copy_u16Time);
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e3 5a       	subi	r30, 0xA3	; 163
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	80 81       	ld	r24, Z
    2cc4:	91 81       	ldd	r25, Z+1	; 0x01
    2cc6:	cc 01       	movw	r24, r24
    2cc8:	a0 e0       	ldi	r26, 0x00	; 0
    2cca:	b0 e0       	ldi	r27, 0x00	; 0
    2ccc:	bc 01       	movw	r22, r24
    2cce:	cd 01       	movw	r24, r26
    2cd0:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	89 8f       	std	Y+25, r24	; 0x19
    2cda:	9a 8f       	std	Y+26, r25	; 0x1a
    2cdc:	ab 8f       	std	Y+27, r26	; 0x1b
    2cde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ce2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ce4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ce6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	4a ef       	ldi	r20, 0xFA	; 250
    2cee:	54 e4       	ldi	r21, 0x44	; 68
    2cf0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	8d 8b       	std	Y+21, r24	; 0x15
    2cfa:	9e 8b       	std	Y+22, r25	; 0x16
    2cfc:	af 8b       	std	Y+23, r26	; 0x17
    2cfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d00:	6d 89       	ldd	r22, Y+21	; 0x15
    2d02:	7e 89       	ldd	r23, Y+22	; 0x16
    2d04:	8f 89       	ldd	r24, Y+23	; 0x17
    2d06:	98 8d       	ldd	r25, Y+24	; 0x18
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e8       	ldi	r20, 0x80	; 128
    2d0e:	5f e3       	ldi	r21, 0x3F	; 63
    2d10:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d14:	88 23       	and	r24, r24
    2d16:	2c f4       	brge	.+10     	; 0x2d22 <LCD_u8StringScroll+0x954>
		__ticks = 1;
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	9c 8b       	std	Y+20, r25	; 0x14
    2d1e:	8b 8b       	std	Y+19, r24	; 0x13
    2d20:	3f c0       	rjmp	.+126    	; 0x2da0 <LCD_u8StringScroll+0x9d2>
	else if (__tmp > 65535)
    2d22:	6d 89       	ldd	r22, Y+21	; 0x15
    2d24:	7e 89       	ldd	r23, Y+22	; 0x16
    2d26:	8f 89       	ldd	r24, Y+23	; 0x17
    2d28:	98 8d       	ldd	r25, Y+24	; 0x18
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	3f ef       	ldi	r19, 0xFF	; 255
    2d2e:	4f e7       	ldi	r20, 0x7F	; 127
    2d30:	57 e4       	ldi	r21, 0x47	; 71
    2d32:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d36:	18 16       	cp	r1, r24
    2d38:	4c f5       	brge	.+82     	; 0x2d8c <LCD_u8StringScroll+0x9be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	40 e2       	ldi	r20, 0x20	; 32
    2d48:	51 e4       	ldi	r21, 0x41	; 65
    2d4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	bc 01       	movw	r22, r24
    2d54:	cd 01       	movw	r24, r26
    2d56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	9c 8b       	std	Y+20, r25	; 0x14
    2d60:	8b 8b       	std	Y+19, r24	; 0x13
    2d62:	0f c0       	rjmp	.+30     	; 0x2d82 <LCD_u8StringScroll+0x9b4>
    2d64:	88 ec       	ldi	r24, 0xC8	; 200
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	9a 8b       	std	Y+18, r25	; 0x12
    2d6a:	89 8b       	std	Y+17, r24	; 0x11
    2d6c:	89 89       	ldd	r24, Y+17	; 0x11
    2d6e:	9a 89       	ldd	r25, Y+18	; 0x12
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	f1 f7       	brne	.-4      	; 0x2d70 <LCD_u8StringScroll+0x9a2>
    2d74:	9a 8b       	std	Y+18, r25	; 0x12
    2d76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d78:	8b 89       	ldd	r24, Y+19	; 0x13
    2d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	9c 8b       	std	Y+20, r25	; 0x14
    2d80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d82:	8b 89       	ldd	r24, Y+19	; 0x13
    2d84:	9c 89       	ldd	r25, Y+20	; 0x14
    2d86:	00 97       	sbiw	r24, 0x00	; 0
    2d88:	69 f7       	brne	.-38     	; 0x2d64 <LCD_u8StringScroll+0x996>
    2d8a:	14 c0       	rjmp	.+40     	; 0x2db4 <LCD_u8StringScroll+0x9e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d90:	8f 89       	ldd	r24, Y+23	; 0x17
    2d92:	98 8d       	ldd	r25, Y+24	; 0x18
    2d94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	9c 8b       	std	Y+20, r25	; 0x14
    2d9e:	8b 8b       	std	Y+19, r24	; 0x13
    2da0:	8b 89       	ldd	r24, Y+19	; 0x13
    2da2:	9c 89       	ldd	r25, Y+20	; 0x14
    2da4:	98 8b       	std	Y+16, r25	; 0x10
    2da6:	8f 87       	std	Y+15, r24	; 0x0f
    2da8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2daa:	98 89       	ldd	r25, Y+16	; 0x10
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	f1 f7       	brne	.-4      	; 0x2dac <LCD_u8StringScroll+0x9de>
    2db0:	98 8b       	std	Y+16, r25	; 0x10
    2db2:	8f 87       	std	Y+15, r24	; 0x0f

					/*Clear LCD*/
					LCD_voidClearLCD();
    2db4:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_voidClearLCD>
		{
			/*Make the Move2 = Over flow of the second line - string size*/
			Local_u8Move2 = LCD_OV_LINE_2 - Copy_u8StrSize;

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move < LCD_MAX_SCROLL_LINE; Local_u8Move++)
    2db8:	de 01       	movw	r26, r28
    2dba:	a8 5a       	subi	r26, 0xA8	; 168
    2dbc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	e8 5a       	subi	r30, 0xA8	; 168
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	80 81       	ld	r24, Z
    2dc6:	8f 5f       	subi	r24, 0xFF	; 255
    2dc8:	8c 93       	st	X, r24
    2dca:	fe 01       	movw	r30, r28
    2dcc:	e8 5a       	subi	r30, 0xA8	; 168
    2dce:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd0:	80 81       	ld	r24, Z
    2dd2:	89 32       	cpi	r24, 0x29	; 41
    2dd4:	08 f4       	brcc	.+2      	; 0x2dd8 <LCD_u8StringScroll+0xa0a>
    2dd6:	84 ce       	rjmp	.-760    	; 0x2ae0 <LCD_u8StringScroll+0x712>
    2dd8:	26 c1       	rjmp	.+588    	; 0x3026 <LCD_u8StringScroll+0xc58>
				}
			}
		}

		/*This if Scrolling is to Left in Line 2*/
		else if(Copy_u8RorL == LCD_SCROLL_TO_LEFT && Copy_u8YPos == 1)
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e1 5a       	subi	r30, 0xA1	; 161
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	80 81       	ld	r24, Z
    2de2:	88 23       	and	r24, r24
    2de4:	09 f0       	breq	.+2      	; 0x2de8 <LCD_u8StringScroll+0xa1a>
    2de6:	1f c1       	rjmp	.+574    	; 0x3026 <LCD_u8StringScroll+0xc58>
    2de8:	fe 01       	movw	r30, r28
    2dea:	e0 5a       	subi	r30, 0xA0	; 160
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	80 81       	ld	r24, Z
    2df0:	81 30       	cpi	r24, 0x01	; 1
    2df2:	09 f0       	breq	.+2      	; 0x2df6 <LCD_u8StringScroll+0xa28>
    2df4:	18 c1       	rjmp	.+560    	; 0x3026 <LCD_u8StringScroll+0xc58>
		{
			/*Move2 = over flow line 2 + string size + 1 to make space between the last and first char in string */
			Local_u8Move2 = LCD_OV_LINE_2 + (Copy_u8StrSize + 1);
    2df6:	de 01       	movw	r26, r28
    2df8:	a9 5a       	subi	r26, 0xA9	; 169
    2dfa:	bf 4f       	sbci	r27, 0xFF	; 255
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	e4 5a       	subi	r30, 0xA4	; 164
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	80 81       	ld	r24, Z
    2e04:	87 51       	subi	r24, 0x17	; 23
    2e06:	8c 93       	st	X, r24

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    2e08:	fe 01       	movw	r30, r28
    2e0a:	ea 5a       	subi	r30, 0xAA	; 170
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	80 e1       	ldi	r24, 0x10	; 16
    2e10:	80 83       	st	Z, r24

			/*make the Move = 232 (Over Flow) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_2); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    2e12:	fe 01       	movw	r30, r28
    2e14:	e8 5a       	subi	r30, 0xA8	; 168
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	88 ee       	ldi	r24, 0xE8	; 232
    2e1a:	80 83       	st	Z, r24
    2e1c:	f9 c0       	rjmp	.+498    	; 0x3010 <LCD_u8StringScroll+0xc42>
			{
				/*Print LCD with the Move as X position*/
				LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2e1e:	fe 01       	movw	r30, r28
    2e20:	e8 5a       	subi	r30, 0xA8	; 168
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	de 01       	movw	r26, r28
    2e26:	a0 5a       	subi	r26, 0xA0	; 160
    2e28:	bf 4f       	sbci	r27, 0xFF	; 255
    2e2a:	80 81       	ld	r24, Z
    2e2c:	6c 91       	ld	r22, X
    2e2e:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
				LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2e32:	fe 01       	movw	r30, r28
    2e34:	e6 5a       	subi	r30, 0xA6	; 166
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	80 81       	ld	r24, Z
    2e3a:	91 81       	ldd	r25, Z+1	; 0x01
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	e4 5a       	subi	r30, 0xA4	; 164
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	60 81       	ld	r22, Z
    2e44:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_u8WriteString>

				/*if String size less than 16*/
				if(Copy_u8StrSize < LCD_LINE_NB_OF_DIGITS)
    2e48:	fe 01       	movw	r30, r28
    2e4a:	e4 5a       	subi	r30, 0xA4	; 164
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	80 81       	ld	r24, Z
    2e50:	80 31       	cpi	r24, 0x10	; 16
    2e52:	f8 f4       	brcc	.+62     	; 0x2e92 <LCD_u8StringScroll+0xac4>
				{
					/*print with move 3 as X position*/
					LCD_u8GoToXY(Local_u8Move3 , Copy_u8YPos);
    2e54:	fe 01       	movw	r30, r28
    2e56:	ea 5a       	subi	r30, 0xAA	; 170
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	de 01       	movw	r26, r28
    2e5c:	a0 5a       	subi	r26, 0xA0	; 160
    2e5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e60:	80 81       	ld	r24, Z
    2e62:	6c 91       	ld	r22, X
    2e64:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2e68:	fe 01       	movw	r30, r28
    2e6a:	e6 5a       	subi	r30, 0xA6	; 166
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	80 81       	ld	r24, Z
    2e70:	91 81       	ldd	r25, Z+1	; 0x01
    2e72:	fe 01       	movw	r30, r28
    2e74:	e4 5a       	subi	r30, 0xA4	; 164
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	60 81       	ld	r22, Z
    2e7a:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_u8WriteString>

					/*Decrement Move 3*/
					Local_u8Move3--;
    2e7e:	de 01       	movw	r26, r28
    2e80:	aa 5a       	subi	r26, 0xAA	; 170
    2e82:	bf 4f       	sbci	r27, 0xFF	; 255
    2e84:	fe 01       	movw	r30, r28
    2e86:	ea 5a       	subi	r30, 0xAA	; 170
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	80 81       	ld	r24, Z
    2e8c:	81 50       	subi	r24, 0x01	; 1
    2e8e:	8c 93       	st	X, r24
    2e90:	1e c0       	rjmp	.+60     	; 0x2ece <LCD_u8StringScroll+0xb00>

				/*else mean string > 16*/
				else
				{
					/*print with the copy of string size as X position*/
					LCD_u8GoToXY(Copy_u8StringSize, Copy_u8YPos);
    2e92:	fe 01       	movw	r30, r28
    2e94:	eb 5a       	subi	r30, 0xAB	; 171
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	de 01       	movw	r26, r28
    2e9a:	a0 5a       	subi	r26, 0xA0	; 160
    2e9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e9e:	80 81       	ld	r24, Z
    2ea0:	6c 91       	ld	r22, X
    2ea2:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	e6 5a       	subi	r30, 0xA6	; 166
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	80 81       	ld	r24, Z
    2eae:	91 81       	ldd	r25, Z+1	; 0x01
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	e4 5a       	subi	r30, 0xA4	; 164
    2eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb6:	60 81       	ld	r22, Z
    2eb8:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_u8WriteString>

					/*de-crement the copy of the sting size*/
					Copy_u8StringSize--;
    2ebc:	de 01       	movw	r26, r28
    2ebe:	ab 5a       	subi	r26, 0xAB	; 171
    2ec0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	eb 5a       	subi	r30, 0xAB	; 171
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	80 81       	ld	r24, Z
    2eca:	81 50       	subi	r24, 0x01	; 1
    2ecc:	8c 93       	st	X, r24
//				LCD_u8WriteINT(Local_u8Move, 10, 0);
//				LCD_u8WriteINT(Copy_u8StrSize, 5, 0);
//				LCD_u8WriteINT(Copy_u8StringSize, 1, 0);

				/*Delay the Given time*/
				_delay_ms(Copy_u16Time);
    2ece:	fe 01       	movw	r30, r28
    2ed0:	e3 5a       	subi	r30, 0xA3	; 163
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	80 81       	ld	r24, Z
    2ed6:	91 81       	ldd	r25, Z+1	; 0x01
    2ed8:	cc 01       	movw	r24, r24
    2eda:	a0 e0       	ldi	r26, 0x00	; 0
    2edc:	b0 e0       	ldi	r27, 0x00	; 0
    2ede:	bc 01       	movw	r22, r24
    2ee0:	cd 01       	movw	r24, r26
    2ee2:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	8b 87       	std	Y+11, r24	; 0x0b
    2eec:	9c 87       	std	Y+12, r25	; 0x0c
    2eee:	ad 87       	std	Y+13, r26	; 0x0d
    2ef0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	4a ef       	ldi	r20, 0xFA	; 250
    2f00:	54 e4       	ldi	r21, 0x44	; 68
    2f02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	8f 83       	std	Y+7, r24	; 0x07
    2f0c:	98 87       	std	Y+8, r25	; 0x08
    2f0e:	a9 87       	std	Y+9, r26	; 0x09
    2f10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f12:	6f 81       	ldd	r22, Y+7	; 0x07
    2f14:	78 85       	ldd	r23, Y+8	; 0x08
    2f16:	89 85       	ldd	r24, Y+9	; 0x09
    2f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	40 e8       	ldi	r20, 0x80	; 128
    2f20:	5f e3       	ldi	r21, 0x3F	; 63
    2f22:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2f26:	88 23       	and	r24, r24
    2f28:	2c f4       	brge	.+10     	; 0x2f34 <LCD_u8StringScroll+0xb66>
		__ticks = 1;
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	9e 83       	std	Y+6, r25	; 0x06
    2f30:	8d 83       	std	Y+5, r24	; 0x05
    2f32:	3f c0       	rjmp	.+126    	; 0x2fb2 <LCD_u8StringScroll+0xbe4>
	else if (__tmp > 65535)
    2f34:	6f 81       	ldd	r22, Y+7	; 0x07
    2f36:	78 85       	ldd	r23, Y+8	; 0x08
    2f38:	89 85       	ldd	r24, Y+9	; 0x09
    2f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	3f ef       	ldi	r19, 0xFF	; 255
    2f40:	4f e7       	ldi	r20, 0x7F	; 127
    2f42:	57 e4       	ldi	r21, 0x47	; 71
    2f44:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2f48:	18 16       	cp	r1, r24
    2f4a:	4c f5       	brge	.+82     	; 0x2f9e <LCD_u8StringScroll+0xbd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f52:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	40 e2       	ldi	r20, 0x20	; 32
    2f5a:	51 e4       	ldi	r21, 0x41	; 65
    2f5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	bc 01       	movw	r22, r24
    2f66:	cd 01       	movw	r24, r26
    2f68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	9e 83       	std	Y+6, r25	; 0x06
    2f72:	8d 83       	std	Y+5, r24	; 0x05
    2f74:	0f c0       	rjmp	.+30     	; 0x2f94 <LCD_u8StringScroll+0xbc6>
    2f76:	88 ec       	ldi	r24, 0xC8	; 200
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	9c 83       	std	Y+4, r25	; 0x04
    2f7c:	8b 83       	std	Y+3, r24	; 0x03
    2f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f80:	9c 81       	ldd	r25, Y+4	; 0x04
    2f82:	01 97       	sbiw	r24, 0x01	; 1
    2f84:	f1 f7       	brne	.-4      	; 0x2f82 <LCD_u8StringScroll+0xbb4>
    2f86:	9c 83       	std	Y+4, r25	; 0x04
    2f88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	9e 83       	std	Y+6, r25	; 0x06
    2f92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f94:	8d 81       	ldd	r24, Y+5	; 0x05
    2f96:	9e 81       	ldd	r25, Y+6	; 0x06
    2f98:	00 97       	sbiw	r24, 0x00	; 0
    2f9a:	69 f7       	brne	.-38     	; 0x2f76 <LCD_u8StringScroll+0xba8>
    2f9c:	14 c0       	rjmp	.+40     	; 0x2fc6 <LCD_u8StringScroll+0xbf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa0:	78 85       	ldd	r23, Y+8	; 0x08
    2fa2:	89 85       	ldd	r24, Y+9	; 0x09
    2fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	9e 83       	std	Y+6, r25	; 0x06
    2fb0:	8d 83       	std	Y+5, r24	; 0x05
    2fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb6:	9a 83       	std	Y+2, r25	; 0x02
    2fb8:	89 83       	std	Y+1, r24	; 0x01
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	f1 f7       	brne	.-4      	; 0x2fbe <LCD_u8StringScroll+0xbf0>
    2fc2:	9a 83       	std	Y+2, r25	; 0x02
    2fc4:	89 83       	std	Y+1, r24	; 0x01

				/*Clear LCD*/
				LCD_voidClearLCD();
    2fc6:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_voidClearLCD>

				/*if Move 3 = 0 or Copy of string size = 0 re-intiate their value and break the loop*/
				if(Local_u8Move3 == 0 || Copy_u8StringSize == 0)
    2fca:	fe 01       	movw	r30, r28
    2fcc:	ea 5a       	subi	r30, 0xAA	; 170
    2fce:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd0:	80 81       	ld	r24, Z
    2fd2:	88 23       	and	r24, r24
    2fd4:	31 f0       	breq	.+12     	; 0x2fe2 <LCD_u8StringScroll+0xc14>
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	eb 5a       	subi	r30, 0xAB	; 171
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	80 81       	ld	r24, Z
    2fde:	88 23       	and	r24, r24
    2fe0:	71 f4       	brne	.+28     	; 0x2ffe <LCD_u8StringScroll+0xc30>
				{
					Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	ea 5a       	subi	r30, 0xAA	; 170
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	80 e1       	ldi	r24, 0x10	; 16
    2fea:	80 83       	st	Z, r24
					Copy_u8StringSize = Copy_u8StrSize;
    2fec:	de 01       	movw	r26, r28
    2fee:	ab 5a       	subi	r26, 0xAB	; 171
    2ff0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ff2:	fe 01       	movw	r30, r28
    2ff4:	e4 5a       	subi	r30, 0xA4	; 164
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	80 81       	ld	r24, Z
    2ffa:	8c 93       	st	X, r24
    2ffc:	14 c0       	rjmp	.+40     	; 0x3026 <LCD_u8StringScroll+0xc58>

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;

			/*make the Move = 232 (Over Flow) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_2); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    2ffe:	de 01       	movw	r26, r28
    3000:	a8 5a       	subi	r26, 0xA8	; 168
    3002:	bf 4f       	sbci	r27, 0xFF	; 255
    3004:	fe 01       	movw	r30, r28
    3006:	e8 5a       	subi	r30, 0xA8	; 168
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	80 81       	ld	r24, Z
    300c:	81 50       	subi	r24, 0x01	; 1
    300e:	8c 93       	st	X, r24
    3010:	fe 01       	movw	r30, r28
    3012:	e8 5a       	subi	r30, 0xA8	; 168
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	de 01       	movw	r26, r28
    3018:	a9 5a       	subi	r26, 0xA9	; 169
    301a:	bf 4f       	sbci	r27, 0xFF	; 255
    301c:	90 81       	ld	r25, Z
    301e:	8c 91       	ld	r24, X
    3020:	89 17       	cp	r24, r25
    3022:	08 f0       	brcs	.+2      	; 0x3026 <LCD_u8StringScroll+0xc58>
    3024:	fc ce       	rjmp	.-520    	; 0x2e1e <LCD_u8StringScroll+0xa50>
			}
		}
	}

	/*return the Error*/
	return Local_u8Error;
    3026:	fe 01       	movw	r30, r28
    3028:	e7 5a       	subi	r30, 0xA7	; 167
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	80 81       	ld	r24, Z
}
    302e:	c0 5a       	subi	r28, 0xA0	; 160
    3030:	df 4f       	sbci	r29, 0xFF	; 255
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	f8 94       	cli
    3036:	de bf       	out	0x3e, r29	; 62
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	cd bf       	out	0x3d, r28	; 61
    303c:	cf 91       	pop	r28
    303e:	df 91       	pop	r29
    3040:	1f 91       	pop	r17
    3042:	0f 91       	pop	r16
    3044:	08 95       	ret

00003046 <main>:
#include "KPD_interface.h"
#include "LCD_interface.h"
#include "APP_interface.h"

void main(void)
{
    3046:	ef 92       	push	r14
    3048:	ff 92       	push	r15
    304a:	0f 93       	push	r16
    304c:	1f 93       	push	r17
    304e:	df 93       	push	r29
    3050:	cf 93       	push	r28
    3052:	cd b7       	in	r28, 0x3d	; 61
    3054:	de b7       	in	r29, 0x3e	; 62
    3056:	64 97       	sbiw	r28, 0x14	; 20
    3058:	0f b6       	in	r0, 0x3f	; 63
    305a:	f8 94       	cli
    305c:	de bf       	out	0x3e, r29	; 62
    305e:	0f be       	out	0x3f, r0	; 63
    3060:	cd bf       	out	0x3d, r28	; 61
	/*Local Variables*/
	u8 Local_u8KeyPressed = 0, Local_u8KeyNB = 0, Local_u8FONOD = 0/*First Operand Number of Digits*/, Local_u8Sign = 0, Local_u8SONOD = 0, Local_u8Equal = 0;
    3062:	19 8a       	std	Y+17, r1	; 0x11
    3064:	1a 8a       	std	Y+18, r1	; 0x12
    3066:	18 8a       	std	Y+16, r1	; 0x10
    3068:	1f 86       	std	Y+15, r1	; 0x0f
    306a:	1e 86       	std	Y+14, r1	; 0x0e
    306c:	1d 86       	std	Y+13, r1	; 0x0d
	u32 Local_u32FO = 0, Local_u32SO = 0, Local_u32Result = 0;
    306e:	19 86       	std	Y+9, r1	; 0x09
    3070:	1a 86       	std	Y+10, r1	; 0x0a
    3072:	1b 86       	std	Y+11, r1	; 0x0b
    3074:	1c 86       	std	Y+12, r1	; 0x0c
    3076:	1d 82       	std	Y+5, r1	; 0x05
    3078:	1e 82       	std	Y+6, r1	; 0x06
    307a:	1f 82       	std	Y+7, r1	; 0x07
    307c:	18 86       	std	Y+8, r1	; 0x08
    307e:	19 82       	std	Y+1, r1	; 0x01
    3080:	1a 82       	std	Y+2, r1	; 0x02
    3082:	1b 82       	std	Y+3, r1	; 0x03
    3084:	1c 82       	std	Y+4, r1	; 0x04

	/*Initializing The LCD*/
	LCD_voidInitialization();
    3086:	0e 94 ac 0c 	call	0x1958	; 0x1958 <LCD_voidInitialization>

	/*Initializing The KPD*/
	KPD_u8Initialization();
    308a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <KPD_u8Initialization>

	while(1)
	{
		/*Check if there is any key pressed*/
		Local_u8KeyPressed = KPD_u8GetPressedKey(&Local_u8KeyNB);
    308e:	ce 01       	movw	r24, r28
    3090:	42 96       	adiw	r24, 0x12	; 18
    3092:	0e 94 01 0b 	call	0x1602	; 0x1602 <KPD_u8GetPressedKey>
    3096:	89 8b       	std	Y+17, r24	; 0x11

		/*IF kEY PRESSED Equal 1 means there is a key have pressed*/
		if(Local_u8KeyPressed == 1)
    3098:	89 89       	ldd	r24, Y+17	; 0x11
    309a:	81 30       	cpi	r24, 0x01	; 1
    309c:	c1 f7       	brne	.-16     	; 0x308e <main+0x48>
		{
			/*if the key between numbers 0 - 9 and the local sign equal 0 means you are in first operand*/
			if(Local_u8KeyNB <= 9 && Local_u8Sign == 0)
    309e:	8a 89       	ldd	r24, Y+18	; 0x12
    30a0:	8a 30       	cpi	r24, 0x0A	; 10
    30a2:	58 f5       	brcc	.+86     	; 0x30fa <main+0xb4>
    30a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    30a6:	88 23       	and	r24, r24
    30a8:	41 f5       	brne	.+80     	; 0x30fa <main+0xb4>
			{
				/*take the value multiply with 10 and then take the next value add to it*/
				Local_u32FO = Local_u32FO * 10 + Local_u8KeyNB;
    30aa:	89 85       	ldd	r24, Y+9	; 0x09
    30ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ae:	ab 85       	ldd	r26, Y+11	; 0x0b
    30b0:	bc 85       	ldd	r27, Y+12	; 0x0c
    30b2:	2a e0       	ldi	r18, 0x0A	; 10
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	40 e0       	ldi	r20, 0x00	; 0
    30b8:	50 e0       	ldi	r21, 0x00	; 0
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <__mulsi3>
    30c2:	9b 01       	movw	r18, r22
    30c4:	ac 01       	movw	r20, r24
    30c6:	8a 89       	ldd	r24, Y+18	; 0x12
    30c8:	88 2f       	mov	r24, r24
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	a0 e0       	ldi	r26, 0x00	; 0
    30ce:	b0 e0       	ldi	r27, 0x00	; 0
    30d0:	82 0f       	add	r24, r18
    30d2:	93 1f       	adc	r25, r19
    30d4:	a4 1f       	adc	r26, r20
    30d6:	b5 1f       	adc	r27, r21
    30d8:	89 87       	std	Y+9, r24	; 0x09
    30da:	9a 87       	std	Y+10, r25	; 0x0a
    30dc:	ab 87       	std	Y+11, r26	; 0x0b
    30de:	bc 87       	std	Y+12, r27	; 0x0c

				/*then clear the LCD*/
				LCD_voidClearLCD();
    30e0:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_voidClearLCD>

				/*and put the whole new value at once*/
				LCD_u8WriteINT(Local_u32FO, 0, 0);
    30e4:	89 85       	ldd	r24, Y+9	; 0x09
    30e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e8:	ab 85       	ldd	r26, Y+11	; 0x0b
    30ea:	bc 85       	ldd	r27, Y+12	; 0x0c
    30ec:	bc 01       	movw	r22, r24
    30ee:	cd 01       	movw	r24, r26
    30f0:	40 e0       	ldi	r20, 0x00	; 0
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <LCD_u8WriteINT>
    30f8:	42 c0       	rjmp	.+132    	; 0x317e <main+0x138>
			}

			/*if it between 0 - 9 and local sign not equal ZERO and there is no equal sign means you are in second operand*/
			else if(Local_u8KeyNB <= 9 && Local_u8Sign != 0)
    30fa:	8a 89       	ldd	r24, Y+18	; 0x12
    30fc:	8a 30       	cpi	r24, 0x0A	; 10
    30fe:	08 f0       	brcs	.+2      	; 0x3102 <main+0xbc>
    3100:	3e c0       	rjmp	.+124    	; 0x317e <main+0x138>
    3102:	8f 85       	ldd	r24, Y+15	; 0x0f
    3104:	88 23       	and	r24, r24
    3106:	d9 f1       	breq	.+118    	; 0x317e <main+0x138>
			{
				/*take the value multiply with 10 and then take the next value add to it*/
				Local_u32SO = Local_u32SO * 10 + Local_u8KeyNB;
    3108:	8d 81       	ldd	r24, Y+5	; 0x05
    310a:	9e 81       	ldd	r25, Y+6	; 0x06
    310c:	af 81       	ldd	r26, Y+7	; 0x07
    310e:	b8 85       	ldd	r27, Y+8	; 0x08
    3110:	2a e0       	ldi	r18, 0x0A	; 10
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 e0       	ldi	r20, 0x00	; 0
    3116:	50 e0       	ldi	r21, 0x00	; 0
    3118:	bc 01       	movw	r22, r24
    311a:	cd 01       	movw	r24, r26
    311c:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <__mulsi3>
    3120:	9b 01       	movw	r18, r22
    3122:	ac 01       	movw	r20, r24
    3124:	8a 89       	ldd	r24, Y+18	; 0x12
    3126:	88 2f       	mov	r24, r24
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	a0 e0       	ldi	r26, 0x00	; 0
    312c:	b0 e0       	ldi	r27, 0x00	; 0
    312e:	82 0f       	add	r24, r18
    3130:	93 1f       	adc	r25, r19
    3132:	a4 1f       	adc	r26, r20
    3134:	b5 1f       	adc	r27, r21
    3136:	8d 83       	std	Y+5, r24	; 0x05
    3138:	9e 83       	std	Y+6, r25	; 0x06
    313a:	af 83       	std	Y+7, r26	; 0x07
    313c:	b8 87       	std	Y+8, r27	; 0x08

				/*then clear the LCD*/
				LCD_voidClearLCD();
    313e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_voidClearLCD>

				/*put at first the first operand*/
				LCD_u8WriteINT(Local_u32FO, 0, 0);
    3142:	89 85       	ldd	r24, Y+9	; 0x09
    3144:	9a 85       	ldd	r25, Y+10	; 0x0a
    3146:	ab 85       	ldd	r26, Y+11	; 0x0b
    3148:	bc 85       	ldd	r27, Y+12	; 0x0c
    314a:	bc 01       	movw	r22, r24
    314c:	cd 01       	movw	r24, r26
    314e:	40 e0       	ldi	r20, 0x00	; 0
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <LCD_u8WriteINT>

				/*then put the sign*/
				LCD_u8GoToXY(Local_u8FONOD, 0);
    3156:	88 89       	ldd	r24, Y+16	; 0x10
    3158:	60 e0       	ldi	r22, 0x00	; 0
    315a:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
				LCD_voidWriteData(Local_u8Sign);
    315e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3160:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>

				/*then put the second operand*/
				LCD_u8WriteINT(Local_u32SO, Local_u8FONOD + 1, 0);
    3164:	88 89       	ldd	r24, Y+16	; 0x10
    3166:	28 2f       	mov	r18, r24
    3168:	2f 5f       	subi	r18, 0xFF	; 255
    316a:	8d 81       	ldd	r24, Y+5	; 0x05
    316c:	9e 81       	ldd	r25, Y+6	; 0x06
    316e:	af 81       	ldd	r26, Y+7	; 0x07
    3170:	b8 85       	ldd	r27, Y+8	; 0x08
    3172:	bc 01       	movw	r22, r24
    3174:	cd 01       	movw	r24, r26
    3176:	42 2f       	mov	r20, r18
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <LCD_u8WriteINT>
			}

			/*To Take the Number Of Digits both first and second operands*/
			Local_u8FONOD = CAL_u8OperandNOD(Local_u32FO);
    317e:	89 85       	ldd	r24, Y+9	; 0x09
    3180:	9a 85       	ldd	r25, Y+10	; 0x0a
    3182:	ab 85       	ldd	r26, Y+11	; 0x0b
    3184:	bc 85       	ldd	r27, Y+12	; 0x0c
    3186:	bc 01       	movw	r22, r24
    3188:	cd 01       	movw	r24, r26
    318a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <CAL_u8OperandNOD>
    318e:	88 8b       	std	Y+16, r24	; 0x10
			Local_u8SONOD = CAL_u8OperandNOD(Local_u32SO);
    3190:	8d 81       	ldd	r24, Y+5	; 0x05
    3192:	9e 81       	ldd	r25, Y+6	; 0x06
    3194:	af 81       	ldd	r26, Y+7	; 0x07
    3196:	b8 85       	ldd	r27, Y+8	; 0x08
    3198:	bc 01       	movw	r22, r24
    319a:	cd 01       	movw	r24, r26
    319c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <CAL_u8OperandNOD>
    31a0:	8e 87       	std	Y+14, r24	; 0x0e

			/*The Key Pressed equal "/" and the NOD of second operand = 0 means still there is no second operand
			 * and the NOD of first operand not equal to zero means there is first operand
			 * */
			if(Local_u8KeyNB == '/' && Local_u8SONOD == 0 && Local_u8FONOD != 0)
    31a2:	8a 89       	ldd	r24, Y+18	; 0x12
    31a4:	8f 32       	cpi	r24, 0x2F	; 47
    31a6:	e1 f4       	brne	.+56     	; 0x31e0 <main+0x19a>
    31a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    31aa:	88 23       	and	r24, r24
    31ac:	c9 f4       	brne	.+50     	; 0x31e0 <main+0x19a>
    31ae:	88 89       	ldd	r24, Y+16	; 0x10
    31b0:	88 23       	and	r24, r24
    31b2:	b1 f0       	breq	.+44     	; 0x31e0 <main+0x19a>
			{
				/*first clear LCD*/
				LCD_voidClearLCD();
    31b4:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_voidClearLCD>

				/*Print the first operand*/
				LCD_u8WriteINT(Local_u32FO, 0, 0);
    31b8:	89 85       	ldd	r24, Y+9	; 0x09
    31ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    31bc:	ab 85       	ldd	r26, Y+11	; 0x0b
    31be:	bc 85       	ldd	r27, Y+12	; 0x0c
    31c0:	bc 01       	movw	r22, r24
    31c2:	cd 01       	movw	r24, r26
    31c4:	40 e0       	ldi	r20, 0x00	; 0
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <LCD_u8WriteINT>

				/*print the second operand*/
				LCD_u8GoToXY(Local_u8FONOD, 0);
    31cc:	88 89       	ldd	r24, Y+16	; 0x10
    31ce:	60 e0       	ldi	r22, 0x00	; 0
    31d0:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
				LCD_voidWriteData('/');
    31d4:	8f e2       	ldi	r24, 0x2F	; 47
    31d6:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>

				/*assign '/' to sign variable*/
				Local_u8Sign = '/';
    31da:	8f e2       	ldi	r24, 0x2F	; 47
    31dc:	8f 87       	std	Y+15, r24	; 0x0f
    31de:	5c c0       	rjmp	.+184    	; 0x3298 <main+0x252>
			}

			/*The Key Pressed equal "*" and the NOD of second operand = 0 means still there is no second operand
			 * and the NOD of first operand not equal to zero means there is first operand
			 * */
			else if(Local_u8KeyNB == '*' && Local_u8SONOD == 0 && Local_u8FONOD != 0)
    31e0:	8a 89       	ldd	r24, Y+18	; 0x12
    31e2:	8a 32       	cpi	r24, 0x2A	; 42
    31e4:	e1 f4       	brne	.+56     	; 0x321e <main+0x1d8>
    31e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    31e8:	88 23       	and	r24, r24
    31ea:	c9 f4       	brne	.+50     	; 0x321e <main+0x1d8>
    31ec:	88 89       	ldd	r24, Y+16	; 0x10
    31ee:	88 23       	and	r24, r24
    31f0:	b1 f0       	breq	.+44     	; 0x321e <main+0x1d8>
			{
				/*first clear LCD*/
				LCD_voidClearLCD();
    31f2:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_voidClearLCD>

				/*Print the first operand*/
				LCD_u8WriteINT(Local_u32FO, 0, 0);
    31f6:	89 85       	ldd	r24, Y+9	; 0x09
    31f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31fa:	ab 85       	ldd	r26, Y+11	; 0x0b
    31fc:	bc 85       	ldd	r27, Y+12	; 0x0c
    31fe:	bc 01       	movw	r22, r24
    3200:	cd 01       	movw	r24, r26
    3202:	40 e0       	ldi	r20, 0x00	; 0
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <LCD_u8WriteINT>

				/*print the second operand*/
				LCD_u8GoToXY(Local_u8FONOD, 0);
    320a:	88 89       	ldd	r24, Y+16	; 0x10
    320c:	60 e0       	ldi	r22, 0x00	; 0
    320e:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
				LCD_voidWriteData('*');
    3212:	8a e2       	ldi	r24, 0x2A	; 42
    3214:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>

				/*assign '*' to sign variable*/
				Local_u8Sign = '*';
    3218:	8a e2       	ldi	r24, 0x2A	; 42
    321a:	8f 87       	std	Y+15, r24	; 0x0f
    321c:	3d c0       	rjmp	.+122    	; 0x3298 <main+0x252>
			}

			/*The Key Pressed equal "+" and the NOD of second operand = 0 means still there is no second operand
			 * and the NOD of first operand not equal to zero means there is first operand
			 * */
			else if(Local_u8KeyNB == '+' && Local_u8SONOD == 0 && Local_u8FONOD != 0)
    321e:	8a 89       	ldd	r24, Y+18	; 0x12
    3220:	8b 32       	cpi	r24, 0x2B	; 43
    3222:	e1 f4       	brne	.+56     	; 0x325c <main+0x216>
    3224:	8e 85       	ldd	r24, Y+14	; 0x0e
    3226:	88 23       	and	r24, r24
    3228:	c9 f4       	brne	.+50     	; 0x325c <main+0x216>
    322a:	88 89       	ldd	r24, Y+16	; 0x10
    322c:	88 23       	and	r24, r24
    322e:	b1 f0       	breq	.+44     	; 0x325c <main+0x216>
			{
				/*first clear LCD*/
				LCD_voidClearLCD();
    3230:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_voidClearLCD>

				/*Print the first operand*/
				LCD_u8WriteINT(Local_u32FO, 0, 0);
    3234:	89 85       	ldd	r24, Y+9	; 0x09
    3236:	9a 85       	ldd	r25, Y+10	; 0x0a
    3238:	ab 85       	ldd	r26, Y+11	; 0x0b
    323a:	bc 85       	ldd	r27, Y+12	; 0x0c
    323c:	bc 01       	movw	r22, r24
    323e:	cd 01       	movw	r24, r26
    3240:	40 e0       	ldi	r20, 0x00	; 0
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <LCD_u8WriteINT>

				/*print the second operand*/
				LCD_u8GoToXY(Local_u8FONOD, 0);
    3248:	88 89       	ldd	r24, Y+16	; 0x10
    324a:	60 e0       	ldi	r22, 0x00	; 0
    324c:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
				LCD_voidWriteData('+');
    3250:	8b e2       	ldi	r24, 0x2B	; 43
    3252:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>

				/*assign '*' to sign variable*/
				Local_u8Sign = '+';
    3256:	8b e2       	ldi	r24, 0x2B	; 43
    3258:	8f 87       	std	Y+15, r24	; 0x0f
    325a:	1e c0       	rjmp	.+60     	; 0x3298 <main+0x252>
			}

			/*The Key Pressed equal "-" and the NOD of second operand = 0 means still there is no second operand
			 * and the NOD of first operand not equal to zero means there is first operand
			 * */
			else if(Local_u8KeyNB == '-' && Local_u8SONOD == 0 && Local_u8FONOD != 0)
    325c:	8a 89       	ldd	r24, Y+18	; 0x12
    325e:	8d 32       	cpi	r24, 0x2D	; 45
    3260:	d9 f4       	brne	.+54     	; 0x3298 <main+0x252>
    3262:	8e 85       	ldd	r24, Y+14	; 0x0e
    3264:	88 23       	and	r24, r24
    3266:	c1 f4       	brne	.+48     	; 0x3298 <main+0x252>
    3268:	88 89       	ldd	r24, Y+16	; 0x10
    326a:	88 23       	and	r24, r24
    326c:	a9 f0       	breq	.+42     	; 0x3298 <main+0x252>
			{
				/*first clear LCD*/
				LCD_voidClearLCD();
    326e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_voidClearLCD>

				/*Print the first operand*/
				LCD_u8WriteINT(Local_u32FO, 0, 0);
    3272:	89 85       	ldd	r24, Y+9	; 0x09
    3274:	9a 85       	ldd	r25, Y+10	; 0x0a
    3276:	ab 85       	ldd	r26, Y+11	; 0x0b
    3278:	bc 85       	ldd	r27, Y+12	; 0x0c
    327a:	bc 01       	movw	r22, r24
    327c:	cd 01       	movw	r24, r26
    327e:	40 e0       	ldi	r20, 0x00	; 0
    3280:	20 e0       	ldi	r18, 0x00	; 0
    3282:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <LCD_u8WriteINT>

				/*print the second operand*/
				LCD_u8GoToXY(Local_u8FONOD, 0);
    3286:	88 89       	ldd	r24, Y+16	; 0x10
    3288:	60 e0       	ldi	r22, 0x00	; 0
    328a:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
				LCD_voidWriteData('-');
    328e:	8d e2       	ldi	r24, 0x2D	; 45
    3290:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>

				/*assign '*' to sign variable*/
				Local_u8Sign = '-';
    3294:	8d e2       	ldi	r24, 0x2D	; 45
    3296:	8f 87       	std	Y+15, r24	; 0x0f
			}

			/*if the 13 means Clear all calculator data*/
			if(Local_u8KeyNB == 13)
    3298:	8a 89       	ldd	r24, Y+18	; 0x12
    329a:	8d 30       	cpi	r24, 0x0D	; 13
    329c:	91 f4       	brne	.+36     	; 0x32c2 <main+0x27c>
			{
				/*Clear LCD*/
				LCD_voidClearLCD();
    329e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_voidClearLCD>

				/*Clear First Operand Value*/
				Local_u32FO = 0;
    32a2:	19 86       	std	Y+9, r1	; 0x09
    32a4:	1a 86       	std	Y+10, r1	; 0x0a
    32a6:	1b 86       	std	Y+11, r1	; 0x0b
    32a8:	1c 86       	std	Y+12, r1	; 0x0c

				/*Clear Second Operand Value*/
				Local_u32SO = 0;
    32aa:	1d 82       	std	Y+5, r1	; 0x05
    32ac:	1e 82       	std	Y+6, r1	; 0x06
    32ae:	1f 82       	std	Y+7, r1	; 0x07
    32b0:	18 86       	std	Y+8, r1	; 0x08

				/*Clear First Operand NOD Value*/
				Local_u8FONOD = 0;
    32b2:	18 8a       	std	Y+16, r1	; 0x10

				/*Clear Second Operand NOD Value*/
				Local_u8SONOD = 0;
    32b4:	1e 86       	std	Y+14, r1	; 0x0e

				/*Clear the Sign Value*/
				Local_u8Sign = 0;
    32b6:	1f 86       	std	Y+15, r1	; 0x0f

				/*Clear The Equal Value*/
				Local_u8Equal = 0;
    32b8:	1d 86       	std	Y+13, r1	; 0x0d

				/*Clear the Result Value*/
				Local_u32Result = 0;
    32ba:	19 82       	std	Y+1, r1	; 0x01
    32bc:	1a 82       	std	Y+2, r1	; 0x02
    32be:	1b 82       	std	Y+3, r1	; 0x03
    32c0:	1c 82       	std	Y+4, r1	; 0x04
			}

			/*If Key Pressed Equal '=' and NOD of second Operand Not Equal zero*/
			if(Local_u8KeyNB == '=' && Local_u8SONOD != 0)
    32c2:	8a 89       	ldd	r24, Y+18	; 0x12
    32c4:	8d 33       	cpi	r24, 0x3D	; 61
    32c6:	09 f0       	breq	.+2      	; 0x32ca <main+0x284>
    32c8:	e2 ce       	rjmp	.-572    	; 0x308e <main+0x48>
    32ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    32cc:	88 23       	and	r24, r24
    32ce:	09 f4       	brne	.+2      	; 0x32d2 <main+0x28c>
    32d0:	de ce       	rjmp	.-580    	; 0x308e <main+0x48>
			{
				/*Set the Equal Flag*/
				Local_u8Equal = 1;
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	8d 87       	std	Y+13, r24	; 0x0d

				/*Clear LCD*/
				LCD_voidClearLCD();
    32d6:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_voidClearLCD>

				/*Print first operand*/
				LCD_u8WriteINT(Local_u32FO, 0, 0);
    32da:	89 85       	ldd	r24, Y+9	; 0x09
    32dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32de:	ab 85       	ldd	r26, Y+11	; 0x0b
    32e0:	bc 85       	ldd	r27, Y+12	; 0x0c
    32e2:	bc 01       	movw	r22, r24
    32e4:	cd 01       	movw	r24, r26
    32e6:	40 e0       	ldi	r20, 0x00	; 0
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <LCD_u8WriteINT>

				/*Print the Sign*/
				LCD_u8GoToXY(Local_u8FONOD, 0);
    32ee:	88 89       	ldd	r24, Y+16	; 0x10
    32f0:	60 e0       	ldi	r22, 0x00	; 0
    32f2:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
				LCD_voidWriteData(Local_u8Sign);
    32f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    32f8:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>

				/*Print Second Operand*/
				LCD_u8WriteINT(Local_u32SO, Local_u8FONOD + 1, 0);
    32fc:	88 89       	ldd	r24, Y+16	; 0x10
    32fe:	28 2f       	mov	r18, r24
    3300:	2f 5f       	subi	r18, 0xFF	; 255
    3302:	8d 81       	ldd	r24, Y+5	; 0x05
    3304:	9e 81       	ldd	r25, Y+6	; 0x06
    3306:	af 81       	ldd	r26, Y+7	; 0x07
    3308:	b8 85       	ldd	r27, Y+8	; 0x08
    330a:	bc 01       	movw	r22, r24
    330c:	cd 01       	movw	r24, r26
    330e:	42 2f       	mov	r20, r18
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <LCD_u8WriteINT>

				/*Print Equal Symbol '=;*/
				LCD_u8GoToXY((Local_u8FONOD + Local_u8SONOD + 1), 0);
    3316:	98 89       	ldd	r25, Y+16	; 0x10
    3318:	8e 85       	ldd	r24, Y+14	; 0x0e
    331a:	89 0f       	add	r24, r25
    331c:	8f 5f       	subi	r24, 0xFF	; 255
    331e:	60 e0       	ldi	r22, 0x00	; 0
    3320:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
				LCD_voidWriteData('=');
    3324:	8d e3       	ldi	r24, 0x3D	; 61
    3326:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>

				/*Switch on the Sign Value to make the operation*/
				switch(Local_u8Sign)
    332a:	8f 85       	ldd	r24, Y+15	; 0x0f
    332c:	e8 2e       	mov	r14, r24
    332e:	ff 24       	eor	r15, r15
    3330:	fc 8a       	std	Y+20, r15	; 0x14
    3332:	eb 8a       	std	Y+19, r14	; 0x13
    3334:	0b 89       	ldd	r16, Y+19	; 0x13
    3336:	1c 89       	ldd	r17, Y+20	; 0x14
    3338:	0b 32       	cpi	r16, 0x2B	; 43
    333a:	11 05       	cpc	r17, r1
    333c:	09 f4       	brne	.+2      	; 0x3340 <main+0x2fa>
    333e:	a3 c0       	rjmp	.+326    	; 0x3486 <main+0x440>
    3340:	2b 89       	ldd	r18, Y+19	; 0x13
    3342:	3c 89       	ldd	r19, Y+20	; 0x14
    3344:	2c 32       	cpi	r18, 0x2C	; 44
    3346:	31 05       	cpc	r19, r1
    3348:	34 f4       	brge	.+12     	; 0x3356 <main+0x310>
    334a:	8b 89       	ldd	r24, Y+19	; 0x13
    334c:	9c 89       	ldd	r25, Y+20	; 0x14
    334e:	8a 32       	cpi	r24, 0x2A	; 42
    3350:	91 05       	cpc	r25, r1
    3352:	51 f1       	breq	.+84     	; 0x33a8 <main+0x362>
    3354:	b2 c0       	rjmp	.+356    	; 0x34ba <main+0x474>
    3356:	0b 89       	ldd	r16, Y+19	; 0x13
    3358:	1c 89       	ldd	r17, Y+20	; 0x14
    335a:	0d 32       	cpi	r16, 0x2D	; 45
    335c:	11 05       	cpc	r17, r1
    335e:	09 f4       	brne	.+2      	; 0x3362 <main+0x31c>
    3360:	40 c0       	rjmp	.+128    	; 0x33e2 <main+0x39c>
    3362:	2b 89       	ldd	r18, Y+19	; 0x13
    3364:	3c 89       	ldd	r19, Y+20	; 0x14
    3366:	2f 32       	cpi	r18, 0x2F	; 47
    3368:	31 05       	cpc	r19, r1
    336a:	09 f0       	breq	.+2      	; 0x336e <main+0x328>
    336c:	a6 c0       	rjmp	.+332    	; 0x34ba <main+0x474>
				{
				case '/':
					Local_u32Result = Local_u32FO / Local_u32SO;
    336e:	89 85       	ldd	r24, Y+9	; 0x09
    3370:	9a 85       	ldd	r25, Y+10	; 0x0a
    3372:	ab 85       	ldd	r26, Y+11	; 0x0b
    3374:	bc 85       	ldd	r27, Y+12	; 0x0c
    3376:	2d 81       	ldd	r18, Y+5	; 0x05
    3378:	3e 81       	ldd	r19, Y+6	; 0x06
    337a:	4f 81       	ldd	r20, Y+7	; 0x07
    337c:	58 85       	ldd	r21, Y+8	; 0x08
    337e:	bc 01       	movw	r22, r24
    3380:	cd 01       	movw	r24, r26
    3382:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__udivmodsi4>
    3386:	da 01       	movw	r26, r20
    3388:	c9 01       	movw	r24, r18
    338a:	89 83       	std	Y+1, r24	; 0x01
    338c:	9a 83       	std	Y+2, r25	; 0x02
    338e:	ab 83       	std	Y+3, r26	; 0x03
    3390:	bc 83       	std	Y+4, r27	; 0x04
					LCD_u8WriteINT(Local_u32Result, 0, 1);
    3392:	89 81       	ldd	r24, Y+1	; 0x01
    3394:	9a 81       	ldd	r25, Y+2	; 0x02
    3396:	ab 81       	ldd	r26, Y+3	; 0x03
    3398:	bc 81       	ldd	r27, Y+4	; 0x04
    339a:	bc 01       	movw	r22, r24
    339c:	cd 01       	movw	r24, r26
    339e:	40 e0       	ldi	r20, 0x00	; 0
    33a0:	21 e0       	ldi	r18, 0x01	; 1
    33a2:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <LCD_u8WriteINT>
    33a6:	89 c0       	rjmp	.+274    	; 0x34ba <main+0x474>
					break;

				case '*':
					Local_u32Result = Local_u32FO * Local_u32SO;
    33a8:	89 85       	ldd	r24, Y+9	; 0x09
    33aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ac:	ab 85       	ldd	r26, Y+11	; 0x0b
    33ae:	bc 85       	ldd	r27, Y+12	; 0x0c
    33b0:	2d 81       	ldd	r18, Y+5	; 0x05
    33b2:	3e 81       	ldd	r19, Y+6	; 0x06
    33b4:	4f 81       	ldd	r20, Y+7	; 0x07
    33b6:	58 85       	ldd	r21, Y+8	; 0x08
    33b8:	bc 01       	movw	r22, r24
    33ba:	cd 01       	movw	r24, r26
    33bc:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <__mulsi3>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	89 83       	std	Y+1, r24	; 0x01
    33c6:	9a 83       	std	Y+2, r25	; 0x02
    33c8:	ab 83       	std	Y+3, r26	; 0x03
    33ca:	bc 83       	std	Y+4, r27	; 0x04
					LCD_u8WriteINT(Local_u32Result, 0, 1);
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
    33ce:	9a 81       	ldd	r25, Y+2	; 0x02
    33d0:	ab 81       	ldd	r26, Y+3	; 0x03
    33d2:	bc 81       	ldd	r27, Y+4	; 0x04
    33d4:	bc 01       	movw	r22, r24
    33d6:	cd 01       	movw	r24, r26
    33d8:	40 e0       	ldi	r20, 0x00	; 0
    33da:	21 e0       	ldi	r18, 0x01	; 1
    33dc:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <LCD_u8WriteINT>
    33e0:	6c c0       	rjmp	.+216    	; 0x34ba <main+0x474>
					break;

				case '-':
					/*if second operand Greater than first operand means the operation will give a minus value*/
					if(Local_u32SO > Local_u32FO)
    33e2:	2d 81       	ldd	r18, Y+5	; 0x05
    33e4:	3e 81       	ldd	r19, Y+6	; 0x06
    33e6:	4f 81       	ldd	r20, Y+7	; 0x07
    33e8:	58 85       	ldd	r21, Y+8	; 0x08
    33ea:	89 85       	ldd	r24, Y+9	; 0x09
    33ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ee:	ab 85       	ldd	r26, Y+11	; 0x0b
    33f0:	bc 85       	ldd	r27, Y+12	; 0x0c
    33f2:	82 17       	cp	r24, r18
    33f4:	93 07       	cpc	r25, r19
    33f6:	a4 07       	cpc	r26, r20
    33f8:	b5 07       	cpc	r27, r21
    33fa:	30 f5       	brcc	.+76     	; 0x3448 <main+0x402>
					{
						/*make the operation */
						Local_u32Result = Local_u32SO - Local_u32FO;
    33fc:	2d 81       	ldd	r18, Y+5	; 0x05
    33fe:	3e 81       	ldd	r19, Y+6	; 0x06
    3400:	4f 81       	ldd	r20, Y+7	; 0x07
    3402:	58 85       	ldd	r21, Y+8	; 0x08
    3404:	89 85       	ldd	r24, Y+9	; 0x09
    3406:	9a 85       	ldd	r25, Y+10	; 0x0a
    3408:	ab 85       	ldd	r26, Y+11	; 0x0b
    340a:	bc 85       	ldd	r27, Y+12	; 0x0c
    340c:	79 01       	movw	r14, r18
    340e:	8a 01       	movw	r16, r20
    3410:	e8 1a       	sub	r14, r24
    3412:	f9 0a       	sbc	r15, r25
    3414:	0a 0b       	sbc	r16, r26
    3416:	1b 0b       	sbc	r17, r27
    3418:	d8 01       	movw	r26, r16
    341a:	c7 01       	movw	r24, r14
    341c:	89 83       	std	Y+1, r24	; 0x01
    341e:	9a 83       	std	Y+2, r25	; 0x02
    3420:	ab 83       	std	Y+3, r26	; 0x03
    3422:	bc 83       	std	Y+4, r27	; 0x04

						/*put the minus symbol*/
						LCD_u8GoToXY(0, 1);
    3424:	80 e0       	ldi	r24, 0x00	; 0
    3426:	61 e0       	ldi	r22, 0x01	; 1
    3428:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_u8GoToXY>
						LCD_voidWriteData(Local_u8Sign);
    342c:	8f 85       	ldd	r24, Y+15	; 0x0f
    342e:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_voidWriteData>

						/*put the result*/
						LCD_u8WriteINT(Local_u32Result, 1, 1);
    3432:	89 81       	ldd	r24, Y+1	; 0x01
    3434:	9a 81       	ldd	r25, Y+2	; 0x02
    3436:	ab 81       	ldd	r26, Y+3	; 0x03
    3438:	bc 81       	ldd	r27, Y+4	; 0x04
    343a:	bc 01       	movw	r22, r24
    343c:	cd 01       	movw	r24, r26
    343e:	41 e0       	ldi	r20, 0x01	; 1
    3440:	21 e0       	ldi	r18, 0x01	; 1
    3442:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <LCD_u8WriteINT>
    3446:	39 c0       	rjmp	.+114    	; 0x34ba <main+0x474>
					}
					else
					{
						Local_u32Result = Local_u32FO - Local_u32SO;
    3448:	29 85       	ldd	r18, Y+9	; 0x09
    344a:	3a 85       	ldd	r19, Y+10	; 0x0a
    344c:	4b 85       	ldd	r20, Y+11	; 0x0b
    344e:	5c 85       	ldd	r21, Y+12	; 0x0c
    3450:	8d 81       	ldd	r24, Y+5	; 0x05
    3452:	9e 81       	ldd	r25, Y+6	; 0x06
    3454:	af 81       	ldd	r26, Y+7	; 0x07
    3456:	b8 85       	ldd	r27, Y+8	; 0x08
    3458:	79 01       	movw	r14, r18
    345a:	8a 01       	movw	r16, r20
    345c:	e8 1a       	sub	r14, r24
    345e:	f9 0a       	sbc	r15, r25
    3460:	0a 0b       	sbc	r16, r26
    3462:	1b 0b       	sbc	r17, r27
    3464:	d8 01       	movw	r26, r16
    3466:	c7 01       	movw	r24, r14
    3468:	89 83       	std	Y+1, r24	; 0x01
    346a:	9a 83       	std	Y+2, r25	; 0x02
    346c:	ab 83       	std	Y+3, r26	; 0x03
    346e:	bc 83       	std	Y+4, r27	; 0x04
						LCD_u8WriteINT(Local_u32Result, 0, 1);
    3470:	89 81       	ldd	r24, Y+1	; 0x01
    3472:	9a 81       	ldd	r25, Y+2	; 0x02
    3474:	ab 81       	ldd	r26, Y+3	; 0x03
    3476:	bc 81       	ldd	r27, Y+4	; 0x04
    3478:	bc 01       	movw	r22, r24
    347a:	cd 01       	movw	r24, r26
    347c:	40 e0       	ldi	r20, 0x00	; 0
    347e:	21 e0       	ldi	r18, 0x01	; 1
    3480:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <LCD_u8WriteINT>
    3484:	1a c0       	rjmp	.+52     	; 0x34ba <main+0x474>
					}
					break;

				case '+':
					Local_u32Result = Local_u32FO + Local_u32SO;
    3486:	29 85       	ldd	r18, Y+9	; 0x09
    3488:	3a 85       	ldd	r19, Y+10	; 0x0a
    348a:	4b 85       	ldd	r20, Y+11	; 0x0b
    348c:	5c 85       	ldd	r21, Y+12	; 0x0c
    348e:	8d 81       	ldd	r24, Y+5	; 0x05
    3490:	9e 81       	ldd	r25, Y+6	; 0x06
    3492:	af 81       	ldd	r26, Y+7	; 0x07
    3494:	b8 85       	ldd	r27, Y+8	; 0x08
    3496:	82 0f       	add	r24, r18
    3498:	93 1f       	adc	r25, r19
    349a:	a4 1f       	adc	r26, r20
    349c:	b5 1f       	adc	r27, r21
    349e:	89 83       	std	Y+1, r24	; 0x01
    34a0:	9a 83       	std	Y+2, r25	; 0x02
    34a2:	ab 83       	std	Y+3, r26	; 0x03
    34a4:	bc 83       	std	Y+4, r27	; 0x04
					LCD_u8WriteINT(Local_u32Result, 0, 1);
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	9a 81       	ldd	r25, Y+2	; 0x02
    34aa:	ab 81       	ldd	r26, Y+3	; 0x03
    34ac:	bc 81       	ldd	r27, Y+4	; 0x04
    34ae:	bc 01       	movw	r22, r24
    34b0:	cd 01       	movw	r24, r26
    34b2:	40 e0       	ldi	r20, 0x00	; 0
    34b4:	21 e0       	ldi	r18, 0x01	; 1
    34b6:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <LCD_u8WriteINT>
					break;
				}

				/*Make the first operand equal the first operand if you want to make an operation on the result*/
				Local_u32FO = Local_u32Result;
    34ba:	89 81       	ldd	r24, Y+1	; 0x01
    34bc:	9a 81       	ldd	r25, Y+2	; 0x02
    34be:	ab 81       	ldd	r26, Y+3	; 0x03
    34c0:	bc 81       	ldd	r27, Y+4	; 0x04
    34c2:	89 87       	std	Y+9, r24	; 0x09
    34c4:	9a 87       	std	Y+10, r25	; 0x0a
    34c6:	ab 87       	std	Y+11, r26	; 0x0b
    34c8:	bc 87       	std	Y+12, r27	; 0x0c

				/*Make the second operand equal to zero*/
				Local_u32SO = 0;
    34ca:	1d 82       	std	Y+5, r1	; 0x05
    34cc:	1e 82       	std	Y+6, r1	; 0x06
    34ce:	1f 82       	std	Y+7, r1	; 0x07
    34d0:	18 86       	std	Y+8, r1	; 0x08

				/*second operand NOD equal to zero*/
				Local_u8SONOD = 0;
    34d2:	1e 86       	std	Y+14, r1	; 0x0e

				/*clear the equal flag*/
				Local_u8Equal = 0;
    34d4:	1d 86       	std	Y+13, r1	; 0x0d
    34d6:	db cd       	rjmp	.-1098   	; 0x308e <main+0x48>

000034d8 <__mulsi3>:
    34d8:	62 9f       	mul	r22, r18
    34da:	d0 01       	movw	r26, r0
    34dc:	73 9f       	mul	r23, r19
    34de:	f0 01       	movw	r30, r0
    34e0:	82 9f       	mul	r24, r18
    34e2:	e0 0d       	add	r30, r0
    34e4:	f1 1d       	adc	r31, r1
    34e6:	64 9f       	mul	r22, r20
    34e8:	e0 0d       	add	r30, r0
    34ea:	f1 1d       	adc	r31, r1
    34ec:	92 9f       	mul	r25, r18
    34ee:	f0 0d       	add	r31, r0
    34f0:	83 9f       	mul	r24, r19
    34f2:	f0 0d       	add	r31, r0
    34f4:	74 9f       	mul	r23, r20
    34f6:	f0 0d       	add	r31, r0
    34f8:	65 9f       	mul	r22, r21
    34fa:	f0 0d       	add	r31, r0
    34fc:	99 27       	eor	r25, r25
    34fe:	72 9f       	mul	r23, r18
    3500:	b0 0d       	add	r27, r0
    3502:	e1 1d       	adc	r30, r1
    3504:	f9 1f       	adc	r31, r25
    3506:	63 9f       	mul	r22, r19
    3508:	b0 0d       	add	r27, r0
    350a:	e1 1d       	adc	r30, r1
    350c:	f9 1f       	adc	r31, r25
    350e:	bd 01       	movw	r22, r26
    3510:	cf 01       	movw	r24, r30
    3512:	11 24       	eor	r1, r1
    3514:	08 95       	ret

00003516 <__udivmodsi4>:
    3516:	a1 e2       	ldi	r26, 0x21	; 33
    3518:	1a 2e       	mov	r1, r26
    351a:	aa 1b       	sub	r26, r26
    351c:	bb 1b       	sub	r27, r27
    351e:	fd 01       	movw	r30, r26
    3520:	0d c0       	rjmp	.+26     	; 0x353c <__udivmodsi4_ep>

00003522 <__udivmodsi4_loop>:
    3522:	aa 1f       	adc	r26, r26
    3524:	bb 1f       	adc	r27, r27
    3526:	ee 1f       	adc	r30, r30
    3528:	ff 1f       	adc	r31, r31
    352a:	a2 17       	cp	r26, r18
    352c:	b3 07       	cpc	r27, r19
    352e:	e4 07       	cpc	r30, r20
    3530:	f5 07       	cpc	r31, r21
    3532:	20 f0       	brcs	.+8      	; 0x353c <__udivmodsi4_ep>
    3534:	a2 1b       	sub	r26, r18
    3536:	b3 0b       	sbc	r27, r19
    3538:	e4 0b       	sbc	r30, r20
    353a:	f5 0b       	sbc	r31, r21

0000353c <__udivmodsi4_ep>:
    353c:	66 1f       	adc	r22, r22
    353e:	77 1f       	adc	r23, r23
    3540:	88 1f       	adc	r24, r24
    3542:	99 1f       	adc	r25, r25
    3544:	1a 94       	dec	r1
    3546:	69 f7       	brne	.-38     	; 0x3522 <__udivmodsi4_loop>
    3548:	60 95       	com	r22
    354a:	70 95       	com	r23
    354c:	80 95       	com	r24
    354e:	90 95       	com	r25
    3550:	9b 01       	movw	r18, r22
    3552:	ac 01       	movw	r20, r24
    3554:	bd 01       	movw	r22, r26
    3556:	cf 01       	movw	r24, r30
    3558:	08 95       	ret

0000355a <__prologue_saves__>:
    355a:	2f 92       	push	r2
    355c:	3f 92       	push	r3
    355e:	4f 92       	push	r4
    3560:	5f 92       	push	r5
    3562:	6f 92       	push	r6
    3564:	7f 92       	push	r7
    3566:	8f 92       	push	r8
    3568:	9f 92       	push	r9
    356a:	af 92       	push	r10
    356c:	bf 92       	push	r11
    356e:	cf 92       	push	r12
    3570:	df 92       	push	r13
    3572:	ef 92       	push	r14
    3574:	ff 92       	push	r15
    3576:	0f 93       	push	r16
    3578:	1f 93       	push	r17
    357a:	cf 93       	push	r28
    357c:	df 93       	push	r29
    357e:	cd b7       	in	r28, 0x3d	; 61
    3580:	de b7       	in	r29, 0x3e	; 62
    3582:	ca 1b       	sub	r28, r26
    3584:	db 0b       	sbc	r29, r27
    3586:	0f b6       	in	r0, 0x3f	; 63
    3588:	f8 94       	cli
    358a:	de bf       	out	0x3e, r29	; 62
    358c:	0f be       	out	0x3f, r0	; 63
    358e:	cd bf       	out	0x3d, r28	; 61
    3590:	09 94       	ijmp

00003592 <__epilogue_restores__>:
    3592:	2a 88       	ldd	r2, Y+18	; 0x12
    3594:	39 88       	ldd	r3, Y+17	; 0x11
    3596:	48 88       	ldd	r4, Y+16	; 0x10
    3598:	5f 84       	ldd	r5, Y+15	; 0x0f
    359a:	6e 84       	ldd	r6, Y+14	; 0x0e
    359c:	7d 84       	ldd	r7, Y+13	; 0x0d
    359e:	8c 84       	ldd	r8, Y+12	; 0x0c
    35a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    35a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    35a4:	b9 84       	ldd	r11, Y+9	; 0x09
    35a6:	c8 84       	ldd	r12, Y+8	; 0x08
    35a8:	df 80       	ldd	r13, Y+7	; 0x07
    35aa:	ee 80       	ldd	r14, Y+6	; 0x06
    35ac:	fd 80       	ldd	r15, Y+5	; 0x05
    35ae:	0c 81       	ldd	r16, Y+4	; 0x04
    35b0:	1b 81       	ldd	r17, Y+3	; 0x03
    35b2:	aa 81       	ldd	r26, Y+2	; 0x02
    35b4:	b9 81       	ldd	r27, Y+1	; 0x01
    35b6:	ce 0f       	add	r28, r30
    35b8:	d1 1d       	adc	r29, r1
    35ba:	0f b6       	in	r0, 0x3f	; 63
    35bc:	f8 94       	cli
    35be:	de bf       	out	0x3e, r29	; 62
    35c0:	0f be       	out	0x3f, r0	; 63
    35c2:	cd bf       	out	0x3d, r28	; 61
    35c4:	ed 01       	movw	r28, r26
    35c6:	08 95       	ret

000035c8 <_exit>:
    35c8:	f8 94       	cli

000035ca <__stop_program>:
    35ca:	ff cf       	rjmp	.-2      	; 0x35ca <__stop_program>
