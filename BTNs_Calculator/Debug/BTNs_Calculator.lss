
BTNs_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003584  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00003584  000035f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000028c8  00000000  00000000  00003708  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d5c  00000000  00000000  00005fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00006d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00006ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  000070be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  000094c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000a84f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000ba28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000bbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000bede  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c84c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 c2 18 	call	0x3184	; 0x3184 <main>
      7a:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 89 1a 	jmp	0x3512	; 0x3512 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 a5 1a 	jmp	0x354a	; 0x354a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 95 1a 	jmp	0x352a	; 0x352a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 95 1a 	jmp	0x352a	; 0x352a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 89 1a 	jmp	0x3512	; 0x3512 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 a5 1a 	jmp	0x354a	; 0x354a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 95 1a 	jmp	0x352a	; 0x352a <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 95 1a 	jmp	0x352a	; 0x352a <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 95 1a 	jmp	0x352a	; 0x352a <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e8 59       	subi	r30, 0x98	; 152
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <BTN_u8Initialization>:
 * Input		: Port Number, Pin Number
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 BTN_u8Initialization(u8 Copy_u8BTNPort, u8 Copy_u8BTNPin)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <BTN_u8Initialization+0x6>
     e24:	0f 92       	push	r0
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	8a 83       	std	Y+2, r24	; 0x02
     e2c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Error = 0;
     e2e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8BTNPort > 3 || Copy_u8BTNPin > 7)
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	84 30       	cpi	r24, 0x04	; 4
     e34:	18 f4       	brcc	.+6      	; 0xe3c <BTN_u8Initialization+0x1e>
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	88 30       	cpi	r24, 0x08	; 8
     e3a:	18 f0       	brcs	.+6      	; 0xe42 <BTN_u8Initialization+0x24>
	{
		Local_u8Error = 1;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	89 83       	std	Y+1, r24	; 0x01
     e40:	0a c0       	rjmp	.+20     	; 0xe56 <BTN_u8Initialization+0x38>
	}
	else
	{
		/*Button pin as input*/
		DIO_u8SetPinDirection(Copy_u8BTNPort, Copy_u8BTNPin, DIO_INPUT);
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	6b 81       	ldd	r22, Y+3	; 0x03
     e46:	40 e0       	ldi	r20, 0x00	; 0
     e48:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_u8SetPinDirection>
		/*Make an internal Pull up resistor*/
		DIO_u8SetPinValue(Copy_u8BTNPort, Copy_u8BTNPin, DIO_HIGH);
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	6b 81       	ldd	r22, Y+3	; 0x03
     e50:	41 e0       	ldi	r20, 0x01	; 1
     e52:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_u8SetPinValue>
	}
	return Local_u8Error;
     e56:	89 81       	ldd	r24, Y+1	; 0x01
}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <BTN_u8Pressed>:
 * Input		: Port Number, Pin Number, pointer for the Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 BTN_u8Pressed(u8 Copy_u8BTNPort, u8 Copy_u8BTNPin, u8 *Copy_u8Value)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	a2 97       	sbiw	r28, 0x22	; 34
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	8f 8f       	std	Y+31, r24	; 0x1f
     e7a:	68 a3       	std	Y+32, r22	; 0x20
     e7c:	5a a3       	std	Y+34, r21	; 0x22
     e7e:	49 a3       	std	Y+33, r20	; 0x21
	u8 Local_u8Error = 0;
     e80:	1d 8e       	std	Y+29, r1	; 0x1d
	u8 Local_u8BtnValue = 0;
     e82:	1e 8e       	std	Y+30, r1	; 0x1e

	if(Copy_u8BTNPort > 3 || Copy_u8BTNPin > 7)
     e84:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e86:	84 30       	cpi	r24, 0x04	; 4
     e88:	18 f4       	brcc	.+6      	; 0xe90 <BTN_u8Pressed+0x2c>
     e8a:	88 a1       	ldd	r24, Y+32	; 0x20
     e8c:	88 30       	cpi	r24, 0x08	; 8
     e8e:	18 f0       	brcs	.+6      	; 0xe96 <BTN_u8Pressed+0x32>
	{
		Local_u8Error = 1;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	8d 8f       	std	Y+29, r24	; 0x1d
     e94:	04 c1       	rjmp	.+520    	; 0x109e <BTN_u8Pressed+0x23a>
	}
	else
	{
		DIO_u8GetPinValue(Copy_u8BTNPort, Copy_u8BTNPin, &Local_u8BtnValue);
     e96:	9e 01       	movw	r18, r28
     e98:	22 5e       	subi	r18, 0xE2	; 226
     e9a:	3f 4f       	sbci	r19, 0xFF	; 255
     e9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e9e:	68 a1       	ldd	r22, Y+32	; 0x20
     ea0:	a9 01       	movw	r20, r18
     ea2:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <DIO_u8GetPinValue>

		if(Local_u8BtnValue == DIO_LOW)
     ea6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ea8:	88 23       	and	r24, r24
     eaa:	09 f0       	breq	.+2      	; 0xeae <BTN_u8Pressed+0x4a>
     eac:	f4 c0       	rjmp	.+488    	; 0x1096 <BTN_u8Pressed+0x232>
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	a0 e2       	ldi	r26, 0x20	; 32
     eb4:	b1 e4       	ldi	r27, 0x41	; 65
     eb6:	89 8f       	std	Y+25, r24	; 0x19
     eb8:	9a 8f       	std	Y+26, r25	; 0x1a
     eba:	ab 8f       	std	Y+27, r26	; 0x1b
     ebc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ebe:	69 8d       	ldd	r22, Y+25	; 0x19
     ec0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ec2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ec4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	4a ef       	ldi	r20, 0xFA	; 250
     ecc:	54 e4       	ldi	r21, 0x44	; 68
     ece:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ed2:	dc 01       	movw	r26, r24
     ed4:	cb 01       	movw	r24, r22
     ed6:	8d 8b       	std	Y+21, r24	; 0x15
     ed8:	9e 8b       	std	Y+22, r25	; 0x16
     eda:	af 8b       	std	Y+23, r26	; 0x17
     edc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ede:	6d 89       	ldd	r22, Y+21	; 0x15
     ee0:	7e 89       	ldd	r23, Y+22	; 0x16
     ee2:	8f 89       	ldd	r24, Y+23	; 0x17
     ee4:	98 8d       	ldd	r25, Y+24	; 0x18
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	40 e8       	ldi	r20, 0x80	; 128
     eec:	5f e3       	ldi	r21, 0x3F	; 63
     eee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     ef2:	88 23       	and	r24, r24
     ef4:	2c f4       	brge	.+10     	; 0xf00 <BTN_u8Pressed+0x9c>
		__ticks = 1;
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	9c 8b       	std	Y+20, r25	; 0x14
     efc:	8b 8b       	std	Y+19, r24	; 0x13
     efe:	3f c0       	rjmp	.+126    	; 0xf7e <BTN_u8Pressed+0x11a>
	else if (__tmp > 65535)
     f00:	6d 89       	ldd	r22, Y+21	; 0x15
     f02:	7e 89       	ldd	r23, Y+22	; 0x16
     f04:	8f 89       	ldd	r24, Y+23	; 0x17
     f06:	98 8d       	ldd	r25, Y+24	; 0x18
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	3f ef       	ldi	r19, 0xFF	; 255
     f0c:	4f e7       	ldi	r20, 0x7F	; 127
     f0e:	57 e4       	ldi	r21, 0x47	; 71
     f10:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f14:	18 16       	cp	r1, r24
     f16:	4c f5       	brge	.+82     	; 0xf6a <BTN_u8Pressed+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f18:	69 8d       	ldd	r22, Y+25	; 0x19
     f1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e2       	ldi	r20, 0x20	; 32
     f26:	51 e4       	ldi	r21, 0x41	; 65
     f28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	bc 01       	movw	r22, r24
     f32:	cd 01       	movw	r24, r26
     f34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	9c 8b       	std	Y+20, r25	; 0x14
     f3e:	8b 8b       	std	Y+19, r24	; 0x13
     f40:	0f c0       	rjmp	.+30     	; 0xf60 <BTN_u8Pressed+0xfc>
     f42:	88 ec       	ldi	r24, 0xC8	; 200
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	9a 8b       	std	Y+18, r25	; 0x12
     f48:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f4a:	89 89       	ldd	r24, Y+17	; 0x11
     f4c:	9a 89       	ldd	r25, Y+18	; 0x12
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	f1 f7       	brne	.-4      	; 0xf4e <BTN_u8Pressed+0xea>
     f52:	9a 8b       	std	Y+18, r25	; 0x12
     f54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f56:	8b 89       	ldd	r24, Y+19	; 0x13
     f58:	9c 89       	ldd	r25, Y+20	; 0x14
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	9c 8b       	std	Y+20, r25	; 0x14
     f5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f60:	8b 89       	ldd	r24, Y+19	; 0x13
     f62:	9c 89       	ldd	r25, Y+20	; 0x14
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	69 f7       	brne	.-38     	; 0xf42 <BTN_u8Pressed+0xde>
     f68:	1d c0       	rjmp	.+58     	; 0xfa4 <BTN_u8Pressed+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f6a:	6d 89       	ldd	r22, Y+21	; 0x15
     f6c:	7e 89       	ldd	r23, Y+22	; 0x16
     f6e:	8f 89       	ldd	r24, Y+23	; 0x17
     f70:	98 8d       	ldd	r25, Y+24	; 0x18
     f72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	9c 8b       	std	Y+20, r25	; 0x14
     f7c:	8b 8b       	std	Y+19, r24	; 0x13
     f7e:	8b 89       	ldd	r24, Y+19	; 0x13
     f80:	9c 89       	ldd	r25, Y+20	; 0x14
     f82:	98 8b       	std	Y+16, r25	; 0x10
     f84:	8f 87       	std	Y+15, r24	; 0x0f
     f86:	8f 85       	ldd	r24, Y+15	; 0x0f
     f88:	98 89       	ldd	r25, Y+16	; 0x10
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <BTN_u8Pressed+0x126>
     f8e:	98 8b       	std	Y+16, r25	; 0x10
     f90:	8f 87       	std	Y+15, r24	; 0x0f
     f92:	08 c0       	rjmp	.+16     	; 0xfa4 <BTN_u8Pressed+0x140>
		{
			_delay_ms(10);

			while(Local_u8BtnValue != DIO_HIGH)
			{
				DIO_u8GetPinValue(Copy_u8BTNPort, Copy_u8BTNPin, &Local_u8BtnValue);
     f94:	9e 01       	movw	r18, r28
     f96:	22 5e       	subi	r18, 0xE2	; 226
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
     f9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f9c:	68 a1       	ldd	r22, Y+32	; 0x20
     f9e:	a9 01       	movw	r20, r18
     fa0:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <DIO_u8GetPinValue>

		if(Local_u8BtnValue == DIO_LOW)
		{
			_delay_ms(10);

			while(Local_u8BtnValue != DIO_HIGH)
     fa4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	a9 f7       	brne	.-22     	; 0xf94 <BTN_u8Pressed+0x130>
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	a0 e2       	ldi	r26, 0x20	; 32
     fb0:	b1 e4       	ldi	r27, 0x41	; 65
     fb2:	8b 87       	std	Y+11, r24	; 0x0b
     fb4:	9c 87       	std	Y+12, r25	; 0x0c
     fb6:	ad 87       	std	Y+13, r26	; 0x0d
     fb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fba:	6b 85       	ldd	r22, Y+11	; 0x0b
     fbc:	7c 85       	ldd	r23, Y+12	; 0x0c
     fbe:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	4a ef       	ldi	r20, 0xFA	; 250
     fc8:	54 e4       	ldi	r21, 0x44	; 68
     fca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	8f 83       	std	Y+7, r24	; 0x07
     fd4:	98 87       	std	Y+8, r25	; 0x08
     fd6:	a9 87       	std	Y+9, r26	; 0x09
     fd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fda:	6f 81       	ldd	r22, Y+7	; 0x07
     fdc:	78 85       	ldd	r23, Y+8	; 0x08
     fde:	89 85       	ldd	r24, Y+9	; 0x09
     fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	40 e8       	ldi	r20, 0x80	; 128
     fe8:	5f e3       	ldi	r21, 0x3F	; 63
     fea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     fee:	88 23       	and	r24, r24
     ff0:	2c f4       	brge	.+10     	; 0xffc <BTN_u8Pressed+0x198>
		__ticks = 1;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	9e 83       	std	Y+6, r25	; 0x06
     ff8:	8d 83       	std	Y+5, r24	; 0x05
     ffa:	3f c0       	rjmp	.+126    	; 0x107a <BTN_u8Pressed+0x216>
	else if (__tmp > 65535)
     ffc:	6f 81       	ldd	r22, Y+7	; 0x07
     ffe:	78 85       	ldd	r23, Y+8	; 0x08
    1000:	89 85       	ldd	r24, Y+9	; 0x09
    1002:	9a 85       	ldd	r25, Y+10	; 0x0a
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	3f ef       	ldi	r19, 0xFF	; 255
    1008:	4f e7       	ldi	r20, 0x7F	; 127
    100a:	57 e4       	ldi	r21, 0x47	; 71
    100c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1010:	18 16       	cp	r1, r24
    1012:	4c f5       	brge	.+82     	; 0x1066 <BTN_u8Pressed+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1014:	6b 85       	ldd	r22, Y+11	; 0x0b
    1016:	7c 85       	ldd	r23, Y+12	; 0x0c
    1018:	8d 85       	ldd	r24, Y+13	; 0x0d
    101a:	9e 85       	ldd	r25, Y+14	; 0x0e
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e2       	ldi	r20, 0x20	; 32
    1022:	51 e4       	ldi	r21, 0x41	; 65
    1024:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	bc 01       	movw	r22, r24
    102e:	cd 01       	movw	r24, r26
    1030:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9e 83       	std	Y+6, r25	; 0x06
    103a:	8d 83       	std	Y+5, r24	; 0x05
    103c:	0f c0       	rjmp	.+30     	; 0x105c <BTN_u8Pressed+0x1f8>
    103e:	88 ec       	ldi	r24, 0xC8	; 200
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	9c 83       	std	Y+4, r25	; 0x04
    1044:	8b 83       	std	Y+3, r24	; 0x03
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <BTN_u8Pressed+0x1e6>
    104e:	9c 83       	std	Y+4, r25	; 0x04
    1050:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1052:	8d 81       	ldd	r24, Y+5	; 0x05
    1054:	9e 81       	ldd	r25, Y+6	; 0x06
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	9e 83       	std	Y+6, r25	; 0x06
    105a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	69 f7       	brne	.-38     	; 0x103e <BTN_u8Pressed+0x1da>
    1064:	14 c0       	rjmp	.+40     	; 0x108e <BTN_u8Pressed+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1066:	6f 81       	ldd	r22, Y+7	; 0x07
    1068:	78 85       	ldd	r23, Y+8	; 0x08
    106a:	89 85       	ldd	r24, Y+9	; 0x09
    106c:	9a 85       	ldd	r25, Y+10	; 0x0a
    106e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	9e 83       	std	Y+6, r25	; 0x06
    1078:	8d 83       	std	Y+5, r24	; 0x05
    107a:	8d 81       	ldd	r24, Y+5	; 0x05
    107c:	9e 81       	ldd	r25, Y+6	; 0x06
    107e:	9a 83       	std	Y+2, r25	; 0x02
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9a 81       	ldd	r25, Y+2	; 0x02
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	f1 f7       	brne	.-4      	; 0x1086 <BTN_u8Pressed+0x222>
    108a:	9a 83       	std	Y+2, r25	; 0x02
    108c:	89 83       	std	Y+1, r24	; 0x01
			{
				DIO_u8GetPinValue(Copy_u8BTNPort, Copy_u8BTNPin, &Local_u8BtnValue);
			}
			_delay_ms(10);
			*Copy_u8Value = DIO_LOW;
    108e:	e9 a1       	ldd	r30, Y+33	; 0x21
    1090:	fa a1       	ldd	r31, Y+34	; 0x22
    1092:	10 82       	st	Z, r1
    1094:	04 c0       	rjmp	.+8      	; 0x109e <BTN_u8Pressed+0x23a>
		}
		else
		{
			*Copy_u8Value = DIO_HIGH;
    1096:	e9 a1       	ldd	r30, Y+33	; 0x21
    1098:	fa a1       	ldd	r31, Y+34	; 0x22
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	80 83       	st	Z, r24
		}
		//*Copy_u8Value = Local_u8BtnValue;
	}

	return Local_u8Error;
    109e:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    10a0:	a2 96       	adiw	r28, 0x22	; 34
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <DIO_u8SetPortDirection>:
 * Input		: Port Number, Direction
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPortDirection(u8 Copy_u8PortNB, u8 Copy_u8Dir)
{
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <DIO_u8SetPortDirection+0x6>
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <DIO_u8SetPortDirection+0x8>
    10ba:	0f 92       	push	r0
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	8a 83       	std	Y+2, r24	; 0x02
    10c2:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    10c4:	19 82       	std	Y+1, r1	; 0x01
	}

	else
		{
			/*Switch for the PORT Number if it 0 -> 3 it is OK else return Error*/
			switch(Copy_u8PortNB)
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3d 83       	std	Y+5, r19	; 0x05
    10ce:	2c 83       	std	Y+4, r18	; 0x04
    10d0:	8c 81       	ldd	r24, Y+4	; 0x04
    10d2:	9d 81       	ldd	r25, Y+5	; 0x05
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <DIO_u8SetPortDirection+0x5c>
    10da:	2c 81       	ldd	r18, Y+4	; 0x04
    10dc:	3d 81       	ldd	r19, Y+5	; 0x05
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <DIO_u8SetPortDirection+0x3c>
    10e4:	8c 81       	ldd	r24, Y+4	; 0x04
    10e6:	9d 81       	ldd	r25, Y+5	; 0x05
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <DIO_u8SetPortDirection+0x52>
    10ec:	1f c0       	rjmp	.+62     	; 0x112c <DIO_u8SetPortDirection+0x7a>
    10ee:	2c 81       	ldd	r18, Y+4	; 0x04
    10f0:	3d 81       	ldd	r19, Y+5	; 0x05
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <DIO_u8SetPortDirection+0x66>
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	9d 81       	ldd	r25, Y+5	; 0x05
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <DIO_u8SetPortDirection+0x70>
    1102:	14 c0       	rjmp	.+40     	; 0x112c <DIO_u8SetPortDirection+0x7a>
			{
			case DIO_PORT_0:
				DDRA = Copy_u8Dir;
    1104:	ea e3       	ldi	r30, 0x3A	; 58
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	80 83       	st	Z, r24
    110c:	11 c0       	rjmp	.+34     	; 0x1130 <DIO_u8SetPortDirection+0x7e>
				break;

			case DIO_PORT_1:
				DDRB = Copy_u8Dir;
    110e:	e7 e3       	ldi	r30, 0x37	; 55
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	80 83       	st	Z, r24
    1116:	0c c0       	rjmp	.+24     	; 0x1130 <DIO_u8SetPortDirection+0x7e>
				break;

			case DIO_PORT_2:
				DDRC = Copy_u8Dir;
    1118:	e4 e3       	ldi	r30, 0x34	; 52
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	80 83       	st	Z, r24
    1120:	07 c0       	rjmp	.+14     	; 0x1130 <DIO_u8SetPortDirection+0x7e>
				break;

			case DIO_PORT_3:
				DDRD = Copy_u8Dir;
    1122:	e1 e3       	ldi	r30, 0x31	; 49
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	80 83       	st	Z, r24
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_u8SetPortDirection+0x7e>
				break;

			default:
				Local_u8Error = 1;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}

	return Local_u8Error;
    1130:	89 81       	ldd	r24, Y+1	; 0x01
}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <DIO_u8SetPortValue>:
 * Input		: Port Number, Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPortValue(u8 Copy_u8PortNB, u8 Copy_u8Value)
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	00 d0       	rcall	.+0      	; 0x1148 <DIO_u8SetPortValue+0x6>
    1148:	00 d0       	rcall	.+0      	; 0x114a <DIO_u8SetPortValue+0x8>
    114a:	0f 92       	push	r0
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	8a 83       	std	Y+2, r24	; 0x02
    1152:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    1154:	19 82       	std	Y+1, r1	; 0x01
		Local_u8Error = 1;
	}
	else
		{
			/*Switch for the PORT Number if it 0 -> 3 it is OK else return Error*/
			switch(Copy_u8PortNB)
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	3d 83       	std	Y+5, r19	; 0x05
    115e:	2c 83       	std	Y+4, r18	; 0x04
    1160:	8c 81       	ldd	r24, Y+4	; 0x04
    1162:	9d 81       	ldd	r25, Y+5	; 0x05
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	91 05       	cpc	r25, r1
    1168:	d1 f0       	breq	.+52     	; 0x119e <DIO_u8SetPortValue+0x5c>
    116a:	2c 81       	ldd	r18, Y+4	; 0x04
    116c:	3d 81       	ldd	r19, Y+5	; 0x05
    116e:	22 30       	cpi	r18, 0x02	; 2
    1170:	31 05       	cpc	r19, r1
    1172:	2c f4       	brge	.+10     	; 0x117e <DIO_u8SetPortValue+0x3c>
    1174:	8c 81       	ldd	r24, Y+4	; 0x04
    1176:	9d 81       	ldd	r25, Y+5	; 0x05
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	61 f0       	breq	.+24     	; 0x1194 <DIO_u8SetPortValue+0x52>
    117c:	1f c0       	rjmp	.+62     	; 0x11bc <DIO_u8SetPortValue+0x7a>
    117e:	2c 81       	ldd	r18, Y+4	; 0x04
    1180:	3d 81       	ldd	r19, Y+5	; 0x05
    1182:	22 30       	cpi	r18, 0x02	; 2
    1184:	31 05       	cpc	r19, r1
    1186:	81 f0       	breq	.+32     	; 0x11a8 <DIO_u8SetPortValue+0x66>
    1188:	8c 81       	ldd	r24, Y+4	; 0x04
    118a:	9d 81       	ldd	r25, Y+5	; 0x05
    118c:	83 30       	cpi	r24, 0x03	; 3
    118e:	91 05       	cpc	r25, r1
    1190:	81 f0       	breq	.+32     	; 0x11b2 <DIO_u8SetPortValue+0x70>
    1192:	14 c0       	rjmp	.+40     	; 0x11bc <DIO_u8SetPortValue+0x7a>
			{
			case DIO_PORT_0:
				PORTA = Copy_u8Value;
    1194:	eb e3       	ldi	r30, 0x3B	; 59
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	80 83       	st	Z, r24
    119c:	11 c0       	rjmp	.+34     	; 0x11c0 <DIO_u8SetPortValue+0x7e>
				break;

			case DIO_PORT_1:
				PORTB = Copy_u8Value;
    119e:	e8 e3       	ldi	r30, 0x38	; 56
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	80 83       	st	Z, r24
    11a6:	0c c0       	rjmp	.+24     	; 0x11c0 <DIO_u8SetPortValue+0x7e>
				break;

			case DIO_PORT_2:
				PORTC = Copy_u8Value;
    11a8:	e5 e3       	ldi	r30, 0x35	; 53
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	80 83       	st	Z, r24
    11b0:	07 c0       	rjmp	.+14     	; 0x11c0 <DIO_u8SetPortValue+0x7e>
				break;

			case DIO_PORT_3:
				PORTD = Copy_u8Value;
    11b2:	e2 e3       	ldi	r30, 0x32	; 50
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	80 83       	st	Z, r24
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIO_u8SetPortValue+0x7e>
				break;

			default:
				Local_u8Error = 1;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}

	return Local_u8Error;
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <DIO_u8SetPinDirection>:
 * Input		: Port Number, Pin Number, Direction
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPinDirection(u8 Copy_u8PortNB, u8 Copy_u8PinNB, u8 Copy_u8Dir)
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <DIO_u8SetPinDirection+0x6>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <DIO_u8SetPinDirection+0x8>
    11da:	00 d0       	rcall	.+0      	; 0x11dc <DIO_u8SetPinDirection+0xa>
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	8a 83       	std	Y+2, r24	; 0x02
    11e2:	6b 83       	std	Y+3, r22	; 0x03
    11e4:	4c 83       	std	Y+4, r20	; 0x04
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    11e6:	19 82       	std	Y+1, r1	; 0x01

	/*Check that the PIN Number is between 0 -> 7 else Return Local Error with ONE*/
	if(Copy_u8PinNB > DIO_PIN_7)
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	88 30       	cpi	r24, 0x08	; 8
    11ec:	10 f0       	brcs	.+4      	; 0x11f2 <DIO_u8SetPinDirection+0x20>
	{
		Local_u8Error = 1;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Check if the Direction is Input or Output Else return Local Error with one*/
	if((Copy_u8Dir != DIO_INPUT) && (Copy_u8Dir != DIO_OUTPUT))
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	88 23       	and	r24, r24
    11f6:	31 f0       	breq	.+12     	; 0x1204 <DIO_u8SetPinDirection+0x32>
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	19 f0       	breq	.+6      	; 0x1204 <DIO_u8SetPinDirection+0x32>
	{
		Local_u8Error = 1;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	ac c0       	rjmp	.+344    	; 0x135c <DIO_u8SetPinDirection+0x18a>
	}

	/*Else Check for the PORT number is between 0 -> 3*/
	else
	{
		switch(Copy_u8PortNB)
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	3e 83       	std	Y+6, r19	; 0x06
    120c:	2d 83       	std	Y+5, r18	; 0x05
    120e:	6d 81       	ldd	r22, Y+5	; 0x05
    1210:	7e 81       	ldd	r23, Y+6	; 0x06
    1212:	61 30       	cpi	r22, 0x01	; 1
    1214:	71 05       	cpc	r23, r1
    1216:	d1 f1       	breq	.+116    	; 0x128c <DIO_u8SetPinDirection+0xba>
    1218:	8d 81       	ldd	r24, Y+5	; 0x05
    121a:	9e 81       	ldd	r25, Y+6	; 0x06
    121c:	82 30       	cpi	r24, 0x02	; 2
    121e:	91 05       	cpc	r25, r1
    1220:	34 f4       	brge	.+12     	; 0x122e <DIO_u8SetPinDirection+0x5c>
    1222:	2d 81       	ldd	r18, Y+5	; 0x05
    1224:	3e 81       	ldd	r19, Y+6	; 0x06
    1226:	21 15       	cp	r18, r1
    1228:	31 05       	cpc	r19, r1
    122a:	71 f0       	breq	.+28     	; 0x1248 <DIO_u8SetPinDirection+0x76>
    122c:	95 c0       	rjmp	.+298    	; 0x1358 <DIO_u8SetPinDirection+0x186>
    122e:	6d 81       	ldd	r22, Y+5	; 0x05
    1230:	7e 81       	ldd	r23, Y+6	; 0x06
    1232:	62 30       	cpi	r22, 0x02	; 2
    1234:	71 05       	cpc	r23, r1
    1236:	09 f4       	brne	.+2      	; 0x123a <DIO_u8SetPinDirection+0x68>
    1238:	4b c0       	rjmp	.+150    	; 0x12d0 <DIO_u8SetPinDirection+0xfe>
    123a:	8d 81       	ldd	r24, Y+5	; 0x05
    123c:	9e 81       	ldd	r25, Y+6	; 0x06
    123e:	83 30       	cpi	r24, 0x03	; 3
    1240:	91 05       	cpc	r25, r1
    1242:	09 f4       	brne	.+2      	; 0x1246 <DIO_u8SetPinDirection+0x74>
    1244:	67 c0       	rjmp	.+206    	; 0x1314 <DIO_u8SetPinDirection+0x142>
    1246:	88 c0       	rjmp	.+272    	; 0x1358 <DIO_u8SetPinDirection+0x186>
		{
		case DIO_PORT_0:
			ASSIGN_BIT(DDRA, Copy_u8PinNB, Copy_u8Dir);
    1248:	aa e3       	ldi	r26, 0x3A	; 58
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	ea e3       	ldi	r30, 0x3A	; 58
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <DIO_u8SetPinDirection+0x92>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	2a 95       	dec	r18
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <DIO_u8SetPinDirection+0x8e>
    1268:	80 95       	com	r24
    126a:	48 23       	and	r20, r24
    126c:	8c 81       	ldd	r24, Y+4	; 0x04
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	b9 01       	movw	r22, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <DIO_u8SetPinDirection+0xae>
    127c:	66 0f       	add	r22, r22
    127e:	77 1f       	adc	r23, r23
    1280:	8a 95       	dec	r24
    1282:	e2 f7       	brpl	.-8      	; 0x127c <DIO_u8SetPinDirection+0xaa>
    1284:	cb 01       	movw	r24, r22
    1286:	84 2b       	or	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	68 c0       	rjmp	.+208    	; 0x135c <DIO_u8SetPinDirection+0x18a>
			break;

		case DIO_PORT_1:
			ASSIGN_BIT(DDRB, Copy_u8PinNB, Copy_u8Dir);
    128c:	a7 e3       	ldi	r26, 0x37	; 55
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e7 e3       	ldi	r30, 0x37	; 55
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <DIO_u8SetPinDirection+0xd6>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	2a 95       	dec	r18
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <DIO_u8SetPinDirection+0xd2>
    12ac:	80 95       	com	r24
    12ae:	48 23       	and	r20, r24
    12b0:	8c 81       	ldd	r24, Y+4	; 0x04
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	88 2f       	mov	r24, r24
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	b9 01       	movw	r22, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <DIO_u8SetPinDirection+0xf2>
    12c0:	66 0f       	add	r22, r22
    12c2:	77 1f       	adc	r23, r23
    12c4:	8a 95       	dec	r24
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <DIO_u8SetPinDirection+0xee>
    12c8:	cb 01       	movw	r24, r22
    12ca:	84 2b       	or	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	46 c0       	rjmp	.+140    	; 0x135c <DIO_u8SetPinDirection+0x18a>
			break;

		case DIO_PORT_2:
			ASSIGN_BIT(DDRC, Copy_u8PinNB, Copy_u8Dir);
    12d0:	a4 e3       	ldi	r26, 0x34	; 52
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e4 e3       	ldi	r30, 0x34	; 52
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_u8SetPinDirection+0x11a>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	2a 95       	dec	r18
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <DIO_u8SetPinDirection+0x116>
    12f0:	80 95       	com	r24
    12f2:	48 23       	and	r20, r24
    12f4:	8c 81       	ldd	r24, Y+4	; 0x04
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	88 2f       	mov	r24, r24
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	b9 01       	movw	r22, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_u8SetPinDirection+0x136>
    1304:	66 0f       	add	r22, r22
    1306:	77 1f       	adc	r23, r23
    1308:	8a 95       	dec	r24
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_u8SetPinDirection+0x132>
    130c:	cb 01       	movw	r24, r22
    130e:	84 2b       	or	r24, r20
    1310:	8c 93       	st	X, r24
    1312:	24 c0       	rjmp	.+72     	; 0x135c <DIO_u8SetPinDirection+0x18a>
			break;

		case DIO_PORT_3:
			ASSIGN_BIT(DDRD, Copy_u8PinNB, Copy_u8Dir);
    1314:	a1 e3       	ldi	r26, 0x31	; 49
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e1 e3       	ldi	r30, 0x31	; 49
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	48 2f       	mov	r20, r24
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_u8SetPinDirection+0x15e>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	2a 95       	dec	r18
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_u8SetPinDirection+0x15a>
    1334:	80 95       	com	r24
    1336:	48 23       	and	r20, r24
    1338:	8c 81       	ldd	r24, Y+4	; 0x04
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	88 2f       	mov	r24, r24
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	b9 01       	movw	r22, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <DIO_u8SetPinDirection+0x17a>
    1348:	66 0f       	add	r22, r22
    134a:	77 1f       	adc	r23, r23
    134c:	8a 95       	dec	r24
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <DIO_u8SetPinDirection+0x176>
    1350:	cb 01       	movw	r24, r22
    1352:	84 2b       	or	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	02 c0       	rjmp	.+4      	; 0x135c <DIO_u8SetPinDirection+0x18a>
			break;

		default:
			Local_u8Error = 1;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_u8Error;
    135c:	89 81       	ldd	r24, Y+1	; 0x01
}
    135e:	26 96       	adiw	r28, 0x06	; 6
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <DIO_u8SetPinValue>:
 * Input		: Port Number, Pin Number, Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPinValue(u8 Copy_u8PortNB, u8 Copy_u8PinNB, u8 Copy_u8Value)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	00 d0       	rcall	.+0      	; 0x1376 <DIO_u8SetPinValue+0x6>
    1376:	00 d0       	rcall	.+0      	; 0x1378 <DIO_u8SetPinValue+0x8>
    1378:	00 d0       	rcall	.+0      	; 0x137a <DIO_u8SetPinValue+0xa>
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	8a 83       	std	Y+2, r24	; 0x02
    1380:	6b 83       	std	Y+3, r22	; 0x03
    1382:	4c 83       	std	Y+4, r20	; 0x04
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    1384:	19 82       	std	Y+1, r1	; 0x01

	/*Check that the PIN Number is between 0 -> 7 else Return Local Error with ONE*/
	if(Copy_u8PinNB > DIO_PIN_7)
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	88 30       	cpi	r24, 0x08	; 8
    138a:	10 f0       	brcs	.+4      	; 0x1390 <DIO_u8SetPinValue+0x20>
	{
		Local_u8Error = 1;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Check if the Direction is Input or Output Else return Local Error with one*/
	if((Copy_u8Value != DIO_HIGH) && (Copy_u8Value != DIO_LOW))
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	31 f0       	breq	.+12     	; 0x13a2 <DIO_u8SetPinValue+0x32>
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
    1398:	88 23       	and	r24, r24
    139a:	19 f0       	breq	.+6      	; 0x13a2 <DIO_u8SetPinValue+0x32>
	{
		Local_u8Error = 1;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	89 83       	std	Y+1, r24	; 0x01
    13a0:	ac c0       	rjmp	.+344    	; 0x14fa <DIO_u8SetPinValue+0x18a>
	}

	/*Else Check for the PORT number is between 0 -> 3*/
	else
	{
		switch(Copy_u8PortNB)
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3e 83       	std	Y+6, r19	; 0x06
    13aa:	2d 83       	std	Y+5, r18	; 0x05
    13ac:	6d 81       	ldd	r22, Y+5	; 0x05
    13ae:	7e 81       	ldd	r23, Y+6	; 0x06
    13b0:	61 30       	cpi	r22, 0x01	; 1
    13b2:	71 05       	cpc	r23, r1
    13b4:	d1 f1       	breq	.+116    	; 0x142a <DIO_u8SetPinValue+0xba>
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	91 05       	cpc	r25, r1
    13be:	34 f4       	brge	.+12     	; 0x13cc <DIO_u8SetPinValue+0x5c>
    13c0:	2d 81       	ldd	r18, Y+5	; 0x05
    13c2:	3e 81       	ldd	r19, Y+6	; 0x06
    13c4:	21 15       	cp	r18, r1
    13c6:	31 05       	cpc	r19, r1
    13c8:	71 f0       	breq	.+28     	; 0x13e6 <DIO_u8SetPinValue+0x76>
    13ca:	95 c0       	rjmp	.+298    	; 0x14f6 <DIO_u8SetPinValue+0x186>
    13cc:	6d 81       	ldd	r22, Y+5	; 0x05
    13ce:	7e 81       	ldd	r23, Y+6	; 0x06
    13d0:	62 30       	cpi	r22, 0x02	; 2
    13d2:	71 05       	cpc	r23, r1
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <DIO_u8SetPinValue+0x68>
    13d6:	4b c0       	rjmp	.+150    	; 0x146e <DIO_u8SetPinValue+0xfe>
    13d8:	8d 81       	ldd	r24, Y+5	; 0x05
    13da:	9e 81       	ldd	r25, Y+6	; 0x06
    13dc:	83 30       	cpi	r24, 0x03	; 3
    13de:	91 05       	cpc	r25, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <DIO_u8SetPinValue+0x74>
    13e2:	67 c0       	rjmp	.+206    	; 0x14b2 <DIO_u8SetPinValue+0x142>
    13e4:	88 c0       	rjmp	.+272    	; 0x14f6 <DIO_u8SetPinValue+0x186>
		{
		case DIO_PORT_0:
			ASSIGN_BIT(PORTA, Copy_u8PinNB, Copy_u8Value);
    13e6:	ab e3       	ldi	r26, 0x3B	; 59
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	eb e3       	ldi	r30, 0x3B	; 59
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <DIO_u8SetPinValue+0x92>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	2a 95       	dec	r18
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <DIO_u8SetPinValue+0x8e>
    1406:	80 95       	com	r24
    1408:	48 23       	and	r20, r24
    140a:	8c 81       	ldd	r24, Y+4	; 0x04
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	b9 01       	movw	r22, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO_u8SetPinValue+0xae>
    141a:	66 0f       	add	r22, r22
    141c:	77 1f       	adc	r23, r23
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <DIO_u8SetPinValue+0xaa>
    1422:	cb 01       	movw	r24, r22
    1424:	84 2b       	or	r24, r20
    1426:	8c 93       	st	X, r24
    1428:	68 c0       	rjmp	.+208    	; 0x14fa <DIO_u8SetPinValue+0x18a>
			break;

		case DIO_PORT_1:
			ASSIGN_BIT(PORTB, Copy_u8PinNB, Copy_u8Value);
    142a:	a8 e3       	ldi	r26, 0x38	; 56
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e8 e3       	ldi	r30, 0x38	; 56
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	48 2f       	mov	r20, r24
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_u8SetPinValue+0xd6>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	2a 95       	dec	r18
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_u8SetPinValue+0xd2>
    144a:	80 95       	com	r24
    144c:	48 23       	and	r20, r24
    144e:	8c 81       	ldd	r24, Y+4	; 0x04
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	88 2f       	mov	r24, r24
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	b9 01       	movw	r22, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <DIO_u8SetPinValue+0xf2>
    145e:	66 0f       	add	r22, r22
    1460:	77 1f       	adc	r23, r23
    1462:	8a 95       	dec	r24
    1464:	e2 f7       	brpl	.-8      	; 0x145e <DIO_u8SetPinValue+0xee>
    1466:	cb 01       	movw	r24, r22
    1468:	84 2b       	or	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	46 c0       	rjmp	.+140    	; 0x14fa <DIO_u8SetPinValue+0x18a>
			break;

		case DIO_PORT_2:
			ASSIGN_BIT(PORTC, Copy_u8PinNB, Copy_u8Value);
    146e:	a5 e3       	ldi	r26, 0x35	; 53
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e5 e3       	ldi	r30, 0x35	; 53
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	48 2f       	mov	r20, r24
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 c0       	rjmp	.+4      	; 0x148a <DIO_u8SetPinValue+0x11a>
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	2a 95       	dec	r18
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <DIO_u8SetPinValue+0x116>
    148e:	80 95       	com	r24
    1490:	48 23       	and	r20, r24
    1492:	8c 81       	ldd	r24, Y+4	; 0x04
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	88 2f       	mov	r24, r24
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	b9 01       	movw	r22, r18
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <DIO_u8SetPinValue+0x136>
    14a2:	66 0f       	add	r22, r22
    14a4:	77 1f       	adc	r23, r23
    14a6:	8a 95       	dec	r24
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <DIO_u8SetPinValue+0x132>
    14aa:	cb 01       	movw	r24, r22
    14ac:	84 2b       	or	r24, r20
    14ae:	8c 93       	st	X, r24
    14b0:	24 c0       	rjmp	.+72     	; 0x14fa <DIO_u8SetPinValue+0x18a>
			break;

		case DIO_PORT_3:
			ASSIGN_BIT(PORTD, Copy_u8PinNB, Copy_u8Value);
    14b2:	a2 e3       	ldi	r26, 0x32	; 50
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e2 e3       	ldi	r30, 0x32	; 50
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <DIO_u8SetPinValue+0x15e>
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	2a 95       	dec	r18
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <DIO_u8SetPinValue+0x15a>
    14d2:	80 95       	com	r24
    14d4:	48 23       	and	r20, r24
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	88 2f       	mov	r24, r24
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	b9 01       	movw	r22, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_u8SetPinValue+0x17a>
    14e6:	66 0f       	add	r22, r22
    14e8:	77 1f       	adc	r23, r23
    14ea:	8a 95       	dec	r24
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <DIO_u8SetPinValue+0x176>
    14ee:	cb 01       	movw	r24, r22
    14f0:	84 2b       	or	r24, r20
    14f2:	8c 93       	st	X, r24
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <DIO_u8SetPinValue+0x18a>
			break;

		default:
			Local_u8Error = 1;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_u8Error;
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    14fc:	26 96       	adiw	r28, 0x06	; 6
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <DIO_u8GetPortValue>:
 * Input		: Port Number, Pointer for a Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8GetPortValue(u8 Copy_u8PortNB, u8 * Copy_u8Value)
{
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	00 d0       	rcall	.+0      	; 0x1514 <DIO_u8GetPortValue+0x6>
    1514:	00 d0       	rcall	.+0      	; 0x1516 <DIO_u8GetPortValue+0x8>
    1516:	00 d0       	rcall	.+0      	; 0x1518 <DIO_u8GetPortValue+0xa>
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	8a 83       	std	Y+2, r24	; 0x02
    151e:	7c 83       	std	Y+4, r23	; 0x04
    1520:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    1522:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Value == NULL_POINTER)
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	19 f4       	brne	.+6      	; 0x1532 <DIO_u8GetPortValue+0x24>
	{
		Local_u8Error = 1;
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	3d c0       	rjmp	.+122    	; 0x15ac <DIO_u8GetPortValue+0x9e>
	}

	else
	{
		/*Switch for the PORT Number if it 0 -> 3 it is OK else return Error*/
		switch(Copy_u8PortNB)
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	3e 83       	std	Y+6, r19	; 0x06
    153a:	2d 83       	std	Y+5, r18	; 0x05
    153c:	8d 81       	ldd	r24, Y+5	; 0x05
    153e:	9e 81       	ldd	r25, Y+6	; 0x06
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	91 05       	cpc	r25, r1
    1544:	e1 f0       	breq	.+56     	; 0x157e <DIO_u8GetPortValue+0x70>
    1546:	2d 81       	ldd	r18, Y+5	; 0x05
    1548:	3e 81       	ldd	r19, Y+6	; 0x06
    154a:	22 30       	cpi	r18, 0x02	; 2
    154c:	31 05       	cpc	r19, r1
    154e:	2c f4       	brge	.+10     	; 0x155a <DIO_u8GetPortValue+0x4c>
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	9e 81       	ldd	r25, Y+6	; 0x06
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	61 f0       	breq	.+24     	; 0x1570 <DIO_u8GetPortValue+0x62>
    1558:	27 c0       	rjmp	.+78     	; 0x15a8 <DIO_u8GetPortValue+0x9a>
    155a:	2d 81       	ldd	r18, Y+5	; 0x05
    155c:	3e 81       	ldd	r19, Y+6	; 0x06
    155e:	22 30       	cpi	r18, 0x02	; 2
    1560:	31 05       	cpc	r19, r1
    1562:	a1 f0       	breq	.+40     	; 0x158c <DIO_u8GetPortValue+0x7e>
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	9e 81       	ldd	r25, Y+6	; 0x06
    1568:	83 30       	cpi	r24, 0x03	; 3
    156a:	91 05       	cpc	r25, r1
    156c:	b1 f0       	breq	.+44     	; 0x159a <DIO_u8GetPortValue+0x8c>
    156e:	1c c0       	rjmp	.+56     	; 0x15a8 <DIO_u8GetPortValue+0x9a>
		{
		case DIO_PORT_0:
			*Copy_u8Value = PINA;
    1570:	e9 e3       	ldi	r30, 0x39	; 57
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	eb 81       	ldd	r30, Y+3	; 0x03
    1578:	fc 81       	ldd	r31, Y+4	; 0x04
    157a:	80 83       	st	Z, r24
    157c:	17 c0       	rjmp	.+46     	; 0x15ac <DIO_u8GetPortValue+0x9e>
			break;

		case DIO_PORT_1:
			*Copy_u8Value = PINB;
    157e:	e6 e3       	ldi	r30, 0x36	; 54
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	eb 81       	ldd	r30, Y+3	; 0x03
    1586:	fc 81       	ldd	r31, Y+4	; 0x04
    1588:	80 83       	st	Z, r24
    158a:	10 c0       	rjmp	.+32     	; 0x15ac <DIO_u8GetPortValue+0x9e>
			break;

		case DIO_PORT_2:
			*Copy_u8Value = PINC;
    158c:	e3 e3       	ldi	r30, 0x33	; 51
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	eb 81       	ldd	r30, Y+3	; 0x03
    1594:	fc 81       	ldd	r31, Y+4	; 0x04
    1596:	80 83       	st	Z, r24
    1598:	09 c0       	rjmp	.+18     	; 0x15ac <DIO_u8GetPortValue+0x9e>
			break;

		case DIO_PORT_3:
			*Copy_u8Value = PIND;
    159a:	e0 e3       	ldi	r30, 0x30	; 48
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	eb 81       	ldd	r30, Y+3	; 0x03
    15a2:	fc 81       	ldd	r31, Y+4	; 0x04
    15a4:	80 83       	st	Z, r24
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <DIO_u8GetPortValue+0x9e>
			break;

		default:
			Local_u8Error = 1;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

	}
	return Local_u8Error;
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ae:	26 96       	adiw	r28, 0x06	; 6
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <DIO_u8GetPinValue>:
 * Input		: Port Number, Pin Number, Pointer for a Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8GetPinValue(u8 Copy_u8PortNB, u8 Copy_u8PinNB, u8 * Copy_u8Value)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	27 97       	sbiw	r28, 0x07	; 7
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	8a 83       	std	Y+2, r24	; 0x02
    15d6:	6b 83       	std	Y+3, r22	; 0x03
    15d8:	5d 83       	std	Y+5, r21	; 0x05
    15da:	4c 83       	std	Y+4, r20	; 0x04
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    15dc:	19 82       	std	Y+1, r1	; 0x01

	/*Check that the PIN Number is between 0 -> 7 else Return Local Error with ONE*/
	if(Copy_u8Value == NULL_POINTER)
    15de:	8c 81       	ldd	r24, Y+4	; 0x04
    15e0:	9d 81       	ldd	r25, Y+5	; 0x05
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	11 f4       	brne	.+4      	; 0x15ea <DIO_u8GetPinValue+0x2a>
	{
		Local_u8Error = 1;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	89 83       	std	Y+1, r24	; 0x01
	}
	if(Copy_u8PinNB > DIO_PIN_7)
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	88 30       	cpi	r24, 0x08	; 8
    15ee:	18 f0       	brcs	.+6      	; 0x15f6 <DIO_u8GetPinValue+0x36>
	{
		Local_u8Error = 1;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	73 c0       	rjmp	.+230    	; 0x16dc <DIO_u8GetPinValue+0x11c>
	}

	else
	{
		switch(Copy_u8PortNB)
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	3f 83       	std	Y+7, r19	; 0x07
    15fe:	2e 83       	std	Y+6, r18	; 0x06
    1600:	4e 81       	ldd	r20, Y+6	; 0x06
    1602:	5f 81       	ldd	r21, Y+7	; 0x07
    1604:	41 30       	cpi	r20, 0x01	; 1
    1606:	51 05       	cpc	r21, r1
    1608:	59 f1       	breq	.+86     	; 0x1660 <DIO_u8GetPinValue+0xa0>
    160a:	8e 81       	ldd	r24, Y+6	; 0x06
    160c:	9f 81       	ldd	r25, Y+7	; 0x07
    160e:	82 30       	cpi	r24, 0x02	; 2
    1610:	91 05       	cpc	r25, r1
    1612:	34 f4       	brge	.+12     	; 0x1620 <DIO_u8GetPinValue+0x60>
    1614:	2e 81       	ldd	r18, Y+6	; 0x06
    1616:	3f 81       	ldd	r19, Y+7	; 0x07
    1618:	21 15       	cp	r18, r1
    161a:	31 05       	cpc	r19, r1
    161c:	69 f0       	breq	.+26     	; 0x1638 <DIO_u8GetPinValue+0x78>
    161e:	5c c0       	rjmp	.+184    	; 0x16d8 <DIO_u8GetPinValue+0x118>
    1620:	4e 81       	ldd	r20, Y+6	; 0x06
    1622:	5f 81       	ldd	r21, Y+7	; 0x07
    1624:	42 30       	cpi	r20, 0x02	; 2
    1626:	51 05       	cpc	r21, r1
    1628:	79 f1       	breq	.+94     	; 0x1688 <DIO_u8GetPinValue+0xc8>
    162a:	8e 81       	ldd	r24, Y+6	; 0x06
    162c:	9f 81       	ldd	r25, Y+7	; 0x07
    162e:	83 30       	cpi	r24, 0x03	; 3
    1630:	91 05       	cpc	r25, r1
    1632:	09 f4       	brne	.+2      	; 0x1636 <DIO_u8GetPinValue+0x76>
    1634:	3d c0       	rjmp	.+122    	; 0x16b0 <DIO_u8GetPinValue+0xf0>
    1636:	50 c0       	rjmp	.+160    	; 0x16d8 <DIO_u8GetPinValue+0x118>
		{
		case DIO_PORT_0:
			*Copy_u8Value = GET_BIT(PINA, Copy_u8PinNB);
    1638:	e9 e3       	ldi	r30, 0x39	; 57
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	a9 01       	movw	r20, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <DIO_u8GetPinValue+0x90>
    164c:	55 95       	asr	r21
    164e:	47 95       	ror	r20
    1650:	8a 95       	dec	r24
    1652:	e2 f7       	brpl	.-8      	; 0x164c <DIO_u8GetPinValue+0x8c>
    1654:	ca 01       	movw	r24, r20
    1656:	81 70       	andi	r24, 0x01	; 1
    1658:	ec 81       	ldd	r30, Y+4	; 0x04
    165a:	fd 81       	ldd	r31, Y+5	; 0x05
    165c:	80 83       	st	Z, r24
    165e:	3e c0       	rjmp	.+124    	; 0x16dc <DIO_u8GetPinValue+0x11c>
			break;

		case DIO_PORT_1:
			*Copy_u8Value = GET_BIT(PINB, Copy_u8PinNB);
    1660:	e6 e3       	ldi	r30, 0x36	; 54
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	88 2f       	mov	r24, r24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a9 01       	movw	r20, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <DIO_u8GetPinValue+0xb8>
    1674:	55 95       	asr	r21
    1676:	47 95       	ror	r20
    1678:	8a 95       	dec	r24
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <DIO_u8GetPinValue+0xb4>
    167c:	ca 01       	movw	r24, r20
    167e:	81 70       	andi	r24, 0x01	; 1
    1680:	ec 81       	ldd	r30, Y+4	; 0x04
    1682:	fd 81       	ldd	r31, Y+5	; 0x05
    1684:	80 83       	st	Z, r24
    1686:	2a c0       	rjmp	.+84     	; 0x16dc <DIO_u8GetPinValue+0x11c>
			break;

		case DIO_PORT_2:
			*Copy_u8Value = GET_BIT(PINC, Copy_u8PinNB);
    1688:	e3 e3       	ldi	r30, 0x33	; 51
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	a9 01       	movw	r20, r18
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <DIO_u8GetPinValue+0xe0>
    169c:	55 95       	asr	r21
    169e:	47 95       	ror	r20
    16a0:	8a 95       	dec	r24
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <DIO_u8GetPinValue+0xdc>
    16a4:	ca 01       	movw	r24, r20
    16a6:	81 70       	andi	r24, 0x01	; 1
    16a8:	ec 81       	ldd	r30, Y+4	; 0x04
    16aa:	fd 81       	ldd	r31, Y+5	; 0x05
    16ac:	80 83       	st	Z, r24
    16ae:	16 c0       	rjmp	.+44     	; 0x16dc <DIO_u8GetPinValue+0x11c>
			break;

		case DIO_PORT_3:
			*Copy_u8Value = GET_BIT(PIND, Copy_u8PinNB);
    16b0:	e0 e3       	ldi	r30, 0x30	; 48
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	88 2f       	mov	r24, r24
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	a9 01       	movw	r20, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <DIO_u8GetPinValue+0x108>
    16c4:	55 95       	asr	r21
    16c6:	47 95       	ror	r20
    16c8:	8a 95       	dec	r24
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <DIO_u8GetPinValue+0x104>
    16cc:	ca 01       	movw	r24, r20
    16ce:	81 70       	andi	r24, 0x01	; 1
    16d0:	ec 81       	ldd	r30, Y+4	; 0x04
    16d2:	fd 81       	ldd	r31, Y+5	; 0x05
    16d4:	80 83       	st	Z, r24
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <DIO_u8GetPinValue+0x11c>
			break;

		default:
			Local_u8Error = 1;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return Local_u8Error;
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    16de:	27 96       	adiw	r28, 0x07	; 7
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <DIO_u8TogglePinValue>:
 * Input		: Port Number, Pin Number
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8TogglePinValue(u8 Copy_u8PortNB, u8 Copy_u8PinNB)
{
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <DIO_u8TogglePinValue+0x6>
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <DIO_u8TogglePinValue+0x8>
    16f8:	0f 92       	push	r0
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	8a 83       	std	Y+2, r24	; 0x02
    1700:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    1702:	19 82       	std	Y+1, r1	; 0x01

	/*Check that the PIN Number is between 0 -> 7 else Return Local Error with ONE*/
	if(Copy_u8PinNB > DIO_PIN_7 || Copy_u8PortNB > 3)
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	88 30       	cpi	r24, 0x08	; 8
    1708:	18 f4       	brcc	.+6      	; 0x1710 <DIO_u8TogglePinValue+0x20>
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	84 30       	cpi	r24, 0x04	; 4
    170e:	18 f0       	brcs	.+6      	; 0x1716 <DIO_u8TogglePinValue+0x26>
	{
		Local_u8Error = 1;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	71 c0       	rjmp	.+226    	; 0x17f8 <DIO_u8TogglePinValue+0x108>
	}

	/*Else Check for the PORT number is between 0 -> 3*/
	else
	{
		switch(Copy_u8PortNB)
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	3d 83       	std	Y+5, r19	; 0x05
    171e:	2c 83       	std	Y+4, r18	; 0x04
    1720:	8c 81       	ldd	r24, Y+4	; 0x04
    1722:	9d 81       	ldd	r25, Y+5	; 0x05
    1724:	81 30       	cpi	r24, 0x01	; 1
    1726:	91 05       	cpc	r25, r1
    1728:	49 f1       	breq	.+82     	; 0x177c <DIO_u8TogglePinValue+0x8c>
    172a:	2c 81       	ldd	r18, Y+4	; 0x04
    172c:	3d 81       	ldd	r19, Y+5	; 0x05
    172e:	22 30       	cpi	r18, 0x02	; 2
    1730:	31 05       	cpc	r19, r1
    1732:	2c f4       	brge	.+10     	; 0x173e <DIO_u8TogglePinValue+0x4e>
    1734:	8c 81       	ldd	r24, Y+4	; 0x04
    1736:	9d 81       	ldd	r25, Y+5	; 0x05
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	61 f0       	breq	.+24     	; 0x1754 <DIO_u8TogglePinValue+0x64>
    173c:	5b c0       	rjmp	.+182    	; 0x17f4 <DIO_u8TogglePinValue+0x104>
    173e:	2c 81       	ldd	r18, Y+4	; 0x04
    1740:	3d 81       	ldd	r19, Y+5	; 0x05
    1742:	22 30       	cpi	r18, 0x02	; 2
    1744:	31 05       	cpc	r19, r1
    1746:	71 f1       	breq	.+92     	; 0x17a4 <DIO_u8TogglePinValue+0xb4>
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	9d 81       	ldd	r25, Y+5	; 0x05
    174c:	83 30       	cpi	r24, 0x03	; 3
    174e:	91 05       	cpc	r25, r1
    1750:	e9 f1       	breq	.+122    	; 0x17cc <DIO_u8TogglePinValue+0xdc>
    1752:	50 c0       	rjmp	.+160    	; 0x17f4 <DIO_u8TogglePinValue+0x104>
		{
		case DIO_PORT_0:
			TOGGLE_BIT(PORTA, Copy_u8PinNB);
    1754:	ab e3       	ldi	r26, 0x3B	; 59
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	eb e3       	ldi	r30, 0x3B	; 59
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <DIO_u8TogglePinValue+0x82>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <DIO_u8TogglePinValue+0x7e>
    1776:	84 27       	eor	r24, r20
    1778:	8c 93       	st	X, r24
    177a:	3e c0       	rjmp	.+124    	; 0x17f8 <DIO_u8TogglePinValue+0x108>
			break;

		case DIO_PORT_1:
			TOGGLE_BIT(PORTB, Copy_u8PinNB);
    177c:	a8 e3       	ldi	r26, 0x38	; 56
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e8 e3       	ldi	r30, 0x38	; 56
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	48 2f       	mov	r20, r24
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 2e       	mov	r0, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <DIO_u8TogglePinValue+0xaa>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	0a 94       	dec	r0
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <DIO_u8TogglePinValue+0xa6>
    179e:	84 27       	eor	r24, r20
    17a0:	8c 93       	st	X, r24
    17a2:	2a c0       	rjmp	.+84     	; 0x17f8 <DIO_u8TogglePinValue+0x108>
			break;

		case DIO_PORT_2:
			TOGGLE_BIT(PORTC, Copy_u8PinNB);
    17a4:	a5 e3       	ldi	r26, 0x35	; 53
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e5 e3       	ldi	r30, 0x35	; 53
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	48 2f       	mov	r20, r24
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	02 2e       	mov	r0, r18
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <DIO_u8TogglePinValue+0xd2>
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	0a 94       	dec	r0
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <DIO_u8TogglePinValue+0xce>
    17c6:	84 27       	eor	r24, r20
    17c8:	8c 93       	st	X, r24
    17ca:	16 c0       	rjmp	.+44     	; 0x17f8 <DIO_u8TogglePinValue+0x108>
			break;

		case DIO_PORT_3:
			TOGGLE_BIT(PORTD, Copy_u8PinNB);
    17cc:	a2 e3       	ldi	r26, 0x32	; 50
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e2 e3       	ldi	r30, 0x32	; 50
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	48 2f       	mov	r20, r24
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	02 2e       	mov	r0, r18
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <DIO_u8TogglePinValue+0xfa>
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	0a 94       	dec	r0
    17ec:	e2 f7       	brpl	.-8      	; 0x17e6 <DIO_u8TogglePinValue+0xf6>
    17ee:	84 27       	eor	r24, r20
    17f0:	8c 93       	st	X, r24
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <DIO_u8TogglePinValue+0x108>
			break;

		default:
			Local_u8Error = 1;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_u8Error;
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <LCD_voidWriteCommand>:
/* Description	: Send a Command to LCD through the Data PORT
 * Input		: Command
 * Output		: Non
 */
void LCD_voidWriteCommand(u8 Copy_u8Command)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	2f 97       	sbiw	r28, 0x0f	; 15
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	8f 87       	std	Y+15, r24	; 0x0f
	/*Make Sure that the Enable PIN is LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    1820:	82 e0       	ldi	r24, 0x02	; 2
    1822:	62 e0       	ldi	r22, 0x02	; 2
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_u8SetPinValue>

	/*Make Sure that the Register Select PIN is LOW as (RS -> LOW for Command) (RS -> HIGH for Data)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_LOW);
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	60 e0       	ldi	r22, 0x00	; 0
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_u8SetPinValue>

	/*Make Sure that the Read Write PIN is LOW as (RW -> LOW for Write) (RW -> HIGH for Read)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_LOW);
    1834:	82 e0       	ldi	r24, 0x02	; 2
    1836:	61 e0       	ldi	r22, 0x01	; 1
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_u8SetPinValue>

	/*Send the Command on Data Pins D0 -> D7*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Command);
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	6f 85       	ldd	r22, Y+15	; 0x0f
    1842:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_u8SetPortValue>

	/*Enable Sequence*/
	/*Make the Enable Pin HIGH*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_HIGH);
    1846:	82 e0       	ldi	r24, 0x02	; 2
    1848:	62 e0       	ldi	r22, 0x02	; 2
    184a:	41 e0       	ldi	r20, 0x01	; 1
    184c:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_u8SetPinValue>
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	a0 e0       	ldi	r26, 0x00	; 0
    1856:	b0 e4       	ldi	r27, 0x40	; 64
    1858:	8b 87       	std	Y+11, r24	; 0x0b
    185a:	9c 87       	std	Y+12, r25	; 0x0c
    185c:	ad 87       	std	Y+13, r26	; 0x0d
    185e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1860:	6b 85       	ldd	r22, Y+11	; 0x0b
    1862:	7c 85       	ldd	r23, Y+12	; 0x0c
    1864:	8d 85       	ldd	r24, Y+13	; 0x0d
    1866:	9e 85       	ldd	r25, Y+14	; 0x0e
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	4a ef       	ldi	r20, 0xFA	; 250
    186e:	54 e4       	ldi	r21, 0x44	; 68
    1870:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	8f 83       	std	Y+7, r24	; 0x07
    187a:	98 87       	std	Y+8, r25	; 0x08
    187c:	a9 87       	std	Y+9, r26	; 0x09
    187e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1880:	6f 81       	ldd	r22, Y+7	; 0x07
    1882:	78 85       	ldd	r23, Y+8	; 0x08
    1884:	89 85       	ldd	r24, Y+9	; 0x09
    1886:	9a 85       	ldd	r25, Y+10	; 0x0a
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e8       	ldi	r20, 0x80	; 128
    188e:	5f e3       	ldi	r21, 0x3F	; 63
    1890:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1894:	88 23       	and	r24, r24
    1896:	2c f4       	brge	.+10     	; 0x18a2 <LCD_voidWriteCommand+0x98>
		__ticks = 1;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	9e 83       	std	Y+6, r25	; 0x06
    189e:	8d 83       	std	Y+5, r24	; 0x05
    18a0:	3f c0       	rjmp	.+126    	; 0x1920 <LCD_voidWriteCommand+0x116>
	else if (__tmp > 65535)
    18a2:	6f 81       	ldd	r22, Y+7	; 0x07
    18a4:	78 85       	ldd	r23, Y+8	; 0x08
    18a6:	89 85       	ldd	r24, Y+9	; 0x09
    18a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	3f ef       	ldi	r19, 0xFF	; 255
    18ae:	4f e7       	ldi	r20, 0x7F	; 127
    18b0:	57 e4       	ldi	r21, 0x47	; 71
    18b2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18b6:	18 16       	cp	r1, r24
    18b8:	4c f5       	brge	.+82     	; 0x190c <LCD_voidWriteCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    18bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18be:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e2       	ldi	r20, 0x20	; 32
    18c8:	51 e4       	ldi	r21, 0x41	; 65
    18ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	9e 83       	std	Y+6, r25	; 0x06
    18e0:	8d 83       	std	Y+5, r24	; 0x05
    18e2:	0f c0       	rjmp	.+30     	; 0x1902 <LCD_voidWriteCommand+0xf8>
    18e4:	88 ec       	ldi	r24, 0xC8	; 200
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	9c 83       	std	Y+4, r25	; 0x04
    18ea:	8b 83       	std	Y+3, r24	; 0x03
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	9c 81       	ldd	r25, Y+4	; 0x04
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <LCD_voidWriteCommand+0xe6>
    18f4:	9c 83       	std	Y+4, r25	; 0x04
    18f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f8:	8d 81       	ldd	r24, Y+5	; 0x05
    18fa:	9e 81       	ldd	r25, Y+6	; 0x06
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	9e 83       	std	Y+6, r25	; 0x06
    1900:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	69 f7       	brne	.-38     	; 0x18e4 <LCD_voidWriteCommand+0xda>
    190a:	14 c0       	rjmp	.+40     	; 0x1934 <LCD_voidWriteCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190c:	6f 81       	ldd	r22, Y+7	; 0x07
    190e:	78 85       	ldd	r23, Y+8	; 0x08
    1910:	89 85       	ldd	r24, Y+9	; 0x09
    1912:	9a 85       	ldd	r25, Y+10	; 0x0a
    1914:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	9e 83       	std	Y+6, r25	; 0x06
    191e:	8d 83       	std	Y+5, r24	; 0x05
    1920:	8d 81       	ldd	r24, Y+5	; 0x05
    1922:	9e 81       	ldd	r25, Y+6	; 0x06
    1924:	9a 83       	std	Y+2, r25	; 0x02
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	9a 81       	ldd	r25, Y+2	; 0x02
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <LCD_voidWriteCommand+0x122>
    1930:	9a 83       	std	Y+2, r25	; 0x02
    1932:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for 2 msec.*/
	_delay_ms(2);

	/*Re-Make Enable Pin as LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    1934:	82 e0       	ldi	r24, 0x02	; 2
    1936:	62 e0       	ldi	r22, 0x02	; 2
    1938:	40 e0       	ldi	r20, 0x00	; 0
    193a:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_u8SetPinValue>
}
    193e:	2f 96       	adiw	r28, 0x0f	; 15
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <LCD_voidWriteData>:
/* Description	: Send a Data to LCD through the Data PORT
 * Input		: Data
 * Output		: Non
 */
void LCD_voidWriteData(u8 Copy_u8Data)
{
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	2f 97       	sbiw	r28, 0x0f	; 15
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	8f 87       	std	Y+15, r24	; 0x0f
	/*Make Sure that the Enable PIN is LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    1966:	82 e0       	ldi	r24, 0x02	; 2
    1968:	62 e0       	ldi	r22, 0x02	; 2
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_u8SetPinValue>

	/*Make Sure that the Register Select PIN is LOW as (RS -> LOW for Command) (RS -> HIGH for Data)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_HIGH);
    1970:	82 e0       	ldi	r24, 0x02	; 2
    1972:	60 e0       	ldi	r22, 0x00	; 0
    1974:	41 e0       	ldi	r20, 0x01	; 1
    1976:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_u8SetPinValue>

	/*Make Sure that the Read Write PIN is LOW as (RW -> LOW for Write) (RW -> HIGH for Read)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_LOW);
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	61 e0       	ldi	r22, 0x01	; 1
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_u8SetPinValue>

	/*Send the Command on Data Pins D0 -> D7*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Data);
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	6f 85       	ldd	r22, Y+15	; 0x0f
    1988:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_u8SetPortValue>

	/*Enable Sequence*/
	/*Make the Enable Pin HIGH*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_HIGH);
    198c:	82 e0       	ldi	r24, 0x02	; 2
    198e:	62 e0       	ldi	r22, 0x02	; 2
    1990:	41 e0       	ldi	r20, 0x01	; 1
    1992:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_u8SetPinValue>
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	a0 e0       	ldi	r26, 0x00	; 0
    199c:	b0 e4       	ldi	r27, 0x40	; 64
    199e:	8b 87       	std	Y+11, r24	; 0x0b
    19a0:	9c 87       	std	Y+12, r25	; 0x0c
    19a2:	ad 87       	std	Y+13, r26	; 0x0d
    19a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	4a ef       	ldi	r20, 0xFA	; 250
    19b4:	54 e4       	ldi	r21, 0x44	; 68
    19b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	8f 83       	std	Y+7, r24	; 0x07
    19c0:	98 87       	std	Y+8, r25	; 0x08
    19c2:	a9 87       	std	Y+9, r26	; 0x09
    19c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19c6:	6f 81       	ldd	r22, Y+7	; 0x07
    19c8:	78 85       	ldd	r23, Y+8	; 0x08
    19ca:	89 85       	ldd	r24, Y+9	; 0x09
    19cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e8       	ldi	r20, 0x80	; 128
    19d4:	5f e3       	ldi	r21, 0x3F	; 63
    19d6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19da:	88 23       	and	r24, r24
    19dc:	2c f4       	brge	.+10     	; 0x19e8 <LCD_voidWriteData+0x98>
		__ticks = 1;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	9e 83       	std	Y+6, r25	; 0x06
    19e4:	8d 83       	std	Y+5, r24	; 0x05
    19e6:	3f c0       	rjmp	.+126    	; 0x1a66 <LCD_voidWriteData+0x116>
	else if (__tmp > 65535)
    19e8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ea:	78 85       	ldd	r23, Y+8	; 0x08
    19ec:	89 85       	ldd	r24, Y+9	; 0x09
    19ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	3f ef       	ldi	r19, 0xFF	; 255
    19f4:	4f e7       	ldi	r20, 0x7F	; 127
    19f6:	57 e4       	ldi	r21, 0x47	; 71
    19f8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19fc:	18 16       	cp	r1, r24
    19fe:	4c f5       	brge	.+82     	; 0x1a52 <LCD_voidWriteData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e2       	ldi	r20, 0x20	; 32
    1a0e:	51 e4       	ldi	r21, 0x41	; 65
    1a10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	bc 01       	movw	r22, r24
    1a1a:	cd 01       	movw	r24, r26
    1a1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	9e 83       	std	Y+6, r25	; 0x06
    1a26:	8d 83       	std	Y+5, r24	; 0x05
    1a28:	0f c0       	rjmp	.+30     	; 0x1a48 <LCD_voidWriteData+0xf8>
    1a2a:	88 ec       	ldi	r24, 0xC8	; 200
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	9c 83       	std	Y+4, r25	; 0x04
    1a30:	8b 83       	std	Y+3, r24	; 0x03
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	9c 81       	ldd	r25, Y+4	; 0x04
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	f1 f7       	brne	.-4      	; 0x1a36 <LCD_voidWriteData+0xe6>
    1a3a:	9c 83       	std	Y+4, r25	; 0x04
    1a3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a40:	9e 81       	ldd	r25, Y+6	; 0x06
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	9e 83       	std	Y+6, r25	; 0x06
    1a46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a48:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	69 f7       	brne	.-38     	; 0x1a2a <LCD_voidWriteData+0xda>
    1a50:	14 c0       	rjmp	.+40     	; 0x1a7a <LCD_voidWriteData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a52:	6f 81       	ldd	r22, Y+7	; 0x07
    1a54:	78 85       	ldd	r23, Y+8	; 0x08
    1a56:	89 85       	ldd	r24, Y+9	; 0x09
    1a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	9e 83       	std	Y+6, r25	; 0x06
    1a64:	8d 83       	std	Y+5, r24	; 0x05
    1a66:	8d 81       	ldd	r24, Y+5	; 0x05
    1a68:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6a:	9a 83       	std	Y+2, r25	; 0x02
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	9a 81       	ldd	r25, Y+2	; 0x02
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <LCD_voidWriteData+0x122>
    1a76:	9a 83       	std	Y+2, r25	; 0x02
    1a78:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for 2 msec.*/
	_delay_ms(2);

	/*Re-Make Enable Pin as LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    1a7a:	82 e0       	ldi	r24, 0x02	; 2
    1a7c:	62 e0       	ldi	r22, 0x02	; 2
    1a7e:	40 e0       	ldi	r20, 0x00	; 0
    1a80:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_u8SetPinValue>
}
    1a84:	2f 96       	adiw	r28, 0x0f	; 15
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <LCD_voidInitialization>:
/* Description	: Initializing the LCD
 * Input		: Non
 * Output		: Non
 */
void LCD_voidInitialization(void)
{
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	c6 55       	subi	r28, 0x56	; 86
    1aa4:	d0 40       	sbci	r29, 0x00	; 0
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPortDirection(LCD_DATA_PORT, DIO_MAX_PORT_VALUE);
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	6f ef       	ldi	r22, 0xFF	; 255
    1ab4:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_OUTPUT);
    1ab8:	82 e0       	ldi	r24, 0x02	; 2
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	41 e0       	ldi	r20, 0x01	; 1
    1abe:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_OUTPUT);
    1ac2:	82 e0       	ldi	r24, 0x02	; 2
    1ac4:	61 e0       	ldi	r22, 0x01	; 1
    1ac6:	41 e0       	ldi	r20, 0x01	; 1
    1ac8:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_E_PIN, DIO_OUTPUT);
    1acc:	82 e0       	ldi	r24, 0x02	; 2
    1ace:	62 e0       	ldi	r22, 0x02	; 2
    1ad0:	41 e0       	ldi	r20, 0x01	; 1
    1ad2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_u8SetPinDirection>
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	ed 5a       	subi	r30, 0xAD	; 173
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	ac e0       	ldi	r26, 0x0C	; 12
    1ae2:	b2 e4       	ldi	r27, 0x42	; 66
    1ae4:	80 83       	st	Z, r24
    1ae6:	91 83       	std	Z+1, r25	; 0x01
    1ae8:	a2 83       	std	Z+2, r26	; 0x02
    1aea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aec:	8e 01       	movw	r16, r28
    1aee:	01 5b       	subi	r16, 0xB1	; 177
    1af0:	1f 4f       	sbci	r17, 0xFF	; 255
    1af2:	fe 01       	movw	r30, r28
    1af4:	ed 5a       	subi	r30, 0xAD	; 173
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	60 81       	ld	r22, Z
    1afa:	71 81       	ldd	r23, Z+1	; 0x01
    1afc:	82 81       	ldd	r24, Z+2	; 0x02
    1afe:	93 81       	ldd	r25, Z+3	; 0x03
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	4a ef       	ldi	r20, 0xFA	; 250
    1b06:	54 e4       	ldi	r21, 0x44	; 68
    1b08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	f8 01       	movw	r30, r16
    1b12:	80 83       	st	Z, r24
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	a2 83       	std	Z+2, r26	; 0x02
    1b18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	e1 5b       	subi	r30, 0xB1	; 177
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	60 81       	ld	r22, Z
    1b22:	71 81       	ldd	r23, Z+1	; 0x01
    1b24:	82 81       	ldd	r24, Z+2	; 0x02
    1b26:	93 81       	ldd	r25, Z+3	; 0x03
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e8       	ldi	r20, 0x80	; 128
    1b2e:	5f e3       	ldi	r21, 0x3F	; 63
    1b30:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b34:	88 23       	and	r24, r24
    1b36:	44 f4       	brge	.+16     	; 0x1b48 <LCD_voidInitialization+0xb2>
		__ticks = 1;
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e3 5b       	subi	r30, 0xB3	; 179
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	80 83       	st	Z, r24
    1b46:	64 c0       	rjmp	.+200    	; 0x1c10 <LCD_voidInitialization+0x17a>
	else if (__tmp > 65535)
    1b48:	fe 01       	movw	r30, r28
    1b4a:	e1 5b       	subi	r30, 0xB1	; 177
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	60 81       	ld	r22, Z
    1b50:	71 81       	ldd	r23, Z+1	; 0x01
    1b52:	82 81       	ldd	r24, Z+2	; 0x02
    1b54:	93 81       	ldd	r25, Z+3	; 0x03
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	3f ef       	ldi	r19, 0xFF	; 255
    1b5a:	4f e7       	ldi	r20, 0x7F	; 127
    1b5c:	57 e4       	ldi	r21, 0x47	; 71
    1b5e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b62:	18 16       	cp	r1, r24
    1b64:	0c f0       	brlt	.+2      	; 0x1b68 <LCD_voidInitialization+0xd2>
    1b66:	43 c0       	rjmp	.+134    	; 0x1bee <LCD_voidInitialization+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b68:	fe 01       	movw	r30, r28
    1b6a:	ed 5a       	subi	r30, 0xAD	; 173
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	60 81       	ld	r22, Z
    1b70:	71 81       	ldd	r23, Z+1	; 0x01
    1b72:	82 81       	ldd	r24, Z+2	; 0x02
    1b74:	93 81       	ldd	r25, Z+3	; 0x03
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e2       	ldi	r20, 0x20	; 32
    1b7c:	51 e4       	ldi	r21, 0x41	; 65
    1b7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	8e 01       	movw	r16, r28
    1b88:	03 5b       	subi	r16, 0xB3	; 179
    1b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	f8 01       	movw	r30, r16
    1b9a:	91 83       	std	Z+1, r25	; 0x01
    1b9c:	80 83       	st	Z, r24
    1b9e:	1f c0       	rjmp	.+62     	; 0x1bde <LCD_voidInitialization+0x148>
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	e5 5b       	subi	r30, 0xB5	; 181
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	88 ec       	ldi	r24, 0xC8	; 200
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	91 83       	std	Z+1, r25	; 0x01
    1bac:	80 83       	st	Z, r24
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e5 5b       	subi	r30, 0xB5	; 181
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	80 81       	ld	r24, Z
    1bb6:	91 81       	ldd	r25, Z+1	; 0x01
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <LCD_voidInitialization+0x122>
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e5 5b       	subi	r30, 0xB5	; 181
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	91 83       	std	Z+1, r25	; 0x01
    1bc4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc6:	de 01       	movw	r26, r28
    1bc8:	a3 5b       	subi	r26, 0xB3	; 179
    1bca:	bf 4f       	sbci	r27, 0xFF	; 255
    1bcc:	fe 01       	movw	r30, r28
    1bce:	e3 5b       	subi	r30, 0xB3	; 179
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	80 81       	ld	r24, Z
    1bd4:	91 81       	ldd	r25, Z+1	; 0x01
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	11 96       	adiw	r26, 0x01	; 1
    1bda:	9c 93       	st	X, r25
    1bdc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bde:	fe 01       	movw	r30, r28
    1be0:	e3 5b       	subi	r30, 0xB3	; 179
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	80 81       	ld	r24, Z
    1be6:	91 81       	ldd	r25, Z+1	; 0x01
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	d1 f6       	brne	.-76     	; 0x1ba0 <LCD_voidInitialization+0x10a>
    1bec:	27 c0       	rjmp	.+78     	; 0x1c3c <LCD_voidInitialization+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bee:	8e 01       	movw	r16, r28
    1bf0:	03 5b       	subi	r16, 0xB3	; 179
    1bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e1 5b       	subi	r30, 0xB1	; 177
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	60 81       	ld	r22, Z
    1bfc:	71 81       	ldd	r23, Z+1	; 0x01
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	93 81       	ldd	r25, Z+3	; 0x03
    1c02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	f8 01       	movw	r30, r16
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	80 83       	st	Z, r24
    1c10:	de 01       	movw	r26, r28
    1c12:	a7 5b       	subi	r26, 0xB7	; 183
    1c14:	bf 4f       	sbci	r27, 0xFF	; 255
    1c16:	fe 01       	movw	r30, r28
    1c18:	e3 5b       	subi	r30, 0xB3	; 179
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	80 81       	ld	r24, Z
    1c1e:	91 81       	ldd	r25, Z+1	; 0x01
    1c20:	8d 93       	st	X+, r24
    1c22:	9c 93       	st	X, r25
    1c24:	fe 01       	movw	r30, r28
    1c26:	e7 5b       	subi	r30, 0xB7	; 183
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	80 81       	ld	r24, Z
    1c2c:	91 81       	ldd	r25, Z+1	; 0x01
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <LCD_voidInitialization+0x198>
    1c32:	fe 01       	movw	r30, r28
    1c34:	e7 5b       	subi	r30, 0xB7	; 183
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	80 83       	st	Z, r24
	 *				-> 5*8  -> 0
	 *
	 *DB3	Number of Lines(N) -> 1 Line  -> 0
	 *						   -> 2 Lines -> 1
	 */
	LCD_voidWriteCommand(0b00111100);
    1c3c:	8c e3       	ldi	r24, 0x3C	; 60
    1c3e:	0e 94 05 0c 	call	0x180a	; 0x180a <LCD_voidWriteCommand>
    1c42:	fe 01       	movw	r30, r28
    1c44:	eb 5b       	subi	r30, 0xBB	; 187
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	a4 e3       	ldi	r26, 0x34	; 52
    1c4e:	b2 e4       	ldi	r27, 0x42	; 66
    1c50:	80 83       	st	Z, r24
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	a2 83       	std	Z+2, r26	; 0x02
    1c56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c58:	8e 01       	movw	r16, r28
    1c5a:	0f 5b       	subi	r16, 0xBF	; 191
    1c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5e:	fe 01       	movw	r30, r28
    1c60:	eb 5b       	subi	r30, 0xBB	; 187
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	2b ea       	ldi	r18, 0xAB	; 171
    1c6e:	3a ea       	ldi	r19, 0xAA	; 170
    1c70:	4a e2       	ldi	r20, 0x2A	; 42
    1c72:	50 e4       	ldi	r21, 0x40	; 64
    1c74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	80 83       	st	Z, r24
    1c80:	91 83       	std	Z+1, r25	; 0x01
    1c82:	a2 83       	std	Z+2, r26	; 0x02
    1c84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c86:	fe 01       	movw	r30, r28
    1c88:	ef 5b       	subi	r30, 0xBF	; 191
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	60 81       	ld	r22, Z
    1c8e:	71 81       	ldd	r23, Z+1	; 0x01
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e8       	ldi	r20, 0x80	; 128
    1c9a:	5f e3       	ldi	r21, 0x3F	; 63
    1c9c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ca0:	88 23       	and	r24, r24
    1ca2:	34 f4       	brge	.+12     	; 0x1cb0 <LCD_voidInitialization+0x21a>
		__ticks = 1;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e0 5c       	subi	r30, 0xC0	; 192
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	80 83       	st	Z, r24
    1cae:	9d c0       	rjmp	.+314    	; 0x1dea <LCD_voidInitialization+0x354>
	else if (__tmp > 255)
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	ef 5b       	subi	r30, 0xBF	; 191
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	60 81       	ld	r22, Z
    1cb8:	71 81       	ldd	r23, Z+1	; 0x01
    1cba:	82 81       	ldd	r24, Z+2	; 0x02
    1cbc:	93 81       	ldd	r25, Z+3	; 0x03
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	4f e7       	ldi	r20, 0x7F	; 127
    1cc4:	53 e4       	ldi	r21, 0x43	; 67
    1cc6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cca:	18 16       	cp	r1, r24
    1ccc:	0c f0       	brlt	.+2      	; 0x1cd0 <LCD_voidInitialization+0x23a>
    1cce:	7e c0       	rjmp	.+252    	; 0x1dcc <LCD_voidInitialization+0x336>
	{
		_delay_ms(__us / 1000.0);
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	eb 5b       	subi	r30, 0xBB	; 187
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	60 81       	ld	r22, Z
    1cd8:	71 81       	ldd	r23, Z+1	; 0x01
    1cda:	82 81       	ldd	r24, Z+2	; 0x02
    1cdc:	93 81       	ldd	r25, Z+3	; 0x03
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	4a e7       	ldi	r20, 0x7A	; 122
    1ce4:	54 e4       	ldi	r21, 0x44	; 68
    1ce6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	8c af       	std	Y+60, r24	; 0x3c
    1cf0:	9d af       	std	Y+61, r25	; 0x3d
    1cf2:	ae af       	std	Y+62, r26	; 0x3e
    1cf4:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf6:	6c ad       	ldd	r22, Y+60	; 0x3c
    1cf8:	7d ad       	ldd	r23, Y+61	; 0x3d
    1cfa:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cfc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	4a ef       	ldi	r20, 0xFA	; 250
    1d04:	54 e4       	ldi	r21, 0x44	; 68
    1d06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	88 af       	std	Y+56, r24	; 0x38
    1d10:	99 af       	std	Y+57, r25	; 0x39
    1d12:	aa af       	std	Y+58, r26	; 0x3a
    1d14:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1d16:	68 ad       	ldd	r22, Y+56	; 0x38
    1d18:	79 ad       	ldd	r23, Y+57	; 0x39
    1d1a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d1c:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e8       	ldi	r20, 0x80	; 128
    1d24:	5f e3       	ldi	r21, 0x3F	; 63
    1d26:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d2a:	88 23       	and	r24, r24
    1d2c:	2c f4       	brge	.+10     	; 0x1d38 <LCD_voidInitialization+0x2a2>
		__ticks = 1;
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9f ab       	std	Y+55, r25	; 0x37
    1d34:	8e ab       	std	Y+54, r24	; 0x36
    1d36:	3f c0       	rjmp	.+126    	; 0x1db6 <LCD_voidInitialization+0x320>
	else if (__tmp > 65535)
    1d38:	68 ad       	ldd	r22, Y+56	; 0x38
    1d3a:	79 ad       	ldd	r23, Y+57	; 0x39
    1d3c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d3e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	3f ef       	ldi	r19, 0xFF	; 255
    1d44:	4f e7       	ldi	r20, 0x7F	; 127
    1d46:	57 e4       	ldi	r21, 0x47	; 71
    1d48:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d4c:	18 16       	cp	r1, r24
    1d4e:	4c f5       	brge	.+82     	; 0x1da2 <LCD_voidInitialization+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d50:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d52:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d54:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d56:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e2       	ldi	r20, 0x20	; 32
    1d5e:	51 e4       	ldi	r21, 0x41	; 65
    1d60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	bc 01       	movw	r22, r24
    1d6a:	cd 01       	movw	r24, r26
    1d6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	9f ab       	std	Y+55, r25	; 0x37
    1d76:	8e ab       	std	Y+54, r24	; 0x36
    1d78:	0f c0       	rjmp	.+30     	; 0x1d98 <LCD_voidInitialization+0x302>
    1d7a:	88 ec       	ldi	r24, 0xC8	; 200
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	9d ab       	std	Y+53, r25	; 0x35
    1d80:	8c ab       	std	Y+52, r24	; 0x34
    1d82:	8c a9       	ldd	r24, Y+52	; 0x34
    1d84:	9d a9       	ldd	r25, Y+53	; 0x35
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <LCD_voidInitialization+0x2f0>
    1d8a:	9d ab       	std	Y+53, r25	; 0x35
    1d8c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8e:	8e a9       	ldd	r24, Y+54	; 0x36
    1d90:	9f a9       	ldd	r25, Y+55	; 0x37
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	9f ab       	std	Y+55, r25	; 0x37
    1d96:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d98:	8e a9       	ldd	r24, Y+54	; 0x36
    1d9a:	9f a9       	ldd	r25, Y+55	; 0x37
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	69 f7       	brne	.-38     	; 0x1d7a <LCD_voidInitialization+0x2e4>
    1da0:	2d c0       	rjmp	.+90     	; 0x1dfc <LCD_voidInitialization+0x366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da2:	68 ad       	ldd	r22, Y+56	; 0x38
    1da4:	79 ad       	ldd	r23, Y+57	; 0x39
    1da6:	8a ad       	ldd	r24, Y+58	; 0x3a
    1da8:	9b ad       	ldd	r25, Y+59	; 0x3b
    1daa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	9f ab       	std	Y+55, r25	; 0x37
    1db4:	8e ab       	std	Y+54, r24	; 0x36
    1db6:	8e a9       	ldd	r24, Y+54	; 0x36
    1db8:	9f a9       	ldd	r25, Y+55	; 0x37
    1dba:	9b ab       	std	Y+51, r25	; 0x33
    1dbc:	8a ab       	std	Y+50, r24	; 0x32
    1dbe:	8a a9       	ldd	r24, Y+50	; 0x32
    1dc0:	9b a9       	ldd	r25, Y+51	; 0x33
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <LCD_voidInitialization+0x32c>
    1dc6:	9b ab       	std	Y+51, r25	; 0x33
    1dc8:	8a ab       	std	Y+50, r24	; 0x32
    1dca:	18 c0       	rjmp	.+48     	; 0x1dfc <LCD_voidInitialization+0x366>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dcc:	fe 01       	movw	r30, r28
    1dce:	ef 5b       	subi	r30, 0xBF	; 191
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	60 81       	ld	r22, Z
    1dd4:	71 81       	ldd	r23, Z+1	; 0x01
    1dd6:	82 81       	ldd	r24, Z+2	; 0x02
    1dd8:	93 81       	ldd	r25, Z+3	; 0x03
    1dda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	fe 01       	movw	r30, r28
    1de4:	e0 5c       	subi	r30, 0xC0	; 192
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 83       	st	Z, r24
    1dea:	fe 01       	movw	r30, r28
    1dec:	e0 5c       	subi	r30, 0xC0	; 192
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	80 81       	ld	r24, Z
    1df2:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1df4:	89 a9       	ldd	r24, Y+49	; 0x31
    1df6:	8a 95       	dec	r24
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <LCD_voidInitialization+0x360>
    1dfa:	89 ab       	std	Y+49, r24	; 0x31
	 * 				  -> OFF -> 0
	 *
	 * DB2 	Display(D) -> ON  -> 1
	 * 				   -> OFF -> 0
	 */
	LCD_voidWriteCommand(0b00001100);
    1dfc:	8c e0       	ldi	r24, 0x0C	; 12
    1dfe:	0e 94 05 0c 	call	0x180a	; 0x180a <LCD_voidWriteCommand>
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	a0 e8       	ldi	r26, 0x80	; 128
    1e08:	b0 e4       	ldi	r27, 0x40	; 64
    1e0a:	8d a7       	std	Y+45, r24	; 0x2d
    1e0c:	9e a7       	std	Y+46, r25	; 0x2e
    1e0e:	af a7       	std	Y+47, r26	; 0x2f
    1e10:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e12:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e14:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e18:	98 a9       	ldd	r25, Y+48	; 0x30
    1e1a:	2b ea       	ldi	r18, 0xAB	; 171
    1e1c:	3a ea       	ldi	r19, 0xAA	; 170
    1e1e:	4a e2       	ldi	r20, 0x2A	; 42
    1e20:	50 e4       	ldi	r21, 0x40	; 64
    1e22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	89 a7       	std	Y+41, r24	; 0x29
    1e2c:	9a a7       	std	Y+42, r25	; 0x2a
    1e2e:	ab a7       	std	Y+43, r26	; 0x2b
    1e30:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1e32:	69 a5       	ldd	r22, Y+41	; 0x29
    1e34:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e36:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e38:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e8       	ldi	r20, 0x80	; 128
    1e40:	5f e3       	ldi	r21, 0x3F	; 63
    1e42:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e46:	88 23       	and	r24, r24
    1e48:	1c f4       	brge	.+6      	; 0x1e50 <LCD_voidInitialization+0x3ba>
		__ticks = 1;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	88 a7       	std	Y+40, r24	; 0x28
    1e4e:	91 c0       	rjmp	.+290    	; 0x1f72 <LCD_voidInitialization+0x4dc>
	else if (__tmp > 255)
    1e50:	69 a5       	ldd	r22, Y+41	; 0x29
    1e52:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e54:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e56:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	4f e7       	ldi	r20, 0x7F	; 127
    1e5e:	53 e4       	ldi	r21, 0x43	; 67
    1e60:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e64:	18 16       	cp	r1, r24
    1e66:	0c f0       	brlt	.+2      	; 0x1e6a <LCD_voidInitialization+0x3d4>
    1e68:	7b c0       	rjmp	.+246    	; 0x1f60 <LCD_voidInitialization+0x4ca>
	{
		_delay_ms(__us / 1000.0);
    1e6a:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e6c:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e70:	98 a9       	ldd	r25, Y+48	; 0x30
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	4a e7       	ldi	r20, 0x7A	; 122
    1e78:	54 e4       	ldi	r21, 0x44	; 68
    1e7a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	8c a3       	std	Y+36, r24	; 0x24
    1e84:	9d a3       	std	Y+37, r25	; 0x25
    1e86:	ae a3       	std	Y+38, r26	; 0x26
    1e88:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8a:	6c a1       	ldd	r22, Y+36	; 0x24
    1e8c:	7d a1       	ldd	r23, Y+37	; 0x25
    1e8e:	8e a1       	ldd	r24, Y+38	; 0x26
    1e90:	9f a1       	ldd	r25, Y+39	; 0x27
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	4a ef       	ldi	r20, 0xFA	; 250
    1e98:	54 e4       	ldi	r21, 0x44	; 68
    1e9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	88 a3       	std	Y+32, r24	; 0x20
    1ea4:	99 a3       	std	Y+33, r25	; 0x21
    1ea6:	aa a3       	std	Y+34, r26	; 0x22
    1ea8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1eaa:	68 a1       	ldd	r22, Y+32	; 0x20
    1eac:	79 a1       	ldd	r23, Y+33	; 0x21
    1eae:	8a a1       	ldd	r24, Y+34	; 0x22
    1eb0:	9b a1       	ldd	r25, Y+35	; 0x23
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e8       	ldi	r20, 0x80	; 128
    1eb8:	5f e3       	ldi	r21, 0x3F	; 63
    1eba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ebe:	88 23       	and	r24, r24
    1ec0:	2c f4       	brge	.+10     	; 0x1ecc <LCD_voidInitialization+0x436>
		__ticks = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9f 8f       	std	Y+31, r25	; 0x1f
    1ec8:	8e 8f       	std	Y+30, r24	; 0x1e
    1eca:	3f c0       	rjmp	.+126    	; 0x1f4a <LCD_voidInitialization+0x4b4>
	else if (__tmp > 65535)
    1ecc:	68 a1       	ldd	r22, Y+32	; 0x20
    1ece:	79 a1       	ldd	r23, Y+33	; 0x21
    1ed0:	8a a1       	ldd	r24, Y+34	; 0x22
    1ed2:	9b a1       	ldd	r25, Y+35	; 0x23
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	3f ef       	ldi	r19, 0xFF	; 255
    1ed8:	4f e7       	ldi	r20, 0x7F	; 127
    1eda:	57 e4       	ldi	r21, 0x47	; 71
    1edc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ee0:	18 16       	cp	r1, r24
    1ee2:	4c f5       	brge	.+82     	; 0x1f36 <LCD_voidInitialization+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee4:	6c a1       	ldd	r22, Y+36	; 0x24
    1ee6:	7d a1       	ldd	r23, Y+37	; 0x25
    1ee8:	8e a1       	ldd	r24, Y+38	; 0x26
    1eea:	9f a1       	ldd	r25, Y+39	; 0x27
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e2       	ldi	r20, 0x20	; 32
    1ef2:	51 e4       	ldi	r21, 0x41	; 65
    1ef4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9f 8f       	std	Y+31, r25	; 0x1f
    1f0a:	8e 8f       	std	Y+30, r24	; 0x1e
    1f0c:	0f c0       	rjmp	.+30     	; 0x1f2c <LCD_voidInitialization+0x496>
    1f0e:	88 ec       	ldi	r24, 0xC8	; 200
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9d 8f       	std	Y+29, r25	; 0x1d
    1f14:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f16:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f18:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <LCD_voidInitialization+0x484>
    1f1e:	9d 8f       	std	Y+29, r25	; 0x1d
    1f20:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f24:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	9f 8f       	std	Y+31, r25	; 0x1f
    1f2a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f2e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	69 f7       	brne	.-38     	; 0x1f0e <LCD_voidInitialization+0x478>
    1f34:	24 c0       	rjmp	.+72     	; 0x1f7e <LCD_voidInitialization+0x4e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f36:	68 a1       	ldd	r22, Y+32	; 0x20
    1f38:	79 a1       	ldd	r23, Y+33	; 0x21
    1f3a:	8a a1       	ldd	r24, Y+34	; 0x22
    1f3c:	9b a1       	ldd	r25, Y+35	; 0x23
    1f3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9f 8f       	std	Y+31, r25	; 0x1f
    1f48:	8e 8f       	std	Y+30, r24	; 0x1e
    1f4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f4c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f4e:	9b 8f       	std	Y+27, r25	; 0x1b
    1f50:	8a 8f       	std	Y+26, r24	; 0x1a
    1f52:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f54:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <LCD_voidInitialization+0x4c0>
    1f5a:	9b 8f       	std	Y+27, r25	; 0x1b
    1f5c:	8a 8f       	std	Y+26, r24	; 0x1a
    1f5e:	0f c0       	rjmp	.+30     	; 0x1f7e <LCD_voidInitialization+0x4e8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f60:	69 a5       	ldd	r22, Y+41	; 0x29
    1f62:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f64:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f66:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	88 a7       	std	Y+40, r24	; 0x28
    1f72:	88 a5       	ldd	r24, Y+40	; 0x28
    1f74:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f76:	89 8d       	ldd	r24, Y+25	; 0x19
    1f78:	8a 95       	dec	r24
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <LCD_voidInitialization+0x4e2>
    1f7c:	89 8f       	std	Y+25, r24	; 0x19

	/*Delay to Process Display ON/OFF Control*/
	_delay_us(4);

	/*Clear LCD*/
	LCD_voidWriteCommand(0b00000001);
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	0e 94 05 0c 	call	0x180a	; 0x180a <LCD_voidWriteCommand>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	a8 ec       	ldi	r26, 0xC8	; 200
    1f8a:	b4 e4       	ldi	r27, 0x44	; 68
    1f8c:	8d 8b       	std	Y+21, r24	; 0x15
    1f8e:	9e 8b       	std	Y+22, r25	; 0x16
    1f90:	af 8b       	std	Y+23, r26	; 0x17
    1f92:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f94:	6d 89       	ldd	r22, Y+21	; 0x15
    1f96:	7e 89       	ldd	r23, Y+22	; 0x16
    1f98:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9c:	2b ea       	ldi	r18, 0xAB	; 171
    1f9e:	3a ea       	ldi	r19, 0xAA	; 170
    1fa0:	4a e2       	ldi	r20, 0x2A	; 42
    1fa2:	50 e4       	ldi	r21, 0x40	; 64
    1fa4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	89 8b       	std	Y+17, r24	; 0x11
    1fae:	9a 8b       	std	Y+18, r25	; 0x12
    1fb0:	ab 8b       	std	Y+19, r26	; 0x13
    1fb2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fb4:	69 89       	ldd	r22, Y+17	; 0x11
    1fb6:	7a 89       	ldd	r23, Y+18	; 0x12
    1fb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fba:	9c 89       	ldd	r25, Y+20	; 0x14
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e8       	ldi	r20, 0x80	; 128
    1fc2:	5f e3       	ldi	r21, 0x3F	; 63
    1fc4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fc8:	88 23       	and	r24, r24
    1fca:	1c f4       	brge	.+6      	; 0x1fd2 <LCD_voidInitialization+0x53c>
		__ticks = 1;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	88 8b       	std	Y+16, r24	; 0x10
    1fd0:	91 c0       	rjmp	.+290    	; 0x20f4 <LCD_voidInitialization+0x65e>
	else if (__tmp > 255)
    1fd2:	69 89       	ldd	r22, Y+17	; 0x11
    1fd4:	7a 89       	ldd	r23, Y+18	; 0x12
    1fd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4f e7       	ldi	r20, 0x7F	; 127
    1fe0:	53 e4       	ldi	r21, 0x43	; 67
    1fe2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fe6:	18 16       	cp	r1, r24
    1fe8:	0c f0       	brlt	.+2      	; 0x1fec <LCD_voidInitialization+0x556>
    1fea:	7b c0       	rjmp	.+246    	; 0x20e2 <LCD_voidInitialization+0x64c>
	{
		_delay_ms(__us / 1000.0);
    1fec:	6d 89       	ldd	r22, Y+21	; 0x15
    1fee:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	4a e7       	ldi	r20, 0x7A	; 122
    1ffa:	54 e4       	ldi	r21, 0x44	; 68
    1ffc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	8c 87       	std	Y+12, r24	; 0x0c
    2006:	9d 87       	std	Y+13, r25	; 0x0d
    2008:	ae 87       	std	Y+14, r26	; 0x0e
    200a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200c:	6c 85       	ldd	r22, Y+12	; 0x0c
    200e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2010:	8e 85       	ldd	r24, Y+14	; 0x0e
    2012:	9f 85       	ldd	r25, Y+15	; 0x0f
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	4a ef       	ldi	r20, 0xFA	; 250
    201a:	54 e4       	ldi	r21, 0x44	; 68
    201c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	88 87       	std	Y+8, r24	; 0x08
    2026:	99 87       	std	Y+9, r25	; 0x09
    2028:	aa 87       	std	Y+10, r26	; 0x0a
    202a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    202c:	68 85       	ldd	r22, Y+8	; 0x08
    202e:	79 85       	ldd	r23, Y+9	; 0x09
    2030:	8a 85       	ldd	r24, Y+10	; 0x0a
    2032:	9b 85       	ldd	r25, Y+11	; 0x0b
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	5f e3       	ldi	r21, 0x3F	; 63
    203c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2040:	88 23       	and	r24, r24
    2042:	2c f4       	brge	.+10     	; 0x204e <LCD_voidInitialization+0x5b8>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9f 83       	std	Y+7, r25	; 0x07
    204a:	8e 83       	std	Y+6, r24	; 0x06
    204c:	3f c0       	rjmp	.+126    	; 0x20cc <LCD_voidInitialization+0x636>
	else if (__tmp > 65535)
    204e:	68 85       	ldd	r22, Y+8	; 0x08
    2050:	79 85       	ldd	r23, Y+9	; 0x09
    2052:	8a 85       	ldd	r24, Y+10	; 0x0a
    2054:	9b 85       	ldd	r25, Y+11	; 0x0b
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	3f ef       	ldi	r19, 0xFF	; 255
    205a:	4f e7       	ldi	r20, 0x7F	; 127
    205c:	57 e4       	ldi	r21, 0x47	; 71
    205e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2062:	18 16       	cp	r1, r24
    2064:	4c f5       	brge	.+82     	; 0x20b8 <LCD_voidInitialization+0x622>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2066:	6c 85       	ldd	r22, Y+12	; 0x0c
    2068:	7d 85       	ldd	r23, Y+13	; 0x0d
    206a:	8e 85       	ldd	r24, Y+14	; 0x0e
    206c:	9f 85       	ldd	r25, Y+15	; 0x0f
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e2       	ldi	r20, 0x20	; 32
    2074:	51 e4       	ldi	r21, 0x41	; 65
    2076:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9f 83       	std	Y+7, r25	; 0x07
    208c:	8e 83       	std	Y+6, r24	; 0x06
    208e:	0f c0       	rjmp	.+30     	; 0x20ae <LCD_voidInitialization+0x618>
    2090:	88 ec       	ldi	r24, 0xC8	; 200
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	9d 83       	std	Y+5, r25	; 0x05
    2096:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2098:	8c 81       	ldd	r24, Y+4	; 0x04
    209a:	9d 81       	ldd	r25, Y+5	; 0x05
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <LCD_voidInitialization+0x606>
    20a0:	9d 83       	std	Y+5, r25	; 0x05
    20a2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a4:	8e 81       	ldd	r24, Y+6	; 0x06
    20a6:	9f 81       	ldd	r25, Y+7	; 0x07
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	9f 83       	std	Y+7, r25	; 0x07
    20ac:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ae:	8e 81       	ldd	r24, Y+6	; 0x06
    20b0:	9f 81       	ldd	r25, Y+7	; 0x07
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	69 f7       	brne	.-38     	; 0x2090 <LCD_voidInitialization+0x5fa>
    20b6:	24 c0       	rjmp	.+72     	; 0x2100 <LCD_voidInitialization+0x66a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b8:	68 85       	ldd	r22, Y+8	; 0x08
    20ba:	79 85       	ldd	r23, Y+9	; 0x09
    20bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    20be:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	9f 83       	std	Y+7, r25	; 0x07
    20ca:	8e 83       	std	Y+6, r24	; 0x06
    20cc:	8e 81       	ldd	r24, Y+6	; 0x06
    20ce:	9f 81       	ldd	r25, Y+7	; 0x07
    20d0:	9b 83       	std	Y+3, r25	; 0x03
    20d2:	8a 83       	std	Y+2, r24	; 0x02
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	9b 81       	ldd	r25, Y+3	; 0x03
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <LCD_voidInitialization+0x642>
    20dc:	9b 83       	std	Y+3, r25	; 0x03
    20de:	8a 83       	std	Y+2, r24	; 0x02
    20e0:	0f c0       	rjmp	.+30     	; 0x2100 <LCD_voidInitialization+0x66a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20e2:	69 89       	ldd	r22, Y+17	; 0x11
    20e4:	7a 89       	ldd	r23, Y+18	; 0x12
    20e6:	8b 89       	ldd	r24, Y+19	; 0x13
    20e8:	9c 89       	ldd	r25, Y+20	; 0x14
    20ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	88 8b       	std	Y+16, r24	; 0x10
    20f4:	88 89       	ldd	r24, Y+16	; 0x10
    20f6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	8a 95       	dec	r24
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <LCD_voidInitialization+0x664>
    20fe:	89 83       	std	Y+1, r24	; 0x01

	/*Delay for Process Clearing LCD*/
	_delay_us(1600);
}
    2100:	ca 5a       	subi	r28, 0xAA	; 170
    2102:	df 4f       	sbci	r29, 0xFF	; 255
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	1f 91       	pop	r17
    2114:	0f 91       	pop	r16
    2116:	08 95       	ret

00002118 <LCD_voidClearLCD>:
/* Description	: Clear LCD
 * Input		: Non
 * Output		: Non
 */
void LCD_voidClearLCD(void)
{
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
	/*Clear LCD*/
	LCD_voidWriteCommand(0b00000001);
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	0e 94 05 0c 	call	0x180a	; 0x180a <LCD_voidWriteCommand>
}
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <LCD_u8WriteString>:
 * Input		: Array of Strings, Size of this Array
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8WriteString(u8 *Copy_u8String, u8 Copy_u8StrSize)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	00 d0       	rcall	.+0      	; 0x2132 <LCD_u8WriteString+0x6>
    2132:	00 d0       	rcall	.+0      	; 0x2134 <LCD_u8WriteString+0x8>
    2134:	0f 92       	push	r0
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	9c 83       	std	Y+4, r25	; 0x04
    213c:	8b 83       	std	Y+3, r24	; 0x03
    213e:	6d 83       	std	Y+5, r22	; 0x05
	/*Local Variables*/
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0;
    2140:	1a 82       	std	Y+2, r1	; 0x02
    2142:	19 82       	std	Y+1, r1	; 0x01

	/*Loop on the Array of the Strings and print it one by one*/
	for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Copy_u8StrSize; Local_u8LoopCtr++)
    2144:	19 82       	std	Y+1, r1	; 0x01
    2146:	0e c0       	rjmp	.+28     	; 0x2164 <LCD_u8WriteString+0x38>
	{
		LCD_voidWriteData(Copy_u8String[Local_u8LoopCtr]);
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	9c 81       	ldd	r25, Y+4	; 0x04
    2152:	fc 01       	movw	r30, r24
    2154:	e2 0f       	add	r30, r18
    2156:	f3 1f       	adc	r31, r19
    2158:	80 81       	ld	r24, Z
    215a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
{
	/*Local Variables*/
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0;

	/*Loop on the Array of the Strings and print it one by one*/
	for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Copy_u8StrSize; Local_u8LoopCtr++)
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	8f 5f       	subi	r24, 0xFF	; 255
    2162:	89 83       	std	Y+1, r24	; 0x01
    2164:	99 81       	ldd	r25, Y+1	; 0x01
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	98 17       	cp	r25, r24
    216a:	70 f3       	brcs	.-36     	; 0x2148 <LCD_u8WriteString+0x1c>
	{
		LCD_voidWriteData(Copy_u8String[Local_u8LoopCtr]);
	}

	return Local_u8Error;
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	08 95       	ret

0000217e <LCD_u8GoToXY>:
 * Input		: X Position, Y Position
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8GoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	00 d0       	rcall	.+0      	; 0x2184 <LCD_u8GoToXY+0x6>
    2184:	00 d0       	rcall	.+0      	; 0x2186 <LCD_u8GoToXY+0x8>
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    218a:	8b 83       	std	Y+3, r24	; 0x03
    218c:	6c 83       	std	Y+4, r22	; 0x04
	/*Local Variables*/
	u8 Local_u8Error = 0, Local_u8Address = 0;
    218e:	1a 82       	std	Y+2, r1	; 0x02
    2190:	19 82       	std	Y+1, r1	; 0x01
//			 * of the Memory and the X position we need and the Command for AC eight's Bit 0b1(128)
//			 */
//			Local_u8Address = DDRAM_LINE2_FIRST_LOCATION + Copy_u8XPos + AC_REG_COMMAND;
//		}

		Local_u8Address = Copy_u8XPos + (Copy_u8YPos * DDRAM_LINE2_FIRST_LOCATION) +  AC_REG_COMMAND;
    2192:	8c 81       	ldd	r24, Y+4	; 0x04
    2194:	88 2f       	mov	r24, r24
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	00 24       	eor	r0, r0
    219a:	96 95       	lsr	r25
    219c:	87 95       	ror	r24
    219e:	07 94       	ror	r0
    21a0:	96 95       	lsr	r25
    21a2:	87 95       	ror	r24
    21a4:	07 94       	ror	r0
    21a6:	98 2f       	mov	r25, r24
    21a8:	80 2d       	mov	r24, r0
    21aa:	98 2f       	mov	r25, r24
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	89 0f       	add	r24, r25
    21b0:	80 58       	subi	r24, 0x80	; 128
    21b2:	89 83       	std	Y+1, r24	; 0x01

		/*Send the Command with the Needed Position*/
		LCD_voidWriteCommand(Local_u8Address);
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	0e 94 05 0c 	call	0x180a	; 0x180a <LCD_voidWriteCommand>
//	}

	return Local_u8Error;
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
}
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <LCD_u8WriteSpecialChar>:
 * Input		: An Array of the Special Characters we have only 8 Positions
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8WriteSpecialChar(u8 *Copy_u8SpecialChar, u8 Copy_ArraySize)
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <LCD_u8WriteSpecialChar+0x6>
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <LCD_u8WriteSpecialChar+0x8>
    21d2:	0f 92       	push	r0
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	9c 83       	std	Y+4, r25	; 0x04
    21da:	8b 83       	std	Y+3, r24	; 0x03
    21dc:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0;
    21de:	1a 82       	std	Y+2, r1	; 0x02
    21e0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_ArraySize > MAX_NB_BITS_SPECIAL_CHAR)
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
    21e4:	81 34       	cpi	r24, 0x41	; 65
    21e6:	18 f0       	brcs	.+6      	; 0x21ee <LCD_u8WriteSpecialChar+0x24>
	{
		Local_u8Error = 1;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	8a 83       	std	Y+2, r24	; 0x02
    21ec:	1a c0       	rjmp	.+52     	; 0x2222 <LCD_u8WriteSpecialChar+0x58>
	}

	else
	{
		/*Move the AC Register to Points to CGRAM command = 0b01 and the other 6 bits are the Position in CGRAM memory*/
		LCD_voidWriteCommand(0b01000000);
    21ee:	80 e4       	ldi	r24, 0x40	; 64
    21f0:	0e 94 05 0c 	call	0x180a	; 0x180a <LCD_voidWriteCommand>

		/*Looping on the Array of the Special Char and Write it in CGRAM*/
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < MAX_NB_BITS_SPECIAL_CHAR; Local_u8LoopCtr++)
    21f4:	19 82       	std	Y+1, r1	; 0x01
    21f6:	0e c0       	rjmp	.+28     	; 0x2214 <LCD_u8WriteSpecialChar+0x4a>
		{
			LCD_voidWriteData(Copy_u8SpecialChar[Local_u8LoopCtr]);
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	fc 01       	movw	r30, r24
    2204:	e2 0f       	add	r30, r18
    2206:	f3 1f       	adc	r31, r19
    2208:	80 81       	ld	r24, Z
    220a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
	{
		/*Move the AC Register to Points to CGRAM command = 0b01 and the other 6 bits are the Position in CGRAM memory*/
		LCD_voidWriteCommand(0b01000000);

		/*Looping on the Array of the Special Char and Write it in CGRAM*/
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < MAX_NB_BITS_SPECIAL_CHAR; Local_u8LoopCtr++)
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	8f 5f       	subi	r24, 0xFF	; 255
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	80 34       	cpi	r24, 0x40	; 64
    2218:	78 f3       	brcs	.-34     	; 0x21f8 <LCD_u8WriteSpecialChar+0x2e>
		{
			LCD_voidWriteData(Copy_u8SpecialChar[Local_u8LoopCtr]);
		}

		/*Back AC Register to points to the DDRAM*/
		LCD_u8GoToXY(0, 0);
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
	}
	return Local_u8Error;
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <LCD_u8WriteINT>:
 * Input		: The Integer Number, X position, Y Position
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8WriteINT(u32 Copy_u32INT, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	61 97       	sbiw	r28, 0x11	; 17
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
    2248:	6a 87       	std	Y+10, r22	; 0x0a
    224a:	7b 87       	std	Y+11, r23	; 0x0b
    224c:	8c 87       	std	Y+12, r24	; 0x0c
    224e:	9d 87       	std	Y+13, r25	; 0x0d
    2250:	4e 87       	std	Y+14, r20	; 0x0e
    2252:	2f 87       	std	Y+15, r18	; 0x0f
	/* Local_u8LoopCtr: 	to Iterator for the loop
	 * Local_u8NOD: 		Number of Digits to make the positions of ones, tens, ...
	 * Local_u8CopyNOD: 	Copy of Number of Digits for the iteration in loop
	 * Local_u8Reminder: 	to save the Reminder (%) and check on it
	 */
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0, Local_u8NOD = 0, Local_u8CopyNOD = 0, Local_u8Reminder = 0;
    2254:	19 86       	std	Y+9, r1	; 0x09
    2256:	18 86       	std	Y+8, r1	; 0x08
    2258:	1f 82       	std	Y+7, r1	; 0x07
    225a:	1e 82       	std	Y+6, r1	; 0x06
    225c:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Temp = 0;
    225e:	19 82       	std	Y+1, r1	; 0x01
    2260:	1a 82       	std	Y+2, r1	; 0x02
    2262:	1b 82       	std	Y+3, r1	; 0x03
    2264:	1c 82       	std	Y+4, r1	; 0x04

	/*Checking on the Integer Number if it within the u32 range
	 * Check on the X position as we have 0 -> 15 position
	 * Check on the Y Position as we have 0 -> 1
	 */
	if(Copy_u32INT > MAX_U32_NB || Copy_u8XPos > 15 || Copy_u8YPos > 1)
    2266:	8e 85       	ldd	r24, Y+14	; 0x0e
    2268:	80 31       	cpi	r24, 0x10	; 16
    226a:	18 f4       	brcc	.+6      	; 0x2272 <LCD_u8WriteINT+0x3e>
    226c:	8f 85       	ldd	r24, Y+15	; 0x0f
    226e:	82 30       	cpi	r24, 0x02	; 2
    2270:	18 f0       	brcs	.+6      	; 0x2278 <LCD_u8WriteINT+0x44>
	{
		Local_u8Error = 1;
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	89 87       	std	Y+9, r24	; 0x09
    2276:	40 c1       	rjmp	.+640    	; 0x24f8 <LCD_u8WriteINT+0x2c4>

	/*if the Check is Okay with no problems*/
	else
	{
		/*Check if the Number is ZERO (0)*/
		if(Copy_u32INT == 0)
    2278:	8a 85       	ldd	r24, Y+10	; 0x0a
    227a:	9b 85       	ldd	r25, Y+11	; 0x0b
    227c:	ac 85       	ldd	r26, Y+12	; 0x0c
    227e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	a1 05       	cpc	r26, r1
    2284:	b1 05       	cpc	r27, r1
    2286:	39 f4       	brne	.+14     	; 0x2296 <LCD_u8WriteINT+0x62>
		{
			LCD_u8GoToXY((Copy_u8XPos), Copy_u8YPos);
    2288:	8e 85       	ldd	r24, Y+14	; 0x0e
    228a:	6f 85       	ldd	r22, Y+15	; 0x0f
    228c:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
			LCD_voidWriteData(48);
    2290:	80 e3       	ldi	r24, 0x30	; 48
    2292:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
		}
		/*Putting the Integer Value in a temporary Variable to use in our calculation without losing it*/
		Local_u32Temp = Copy_u32INT;
    2296:	8a 85       	ldd	r24, Y+10	; 0x0a
    2298:	9b 85       	ldd	r25, Y+11	; 0x0b
    229a:	ac 85       	ldd	r26, Y+12	; 0x0c
    229c:	bd 85       	ldd	r27, Y+13	; 0x0d
    229e:	89 83       	std	Y+1, r24	; 0x01
    22a0:	9a 83       	std	Y+2, r25	; 0x02
    22a2:	ab 83       	std	Y+3, r26	; 0x03
    22a4:	bc 83       	std	Y+4, r27	; 0x04
    22a6:	15 c0       	rjmp	.+42     	; 0x22d2 <LCD_u8WriteINT+0x9e>

		/*Loop to get the Number of Digits*/
		while(Local_u32Temp != 0)
		{
			/*Dividing the Integer number by 10 till we have a result of Division Zero*/
			Local_u32Temp /= 10;
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	9a 81       	ldd	r25, Y+2	; 0x02
    22ac:	ab 81       	ldd	r26, Y+3	; 0x03
    22ae:	bc 81       	ldd	r27, Y+4	; 0x04
    22b0:	2a e0       	ldi	r18, 0x0A	; 10
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e0       	ldi	r20, 0x00	; 0
    22b6:	50 e0       	ldi	r21, 0x00	; 0
    22b8:	bc 01       	movw	r22, r24
    22ba:	cd 01       	movw	r24, r26
    22bc:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__udivmodsi4>
    22c0:	da 01       	movw	r26, r20
    22c2:	c9 01       	movw	r24, r18
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	9a 83       	std	Y+2, r25	; 0x02
    22c8:	ab 83       	std	Y+3, r26	; 0x03
    22ca:	bc 83       	std	Y+4, r27	; 0x04

			/*With each Division Add 1 to Number of Digits*/
			Local_u8NOD++;
    22cc:	8f 81       	ldd	r24, Y+7	; 0x07
    22ce:	8f 5f       	subi	r24, 0xFF	; 255
    22d0:	8f 83       	std	Y+7, r24	; 0x07
		}
		/*Putting the Integer Value in a temporary Variable to use in our calculation without losing it*/
		Local_u32Temp = Copy_u32INT;

		/*Loop to get the Number of Digits*/
		while(Local_u32Temp != 0)
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	9a 81       	ldd	r25, Y+2	; 0x02
    22d6:	ab 81       	ldd	r26, Y+3	; 0x03
    22d8:	bc 81       	ldd	r27, Y+4	; 0x04
    22da:	00 97       	sbiw	r24, 0x00	; 0
    22dc:	a1 05       	cpc	r26, r1
    22de:	b1 05       	cpc	r27, r1
    22e0:	19 f7       	brne	.-58     	; 0x22a8 <LCD_u8WriteINT+0x74>
			/*With each Division Add 1 to Number of Digits*/
			Local_u8NOD++;
		}

		/*Make a Copy from the Number of Digits to use it in looping*/
		Local_u8CopyNOD = Local_u8NOD;
    22e2:	8f 81       	ldd	r24, Y+7	; 0x07
    22e4:	8e 83       	std	Y+6, r24	; 0x06

		/*Re-Make a copy of the Integer Number*/
		Local_u32Temp = Copy_u32INT;
    22e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    22e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    22ea:	ac 85       	ldd	r26, Y+12	; 0x0c
    22ec:	bd 85       	ldd	r27, Y+13	; 0x0d
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	9a 83       	std	Y+2, r25	; 0x02
    22f2:	ab 83       	std	Y+3, r26	; 0x03
    22f4:	bc 83       	std	Y+4, r27	; 0x04

		/*Now we have the Integer number and the Number of Digits so we will loop and in each loop
		 * we will make a Reminder from ones, tens and so on till our reminder be Zero
		 * and loop to print this number with the position on LCD
		 */
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Local_u8CopyNOD; Local_u8LoopCtr++)
    22f6:	18 86       	std	Y+8, r1	; 0x08
    22f8:	fa c0       	rjmp	.+500    	; 0x24ee <LCD_u8WriteINT+0x2ba>
		{
			/*Getting the Ones at first time and in second iteration tens and so on*/
			Local_u8Reminder = Local_u32Temp % 10;
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	9a 81       	ldd	r25, Y+2	; 0x02
    22fe:	ab 81       	ldd	r26, Y+3	; 0x03
    2300:	bc 81       	ldd	r27, Y+4	; 0x04
    2302:	2a e0       	ldi	r18, 0x0A	; 10
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	50 e0       	ldi	r21, 0x00	; 0
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__udivmodsi4>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	8d 83       	std	Y+5, r24	; 0x05

			/*By Switch we will print the number by the ASCII Code*/
			switch(Local_u8Reminder)
    2318:	8d 81       	ldd	r24, Y+5	; 0x05
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	39 8b       	std	Y+17, r19	; 0x11
    2320:	28 8b       	std	Y+16, r18	; 0x10
    2322:	88 89       	ldd	r24, Y+16	; 0x10
    2324:	99 89       	ldd	r25, Y+17	; 0x11
    2326:	84 30       	cpi	r24, 0x04	; 4
    2328:	91 05       	cpc	r25, r1
    232a:	09 f4       	brne	.+2      	; 0x232e <LCD_u8WriteINT+0xfa>
    232c:	7b c0       	rjmp	.+246    	; 0x2424 <LCD_u8WriteINT+0x1f0>
    232e:	28 89       	ldd	r18, Y+16	; 0x10
    2330:	39 89       	ldd	r19, Y+17	; 0x11
    2332:	25 30       	cpi	r18, 0x05	; 5
    2334:	31 05       	cpc	r19, r1
    2336:	ec f4       	brge	.+58     	; 0x2372 <LCD_u8WriteINT+0x13e>
    2338:	88 89       	ldd	r24, Y+16	; 0x10
    233a:	99 89       	ldd	r25, Y+17	; 0x11
    233c:	81 30       	cpi	r24, 0x01	; 1
    233e:	91 05       	cpc	r25, r1
    2340:	09 f4       	brne	.+2      	; 0x2344 <LCD_u8WriteINT+0x110>
    2342:	49 c0       	rjmp	.+146    	; 0x23d6 <LCD_u8WriteINT+0x1a2>
    2344:	28 89       	ldd	r18, Y+16	; 0x10
    2346:	39 89       	ldd	r19, Y+17	; 0x11
    2348:	22 30       	cpi	r18, 0x02	; 2
    234a:	31 05       	cpc	r19, r1
    234c:	2c f4       	brge	.+10     	; 0x2358 <LCD_u8WriteINT+0x124>
    234e:	88 89       	ldd	r24, Y+16	; 0x10
    2350:	99 89       	ldd	r25, Y+17	; 0x11
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	99 f1       	breq	.+102    	; 0x23bc <LCD_u8WriteINT+0x188>
    2356:	b4 c0       	rjmp	.+360    	; 0x24c0 <LCD_u8WriteINT+0x28c>
    2358:	28 89       	ldd	r18, Y+16	; 0x10
    235a:	39 89       	ldd	r19, Y+17	; 0x11
    235c:	22 30       	cpi	r18, 0x02	; 2
    235e:	31 05       	cpc	r19, r1
    2360:	09 f4       	brne	.+2      	; 0x2364 <LCD_u8WriteINT+0x130>
    2362:	46 c0       	rjmp	.+140    	; 0x23f0 <LCD_u8WriteINT+0x1bc>
    2364:	88 89       	ldd	r24, Y+16	; 0x10
    2366:	99 89       	ldd	r25, Y+17	; 0x11
    2368:	83 30       	cpi	r24, 0x03	; 3
    236a:	91 05       	cpc	r25, r1
    236c:	09 f4       	brne	.+2      	; 0x2370 <LCD_u8WriteINT+0x13c>
    236e:	4d c0       	rjmp	.+154    	; 0x240a <LCD_u8WriteINT+0x1d6>
    2370:	a7 c0       	rjmp	.+334    	; 0x24c0 <LCD_u8WriteINT+0x28c>
    2372:	28 89       	ldd	r18, Y+16	; 0x10
    2374:	39 89       	ldd	r19, Y+17	; 0x11
    2376:	27 30       	cpi	r18, 0x07	; 7
    2378:	31 05       	cpc	r19, r1
    237a:	09 f4       	brne	.+2      	; 0x237e <LCD_u8WriteINT+0x14a>
    237c:	7a c0       	rjmp	.+244    	; 0x2472 <LCD_u8WriteINT+0x23e>
    237e:	88 89       	ldd	r24, Y+16	; 0x10
    2380:	99 89       	ldd	r25, Y+17	; 0x11
    2382:	88 30       	cpi	r24, 0x08	; 8
    2384:	91 05       	cpc	r25, r1
    2386:	6c f4       	brge	.+26     	; 0x23a2 <LCD_u8WriteINT+0x16e>
    2388:	28 89       	ldd	r18, Y+16	; 0x10
    238a:	39 89       	ldd	r19, Y+17	; 0x11
    238c:	25 30       	cpi	r18, 0x05	; 5
    238e:	31 05       	cpc	r19, r1
    2390:	09 f4       	brne	.+2      	; 0x2394 <LCD_u8WriteINT+0x160>
    2392:	55 c0       	rjmp	.+170    	; 0x243e <LCD_u8WriteINT+0x20a>
    2394:	88 89       	ldd	r24, Y+16	; 0x10
    2396:	99 89       	ldd	r25, Y+17	; 0x11
    2398:	86 30       	cpi	r24, 0x06	; 6
    239a:	91 05       	cpc	r25, r1
    239c:	09 f4       	brne	.+2      	; 0x23a0 <LCD_u8WriteINT+0x16c>
    239e:	5c c0       	rjmp	.+184    	; 0x2458 <LCD_u8WriteINT+0x224>
    23a0:	8f c0       	rjmp	.+286    	; 0x24c0 <LCD_u8WriteINT+0x28c>
    23a2:	28 89       	ldd	r18, Y+16	; 0x10
    23a4:	39 89       	ldd	r19, Y+17	; 0x11
    23a6:	28 30       	cpi	r18, 0x08	; 8
    23a8:	31 05       	cpc	r19, r1
    23aa:	09 f4       	brne	.+2      	; 0x23ae <LCD_u8WriteINT+0x17a>
    23ac:	6f c0       	rjmp	.+222    	; 0x248c <LCD_u8WriteINT+0x258>
    23ae:	88 89       	ldd	r24, Y+16	; 0x10
    23b0:	99 89       	ldd	r25, Y+17	; 0x11
    23b2:	89 30       	cpi	r24, 0x09	; 9
    23b4:	91 05       	cpc	r25, r1
    23b6:	09 f4       	brne	.+2      	; 0x23ba <LCD_u8WriteINT+0x186>
    23b8:	76 c0       	rjmp	.+236    	; 0x24a6 <LCD_u8WriteINT+0x272>
    23ba:	82 c0       	rjmp	.+260    	; 0x24c0 <LCD_u8WriteINT+0x28c>
			 * (2 - 1) + 6 = 7 in space 7 will be 5 //TENS
			 * (1 - 1) + 6 = 6 in Space 6 will be 5 //Hundreds
			 * and so on
			 */
			case 0:		//ZERO ASCII Code is 48
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    23bc:	8f 81       	ldd	r24, Y+7	; 0x07
    23be:	81 50       	subi	r24, 0x01	; 1
    23c0:	8f 83       	std	Y+7, r24	; 0x07
    23c2:	9f 81       	ldd	r25, Y+7	; 0x07
    23c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    23c6:	89 0f       	add	r24, r25
    23c8:	6f 85       	ldd	r22, Y+15	; 0x0f
    23ca:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
				LCD_voidWriteData(48);
    23ce:	80 e3       	ldi	r24, 0x30	; 48
    23d0:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
    23d4:	77 c0       	rjmp	.+238    	; 0x24c4 <LCD_u8WriteINT+0x290>
				break;

			case 1:		//ONE ASCII Code is 49
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    23d6:	8f 81       	ldd	r24, Y+7	; 0x07
    23d8:	81 50       	subi	r24, 0x01	; 1
    23da:	8f 83       	std	Y+7, r24	; 0x07
    23dc:	9f 81       	ldd	r25, Y+7	; 0x07
    23de:	8e 85       	ldd	r24, Y+14	; 0x0e
    23e0:	89 0f       	add	r24, r25
    23e2:	6f 85       	ldd	r22, Y+15	; 0x0f
    23e4:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
				LCD_voidWriteData(49);
    23e8:	81 e3       	ldi	r24, 0x31	; 49
    23ea:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
    23ee:	6a c0       	rjmp	.+212    	; 0x24c4 <LCD_u8WriteINT+0x290>
				break;

			case 2:		//TWO ASCII Code is 50
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    23f0:	8f 81       	ldd	r24, Y+7	; 0x07
    23f2:	81 50       	subi	r24, 0x01	; 1
    23f4:	8f 83       	std	Y+7, r24	; 0x07
    23f6:	9f 81       	ldd	r25, Y+7	; 0x07
    23f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    23fa:	89 0f       	add	r24, r25
    23fc:	6f 85       	ldd	r22, Y+15	; 0x0f
    23fe:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
				LCD_voidWriteData(50);
    2402:	82 e3       	ldi	r24, 0x32	; 50
    2404:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
    2408:	5d c0       	rjmp	.+186    	; 0x24c4 <LCD_u8WriteINT+0x290>
				break;

			case 3:		//THREE ASCII Code is 51
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    240a:	8f 81       	ldd	r24, Y+7	; 0x07
    240c:	81 50       	subi	r24, 0x01	; 1
    240e:	8f 83       	std	Y+7, r24	; 0x07
    2410:	9f 81       	ldd	r25, Y+7	; 0x07
    2412:	8e 85       	ldd	r24, Y+14	; 0x0e
    2414:	89 0f       	add	r24, r25
    2416:	6f 85       	ldd	r22, Y+15	; 0x0f
    2418:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
				LCD_voidWriteData(51);
    241c:	83 e3       	ldi	r24, 0x33	; 51
    241e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
    2422:	50 c0       	rjmp	.+160    	; 0x24c4 <LCD_u8WriteINT+0x290>
				break;

			case 4:		//FOUR ASCII Code is 52
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    2424:	8f 81       	ldd	r24, Y+7	; 0x07
    2426:	81 50       	subi	r24, 0x01	; 1
    2428:	8f 83       	std	Y+7, r24	; 0x07
    242a:	9f 81       	ldd	r25, Y+7	; 0x07
    242c:	8e 85       	ldd	r24, Y+14	; 0x0e
    242e:	89 0f       	add	r24, r25
    2430:	6f 85       	ldd	r22, Y+15	; 0x0f
    2432:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
				LCD_voidWriteData(52);
    2436:	84 e3       	ldi	r24, 0x34	; 52
    2438:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
    243c:	43 c0       	rjmp	.+134    	; 0x24c4 <LCD_u8WriteINT+0x290>
				break;

			case 5:		//FIVE ASCII Code is 53
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    243e:	8f 81       	ldd	r24, Y+7	; 0x07
    2440:	81 50       	subi	r24, 0x01	; 1
    2442:	8f 83       	std	Y+7, r24	; 0x07
    2444:	9f 81       	ldd	r25, Y+7	; 0x07
    2446:	8e 85       	ldd	r24, Y+14	; 0x0e
    2448:	89 0f       	add	r24, r25
    244a:	6f 85       	ldd	r22, Y+15	; 0x0f
    244c:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
				LCD_voidWriteData(53);
    2450:	85 e3       	ldi	r24, 0x35	; 53
    2452:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
    2456:	36 c0       	rjmp	.+108    	; 0x24c4 <LCD_u8WriteINT+0x290>
				break;

			case 6:		//SIX ASCII Code is 54
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    2458:	8f 81       	ldd	r24, Y+7	; 0x07
    245a:	81 50       	subi	r24, 0x01	; 1
    245c:	8f 83       	std	Y+7, r24	; 0x07
    245e:	9f 81       	ldd	r25, Y+7	; 0x07
    2460:	8e 85       	ldd	r24, Y+14	; 0x0e
    2462:	89 0f       	add	r24, r25
    2464:	6f 85       	ldd	r22, Y+15	; 0x0f
    2466:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
				LCD_voidWriteData(54);
    246a:	86 e3       	ldi	r24, 0x36	; 54
    246c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
    2470:	29 c0       	rjmp	.+82     	; 0x24c4 <LCD_u8WriteINT+0x290>
				break;

			case 7:		//SEVEN ASCII Code is 55
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    2472:	8f 81       	ldd	r24, Y+7	; 0x07
    2474:	81 50       	subi	r24, 0x01	; 1
    2476:	8f 83       	std	Y+7, r24	; 0x07
    2478:	9f 81       	ldd	r25, Y+7	; 0x07
    247a:	8e 85       	ldd	r24, Y+14	; 0x0e
    247c:	89 0f       	add	r24, r25
    247e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2480:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
				LCD_voidWriteData(55);
    2484:	87 e3       	ldi	r24, 0x37	; 55
    2486:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
    248a:	1c c0       	rjmp	.+56     	; 0x24c4 <LCD_u8WriteINT+0x290>
				break;

			case 8:		//EIGHT ASCII Code is 56
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    248c:	8f 81       	ldd	r24, Y+7	; 0x07
    248e:	81 50       	subi	r24, 0x01	; 1
    2490:	8f 83       	std	Y+7, r24	; 0x07
    2492:	9f 81       	ldd	r25, Y+7	; 0x07
    2494:	8e 85       	ldd	r24, Y+14	; 0x0e
    2496:	89 0f       	add	r24, r25
    2498:	6f 85       	ldd	r22, Y+15	; 0x0f
    249a:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
				LCD_voidWriteData(56);
    249e:	88 e3       	ldi	r24, 0x38	; 56
    24a0:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
    24a4:	0f c0       	rjmp	.+30     	; 0x24c4 <LCD_u8WriteINT+0x290>
				break;

			case 9:		//NINE ASCII Code is 57
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    24a6:	8f 81       	ldd	r24, Y+7	; 0x07
    24a8:	81 50       	subi	r24, 0x01	; 1
    24aa:	8f 83       	std	Y+7, r24	; 0x07
    24ac:	9f 81       	ldd	r25, Y+7	; 0x07
    24ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    24b0:	89 0f       	add	r24, r25
    24b2:	6f 85       	ldd	r22, Y+15	; 0x0f
    24b4:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
				LCD_voidWriteData(57);
    24b8:	89 e3       	ldi	r24, 0x39	; 57
    24ba:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <LCD_u8WriteINT+0x290>
				break;

			default:
				Local_u8Error = 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	89 87       	std	Y+9, r24	; 0x09
				break;
			}

			/*Dividing The Temp by 10 to get the Tens, Hundreds ... in every Iteration*/
			Local_u32Temp /= 10;
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	9a 81       	ldd	r25, Y+2	; 0x02
    24c8:	ab 81       	ldd	r26, Y+3	; 0x03
    24ca:	bc 81       	ldd	r27, Y+4	; 0x04
    24cc:	2a e0       	ldi	r18, 0x0A	; 10
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e0       	ldi	r20, 0x00	; 0
    24d2:	50 e0       	ldi	r21, 0x00	; 0
    24d4:	bc 01       	movw	r22, r24
    24d6:	cd 01       	movw	r24, r26
    24d8:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__udivmodsi4>
    24dc:	da 01       	movw	r26, r20
    24de:	c9 01       	movw	r24, r18
    24e0:	89 83       	std	Y+1, r24	; 0x01
    24e2:	9a 83       	std	Y+2, r25	; 0x02
    24e4:	ab 83       	std	Y+3, r26	; 0x03
    24e6:	bc 83       	std	Y+4, r27	; 0x04

		/*Now we have the Integer number and the Number of Digits so we will loop and in each loop
		 * we will make a Reminder from ones, tens and so on till our reminder be Zero
		 * and loop to print this number with the position on LCD
		 */
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Local_u8CopyNOD; Local_u8LoopCtr++)
    24e8:	88 85       	ldd	r24, Y+8	; 0x08
    24ea:	8f 5f       	subi	r24, 0xFF	; 255
    24ec:	88 87       	std	Y+8, r24	; 0x08
    24ee:	98 85       	ldd	r25, Y+8	; 0x08
    24f0:	8e 81       	ldd	r24, Y+6	; 0x06
    24f2:	98 17       	cp	r25, r24
    24f4:	08 f4       	brcc	.+2      	; 0x24f8 <LCD_u8WriteINT+0x2c4>
    24f6:	01 cf       	rjmp	.-510    	; 0x22fa <LCD_u8WriteINT+0xc6>
			/*Dividing The Temp by 10 to get the Tens, Hundreds ... in every Iteration*/
			Local_u32Temp /= 10;
		}
	}

	return Local_u8Error;
    24f8:	89 85       	ldd	r24, Y+9	; 0x09
}
    24fa:	61 96       	adiw	r28, 0x11	; 17
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	f8 94       	cli
    2500:	de bf       	out	0x3e, r29	; 62
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	cd bf       	out	0x3d, r28	; 61
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	08 95       	ret

0000250c <LCD_u8StringScroll>:
 * Input		: The String, String size, Time in between, Left or Right, First Line or Second one
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8StringScroll(u8 *Copy_u8String, u8 Copy_u8StrSize, u16 Copy_u16Time, u8 Copy_u8RorL, u8 Copy_u8YPos)
{
    250c:	0f 93       	push	r16
    250e:	1f 93       	push	r17
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	c0 56       	subi	r28, 0x60	; 96
    251a:	d0 40       	sbci	r29, 0x00	; 0
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	fe 01       	movw	r30, r28
    2528:	e6 5a       	subi	r30, 0xA6	; 166
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	91 83       	std	Z+1, r25	; 0x01
    252e:	80 83       	st	Z, r24
    2530:	fe 01       	movw	r30, r28
    2532:	e4 5a       	subi	r30, 0xA4	; 164
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	60 83       	st	Z, r22
    2538:	fe 01       	movw	r30, r28
    253a:	e3 5a       	subi	r30, 0xA3	; 163
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	51 83       	std	Z+1, r21	; 0x01
    2540:	40 83       	st	Z, r20
    2542:	fe 01       	movw	r30, r28
    2544:	e1 5a       	subi	r30, 0xA1	; 161
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	20 83       	st	Z, r18
    254a:	fe 01       	movw	r30, r28
    254c:	e0 5a       	subi	r30, 0xA0	; 160
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	00 83       	st	Z, r16
	/*Local Variables*/
	u8 Local_u8Error = 0;
    2552:	fe 01       	movw	r30, r28
    2554:	e7 5a       	subi	r30, 0xA7	; 167
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	10 82       	st	Z, r1
	u8 Local_u8Move = 0, Local_u8Move2 = 0, Local_u8Move3 = 0;
    255a:	fe 01       	movw	r30, r28
    255c:	e8 5a       	subi	r30, 0xA8	; 168
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	10 82       	st	Z, r1
    2562:	fe 01       	movw	r30, r28
    2564:	e9 5a       	subi	r30, 0xA9	; 169
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	10 82       	st	Z, r1
    256a:	fe 01       	movw	r30, r28
    256c:	ea 5a       	subi	r30, 0xAA	; 170
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	10 82       	st	Z, r1
	u8 Copy_u8StringSize = Copy_u8StrSize;
    2572:	de 01       	movw	r26, r28
    2574:	ab 5a       	subi	r26, 0xAB	; 171
    2576:	bf 4f       	sbci	r27, 0xFF	; 255
    2578:	fe 01       	movw	r30, r28
    257a:	e4 5a       	subi	r30, 0xA4	; 164
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 81       	ld	r24, Z
    2580:	8c 93       	st	X, r24

	/* Check for String Size as the maximum is 20 Char
	 * Check for the Y Position 0 or 1
	 * Check for the Scrolling Direction Left Or Right
	 */
	if(Copy_u8StrSize > LCD_MAX_CHAR || Copy_u8YPos > 1 || Copy_u8RorL > 1)
    2582:	fe 01       	movw	r30, r28
    2584:	e4 5a       	subi	r30, 0xA4	; 164
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	80 81       	ld	r24, Z
    258a:	85 31       	cpi	r24, 0x15	; 21
    258c:	60 f4       	brcc	.+24     	; 0x25a6 <LCD_u8StringScroll+0x9a>
    258e:	fe 01       	movw	r30, r28
    2590:	e0 5a       	subi	r30, 0xA0	; 160
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 81       	ld	r24, Z
    2596:	82 30       	cpi	r24, 0x02	; 2
    2598:	30 f4       	brcc	.+12     	; 0x25a6 <LCD_u8StringScroll+0x9a>
    259a:	fe 01       	movw	r30, r28
    259c:	e1 5a       	subi	r30, 0xA1	; 161
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	80 81       	ld	r24, Z
    25a2:	82 30       	cpi	r24, 0x02	; 2
    25a4:	30 f0       	brcs	.+12     	; 0x25b2 <LCD_u8StringScroll+0xa6>
	{
		Local_u8Error = 1;
    25a6:	fe 01       	movw	r30, r28
    25a8:	e7 5a       	subi	r30, 0xA7	; 167
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	80 83       	st	Z, r24
    25b0:	d9 c5       	rjmp	.+2994   	; 0x3164 <LCD_u8StringScroll+0xc58>
	}

	else
	{
		/*This if Scrolling is to Right in Line 1*/
		if(Copy_u8RorL == LCD_SCROLL_TO_RIGHT && Copy_u8YPos == 0)
    25b2:	fe 01       	movw	r30, r28
    25b4:	e1 5a       	subi	r30, 0xA1	; 161
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	80 81       	ld	r24, Z
    25ba:	81 30       	cpi	r24, 0x01	; 1
    25bc:	09 f0       	breq	.+2      	; 0x25c0 <LCD_u8StringScroll+0xb4>
    25be:	e9 c1       	rjmp	.+978    	; 0x2992 <LCD_u8StringScroll+0x486>
    25c0:	fe 01       	movw	r30, r28
    25c2:	e0 5a       	subi	r30, 0xA0	; 160
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	80 81       	ld	r24, Z
    25c8:	88 23       	and	r24, r24
    25ca:	09 f0       	breq	.+2      	; 0x25ce <LCD_u8StringScroll+0xc2>
    25cc:	e2 c1       	rjmp	.+964    	; 0x2992 <LCD_u8StringScroll+0x486>
		{
			/*Make the Move2 = Over flow of the first lone - string size*/
			Local_u8Move2 = LCD_OV_LINE_1 - (Copy_u8StrSize);
    25ce:	de 01       	movw	r26, r28
    25d0:	a9 5a       	subi	r26, 0xA9	; 169
    25d2:	bf 4f       	sbci	r27, 0xFF	; 255
    25d4:	fe 01       	movw	r30, r28
    25d6:	e4 5a       	subi	r30, 0xA4	; 164
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	97 e6       	ldi	r25, 0x67	; 103
    25dc:	80 81       	ld	r24, Z
    25de:	29 2f       	mov	r18, r25
    25e0:	28 1b       	sub	r18, r24
    25e2:	82 2f       	mov	r24, r18
    25e4:	8c 93       	st	X, r24

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move <= LCD_MAX_SCROLL_LINE; Local_u8Move++)
    25e6:	fe 01       	movw	r30, r28
    25e8:	e8 5a       	subi	r30, 0xA8	; 168
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	10 82       	st	Z, r1
    25ee:	c9 c1       	rjmp	.+914    	; 0x2982 <LCD_u8StringScroll+0x476>
			{
				/*if string bigger than 16*/
				if(Local_u8Move >= (LCD_LINE_NB_OF_DIGITS - Copy_u8StrSize))
    25f0:	fe 01       	movw	r30, r28
    25f2:	e8 5a       	subi	r30, 0xA8	; 168
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	80 81       	ld	r24, Z
    25f8:	48 2f       	mov	r20, r24
    25fa:	50 e0       	ldi	r21, 0x00	; 0
    25fc:	fe 01       	movw	r30, r28
    25fe:	e4 5a       	subi	r30, 0xA4	; 164
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	80 81       	ld	r24, Z
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	80 e1       	ldi	r24, 0x10	; 16
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	82 1b       	sub	r24, r18
    260e:	93 0b       	sbc	r25, r19
    2610:	48 17       	cp	r20, r24
    2612:	59 07       	cpc	r21, r25
    2614:	0c f4       	brge	.+2      	; 0x2618 <LCD_u8StringScroll+0x10c>
    2616:	06 c1       	rjmp	.+524    	; 0x2824 <LCD_u8StringScroll+0x318>
				{
					/*first print the string in the shown position in 16*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2618:	fe 01       	movw	r30, r28
    261a:	e8 5a       	subi	r30, 0xA8	; 168
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	de 01       	movw	r26, r28
    2620:	a0 5a       	subi	r26, 0xA0	; 160
    2622:	bf 4f       	sbci	r27, 0xFF	; 255
    2624:	80 81       	ld	r24, Z
    2626:	6c 91       	ld	r22, X
    2628:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    262c:	fe 01       	movw	r30, r28
    262e:	e6 5a       	subi	r30, 0xA6	; 166
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	80 81       	ld	r24, Z
    2634:	91 81       	ldd	r25, Z+1	; 0x01
    2636:	fe 01       	movw	r30, r28
    2638:	e4 5a       	subi	r30, 0xA4	; 164
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	60 81       	ld	r22, Z
    263e:	0e 94 96 10 	call	0x212c	; 0x212c <LCD_u8WriteString>

					/*print the string in un-shown position */
					LCD_u8GoToXY(Local_u8Move2, Copy_u8YPos);
    2642:	fe 01       	movw	r30, r28
    2644:	e9 5a       	subi	r30, 0xA9	; 169
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	de 01       	movw	r26, r28
    264a:	a0 5a       	subi	r26, 0xA0	; 160
    264c:	bf 4f       	sbci	r27, 0xFF	; 255
    264e:	80 81       	ld	r24, Z
    2650:	6c 91       	ld	r22, X
    2652:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2656:	fe 01       	movw	r30, r28
    2658:	e6 5a       	subi	r30, 0xA6	; 166
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	80 81       	ld	r24, Z
    265e:	91 81       	ldd	r25, Z+1	; 0x01
    2660:	fe 01       	movw	r30, r28
    2662:	e4 5a       	subi	r30, 0xA4	; 164
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	60 81       	ld	r22, Z
    2668:	0e 94 96 10 	call	0x212c	; 0x212c <LCD_u8WriteString>

//					LCD_u8WriteINT(Local_u8Move, 10, 1);
//					LCD_u8WriteINT(Copy_u8StrSize, 5, 1);

					/*delay with the given time*/
					_delay_ms(Copy_u16Time);
    266c:	fe 01       	movw	r30, r28
    266e:	e3 5a       	subi	r30, 0xA3	; 163
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	80 81       	ld	r24, Z
    2674:	91 81       	ldd	r25, Z+1	; 0x01
    2676:	cc 01       	movw	r24, r24
    2678:	a0 e0       	ldi	r26, 0x00	; 0
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	bc 01       	movw	r22, r24
    267e:	cd 01       	movw	r24, r26
    2680:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	fe 01       	movw	r30, r28
    268a:	ef 5a       	subi	r30, 0xAF	; 175
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	80 83       	st	Z, r24
    2690:	91 83       	std	Z+1, r25	; 0x01
    2692:	a2 83       	std	Z+2, r26	; 0x02
    2694:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2696:	8e 01       	movw	r16, r28
    2698:	03 5b       	subi	r16, 0xB3	; 179
    269a:	1f 4f       	sbci	r17, 0xFF	; 255
    269c:	fe 01       	movw	r30, r28
    269e:	ef 5a       	subi	r30, 0xAF	; 175
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	60 81       	ld	r22, Z
    26a4:	71 81       	ldd	r23, Z+1	; 0x01
    26a6:	82 81       	ldd	r24, Z+2	; 0x02
    26a8:	93 81       	ldd	r25, Z+3	; 0x03
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	4a ef       	ldi	r20, 0xFA	; 250
    26b0:	54 e4       	ldi	r21, 0x44	; 68
    26b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	f8 01       	movw	r30, r16
    26bc:	80 83       	st	Z, r24
    26be:	91 83       	std	Z+1, r25	; 0x01
    26c0:	a2 83       	std	Z+2, r26	; 0x02
    26c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26c4:	fe 01       	movw	r30, r28
    26c6:	e3 5b       	subi	r30, 0xB3	; 179
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	60 81       	ld	r22, Z
    26cc:	71 81       	ldd	r23, Z+1	; 0x01
    26ce:	82 81       	ldd	r24, Z+2	; 0x02
    26d0:	93 81       	ldd	r25, Z+3	; 0x03
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e8       	ldi	r20, 0x80	; 128
    26d8:	5f e3       	ldi	r21, 0x3F	; 63
    26da:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26de:	88 23       	and	r24, r24
    26e0:	44 f4       	brge	.+16     	; 0x26f2 <LCD_u8StringScroll+0x1e6>
		__ticks = 1;
    26e2:	fe 01       	movw	r30, r28
    26e4:	e5 5b       	subi	r30, 0xB5	; 181
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	91 83       	std	Z+1, r25	; 0x01
    26ee:	80 83       	st	Z, r24
    26f0:	64 c0       	rjmp	.+200    	; 0x27ba <LCD_u8StringScroll+0x2ae>
	else if (__tmp > 65535)
    26f2:	fe 01       	movw	r30, r28
    26f4:	e3 5b       	subi	r30, 0xB3	; 179
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	60 81       	ld	r22, Z
    26fa:	71 81       	ldd	r23, Z+1	; 0x01
    26fc:	82 81       	ldd	r24, Z+2	; 0x02
    26fe:	93 81       	ldd	r25, Z+3	; 0x03
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	3f ef       	ldi	r19, 0xFF	; 255
    2704:	4f e7       	ldi	r20, 0x7F	; 127
    2706:	57 e4       	ldi	r21, 0x47	; 71
    2708:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    270c:	18 16       	cp	r1, r24
    270e:	0c f0       	brlt	.+2      	; 0x2712 <LCD_u8StringScroll+0x206>
    2710:	43 c0       	rjmp	.+134    	; 0x2798 <LCD_u8StringScroll+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2712:	fe 01       	movw	r30, r28
    2714:	ef 5a       	subi	r30, 0xAF	; 175
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	60 81       	ld	r22, Z
    271a:	71 81       	ldd	r23, Z+1	; 0x01
    271c:	82 81       	ldd	r24, Z+2	; 0x02
    271e:	93 81       	ldd	r25, Z+3	; 0x03
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e2       	ldi	r20, 0x20	; 32
    2726:	51 e4       	ldi	r21, 0x41	; 65
    2728:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	8e 01       	movw	r16, r28
    2732:	05 5b       	subi	r16, 0xB5	; 181
    2734:	1f 4f       	sbci	r17, 0xFF	; 255
    2736:	bc 01       	movw	r22, r24
    2738:	cd 01       	movw	r24, r26
    273a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	f8 01       	movw	r30, r16
    2744:	91 83       	std	Z+1, r25	; 0x01
    2746:	80 83       	st	Z, r24
    2748:	1f c0       	rjmp	.+62     	; 0x2788 <LCD_u8StringScroll+0x27c>
    274a:	fe 01       	movw	r30, r28
    274c:	e7 5b       	subi	r30, 0xB7	; 183
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	88 ec       	ldi	r24, 0xC8	; 200
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	91 83       	std	Z+1, r25	; 0x01
    2756:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2758:	fe 01       	movw	r30, r28
    275a:	e7 5b       	subi	r30, 0xB7	; 183
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	80 81       	ld	r24, Z
    2760:	91 81       	ldd	r25, Z+1	; 0x01
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <LCD_u8StringScroll+0x256>
    2766:	fe 01       	movw	r30, r28
    2768:	e7 5b       	subi	r30, 0xB7	; 183
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	91 83       	std	Z+1, r25	; 0x01
    276e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2770:	de 01       	movw	r26, r28
    2772:	a5 5b       	subi	r26, 0xB5	; 181
    2774:	bf 4f       	sbci	r27, 0xFF	; 255
    2776:	fe 01       	movw	r30, r28
    2778:	e5 5b       	subi	r30, 0xB5	; 181
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	80 81       	ld	r24, Z
    277e:	91 81       	ldd	r25, Z+1	; 0x01
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	11 96       	adiw	r26, 0x01	; 1
    2784:	9c 93       	st	X, r25
    2786:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2788:	fe 01       	movw	r30, r28
    278a:	e5 5b       	subi	r30, 0xB5	; 181
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	80 81       	ld	r24, Z
    2790:	91 81       	ldd	r25, Z+1	; 0x01
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	d1 f6       	brne	.-76     	; 0x274a <LCD_u8StringScroll+0x23e>
    2796:	27 c0       	rjmp	.+78     	; 0x27e6 <LCD_u8StringScroll+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2798:	8e 01       	movw	r16, r28
    279a:	05 5b       	subi	r16, 0xB5	; 181
    279c:	1f 4f       	sbci	r17, 0xFF	; 255
    279e:	fe 01       	movw	r30, r28
    27a0:	e3 5b       	subi	r30, 0xB3	; 179
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	60 81       	ld	r22, Z
    27a6:	71 81       	ldd	r23, Z+1	; 0x01
    27a8:	82 81       	ldd	r24, Z+2	; 0x02
    27aa:	93 81       	ldd	r25, Z+3	; 0x03
    27ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	f8 01       	movw	r30, r16
    27b6:	91 83       	std	Z+1, r25	; 0x01
    27b8:	80 83       	st	Z, r24
    27ba:	de 01       	movw	r26, r28
    27bc:	a9 5b       	subi	r26, 0xB9	; 185
    27be:	bf 4f       	sbci	r27, 0xFF	; 255
    27c0:	fe 01       	movw	r30, r28
    27c2:	e5 5b       	subi	r30, 0xB5	; 181
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	80 81       	ld	r24, Z
    27c8:	91 81       	ldd	r25, Z+1	; 0x01
    27ca:	8d 93       	st	X+, r24
    27cc:	9c 93       	st	X, r25
    27ce:	fe 01       	movw	r30, r28
    27d0:	e9 5b       	subi	r30, 0xB9	; 185
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	80 81       	ld	r24, Z
    27d6:	91 81       	ldd	r25, Z+1	; 0x01
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	f1 f7       	brne	.-4      	; 0x27d8 <LCD_u8StringScroll+0x2cc>
    27dc:	fe 01       	movw	r30, r28
    27de:	e9 5b       	subi	r30, 0xB9	; 185
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	91 83       	std	Z+1, r25	; 0x01
    27e4:	80 83       	st	Z, r24

					/*Clear the LCD*/
					LCD_voidClearLCD();
    27e6:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_voidClearLCD>

					/*increment Move 2*/
					Local_u8Move2++;
    27ea:	de 01       	movw	r26, r28
    27ec:	a9 5a       	subi	r26, 0xA9	; 169
    27ee:	bf 4f       	sbci	r27, 0xFF	; 255
    27f0:	fe 01       	movw	r30, r28
    27f2:	e9 5a       	subi	r30, 0xA9	; 169
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	80 81       	ld	r24, Z
    27f8:	8f 5f       	subi	r24, 0xFF	; 255
    27fa:	8c 93       	st	X, r24

					/*if Move 2 = 16 give it its initial value and break the loop*/
					if(Local_u8Move2 == LCD_OV_LINE_1)
    27fc:	fe 01       	movw	r30, r28
    27fe:	e9 5a       	subi	r30, 0xA9	; 169
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	80 81       	ld	r24, Z
    2804:	87 36       	cpi	r24, 0x67	; 103
    2806:	09 f0       	breq	.+2      	; 0x280a <LCD_u8StringScroll+0x2fe>
    2808:	b3 c0       	rjmp	.+358    	; 0x2970 <LCD_u8StringScroll+0x464>
					{
						Local_u8Move2 = LCD_OV_LINE_1 - (Copy_u8StrSize);
    280a:	de 01       	movw	r26, r28
    280c:	a9 5a       	subi	r26, 0xA9	; 169
    280e:	bf 4f       	sbci	r27, 0xFF	; 255
    2810:	fe 01       	movw	r30, r28
    2812:	e4 5a       	subi	r30, 0xA4	; 164
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	97 e6       	ldi	r25, 0x67	; 103
    2818:	80 81       	ld	r24, Z
    281a:	f9 2f       	mov	r31, r25
    281c:	f8 1b       	sub	r31, r24
    281e:	8f 2f       	mov	r24, r31
    2820:	8c 93       	st	X, r24
    2822:	a0 c4       	rjmp	.+2368   	; 0x3164 <LCD_u8StringScroll+0xc58>

				/*else mean string < 16*/
				else
				{
					/*Print the string*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2824:	fe 01       	movw	r30, r28
    2826:	e8 5a       	subi	r30, 0xA8	; 168
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	de 01       	movw	r26, r28
    282c:	a0 5a       	subi	r26, 0xA0	; 160
    282e:	bf 4f       	sbci	r27, 0xFF	; 255
    2830:	80 81       	ld	r24, Z
    2832:	6c 91       	ld	r22, X
    2834:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2838:	fe 01       	movw	r30, r28
    283a:	e6 5a       	subi	r30, 0xA6	; 166
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	80 81       	ld	r24, Z
    2840:	91 81       	ldd	r25, Z+1	; 0x01
    2842:	fe 01       	movw	r30, r28
    2844:	e4 5a       	subi	r30, 0xA4	; 164
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	60 81       	ld	r22, Z
    284a:	0e 94 96 10 	call	0x212c	; 0x212c <LCD_u8WriteString>

//					LCD_u8WriteINT(Local_u8Move, 10, 1);
//					LCD_u8WriteINT(Copy_u8StrSize, 5, 1);

					/*Delay the given time*/
					_delay_ms(Copy_u16Time);
    284e:	fe 01       	movw	r30, r28
    2850:	e3 5a       	subi	r30, 0xA3	; 163
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	80 81       	ld	r24, Z
    2856:	91 81       	ldd	r25, Z+1	; 0x01
    2858:	cc 01       	movw	r24, r24
    285a:	a0 e0       	ldi	r26, 0x00	; 0
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	bc 01       	movw	r22, r24
    2860:	cd 01       	movw	r24, r26
    2862:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	fe 01       	movw	r30, r28
    286c:	ed 5b       	subi	r30, 0xBD	; 189
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	80 83       	st	Z, r24
    2872:	91 83       	std	Z+1, r25	; 0x01
    2874:	a2 83       	std	Z+2, r26	; 0x02
    2876:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2878:	8e 01       	movw	r16, r28
    287a:	01 5c       	subi	r16, 0xC1	; 193
    287c:	1f 4f       	sbci	r17, 0xFF	; 255
    287e:	fe 01       	movw	r30, r28
    2880:	ed 5b       	subi	r30, 0xBD	; 189
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	60 81       	ld	r22, Z
    2886:	71 81       	ldd	r23, Z+1	; 0x01
    2888:	82 81       	ldd	r24, Z+2	; 0x02
    288a:	93 81       	ldd	r25, Z+3	; 0x03
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	4a ef       	ldi	r20, 0xFA	; 250
    2892:	54 e4       	ldi	r21, 0x44	; 68
    2894:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	f8 01       	movw	r30, r16
    289e:	80 83       	st	Z, r24
    28a0:	91 83       	std	Z+1, r25	; 0x01
    28a2:	a2 83       	std	Z+2, r26	; 0x02
    28a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28a6:	fe 01       	movw	r30, r28
    28a8:	ff 96       	adiw	r30, 0x3f	; 63
    28aa:	60 81       	ld	r22, Z
    28ac:	71 81       	ldd	r23, Z+1	; 0x01
    28ae:	82 81       	ldd	r24, Z+2	; 0x02
    28b0:	93 81       	ldd	r25, Z+3	; 0x03
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e8       	ldi	r20, 0x80	; 128
    28b8:	5f e3       	ldi	r21, 0x3F	; 63
    28ba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28be:	88 23       	and	r24, r24
    28c0:	2c f4       	brge	.+10     	; 0x28cc <LCD_u8StringScroll+0x3c0>
		__ticks = 1;
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	9e af       	std	Y+62, r25	; 0x3e
    28c8:	8d af       	std	Y+61, r24	; 0x3d
    28ca:	46 c0       	rjmp	.+140    	; 0x2958 <LCD_u8StringScroll+0x44c>
	else if (__tmp > 65535)
    28cc:	fe 01       	movw	r30, r28
    28ce:	ff 96       	adiw	r30, 0x3f	; 63
    28d0:	60 81       	ld	r22, Z
    28d2:	71 81       	ldd	r23, Z+1	; 0x01
    28d4:	82 81       	ldd	r24, Z+2	; 0x02
    28d6:	93 81       	ldd	r25, Z+3	; 0x03
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	3f ef       	ldi	r19, 0xFF	; 255
    28dc:	4f e7       	ldi	r20, 0x7F	; 127
    28de:	57 e4       	ldi	r21, 0x47	; 71
    28e0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28e4:	18 16       	cp	r1, r24
    28e6:	64 f5       	brge	.+88     	; 0x2940 <LCD_u8StringScroll+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e8:	fe 01       	movw	r30, r28
    28ea:	ed 5b       	subi	r30, 0xBD	; 189
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	60 81       	ld	r22, Z
    28f0:	71 81       	ldd	r23, Z+1	; 0x01
    28f2:	82 81       	ldd	r24, Z+2	; 0x02
    28f4:	93 81       	ldd	r25, Z+3	; 0x03
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e2       	ldi	r20, 0x20	; 32
    28fc:	51 e4       	ldi	r21, 0x41	; 65
    28fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	bc 01       	movw	r22, r24
    2908:	cd 01       	movw	r24, r26
    290a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	9e af       	std	Y+62, r25	; 0x3e
    2914:	8d af       	std	Y+61, r24	; 0x3d
    2916:	0f c0       	rjmp	.+30     	; 0x2936 <LCD_u8StringScroll+0x42a>
    2918:	88 ec       	ldi	r24, 0xC8	; 200
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	9c af       	std	Y+60, r25	; 0x3c
    291e:	8b af       	std	Y+59, r24	; 0x3b
    2920:	8b ad       	ldd	r24, Y+59	; 0x3b
    2922:	9c ad       	ldd	r25, Y+60	; 0x3c
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	f1 f7       	brne	.-4      	; 0x2924 <LCD_u8StringScroll+0x418>
    2928:	9c af       	std	Y+60, r25	; 0x3c
    292a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292c:	8d ad       	ldd	r24, Y+61	; 0x3d
    292e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	9e af       	std	Y+62, r25	; 0x3e
    2934:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2936:	8d ad       	ldd	r24, Y+61	; 0x3d
    2938:	9e ad       	ldd	r25, Y+62	; 0x3e
    293a:	00 97       	sbiw	r24, 0x00	; 0
    293c:	69 f7       	brne	.-38     	; 0x2918 <LCD_u8StringScroll+0x40c>
    293e:	16 c0       	rjmp	.+44     	; 0x296c <LCD_u8StringScroll+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2940:	fe 01       	movw	r30, r28
    2942:	ff 96       	adiw	r30, 0x3f	; 63
    2944:	60 81       	ld	r22, Z
    2946:	71 81       	ldd	r23, Z+1	; 0x01
    2948:	82 81       	ldd	r24, Z+2	; 0x02
    294a:	93 81       	ldd	r25, Z+3	; 0x03
    294c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	9e af       	std	Y+62, r25	; 0x3e
    2956:	8d af       	std	Y+61, r24	; 0x3d
    2958:	8d ad       	ldd	r24, Y+61	; 0x3d
    295a:	9e ad       	ldd	r25, Y+62	; 0x3e
    295c:	9a af       	std	Y+58, r25	; 0x3a
    295e:	89 af       	std	Y+57, r24	; 0x39
    2960:	89 ad       	ldd	r24, Y+57	; 0x39
    2962:	9a ad       	ldd	r25, Y+58	; 0x3a
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	f1 f7       	brne	.-4      	; 0x2964 <LCD_u8StringScroll+0x458>
    2968:	9a af       	std	Y+58, r25	; 0x3a
    296a:	89 af       	std	Y+57, r24	; 0x39

					/*Clear LCD*/
					LCD_voidClearLCD();
    296c:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_voidClearLCD>
		{
			/*Make the Move2 = Over flow of the first lone - string size*/
			Local_u8Move2 = LCD_OV_LINE_1 - (Copy_u8StrSize);

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move <= LCD_MAX_SCROLL_LINE; Local_u8Move++)
    2970:	de 01       	movw	r26, r28
    2972:	a8 5a       	subi	r26, 0xA8	; 168
    2974:	bf 4f       	sbci	r27, 0xFF	; 255
    2976:	fe 01       	movw	r30, r28
    2978:	e8 5a       	subi	r30, 0xA8	; 168
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	80 81       	ld	r24, Z
    297e:	8f 5f       	subi	r24, 0xFF	; 255
    2980:	8c 93       	st	X, r24
    2982:	fe 01       	movw	r30, r28
    2984:	e8 5a       	subi	r30, 0xA8	; 168
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	80 81       	ld	r24, Z
    298a:	8a 32       	cpi	r24, 0x2A	; 42
    298c:	08 f4       	brcc	.+2      	; 0x2990 <LCD_u8StringScroll+0x484>
    298e:	30 ce       	rjmp	.-928    	; 0x25f0 <LCD_u8StringScroll+0xe4>
    2990:	e9 c3       	rjmp	.+2002   	; 0x3164 <LCD_u8StringScroll+0xc58>
				}
			}
		}

		/*else mean scroll to left in Line 1*/
		else if(Copy_u8RorL == LCD_SCROLL_TO_LEFT && Copy_u8YPos == 0)
    2992:	fe 01       	movw	r30, r28
    2994:	e1 5a       	subi	r30, 0xA1	; 161
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	80 81       	ld	r24, Z
    299a:	88 23       	and	r24, r24
    299c:	09 f0       	breq	.+2      	; 0x29a0 <LCD_u8StringScroll+0x494>
    299e:	20 c1       	rjmp	.+576    	; 0x2be0 <LCD_u8StringScroll+0x6d4>
    29a0:	fe 01       	movw	r30, r28
    29a2:	e0 5a       	subi	r30, 0xA0	; 160
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	80 81       	ld	r24, Z
    29a8:	88 23       	and	r24, r24
    29aa:	09 f0       	breq	.+2      	; 0x29ae <LCD_u8StringScroll+0x4a2>
    29ac:	19 c1       	rjmp	.+562    	; 0x2be0 <LCD_u8StringScroll+0x6d4>
		{
			/*Move2 = over flow + string size + 1 to make space between the last and first char in string */
			Local_u8Move2 = LCD_OV_LINE_1 + (Copy_u8StrSize + 1);
    29ae:	de 01       	movw	r26, r28
    29b0:	a9 5a       	subi	r26, 0xA9	; 169
    29b2:	bf 4f       	sbci	r27, 0xFF	; 255
    29b4:	fe 01       	movw	r30, r28
    29b6:	e4 5a       	subi	r30, 0xA4	; 164
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	80 81       	ld	r24, Z
    29bc:	88 59       	subi	r24, 0x98	; 152
    29be:	8c 93       	st	X, r24

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    29c0:	fe 01       	movw	r30, r28
    29c2:	ea 5a       	subi	r30, 0xAA	; 170
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	80 e1       	ldi	r24, 0x10	; 16
    29c8:	80 83       	st	Z, r24

			/*make the Move = 104 (Over Flow + 1 (First char on LCD)) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_1 + 1); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    29ca:	fe 01       	movw	r30, r28
    29cc:	e8 5a       	subi	r30, 0xA8	; 168
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	88 e6       	ldi	r24, 0x68	; 104
    29d2:	80 83       	st	Z, r24
    29d4:	f9 c0       	rjmp	.+498    	; 0x2bc8 <LCD_u8StringScroll+0x6bc>
			{
				/*Print LCD with the Move as X position*/
				LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    29d6:	fe 01       	movw	r30, r28
    29d8:	e8 5a       	subi	r30, 0xA8	; 168
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	de 01       	movw	r26, r28
    29de:	a0 5a       	subi	r26, 0xA0	; 160
    29e0:	bf 4f       	sbci	r27, 0xFF	; 255
    29e2:	80 81       	ld	r24, Z
    29e4:	6c 91       	ld	r22, X
    29e6:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
				LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    29ea:	fe 01       	movw	r30, r28
    29ec:	e6 5a       	subi	r30, 0xA6	; 166
    29ee:	ff 4f       	sbci	r31, 0xFF	; 255
    29f0:	80 81       	ld	r24, Z
    29f2:	91 81       	ldd	r25, Z+1	; 0x01
    29f4:	fe 01       	movw	r30, r28
    29f6:	e4 5a       	subi	r30, 0xA4	; 164
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	60 81       	ld	r22, Z
    29fc:	0e 94 96 10 	call	0x212c	; 0x212c <LCD_u8WriteString>

				/*if String size less than 16*/
				if(Copy_u8StrSize < LCD_LINE_NB_OF_DIGITS)
    2a00:	fe 01       	movw	r30, r28
    2a02:	e4 5a       	subi	r30, 0xA4	; 164
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	80 81       	ld	r24, Z
    2a08:	80 31       	cpi	r24, 0x10	; 16
    2a0a:	f8 f4       	brcc	.+62     	; 0x2a4a <LCD_u8StringScroll+0x53e>
				{
					/*print with move 3 as X position*/
					LCD_u8GoToXY(Local_u8Move3 , Copy_u8YPos);
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	ea 5a       	subi	r30, 0xAA	; 170
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	de 01       	movw	r26, r28
    2a14:	a0 5a       	subi	r26, 0xA0	; 160
    2a16:	bf 4f       	sbci	r27, 0xFF	; 255
    2a18:	80 81       	ld	r24, Z
    2a1a:	6c 91       	ld	r22, X
    2a1c:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2a20:	fe 01       	movw	r30, r28
    2a22:	e6 5a       	subi	r30, 0xA6	; 166
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	80 81       	ld	r24, Z
    2a28:	91 81       	ldd	r25, Z+1	; 0x01
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	e4 5a       	subi	r30, 0xA4	; 164
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	60 81       	ld	r22, Z
    2a32:	0e 94 96 10 	call	0x212c	; 0x212c <LCD_u8WriteString>

					/*De-crement move 3*/
					Local_u8Move3--;
    2a36:	de 01       	movw	r26, r28
    2a38:	aa 5a       	subi	r26, 0xAA	; 170
    2a3a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	ea 5a       	subi	r30, 0xAA	; 170
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	81 50       	subi	r24, 0x01	; 1
    2a46:	8c 93       	st	X, r24
    2a48:	1e c0       	rjmp	.+60     	; 0x2a86 <LCD_u8StringScroll+0x57a>

				/*else mean string > 16*/
				else
				{
					/*print with the copy of string size as X position*/
					LCD_u8GoToXY(Copy_u8StringSize, Copy_u8YPos);
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	eb 5a       	subi	r30, 0xAB	; 171
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	de 01       	movw	r26, r28
    2a52:	a0 5a       	subi	r26, 0xA0	; 160
    2a54:	bf 4f       	sbci	r27, 0xFF	; 255
    2a56:	80 81       	ld	r24, Z
    2a58:	6c 91       	ld	r22, X
    2a5a:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2a5e:	fe 01       	movw	r30, r28
    2a60:	e6 5a       	subi	r30, 0xA6	; 166
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	80 81       	ld	r24, Z
    2a66:	91 81       	ldd	r25, Z+1	; 0x01
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e4 5a       	subi	r30, 0xA4	; 164
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	60 81       	ld	r22, Z
    2a70:	0e 94 96 10 	call	0x212c	; 0x212c <LCD_u8WriteString>

					/*de-crement the copy of the sting size*/
					Copy_u8StringSize--;
    2a74:	de 01       	movw	r26, r28
    2a76:	ab 5a       	subi	r26, 0xAB	; 171
    2a78:	bf 4f       	sbci	r27, 0xFF	; 255
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	eb 5a       	subi	r30, 0xAB	; 171
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	80 81       	ld	r24, Z
    2a82:	81 50       	subi	r24, 0x01	; 1
    2a84:	8c 93       	st	X, r24
//				LCD_u8WriteINT(Local_u8Move, 10, 1);
//				LCD_u8WriteINT(Copy_u8StrSize, 5, 1);
//				LCD_u8WriteINT(Copy_u8StringSize, 1, 1);

				/*Delay with the given time*/
				_delay_ms(Copy_u16Time);
    2a86:	fe 01       	movw	r30, r28
    2a88:	e3 5a       	subi	r30, 0xA3	; 163
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	80 81       	ld	r24, Z
    2a8e:	91 81       	ldd	r25, Z+1	; 0x01
    2a90:	cc 01       	movw	r24, r24
    2a92:	a0 e0       	ldi	r26, 0x00	; 0
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	bc 01       	movw	r22, r24
    2a98:	cd 01       	movw	r24, r26
    2a9a:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	8d ab       	std	Y+53, r24	; 0x35
    2aa4:	9e ab       	std	Y+54, r25	; 0x36
    2aa6:	af ab       	std	Y+55, r26	; 0x37
    2aa8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aaa:	6d a9       	ldd	r22, Y+53	; 0x35
    2aac:	7e a9       	ldd	r23, Y+54	; 0x36
    2aae:	8f a9       	ldd	r24, Y+55	; 0x37
    2ab0:	98 ad       	ldd	r25, Y+56	; 0x38
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	4a ef       	ldi	r20, 0xFA	; 250
    2ab8:	54 e4       	ldi	r21, 0x44	; 68
    2aba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	89 ab       	std	Y+49, r24	; 0x31
    2ac4:	9a ab       	std	Y+50, r25	; 0x32
    2ac6:	ab ab       	std	Y+51, r26	; 0x33
    2ac8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2aca:	69 a9       	ldd	r22, Y+49	; 0x31
    2acc:	7a a9       	ldd	r23, Y+50	; 0x32
    2ace:	8b a9       	ldd	r24, Y+51	; 0x33
    2ad0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e8       	ldi	r20, 0x80	; 128
    2ad8:	5f e3       	ldi	r21, 0x3F	; 63
    2ada:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ade:	88 23       	and	r24, r24
    2ae0:	2c f4       	brge	.+10     	; 0x2aec <LCD_u8StringScroll+0x5e0>
		__ticks = 1;
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	98 ab       	std	Y+48, r25	; 0x30
    2ae8:	8f a7       	std	Y+47, r24	; 0x2f
    2aea:	3f c0       	rjmp	.+126    	; 0x2b6a <LCD_u8StringScroll+0x65e>
	else if (__tmp > 65535)
    2aec:	69 a9       	ldd	r22, Y+49	; 0x31
    2aee:	7a a9       	ldd	r23, Y+50	; 0x32
    2af0:	8b a9       	ldd	r24, Y+51	; 0x33
    2af2:	9c a9       	ldd	r25, Y+52	; 0x34
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	3f ef       	ldi	r19, 0xFF	; 255
    2af8:	4f e7       	ldi	r20, 0x7F	; 127
    2afa:	57 e4       	ldi	r21, 0x47	; 71
    2afc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b00:	18 16       	cp	r1, r24
    2b02:	4c f5       	brge	.+82     	; 0x2b56 <LCD_u8StringScroll+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b04:	6d a9       	ldd	r22, Y+53	; 0x35
    2b06:	7e a9       	ldd	r23, Y+54	; 0x36
    2b08:	8f a9       	ldd	r24, Y+55	; 0x37
    2b0a:	98 ad       	ldd	r25, Y+56	; 0x38
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	40 e2       	ldi	r20, 0x20	; 32
    2b12:	51 e4       	ldi	r21, 0x41	; 65
    2b14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	bc 01       	movw	r22, r24
    2b1e:	cd 01       	movw	r24, r26
    2b20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	98 ab       	std	Y+48, r25	; 0x30
    2b2a:	8f a7       	std	Y+47, r24	; 0x2f
    2b2c:	0f c0       	rjmp	.+30     	; 0x2b4c <LCD_u8StringScroll+0x640>
    2b2e:	88 ec       	ldi	r24, 0xC8	; 200
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	9e a7       	std	Y+46, r25	; 0x2e
    2b34:	8d a7       	std	Y+45, r24	; 0x2d
    2b36:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b38:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <LCD_u8StringScroll+0x62e>
    2b3e:	9e a7       	std	Y+46, r25	; 0x2e
    2b40:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b42:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b44:	98 a9       	ldd	r25, Y+48	; 0x30
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	98 ab       	std	Y+48, r25	; 0x30
    2b4a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b4e:	98 a9       	ldd	r25, Y+48	; 0x30
    2b50:	00 97       	sbiw	r24, 0x00	; 0
    2b52:	69 f7       	brne	.-38     	; 0x2b2e <LCD_u8StringScroll+0x622>
    2b54:	14 c0       	rjmp	.+40     	; 0x2b7e <LCD_u8StringScroll+0x672>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b56:	69 a9       	ldd	r22, Y+49	; 0x31
    2b58:	7a a9       	ldd	r23, Y+50	; 0x32
    2b5a:	8b a9       	ldd	r24, Y+51	; 0x33
    2b5c:	9c a9       	ldd	r25, Y+52	; 0x34
    2b5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	98 ab       	std	Y+48, r25	; 0x30
    2b68:	8f a7       	std	Y+47, r24	; 0x2f
    2b6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b6c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b6e:	9c a7       	std	Y+44, r25	; 0x2c
    2b70:	8b a7       	std	Y+43, r24	; 0x2b
    2b72:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b74:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	f1 f7       	brne	.-4      	; 0x2b76 <LCD_u8StringScroll+0x66a>
    2b7a:	9c a7       	std	Y+44, r25	; 0x2c
    2b7c:	8b a7       	std	Y+43, r24	; 0x2b

				/*Clear LCD*/
				LCD_voidClearLCD();
    2b7e:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_voidClearLCD>

				/*if Move 3 = 0 or Copy of string size = 0 re-intiate their value and break the loop*/
				if(Local_u8Move3 == 0 || Copy_u8StringSize == 0)
    2b82:	fe 01       	movw	r30, r28
    2b84:	ea 5a       	subi	r30, 0xAA	; 170
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	80 81       	ld	r24, Z
    2b8a:	88 23       	and	r24, r24
    2b8c:	31 f0       	breq	.+12     	; 0x2b9a <LCD_u8StringScroll+0x68e>
    2b8e:	fe 01       	movw	r30, r28
    2b90:	eb 5a       	subi	r30, 0xAB	; 171
    2b92:	ff 4f       	sbci	r31, 0xFF	; 255
    2b94:	80 81       	ld	r24, Z
    2b96:	88 23       	and	r24, r24
    2b98:	71 f4       	brne	.+28     	; 0x2bb6 <LCD_u8StringScroll+0x6aa>
				{
					Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	ea 5a       	subi	r30, 0xAA	; 170
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	80 e1       	ldi	r24, 0x10	; 16
    2ba2:	80 83       	st	Z, r24
					Copy_u8StringSize = Copy_u8StrSize;
    2ba4:	de 01       	movw	r26, r28
    2ba6:	ab 5a       	subi	r26, 0xAB	; 171
    2ba8:	bf 4f       	sbci	r27, 0xFF	; 255
    2baa:	fe 01       	movw	r30, r28
    2bac:	e4 5a       	subi	r30, 0xA4	; 164
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	80 81       	ld	r24, Z
    2bb2:	8c 93       	st	X, r24
    2bb4:	d7 c2       	rjmp	.+1454   	; 0x3164 <LCD_u8StringScroll+0xc58>

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;

			/*make the Move = 104 (Over Flow + 1 (First char on LCD)) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_1 + 1); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    2bb6:	de 01       	movw	r26, r28
    2bb8:	a8 5a       	subi	r26, 0xA8	; 168
    2bba:	bf 4f       	sbci	r27, 0xFF	; 255
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e8 5a       	subi	r30, 0xA8	; 168
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	80 81       	ld	r24, Z
    2bc4:	81 50       	subi	r24, 0x01	; 1
    2bc6:	8c 93       	st	X, r24
    2bc8:	fe 01       	movw	r30, r28
    2bca:	e8 5a       	subi	r30, 0xA8	; 168
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	de 01       	movw	r26, r28
    2bd0:	a9 5a       	subi	r26, 0xA9	; 169
    2bd2:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd4:	90 81       	ld	r25, Z
    2bd6:	8c 91       	ld	r24, X
    2bd8:	89 17       	cp	r24, r25
    2bda:	08 f0       	brcs	.+2      	; 0x2bde <LCD_u8StringScroll+0x6d2>
    2bdc:	fc ce       	rjmp	.-520    	; 0x29d6 <LCD_u8StringScroll+0x4ca>
    2bde:	c2 c2       	rjmp	.+1412   	; 0x3164 <LCD_u8StringScroll+0xc58>
				}
			}
		}

		/*This if Scrolling is to Right in Line 2*/
		else if(Copy_u8RorL == LCD_SCROLL_TO_RIGHT && Copy_u8YPos == 1)
    2be0:	fe 01       	movw	r30, r28
    2be2:	e1 5a       	subi	r30, 0xA1	; 161
    2be4:	ff 4f       	sbci	r31, 0xFF	; 255
    2be6:	80 81       	ld	r24, Z
    2be8:	81 30       	cpi	r24, 0x01	; 1
    2bea:	09 f0       	breq	.+2      	; 0x2bee <LCD_u8StringScroll+0x6e2>
    2bec:	95 c1       	rjmp	.+810    	; 0x2f18 <LCD_u8StringScroll+0xa0c>
    2bee:	fe 01       	movw	r30, r28
    2bf0:	e0 5a       	subi	r30, 0xA0	; 160
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	80 81       	ld	r24, Z
    2bf6:	81 30       	cpi	r24, 0x01	; 1
    2bf8:	09 f0       	breq	.+2      	; 0x2bfc <LCD_u8StringScroll+0x6f0>
    2bfa:	8e c1       	rjmp	.+796    	; 0x2f18 <LCD_u8StringScroll+0xa0c>
		{
			/*Make the Move2 = Over flow of the second line - string size*/
			Local_u8Move2 = LCD_OV_LINE_2 - Copy_u8StrSize;
    2bfc:	de 01       	movw	r26, r28
    2bfe:	a9 5a       	subi	r26, 0xA9	; 169
    2c00:	bf 4f       	sbci	r27, 0xFF	; 255
    2c02:	fe 01       	movw	r30, r28
    2c04:	e4 5a       	subi	r30, 0xA4	; 164
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	98 ee       	ldi	r25, 0xE8	; 232
    2c0a:	80 81       	ld	r24, Z
    2c0c:	f9 2f       	mov	r31, r25
    2c0e:	f8 1b       	sub	r31, r24
    2c10:	8f 2f       	mov	r24, r31
    2c12:	8c 93       	st	X, r24

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move < LCD_MAX_SCROLL_LINE; Local_u8Move++)
    2c14:	fe 01       	movw	r30, r28
    2c16:	e8 5a       	subi	r30, 0xA8	; 168
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	10 82       	st	Z, r1
    2c1c:	75 c1       	rjmp	.+746    	; 0x2f08 <LCD_u8StringScroll+0x9fc>
			{
				/*if string bigger than 16*/
				if(Local_u8Move >= (LCD_LINE_NB_OF_DIGITS - Copy_u8StrSize))
    2c1e:	fe 01       	movw	r30, r28
    2c20:	e8 5a       	subi	r30, 0xA8	; 168
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	80 81       	ld	r24, Z
    2c26:	48 2f       	mov	r20, r24
    2c28:	50 e0       	ldi	r21, 0x00	; 0
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	e4 5a       	subi	r30, 0xA4	; 164
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	80 81       	ld	r24, Z
    2c32:	28 2f       	mov	r18, r24
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	80 e1       	ldi	r24, 0x10	; 16
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	82 1b       	sub	r24, r18
    2c3c:	93 0b       	sbc	r25, r19
    2c3e:	48 17       	cp	r20, r24
    2c40:	59 07       	cpc	r21, r25
    2c42:	0c f4       	brge	.+2      	; 0x2c46 <LCD_u8StringScroll+0x73a>
    2c44:	c5 c0       	rjmp	.+394    	; 0x2dd0 <LCD_u8StringScroll+0x8c4>
				{
					/*first print the string in the shown position in 16*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2c46:	fe 01       	movw	r30, r28
    2c48:	e8 5a       	subi	r30, 0xA8	; 168
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	de 01       	movw	r26, r28
    2c4e:	a0 5a       	subi	r26, 0xA0	; 160
    2c50:	bf 4f       	sbci	r27, 0xFF	; 255
    2c52:	80 81       	ld	r24, Z
    2c54:	6c 91       	ld	r22, X
    2c56:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	e6 5a       	subi	r30, 0xA6	; 166
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	80 81       	ld	r24, Z
    2c62:	91 81       	ldd	r25, Z+1	; 0x01
    2c64:	fe 01       	movw	r30, r28
    2c66:	e4 5a       	subi	r30, 0xA4	; 164
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	60 81       	ld	r22, Z
    2c6c:	0e 94 96 10 	call	0x212c	; 0x212c <LCD_u8WriteString>

					/*print the string in un-shown position */
					LCD_u8GoToXY(Local_u8Move2, Copy_u8YPos);
    2c70:	fe 01       	movw	r30, r28
    2c72:	e9 5a       	subi	r30, 0xA9	; 169
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	de 01       	movw	r26, r28
    2c78:	a0 5a       	subi	r26, 0xA0	; 160
    2c7a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c7c:	80 81       	ld	r24, Z
    2c7e:	6c 91       	ld	r22, X
    2c80:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2c84:	fe 01       	movw	r30, r28
    2c86:	e6 5a       	subi	r30, 0xA6	; 166
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	80 81       	ld	r24, Z
    2c8c:	91 81       	ldd	r25, Z+1	; 0x01
    2c8e:	fe 01       	movw	r30, r28
    2c90:	e4 5a       	subi	r30, 0xA4	; 164
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	60 81       	ld	r22, Z
    2c96:	0e 94 96 10 	call	0x212c	; 0x212c <LCD_u8WriteString>
//					LCD_u8WriteINT(Local_u8Move, 0, 0);
//					LCD_u8WriteINT(Local_u8Move2, 5, 0);
//					LCD_u8WriteINT(Copy_u8StrSize, 10, 0);

					/*delay with the given time*/
					_delay_ms(Copy_u16Time);
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	e3 5a       	subi	r30, 0xA3	; 163
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	80 81       	ld	r24, Z
    2ca2:	91 81       	ldd	r25, Z+1	; 0x01
    2ca4:	cc 01       	movw	r24, r24
    2ca6:	a0 e0       	ldi	r26, 0x00	; 0
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	bc 01       	movw	r22, r24
    2cac:	cd 01       	movw	r24, r26
    2cae:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	8f a3       	std	Y+39, r24	; 0x27
    2cb8:	98 a7       	std	Y+40, r25	; 0x28
    2cba:	a9 a7       	std	Y+41, r26	; 0x29
    2cbc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cbe:	6f a1       	ldd	r22, Y+39	; 0x27
    2cc0:	78 a5       	ldd	r23, Y+40	; 0x28
    2cc2:	89 a5       	ldd	r24, Y+41	; 0x29
    2cc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	4a ef       	ldi	r20, 0xFA	; 250
    2ccc:	54 e4       	ldi	r21, 0x44	; 68
    2cce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	8b a3       	std	Y+35, r24	; 0x23
    2cd8:	9c a3       	std	Y+36, r25	; 0x24
    2cda:	ad a3       	std	Y+37, r26	; 0x25
    2cdc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cde:	6b a1       	ldd	r22, Y+35	; 0x23
    2ce0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ce2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ce4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	40 e8       	ldi	r20, 0x80	; 128
    2cec:	5f e3       	ldi	r21, 0x3F	; 63
    2cee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2cf2:	88 23       	and	r24, r24
    2cf4:	2c f4       	brge	.+10     	; 0x2d00 <LCD_u8StringScroll+0x7f4>
		__ticks = 1;
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	9a a3       	std	Y+34, r25	; 0x22
    2cfc:	89 a3       	std	Y+33, r24	; 0x21
    2cfe:	3f c0       	rjmp	.+126    	; 0x2d7e <LCD_u8StringScroll+0x872>
	else if (__tmp > 65535)
    2d00:	6b a1       	ldd	r22, Y+35	; 0x23
    2d02:	7c a1       	ldd	r23, Y+36	; 0x24
    2d04:	8d a1       	ldd	r24, Y+37	; 0x25
    2d06:	9e a1       	ldd	r25, Y+38	; 0x26
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	3f ef       	ldi	r19, 0xFF	; 255
    2d0c:	4f e7       	ldi	r20, 0x7F	; 127
    2d0e:	57 e4       	ldi	r21, 0x47	; 71
    2d10:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d14:	18 16       	cp	r1, r24
    2d16:	4c f5       	brge	.+82     	; 0x2d6a <LCD_u8StringScroll+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d18:	6f a1       	ldd	r22, Y+39	; 0x27
    2d1a:	78 a5       	ldd	r23, Y+40	; 0x28
    2d1c:	89 a5       	ldd	r24, Y+41	; 0x29
    2d1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	40 e2       	ldi	r20, 0x20	; 32
    2d26:	51 e4       	ldi	r21, 0x41	; 65
    2d28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	bc 01       	movw	r22, r24
    2d32:	cd 01       	movw	r24, r26
    2d34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	9a a3       	std	Y+34, r25	; 0x22
    2d3e:	89 a3       	std	Y+33, r24	; 0x21
    2d40:	0f c0       	rjmp	.+30     	; 0x2d60 <LCD_u8StringScroll+0x854>
    2d42:	88 ec       	ldi	r24, 0xC8	; 200
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	98 a3       	std	Y+32, r25	; 0x20
    2d48:	8f 8f       	std	Y+31, r24	; 0x1f
    2d4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d4c:	98 a1       	ldd	r25, Y+32	; 0x20
    2d4e:	01 97       	sbiw	r24, 0x01	; 1
    2d50:	f1 f7       	brne	.-4      	; 0x2d4e <LCD_u8StringScroll+0x842>
    2d52:	98 a3       	std	Y+32, r25	; 0x20
    2d54:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d56:	89 a1       	ldd	r24, Y+33	; 0x21
    2d58:	9a a1       	ldd	r25, Y+34	; 0x22
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	9a a3       	std	Y+34, r25	; 0x22
    2d5e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d60:	89 a1       	ldd	r24, Y+33	; 0x21
    2d62:	9a a1       	ldd	r25, Y+34	; 0x22
    2d64:	00 97       	sbiw	r24, 0x00	; 0
    2d66:	69 f7       	brne	.-38     	; 0x2d42 <LCD_u8StringScroll+0x836>
    2d68:	14 c0       	rjmp	.+40     	; 0x2d92 <LCD_u8StringScroll+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d70:	9e a1       	ldd	r25, Y+38	; 0x26
    2d72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	9a a3       	std	Y+34, r25	; 0x22
    2d7c:	89 a3       	std	Y+33, r24	; 0x21
    2d7e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d80:	9a a1       	ldd	r25, Y+34	; 0x22
    2d82:	9e 8f       	std	Y+30, r25	; 0x1e
    2d84:	8d 8f       	std	Y+29, r24	; 0x1d
    2d86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	f1 f7       	brne	.-4      	; 0x2d8a <LCD_u8StringScroll+0x87e>
    2d8e:	9e 8f       	std	Y+30, r25	; 0x1e
    2d90:	8d 8f       	std	Y+29, r24	; 0x1d

					/*Clear the LCD*/
					LCD_voidClearLCD();
    2d92:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_voidClearLCD>

					/*Increment Move 2*/
					Local_u8Move2++;
    2d96:	de 01       	movw	r26, r28
    2d98:	a9 5a       	subi	r26, 0xA9	; 169
    2d9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e9 5a       	subi	r30, 0xA9	; 169
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	80 81       	ld	r24, Z
    2da4:	8f 5f       	subi	r24, 0xFF	; 255
    2da6:	8c 93       	st	X, r24

					/*if Move 2 = 323 the over flow of line two give it its initial value and break the loop*/
					if(Local_u8Move2 == LCD_OV_LINE_2)
    2da8:	fe 01       	movw	r30, r28
    2daa:	e9 5a       	subi	r30, 0xA9	; 169
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	80 81       	ld	r24, Z
    2db0:	88 3e       	cpi	r24, 0xE8	; 232
    2db2:	09 f0       	breq	.+2      	; 0x2db6 <LCD_u8StringScroll+0x8aa>
    2db4:	a0 c0       	rjmp	.+320    	; 0x2ef6 <LCD_u8StringScroll+0x9ea>
					{
						Local_u8Move2 = LCD_OV_LINE_2 - Copy_u8StrSize;
    2db6:	de 01       	movw	r26, r28
    2db8:	a9 5a       	subi	r26, 0xA9	; 169
    2dba:	bf 4f       	sbci	r27, 0xFF	; 255
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	e4 5a       	subi	r30, 0xA4	; 164
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	98 ee       	ldi	r25, 0xE8	; 232
    2dc4:	80 81       	ld	r24, Z
    2dc6:	29 2f       	mov	r18, r25
    2dc8:	28 1b       	sub	r18, r24
    2dca:	82 2f       	mov	r24, r18
    2dcc:	8c 93       	st	X, r24
    2dce:	ca c1       	rjmp	.+916    	; 0x3164 <LCD_u8StringScroll+0xc58>

				/*else mean string < 16*/
				else
				{
					/*Print the string*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	e8 5a       	subi	r30, 0xA8	; 168
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	de 01       	movw	r26, r28
    2dd8:	a0 5a       	subi	r26, 0xA0	; 160
    2dda:	bf 4f       	sbci	r27, 0xFF	; 255
    2ddc:	80 81       	ld	r24, Z
    2dde:	6c 91       	ld	r22, X
    2de0:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2de4:	fe 01       	movw	r30, r28
    2de6:	e6 5a       	subi	r30, 0xA6	; 166
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	80 81       	ld	r24, Z
    2dec:	91 81       	ldd	r25, Z+1	; 0x01
    2dee:	fe 01       	movw	r30, r28
    2df0:	e4 5a       	subi	r30, 0xA4	; 164
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	60 81       	ld	r22, Z
    2df6:	0e 94 96 10 	call	0x212c	; 0x212c <LCD_u8WriteString>
//					LCD_u8WriteINT(Local_u8Move, 0, 0);
//					LCD_u8WriteINT(Local_u8Move2, 5, 0);
//					LCD_u8WriteINT(Copy_u8StrSize, 10, 0);

					/*Delay the given time*/
					_delay_ms(Copy_u16Time);
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	e3 5a       	subi	r30, 0xA3	; 163
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	80 81       	ld	r24, Z
    2e02:	91 81       	ldd	r25, Z+1	; 0x01
    2e04:	cc 01       	movw	r24, r24
    2e06:	a0 e0       	ldi	r26, 0x00	; 0
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	bc 01       	movw	r22, r24
    2e0c:	cd 01       	movw	r24, r26
    2e0e:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	89 8f       	std	Y+25, r24	; 0x19
    2e18:	9a 8f       	std	Y+26, r25	; 0x1a
    2e1a:	ab 8f       	std	Y+27, r26	; 0x1b
    2e1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e1e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	4a ef       	ldi	r20, 0xFA	; 250
    2e2c:	54 e4       	ldi	r21, 0x44	; 68
    2e2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	8d 8b       	std	Y+21, r24	; 0x15
    2e38:	9e 8b       	std	Y+22, r25	; 0x16
    2e3a:	af 8b       	std	Y+23, r26	; 0x17
    2e3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e40:	7e 89       	ldd	r23, Y+22	; 0x16
    2e42:	8f 89       	ldd	r24, Y+23	; 0x17
    2e44:	98 8d       	ldd	r25, Y+24	; 0x18
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	40 e8       	ldi	r20, 0x80	; 128
    2e4c:	5f e3       	ldi	r21, 0x3F	; 63
    2e4e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e52:	88 23       	and	r24, r24
    2e54:	2c f4       	brge	.+10     	; 0x2e60 <LCD_u8StringScroll+0x954>
		__ticks = 1;
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	9c 8b       	std	Y+20, r25	; 0x14
    2e5c:	8b 8b       	std	Y+19, r24	; 0x13
    2e5e:	3f c0       	rjmp	.+126    	; 0x2ede <LCD_u8StringScroll+0x9d2>
	else if (__tmp > 65535)
    2e60:	6d 89       	ldd	r22, Y+21	; 0x15
    2e62:	7e 89       	ldd	r23, Y+22	; 0x16
    2e64:	8f 89       	ldd	r24, Y+23	; 0x17
    2e66:	98 8d       	ldd	r25, Y+24	; 0x18
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	3f ef       	ldi	r19, 0xFF	; 255
    2e6c:	4f e7       	ldi	r20, 0x7F	; 127
    2e6e:	57 e4       	ldi	r21, 0x47	; 71
    2e70:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e74:	18 16       	cp	r1, r24
    2e76:	4c f5       	brge	.+82     	; 0x2eca <LCD_u8StringScroll+0x9be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e78:	69 8d       	ldd	r22, Y+25	; 0x19
    2e7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	40 e2       	ldi	r20, 0x20	; 32
    2e86:	51 e4       	ldi	r21, 0x41	; 65
    2e88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	bc 01       	movw	r22, r24
    2e92:	cd 01       	movw	r24, r26
    2e94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	9c 8b       	std	Y+20, r25	; 0x14
    2e9e:	8b 8b       	std	Y+19, r24	; 0x13
    2ea0:	0f c0       	rjmp	.+30     	; 0x2ec0 <LCD_u8StringScroll+0x9b4>
    2ea2:	88 ec       	ldi	r24, 0xC8	; 200
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	9a 8b       	std	Y+18, r25	; 0x12
    2ea8:	89 8b       	std	Y+17, r24	; 0x11
    2eaa:	89 89       	ldd	r24, Y+17	; 0x11
    2eac:	9a 89       	ldd	r25, Y+18	; 0x12
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	f1 f7       	brne	.-4      	; 0x2eae <LCD_u8StringScroll+0x9a2>
    2eb2:	9a 8b       	std	Y+18, r25	; 0x12
    2eb4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb6:	8b 89       	ldd	r24, Y+19	; 0x13
    2eb8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eba:	01 97       	sbiw	r24, 0x01	; 1
    2ebc:	9c 8b       	std	Y+20, r25	; 0x14
    2ebe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec4:	00 97       	sbiw	r24, 0x00	; 0
    2ec6:	69 f7       	brne	.-38     	; 0x2ea2 <LCD_u8StringScroll+0x996>
    2ec8:	14 c0       	rjmp	.+40     	; 0x2ef2 <LCD_u8StringScroll+0x9e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eca:	6d 89       	ldd	r22, Y+21	; 0x15
    2ecc:	7e 89       	ldd	r23, Y+22	; 0x16
    2ece:	8f 89       	ldd	r24, Y+23	; 0x17
    2ed0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ed2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	9c 8b       	std	Y+20, r25	; 0x14
    2edc:	8b 8b       	std	Y+19, r24	; 0x13
    2ede:	8b 89       	ldd	r24, Y+19	; 0x13
    2ee0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee2:	98 8b       	std	Y+16, r25	; 0x10
    2ee4:	8f 87       	std	Y+15, r24	; 0x0f
    2ee6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ee8:	98 89       	ldd	r25, Y+16	; 0x10
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	f1 f7       	brne	.-4      	; 0x2eea <LCD_u8StringScroll+0x9de>
    2eee:	98 8b       	std	Y+16, r25	; 0x10
    2ef0:	8f 87       	std	Y+15, r24	; 0x0f

					/*Clear LCD*/
					LCD_voidClearLCD();
    2ef2:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_voidClearLCD>
		{
			/*Make the Move2 = Over flow of the second line - string size*/
			Local_u8Move2 = LCD_OV_LINE_2 - Copy_u8StrSize;

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move < LCD_MAX_SCROLL_LINE; Local_u8Move++)
    2ef6:	de 01       	movw	r26, r28
    2ef8:	a8 5a       	subi	r26, 0xA8	; 168
    2efa:	bf 4f       	sbci	r27, 0xFF	; 255
    2efc:	fe 01       	movw	r30, r28
    2efe:	e8 5a       	subi	r30, 0xA8	; 168
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	80 81       	ld	r24, Z
    2f04:	8f 5f       	subi	r24, 0xFF	; 255
    2f06:	8c 93       	st	X, r24
    2f08:	fe 01       	movw	r30, r28
    2f0a:	e8 5a       	subi	r30, 0xA8	; 168
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	80 81       	ld	r24, Z
    2f10:	89 32       	cpi	r24, 0x29	; 41
    2f12:	08 f4       	brcc	.+2      	; 0x2f16 <LCD_u8StringScroll+0xa0a>
    2f14:	84 ce       	rjmp	.-760    	; 0x2c1e <LCD_u8StringScroll+0x712>
    2f16:	26 c1       	rjmp	.+588    	; 0x3164 <LCD_u8StringScroll+0xc58>
				}
			}
		}

		/*This if Scrolling is to Left in Line 2*/
		else if(Copy_u8RorL == LCD_SCROLL_TO_LEFT && Copy_u8YPos == 1)
    2f18:	fe 01       	movw	r30, r28
    2f1a:	e1 5a       	subi	r30, 0xA1	; 161
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	80 81       	ld	r24, Z
    2f20:	88 23       	and	r24, r24
    2f22:	09 f0       	breq	.+2      	; 0x2f26 <LCD_u8StringScroll+0xa1a>
    2f24:	1f c1       	rjmp	.+574    	; 0x3164 <LCD_u8StringScroll+0xc58>
    2f26:	fe 01       	movw	r30, r28
    2f28:	e0 5a       	subi	r30, 0xA0	; 160
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	80 81       	ld	r24, Z
    2f2e:	81 30       	cpi	r24, 0x01	; 1
    2f30:	09 f0       	breq	.+2      	; 0x2f34 <LCD_u8StringScroll+0xa28>
    2f32:	18 c1       	rjmp	.+560    	; 0x3164 <LCD_u8StringScroll+0xc58>
		{
			/*Move2 = over flow line 2 + string size + 1 to make space between the last and first char in string */
			Local_u8Move2 = LCD_OV_LINE_2 + (Copy_u8StrSize + 1);
    2f34:	de 01       	movw	r26, r28
    2f36:	a9 5a       	subi	r26, 0xA9	; 169
    2f38:	bf 4f       	sbci	r27, 0xFF	; 255
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	e4 5a       	subi	r30, 0xA4	; 164
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	80 81       	ld	r24, Z
    2f42:	87 51       	subi	r24, 0x17	; 23
    2f44:	8c 93       	st	X, r24

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    2f46:	fe 01       	movw	r30, r28
    2f48:	ea 5a       	subi	r30, 0xAA	; 170
    2f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4c:	80 e1       	ldi	r24, 0x10	; 16
    2f4e:	80 83       	st	Z, r24

			/*make the Move = 232 (Over Flow) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_2); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    2f50:	fe 01       	movw	r30, r28
    2f52:	e8 5a       	subi	r30, 0xA8	; 168
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	88 ee       	ldi	r24, 0xE8	; 232
    2f58:	80 83       	st	Z, r24
    2f5a:	f9 c0       	rjmp	.+498    	; 0x314e <LCD_u8StringScroll+0xc42>
			{
				/*Print LCD with the Move as X position*/
				LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	e8 5a       	subi	r30, 0xA8	; 168
    2f60:	ff 4f       	sbci	r31, 0xFF	; 255
    2f62:	de 01       	movw	r26, r28
    2f64:	a0 5a       	subi	r26, 0xA0	; 160
    2f66:	bf 4f       	sbci	r27, 0xFF	; 255
    2f68:	80 81       	ld	r24, Z
    2f6a:	6c 91       	ld	r22, X
    2f6c:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
				LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2f70:	fe 01       	movw	r30, r28
    2f72:	e6 5a       	subi	r30, 0xA6	; 166
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	80 81       	ld	r24, Z
    2f78:	91 81       	ldd	r25, Z+1	; 0x01
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	e4 5a       	subi	r30, 0xA4	; 164
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	60 81       	ld	r22, Z
    2f82:	0e 94 96 10 	call	0x212c	; 0x212c <LCD_u8WriteString>

				/*if String size less than 16*/
				if(Copy_u8StrSize < LCD_LINE_NB_OF_DIGITS)
    2f86:	fe 01       	movw	r30, r28
    2f88:	e4 5a       	subi	r30, 0xA4	; 164
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	80 81       	ld	r24, Z
    2f8e:	80 31       	cpi	r24, 0x10	; 16
    2f90:	f8 f4       	brcc	.+62     	; 0x2fd0 <LCD_u8StringScroll+0xac4>
				{
					/*print with move 3 as X position*/
					LCD_u8GoToXY(Local_u8Move3 , Copy_u8YPos);
    2f92:	fe 01       	movw	r30, r28
    2f94:	ea 5a       	subi	r30, 0xAA	; 170
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	de 01       	movw	r26, r28
    2f9a:	a0 5a       	subi	r26, 0xA0	; 160
    2f9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f9e:	80 81       	ld	r24, Z
    2fa0:	6c 91       	ld	r22, X
    2fa2:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	e6 5a       	subi	r30, 0xA6	; 166
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	80 81       	ld	r24, Z
    2fae:	91 81       	ldd	r25, Z+1	; 0x01
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	e4 5a       	subi	r30, 0xA4	; 164
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	60 81       	ld	r22, Z
    2fb8:	0e 94 96 10 	call	0x212c	; 0x212c <LCD_u8WriteString>

					/*Decrement Move 3*/
					Local_u8Move3--;
    2fbc:	de 01       	movw	r26, r28
    2fbe:	aa 5a       	subi	r26, 0xAA	; 170
    2fc0:	bf 4f       	sbci	r27, 0xFF	; 255
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	ea 5a       	subi	r30, 0xAA	; 170
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	80 81       	ld	r24, Z
    2fca:	81 50       	subi	r24, 0x01	; 1
    2fcc:	8c 93       	st	X, r24
    2fce:	1e c0       	rjmp	.+60     	; 0x300c <LCD_u8StringScroll+0xb00>

				/*else mean string > 16*/
				else
				{
					/*print with the copy of string size as X position*/
					LCD_u8GoToXY(Copy_u8StringSize, Copy_u8YPos);
    2fd0:	fe 01       	movw	r30, r28
    2fd2:	eb 5a       	subi	r30, 0xAB	; 171
    2fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd6:	de 01       	movw	r26, r28
    2fd8:	a0 5a       	subi	r26, 0xA0	; 160
    2fda:	bf 4f       	sbci	r27, 0xFF	; 255
    2fdc:	80 81       	ld	r24, Z
    2fde:	6c 91       	ld	r22, X
    2fe0:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	e6 5a       	subi	r30, 0xA6	; 166
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	80 81       	ld	r24, Z
    2fec:	91 81       	ldd	r25, Z+1	; 0x01
    2fee:	fe 01       	movw	r30, r28
    2ff0:	e4 5a       	subi	r30, 0xA4	; 164
    2ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff4:	60 81       	ld	r22, Z
    2ff6:	0e 94 96 10 	call	0x212c	; 0x212c <LCD_u8WriteString>

					/*de-crement the copy of the sting size*/
					Copy_u8StringSize--;
    2ffa:	de 01       	movw	r26, r28
    2ffc:	ab 5a       	subi	r26, 0xAB	; 171
    2ffe:	bf 4f       	sbci	r27, 0xFF	; 255
    3000:	fe 01       	movw	r30, r28
    3002:	eb 5a       	subi	r30, 0xAB	; 171
    3004:	ff 4f       	sbci	r31, 0xFF	; 255
    3006:	80 81       	ld	r24, Z
    3008:	81 50       	subi	r24, 0x01	; 1
    300a:	8c 93       	st	X, r24
//				LCD_u8WriteINT(Local_u8Move, 10, 0);
//				LCD_u8WriteINT(Copy_u8StrSize, 5, 0);
//				LCD_u8WriteINT(Copy_u8StringSize, 1, 0);

				/*Delay the Given time*/
				_delay_ms(Copy_u16Time);
    300c:	fe 01       	movw	r30, r28
    300e:	e3 5a       	subi	r30, 0xA3	; 163
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	80 81       	ld	r24, Z
    3014:	91 81       	ldd	r25, Z+1	; 0x01
    3016:	cc 01       	movw	r24, r24
    3018:	a0 e0       	ldi	r26, 0x00	; 0
    301a:	b0 e0       	ldi	r27, 0x00	; 0
    301c:	bc 01       	movw	r22, r24
    301e:	cd 01       	movw	r24, r26
    3020:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	8b 87       	std	Y+11, r24	; 0x0b
    302a:	9c 87       	std	Y+12, r25	; 0x0c
    302c:	ad 87       	std	Y+13, r26	; 0x0d
    302e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3030:	6b 85       	ldd	r22, Y+11	; 0x0b
    3032:	7c 85       	ldd	r23, Y+12	; 0x0c
    3034:	8d 85       	ldd	r24, Y+13	; 0x0d
    3036:	9e 85       	ldd	r25, Y+14	; 0x0e
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	4a ef       	ldi	r20, 0xFA	; 250
    303e:	54 e4       	ldi	r21, 0x44	; 68
    3040:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	8f 83       	std	Y+7, r24	; 0x07
    304a:	98 87       	std	Y+8, r25	; 0x08
    304c:	a9 87       	std	Y+9, r26	; 0x09
    304e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3050:	6f 81       	ldd	r22, Y+7	; 0x07
    3052:	78 85       	ldd	r23, Y+8	; 0x08
    3054:	89 85       	ldd	r24, Y+9	; 0x09
    3056:	9a 85       	ldd	r25, Y+10	; 0x0a
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	40 e8       	ldi	r20, 0x80	; 128
    305e:	5f e3       	ldi	r21, 0x3F	; 63
    3060:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3064:	88 23       	and	r24, r24
    3066:	2c f4       	brge	.+10     	; 0x3072 <LCD_u8StringScroll+0xb66>
		__ticks = 1;
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	9e 83       	std	Y+6, r25	; 0x06
    306e:	8d 83       	std	Y+5, r24	; 0x05
    3070:	3f c0       	rjmp	.+126    	; 0x30f0 <LCD_u8StringScroll+0xbe4>
	else if (__tmp > 65535)
    3072:	6f 81       	ldd	r22, Y+7	; 0x07
    3074:	78 85       	ldd	r23, Y+8	; 0x08
    3076:	89 85       	ldd	r24, Y+9	; 0x09
    3078:	9a 85       	ldd	r25, Y+10	; 0x0a
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	3f ef       	ldi	r19, 0xFF	; 255
    307e:	4f e7       	ldi	r20, 0x7F	; 127
    3080:	57 e4       	ldi	r21, 0x47	; 71
    3082:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3086:	18 16       	cp	r1, r24
    3088:	4c f5       	brge	.+82     	; 0x30dc <LCD_u8StringScroll+0xbd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    308a:	6b 85       	ldd	r22, Y+11	; 0x0b
    308c:	7c 85       	ldd	r23, Y+12	; 0x0c
    308e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3090:	9e 85       	ldd	r25, Y+14	; 0x0e
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	40 e2       	ldi	r20, 0x20	; 32
    3098:	51 e4       	ldi	r21, 0x41	; 65
    309a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    309e:	dc 01       	movw	r26, r24
    30a0:	cb 01       	movw	r24, r22
    30a2:	bc 01       	movw	r22, r24
    30a4:	cd 01       	movw	r24, r26
    30a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	9e 83       	std	Y+6, r25	; 0x06
    30b0:	8d 83       	std	Y+5, r24	; 0x05
    30b2:	0f c0       	rjmp	.+30     	; 0x30d2 <LCD_u8StringScroll+0xbc6>
    30b4:	88 ec       	ldi	r24, 0xC8	; 200
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	9c 83       	std	Y+4, r25	; 0x04
    30ba:	8b 83       	std	Y+3, r24	; 0x03
    30bc:	8b 81       	ldd	r24, Y+3	; 0x03
    30be:	9c 81       	ldd	r25, Y+4	; 0x04
    30c0:	01 97       	sbiw	r24, 0x01	; 1
    30c2:	f1 f7       	brne	.-4      	; 0x30c0 <LCD_u8StringScroll+0xbb4>
    30c4:	9c 83       	std	Y+4, r25	; 0x04
    30c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ca:	9e 81       	ldd	r25, Y+6	; 0x06
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	9e 83       	std	Y+6, r25	; 0x06
    30d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d2:	8d 81       	ldd	r24, Y+5	; 0x05
    30d4:	9e 81       	ldd	r25, Y+6	; 0x06
    30d6:	00 97       	sbiw	r24, 0x00	; 0
    30d8:	69 f7       	brne	.-38     	; 0x30b4 <LCD_u8StringScroll+0xba8>
    30da:	14 c0       	rjmp	.+40     	; 0x3104 <LCD_u8StringScroll+0xbf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30dc:	6f 81       	ldd	r22, Y+7	; 0x07
    30de:	78 85       	ldd	r23, Y+8	; 0x08
    30e0:	89 85       	ldd	r24, Y+9	; 0x09
    30e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	9e 83       	std	Y+6, r25	; 0x06
    30ee:	8d 83       	std	Y+5, r24	; 0x05
    30f0:	8d 81       	ldd	r24, Y+5	; 0x05
    30f2:	9e 81       	ldd	r25, Y+6	; 0x06
    30f4:	9a 83       	std	Y+2, r25	; 0x02
    30f6:	89 83       	std	Y+1, r24	; 0x01
    30f8:	89 81       	ldd	r24, Y+1	; 0x01
    30fa:	9a 81       	ldd	r25, Y+2	; 0x02
    30fc:	01 97       	sbiw	r24, 0x01	; 1
    30fe:	f1 f7       	brne	.-4      	; 0x30fc <LCD_u8StringScroll+0xbf0>
    3100:	9a 83       	std	Y+2, r25	; 0x02
    3102:	89 83       	std	Y+1, r24	; 0x01

				/*Clear LCD*/
				LCD_voidClearLCD();
    3104:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_voidClearLCD>

				/*if Move 3 = 0 or Copy of string size = 0 re-intiate their value and break the loop*/
				if(Local_u8Move3 == 0 || Copy_u8StringSize == 0)
    3108:	fe 01       	movw	r30, r28
    310a:	ea 5a       	subi	r30, 0xAA	; 170
    310c:	ff 4f       	sbci	r31, 0xFF	; 255
    310e:	80 81       	ld	r24, Z
    3110:	88 23       	and	r24, r24
    3112:	31 f0       	breq	.+12     	; 0x3120 <LCD_u8StringScroll+0xc14>
    3114:	fe 01       	movw	r30, r28
    3116:	eb 5a       	subi	r30, 0xAB	; 171
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	80 81       	ld	r24, Z
    311c:	88 23       	and	r24, r24
    311e:	71 f4       	brne	.+28     	; 0x313c <LCD_u8StringScroll+0xc30>
				{
					Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    3120:	fe 01       	movw	r30, r28
    3122:	ea 5a       	subi	r30, 0xAA	; 170
    3124:	ff 4f       	sbci	r31, 0xFF	; 255
    3126:	80 e1       	ldi	r24, 0x10	; 16
    3128:	80 83       	st	Z, r24
					Copy_u8StringSize = Copy_u8StrSize;
    312a:	de 01       	movw	r26, r28
    312c:	ab 5a       	subi	r26, 0xAB	; 171
    312e:	bf 4f       	sbci	r27, 0xFF	; 255
    3130:	fe 01       	movw	r30, r28
    3132:	e4 5a       	subi	r30, 0xA4	; 164
    3134:	ff 4f       	sbci	r31, 0xFF	; 255
    3136:	80 81       	ld	r24, Z
    3138:	8c 93       	st	X, r24
    313a:	14 c0       	rjmp	.+40     	; 0x3164 <LCD_u8StringScroll+0xc58>

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;

			/*make the Move = 232 (Over Flow) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_2); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    313c:	de 01       	movw	r26, r28
    313e:	a8 5a       	subi	r26, 0xA8	; 168
    3140:	bf 4f       	sbci	r27, 0xFF	; 255
    3142:	fe 01       	movw	r30, r28
    3144:	e8 5a       	subi	r30, 0xA8	; 168
    3146:	ff 4f       	sbci	r31, 0xFF	; 255
    3148:	80 81       	ld	r24, Z
    314a:	81 50       	subi	r24, 0x01	; 1
    314c:	8c 93       	st	X, r24
    314e:	fe 01       	movw	r30, r28
    3150:	e8 5a       	subi	r30, 0xA8	; 168
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	de 01       	movw	r26, r28
    3156:	a9 5a       	subi	r26, 0xA9	; 169
    3158:	bf 4f       	sbci	r27, 0xFF	; 255
    315a:	90 81       	ld	r25, Z
    315c:	8c 91       	ld	r24, X
    315e:	89 17       	cp	r24, r25
    3160:	08 f0       	brcs	.+2      	; 0x3164 <LCD_u8StringScroll+0xc58>
    3162:	fc ce       	rjmp	.-520    	; 0x2f5c <LCD_u8StringScroll+0xa50>
			}
		}
	}

	/*return the Error*/
	return Local_u8Error;
    3164:	fe 01       	movw	r30, r28
    3166:	e7 5a       	subi	r30, 0xA7	; 167
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	80 81       	ld	r24, Z
}
    316c:	c0 5a       	subi	r28, 0xA0	; 160
    316e:	df 4f       	sbci	r29, 0xFF	; 255
    3170:	0f b6       	in	r0, 0x3f	; 63
    3172:	f8 94       	cli
    3174:	de bf       	out	0x3e, r29	; 62
    3176:	0f be       	out	0x3f, r0	; 63
    3178:	cd bf       	out	0x3d, r28	; 61
    317a:	cf 91       	pop	r28
    317c:	df 91       	pop	r29
    317e:	1f 91       	pop	r17
    3180:	0f 91       	pop	r16
    3182:	08 95       	ret

00003184 <main>:
#include "DIO_interface.h"
#include "LCD_interface.h"
#include "BTN_interface.h"

void main(void)
{
    3184:	df 93       	push	r29
    3186:	cf 93       	push	r28
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	68 97       	sbiw	r28, 0x18	; 24
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	f8 94       	cli
    3192:	de bf       	out	0x3e, r29	; 62
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	cd bf       	out	0x3d, r28	; 61
	/*Local Variables UP, Down, Enter Buttons and First, Second Operands and Sign and Result and a Counter*/
	u8 Local_u8BtnUP = 0, Local_u8BTNDown = 0, Local_u8BTNEnter = 0, Local_u8FirstNB = 0, Local_u8Sign = 0, Local_u8SeconedNB = 0;
    3198:	1f 82       	std	Y+7, r1	; 0x07
    319a:	18 86       	std	Y+8, r1	; 0x08
    319c:	19 86       	std	Y+9, r1	; 0x09
    319e:	1e 82       	std	Y+6, r1	; 0x06
    31a0:	1d 82       	std	Y+5, r1	; 0x05
    31a2:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_u8Result = 0, Local_u8EnterCounter = 0;
    31a4:	1b 82       	std	Y+3, r1	; 0x03
    31a6:	1a 82       	std	Y+2, r1	; 0x02
		0b01010,
		0b11011,
		0b11011,
		0b11011,
		0b11111
	};
    31a8:	9e 01       	movw	r18, r28
    31aa:	26 5f       	subi	r18, 0xF6	; 246
    31ac:	3f 4f       	sbci	r19, 0xFF	; 255
    31ae:	3d 8b       	std	Y+21, r19	; 0x15
    31b0:	2c 8b       	std	Y+20, r18	; 0x14
    31b2:	88 e6       	ldi	r24, 0x68	; 104
    31b4:	91 e0       	ldi	r25, 0x01	; 1
    31b6:	9f 8b       	std	Y+23, r25	; 0x17
    31b8:	8e 8b       	std	Y+22, r24	; 0x16
    31ba:	98 e0       	ldi	r25, 0x08	; 8
    31bc:	98 8f       	std	Y+24, r25	; 0x18
    31be:	ee 89       	ldd	r30, Y+22	; 0x16
    31c0:	ff 89       	ldd	r31, Y+23	; 0x17
    31c2:	00 80       	ld	r0, Z
    31c4:	2e 89       	ldd	r18, Y+22	; 0x16
    31c6:	3f 89       	ldd	r19, Y+23	; 0x17
    31c8:	2f 5f       	subi	r18, 0xFF	; 255
    31ca:	3f 4f       	sbci	r19, 0xFF	; 255
    31cc:	3f 8b       	std	Y+23, r19	; 0x17
    31ce:	2e 8b       	std	Y+22, r18	; 0x16
    31d0:	ec 89       	ldd	r30, Y+20	; 0x14
    31d2:	fd 89       	ldd	r31, Y+21	; 0x15
    31d4:	00 82       	st	Z, r0
    31d6:	2c 89       	ldd	r18, Y+20	; 0x14
    31d8:	3d 89       	ldd	r19, Y+21	; 0x15
    31da:	2f 5f       	subi	r18, 0xFF	; 255
    31dc:	3f 4f       	sbci	r19, 0xFF	; 255
    31de:	3d 8b       	std	Y+21, r19	; 0x15
    31e0:	2c 8b       	std	Y+20, r18	; 0x14
    31e2:	38 8d       	ldd	r19, Y+24	; 0x18
    31e4:	31 50       	subi	r19, 0x01	; 1
    31e6:	38 8f       	std	Y+24, r19	; 0x18
    31e8:	88 8d       	ldd	r24, Y+24	; 0x18
    31ea:	88 23       	and	r24, r24
    31ec:	41 f7       	brne	.-48     	; 0x31be <main+0x3a>

	u8 Local_u8SizeIndecatorArrow = sizeof(Local_u8IndecatorArrow);
    31ee:	88 e0       	ldi	r24, 0x08	; 8
    31f0:	89 83       	std	Y+1, r24	; 0x01

	/*Initialize the LCD*/
	LCD_voidInitialization();
    31f2:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <LCD_voidInitialization>

	LCD_u8GoToXY(0,0);
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	60 e0       	ldi	r22, 0x00	; 0
    31fa:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
	LCD_u8WriteSpecialChar(Local_u8IndecatorArrow, Local_u8SizeIndecatorArrow);
    31fe:	ce 01       	movw	r24, r28
    3200:	0a 96       	adiw	r24, 0x0a	; 10
    3202:	69 81       	ldd	r22, Y+1	; 0x01
    3204:	0e 94 e5 10 	call	0x21ca	; 0x21ca <LCD_u8WriteSpecialChar>

	/*Initialize Buttons Needed*/
	BTN_u8Initialization(DIO_PORT_3, DIO_PIN_0);
    3208:	83 e0       	ldi	r24, 0x03	; 3
    320a:	60 e0       	ldi	r22, 0x00	; 0
    320c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <BTN_u8Initialization>
	BTN_u8Initialization(DIO_PORT_3, DIO_PIN_1);
    3210:	83 e0       	ldi	r24, 0x03	; 3
    3212:	61 e0       	ldi	r22, 0x01	; 1
    3214:	0e 94 0f 07 	call	0xe1e	; 0xe1e <BTN_u8Initialization>
	BTN_u8Initialization(DIO_PORT_3, DIO_PIN_2);
    3218:	83 e0       	ldi	r24, 0x03	; 3
    321a:	62 e0       	ldi	r22, 0x02	; 2
    321c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <BTN_u8Initialization>

	while(1)
	{
		/*Check if the Button Pressed or not*/
		BTN_u8Pressed(DIO_PORT_3, DIO_PIN_0, &Local_u8BtnUP);
    3220:	9e 01       	movw	r18, r28
    3222:	29 5f       	subi	r18, 0xF9	; 249
    3224:	3f 4f       	sbci	r19, 0xFF	; 255
    3226:	83 e0       	ldi	r24, 0x03	; 3
    3228:	60 e0       	ldi	r22, 0x00	; 0
    322a:	a9 01       	movw	r20, r18
    322c:	0e 94 32 07 	call	0xe64	; 0xe64 <BTN_u8Pressed>
		BTN_u8Pressed(DIO_PORT_3, DIO_PIN_1, &Local_u8BTNDown);
    3230:	9e 01       	movw	r18, r28
    3232:	28 5f       	subi	r18, 0xF8	; 248
    3234:	3f 4f       	sbci	r19, 0xFF	; 255
    3236:	83 e0       	ldi	r24, 0x03	; 3
    3238:	61 e0       	ldi	r22, 0x01	; 1
    323a:	a9 01       	movw	r20, r18
    323c:	0e 94 32 07 	call	0xe64	; 0xe64 <BTN_u8Pressed>
		BTN_u8Pressed(DIO_PORT_3, DIO_PIN_2, &Local_u8BTNEnter);
    3240:	9e 01       	movw	r18, r28
    3242:	27 5f       	subi	r18, 0xF7	; 247
    3244:	3f 4f       	sbci	r19, 0xFF	; 255
    3246:	83 e0       	ldi	r24, 0x03	; 3
    3248:	62 e0       	ldi	r22, 0x02	; 2
    324a:	a9 01       	movw	r20, r18
    324c:	0e 94 32 07 	call	0xe64	; 0xe64 <BTN_u8Pressed>

		/*Print "=" Sign*/
		LCD_u8GoToXY(3, 0);
    3250:	83 e0       	ldi	r24, 0x03	; 3
    3252:	60 e0       	ldi	r22, 0x00	; 0
    3254:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
		LCD_voidWriteData(61);
    3258:	8d e3       	ldi	r24, 0x3D	; 61
    325a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>

		/*If Enter Button Pressed*/
		if(Local_u8BTNEnter == DIO_LOW)
    325e:	89 85       	ldd	r24, Y+9	; 0x09
    3260:	88 23       	and	r24, r24
    3262:	69 f4       	brne	.+26     	; 0x327e <main+0xfa>
		{
			/*increase the counter*/
			Local_u8EnterCounter++;
    3264:	8a 81       	ldd	r24, Y+2	; 0x02
    3266:	8f 5f       	subi	r24, 0xFF	; 255
    3268:	8a 83       	std	Y+2, r24	; 0x02

			/*and as i have only four signs if counter reached Four*/
			if(Local_u8EnterCounter == 4)
    326a:	8a 81       	ldd	r24, Y+2	; 0x02
    326c:	84 30       	cpi	r24, 0x04	; 4
    326e:	39 f4       	brne	.+14     	; 0x327e <main+0xfa>
			{
				/*Reset the Enter Counter to ZERO*/
				Local_u8EnterCounter = 0;
    3270:	1a 82       	std	Y+2, r1	; 0x02

				/*Re-initiate the Operands*/
				Local_u8FirstNB = 0;
    3272:	1e 82       	std	Y+6, r1	; 0x06
				Local_u8SeconedNB = 0;
    3274:	1c 82       	std	Y+4, r1	; 0x04

				/*Clear LCD*/
				LCD_voidClearLCD();
    3276:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_voidClearLCD>

				/*Re-initiate the button state to one as it Not presses*/
				Local_u8BTNEnter = 1;
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	89 87       	std	Y+9, r24	; 0x09
			}
		}

		/*if Enter Button never been pressed means you are in first operand*/
		if(Local_u8EnterCounter == 0)
    327e:	8a 81       	ldd	r24, Y+2	; 0x02
    3280:	88 23       	and	r24, r24
    3282:	61 f5       	brne	.+88     	; 0x32dc <main+0x158>
		{
			/*Print the Arrow in the Position*/
			LCD_u8GoToXY(4, 1);
    3284:	84 e0       	ldi	r24, 0x04	; 4
    3286:	61 e0       	ldi	r22, 0x01	; 1
    3288:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
			LCD_voidWriteData(32);
    328c:	80 e2       	ldi	r24, 0x20	; 32
    328e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
			LCD_u8GoToXY(0, 1);
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	61 e0       	ldi	r22, 0x01	; 1
    3296:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
			LCD_voidWriteData(0);
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>

			/*Check for UP button if Pressed*/
			if(Local_u8BtnUP == DIO_LOW)
    32a0:	8f 81       	ldd	r24, Y+7	; 0x07
    32a2:	88 23       	and	r24, r24
    32a4:	61 f4       	brne	.+24     	; 0x32be <main+0x13a>
			{
				/*increment the counter*/
				Local_u8FirstNB++;
    32a6:	8e 81       	ldd	r24, Y+6	; 0x06
    32a8:	8f 5f       	subi	r24, 0xFF	; 255
    32aa:	8e 83       	std	Y+6, r24	; 0x06

				/*if counter = 10 make it = 0 clear LCD and make btn initial value ONE not pressed*/
				if(Local_u8FirstNB == 10)
    32ac:	8e 81       	ldd	r24, Y+6	; 0x06
    32ae:	8a 30       	cpi	r24, 0x0A	; 10
    32b0:	a9 f4       	brne	.+42     	; 0x32dc <main+0x158>
				{
					Local_u8FirstNB = 0;
    32b2:	1e 82       	std	Y+6, r1	; 0x06
					LCD_voidClearLCD();
    32b4:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_voidClearLCD>
					Local_u8BtnUP = 1;
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	8f 83       	std	Y+7, r24	; 0x07
    32bc:	0f c0       	rjmp	.+30     	; 0x32dc <main+0x158>
				}
			}

			/*else if Down Button is pressed*/
			else if(Local_u8BTNDown == DIO_LOW)
    32be:	88 85       	ldd	r24, Y+8	; 0x08
    32c0:	88 23       	and	r24, r24
    32c2:	61 f4       	brne	.+24     	; 0x32dc <main+0x158>
			{
				/*De-crease the first opperand*/
				Local_u8FirstNB--;
    32c4:	8e 81       	ldd	r24, Y+6	; 0x06
    32c6:	81 50       	subi	r24, 0x01	; 1
    32c8:	8e 83       	std	Y+6, r24	; 0x06

				/*if it less than ZERO*/
				if(Local_u8FirstNB == 255)
    32ca:	8e 81       	ldd	r24, Y+6	; 0x06
    32cc:	8f 3f       	cpi	r24, 0xFF	; 255
    32ce:	31 f4       	brne	.+12     	; 0x32dc <main+0x158>
				{
					/*re-initiate the value to ten*/
					Local_u8FirstNB = 9;
    32d0:	89 e0       	ldi	r24, 0x09	; 9
    32d2:	8e 83       	std	Y+6, r24	; 0x06

					/*Clear LCD*/
					LCD_voidClearLCD();
    32d4:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_voidClearLCD>

					/*re-initiate the value to one as not pressed*/
					Local_u8BTNDown = 1;
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	88 87       	std	Y+8, r24	; 0x08
				}
			}
		}

		/*if Enter Button Pressed for the Second Time means you are in second operand*/
		if(Local_u8EnterCounter == 2)
    32dc:	8a 81       	ldd	r24, Y+2	; 0x02
    32de:	82 30       	cpi	r24, 0x02	; 2
    32e0:	71 f5       	brne	.+92     	; 0x333e <main+0x1ba>
		{
			/*Print the Arrow in the Position*/
			LCD_u8GoToXY(1, 1);
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	61 e0       	ldi	r22, 0x01	; 1
    32e6:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
			LCD_voidWriteData(32);
    32ea:	80 e2       	ldi	r24, 0x20	; 32
    32ec:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
			LCD_u8GoToXY(2, 1);
    32f0:	82 e0       	ldi	r24, 0x02	; 2
    32f2:	61 e0       	ldi	r22, 0x01	; 1
    32f4:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
			LCD_voidWriteData(0);
    32f8:	80 e0       	ldi	r24, 0x00	; 0
    32fa:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>

			/*else if UP Button is pressed*/
			if(Local_u8BtnUP == DIO_LOW)
    32fe:	8f 81       	ldd	r24, Y+7	; 0x07
    3300:	88 23       	and	r24, r24
    3302:	69 f4       	brne	.+26     	; 0x331e <main+0x19a>
			{
				/*increment the counter*/
				Local_u8SeconedNB++;
    3304:	8c 81       	ldd	r24, Y+4	; 0x04
    3306:	8f 5f       	subi	r24, 0xFF	; 255
    3308:	8c 83       	std	Y+4, r24	; 0x04

				/*if counter = 10 make it = 0 clear LCD and make btn initial value ONE not pressed*/
				if(Local_u8FirstNB == 10)
    330a:	8e 81       	ldd	r24, Y+6	; 0x06
    330c:	8a 30       	cpi	r24, 0x0A	; 10
    330e:	09 f0       	breq	.+2      	; 0x3312 <main+0x18e>
    3310:	45 c0       	rjmp	.+138    	; 0x339c <main+0x218>
				{
					Local_u8SeconedNB = 0;
    3312:	1c 82       	std	Y+4, r1	; 0x04
					LCD_voidClearLCD();
    3314:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_voidClearLCD>
					Local_u8BtnUP = 1;
    3318:	81 e0       	ldi	r24, 0x01	; 1
    331a:	8f 83       	std	Y+7, r24	; 0x07
    331c:	3f c0       	rjmp	.+126    	; 0x339c <main+0x218>
				}
			}

			/*else if Down Button is pressed*/
			else if(Local_u8BTNDown == DIO_LOW)
    331e:	88 85       	ldd	r24, Y+8	; 0x08
    3320:	88 23       	and	r24, r24
    3322:	e1 f5       	brne	.+120    	; 0x339c <main+0x218>
			{
				/*Decrease the second operand value*/
				Local_u8SeconedNB--;
    3324:	8c 81       	ldd	r24, Y+4	; 0x04
    3326:	81 50       	subi	r24, 0x01	; 1
    3328:	8c 83       	std	Y+4, r24	; 0x04

				/*if it less than zero re-initiate the value to nine*/
				if(Local_u8SeconedNB == 255)
    332a:	8c 81       	ldd	r24, Y+4	; 0x04
    332c:	8f 3f       	cpi	r24, 0xFF	; 255
    332e:	b1 f5       	brne	.+108    	; 0x339c <main+0x218>
				{
					Local_u8SeconedNB = 9;
    3330:	89 e0       	ldi	r24, 0x09	; 9
    3332:	8c 83       	std	Y+4, r24	; 0x04

					/*Clear LCD*/
					LCD_voidClearLCD();
    3334:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_voidClearLCD>

					/*re-initiate the value to one as not pressed*/
					Local_u8BTNDown = 1;
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	88 87       	std	Y+8, r24	; 0x08
    333c:	2f c0       	rjmp	.+94     	; 0x339c <main+0x218>
				}
			}
		}

		/*if Enter Button Pressed for the First Time means you are in sign choosing*/
		else if(Local_u8EnterCounter == 1)
    333e:	8a 81       	ldd	r24, Y+2	; 0x02
    3340:	81 30       	cpi	r24, 0x01	; 1
    3342:	61 f5       	brne	.+88     	; 0x339c <main+0x218>
		{
			/*Print the Arrow in the Position*/
			LCD_u8GoToXY(0, 1);
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	61 e0       	ldi	r22, 0x01	; 1
    3348:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
			LCD_voidWriteData(32);
    334c:	80 e2       	ldi	r24, 0x20	; 32
    334e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
			LCD_u8GoToXY(1, 1);
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	61 e0       	ldi	r22, 0x01	; 1
    3356:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
			LCD_voidWriteData(0);
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>

			if(Local_u8BtnUP == DIO_LOW)
    3360:	8f 81       	ldd	r24, Y+7	; 0x07
    3362:	88 23       	and	r24, r24
    3364:	61 f4       	brne	.+24     	; 0x337e <main+0x1fa>
			{
				/*increment the counter*/
				Local_u8Sign++;
    3366:	8d 81       	ldd	r24, Y+5	; 0x05
    3368:	8f 5f       	subi	r24, 0xFF	; 255
    336a:	8d 83       	std	Y+5, r24	; 0x05

				/*if counter = 4 make it = 0 clear LCD and make btn initial value ONE not pressed*/
				if(Local_u8Sign == 4)
    336c:	8d 81       	ldd	r24, Y+5	; 0x05
    336e:	84 30       	cpi	r24, 0x04	; 4
    3370:	a9 f4       	brne	.+42     	; 0x339c <main+0x218>
				{
					Local_u8Sign = 0;
    3372:	1d 82       	std	Y+5, r1	; 0x05
					LCD_voidClearLCD();
    3374:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_voidClearLCD>
					Local_u8BtnUP = 1;
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	8f 83       	std	Y+7, r24	; 0x07
    337c:	0f c0       	rjmp	.+30     	; 0x339c <main+0x218>
				}
			}
			else if(Local_u8BTNDown == DIO_LOW)
    337e:	88 85       	ldd	r24, Y+8	; 0x08
    3380:	88 23       	and	r24, r24
    3382:	61 f4       	brne	.+24     	; 0x339c <main+0x218>
			{
				Local_u8Sign--;
    3384:	8d 81       	ldd	r24, Y+5	; 0x05
    3386:	81 50       	subi	r24, 0x01	; 1
    3388:	8d 83       	std	Y+5, r24	; 0x05

				if(Local_u8Sign == 255)
    338a:	8d 81       	ldd	r24, Y+5	; 0x05
    338c:	8f 3f       	cpi	r24, 0xFF	; 255
    338e:	31 f4       	brne	.+12     	; 0x339c <main+0x218>
				{
					Local_u8Sign = 3;
    3390:	83 e0       	ldi	r24, 0x03	; 3
    3392:	8d 83       	std	Y+5, r24	; 0x05
					LCD_voidClearLCD();
    3394:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_voidClearLCD>
					Local_u8BTNDown = 1;
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	88 87       	std	Y+8, r24	; 0x08
				}
			}
		}

		/*Print on LCD first Operand*/
		LCD_u8WriteINT(Local_u8FirstNB, 0, 0);
    339c:	8e 81       	ldd	r24, Y+6	; 0x06
    339e:	88 2f       	mov	r24, r24
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	a0 e0       	ldi	r26, 0x00	; 0
    33a4:	b0 e0       	ldi	r27, 0x00	; 0
    33a6:	bc 01       	movw	r22, r24
    33a8:	cd 01       	movw	r24, r26
    33aa:	40 e0       	ldi	r20, 0x00	; 0
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	0e 94 1a 11 	call	0x2234	; 0x2234 <LCD_u8WriteINT>

		/*LCD print the Sign by switch case on sign variable value*/
		switch(Local_u8Sign)
    33b2:	8d 81       	ldd	r24, Y+5	; 0x05
    33b4:	e8 2f       	mov	r30, r24
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	fb 8b       	std	Y+19, r31	; 0x13
    33ba:	ea 8b       	std	Y+18, r30	; 0x12
    33bc:	2a 89       	ldd	r18, Y+18	; 0x12
    33be:	3b 89       	ldd	r19, Y+19	; 0x13
    33c0:	21 30       	cpi	r18, 0x01	; 1
    33c2:	31 05       	cpc	r19, r1
    33c4:	19 f1       	breq	.+70     	; 0x340c <main+0x288>
    33c6:	8a 89       	ldd	r24, Y+18	; 0x12
    33c8:	9b 89       	ldd	r25, Y+19	; 0x13
    33ca:	82 30       	cpi	r24, 0x02	; 2
    33cc:	91 05       	cpc	r25, r1
    33ce:	2c f4       	brge	.+10     	; 0x33da <main+0x256>
    33d0:	ea 89       	ldd	r30, Y+18	; 0x12
    33d2:	fb 89       	ldd	r31, Y+19	; 0x13
    33d4:	30 97       	sbiw	r30, 0x00	; 0
    33d6:	61 f0       	breq	.+24     	; 0x33f0 <main+0x26c>
    33d8:	3e c0       	rjmp	.+124    	; 0x3456 <main+0x2d2>
    33da:	2a 89       	ldd	r18, Y+18	; 0x12
    33dc:	3b 89       	ldd	r19, Y+19	; 0x13
    33de:	22 30       	cpi	r18, 0x02	; 2
    33e0:	31 05       	cpc	r19, r1
    33e2:	01 f1       	breq	.+64     	; 0x3424 <main+0x2a0>
    33e4:	8a 89       	ldd	r24, Y+18	; 0x12
    33e6:	9b 89       	ldd	r25, Y+19	; 0x13
    33e8:	83 30       	cpi	r24, 0x03	; 3
    33ea:	91 05       	cpc	r25, r1
    33ec:	49 f1       	breq	.+82     	; 0x3440 <main+0x2bc>
    33ee:	33 c0       	rjmp	.+102    	; 0x3456 <main+0x2d2>
		{
		case 0:		//Multiplication
			LCD_u8GoToXY(1, 0);
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	60 e0       	ldi	r22, 0x00	; 0
    33f4:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
			LCD_voidWriteData(42);
    33f8:	8a e2       	ldi	r24, 0x2A	; 42
    33fa:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
			Local_u8Result = Local_u8FirstNB * Local_u8SeconedNB;
    33fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3400:	9c 81       	ldd	r25, Y+4	; 0x04
    3402:	89 9f       	mul	r24, r25
    3404:	80 2d       	mov	r24, r0
    3406:	11 24       	eor	r1, r1
    3408:	8b 83       	std	Y+3, r24	; 0x03
    340a:	25 c0       	rjmp	.+74     	; 0x3456 <main+0x2d2>
			break;
		case 1:		//Summation
			LCD_u8GoToXY(1, 0);
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	60 e0       	ldi	r22, 0x00	; 0
    3410:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
			LCD_voidWriteData(43);
    3414:	8b e2       	ldi	r24, 0x2B	; 43
    3416:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
			Local_u8Result = Local_u8FirstNB + Local_u8SeconedNB;
    341a:	8e 81       	ldd	r24, Y+6	; 0x06
    341c:	9c 81       	ldd	r25, Y+4	; 0x04
    341e:	89 0f       	add	r24, r25
    3420:	8b 83       	std	Y+3, r24	; 0x03
    3422:	19 c0       	rjmp	.+50     	; 0x3456 <main+0x2d2>
			break;
		case 2:		//Subtraction
			LCD_u8GoToXY(1, 0);
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	60 e0       	ldi	r22, 0x00	; 0
    3428:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
			LCD_voidWriteData(47);
    342c:	8f e2       	ldi	r24, 0x2F	; 47
    342e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
			Local_u8Result = Local_u8FirstNB / Local_u8SeconedNB;
    3432:	8e 81       	ldd	r24, Y+6	; 0x06
    3434:	9c 81       	ldd	r25, Y+4	; 0x04
    3436:	69 2f       	mov	r22, r25
    3438:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__udivmodqi4>
    343c:	8b 83       	std	Y+3, r24	; 0x03
    343e:	0b c0       	rjmp	.+22     	; 0x3456 <main+0x2d2>
			break;
		case 3:		//Dividing
			LCD_u8GoToXY(1, 0);
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	60 e0       	ldi	r22, 0x00	; 0
    3444:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
			LCD_voidWriteData(45);
    3448:	8d e2       	ldi	r24, 0x2D	; 45
    344a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
			Local_u8Result = Local_u8FirstNB - Local_u8SeconedNB;
    344e:	8e 81       	ldd	r24, Y+6	; 0x06
    3450:	9c 81       	ldd	r25, Y+4	; 0x04
    3452:	89 1b       	sub	r24, r25
    3454:	8b 83       	std	Y+3, r24	; 0x03
			break;
		}

		/*Print the Second Operand*/
		LCD_u8WriteINT(Local_u8SeconedNB, 2, 0);
    3456:	8c 81       	ldd	r24, Y+4	; 0x04
    3458:	88 2f       	mov	r24, r24
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	a0 e0       	ldi	r26, 0x00	; 0
    345e:	b0 e0       	ldi	r27, 0x00	; 0
    3460:	bc 01       	movw	r22, r24
    3462:	cd 01       	movw	r24, r26
    3464:	42 e0       	ldi	r20, 0x02	; 2
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	0e 94 1a 11 	call	0x2234	; 0x2234 <LCD_u8WriteINT>

		/*Print the sign equal "="*/
		LCD_u8GoToXY(3, 0);
    346c:	83 e0       	ldi	r24, 0x03	; 3
    346e:	60 e0       	ldi	r22, 0x00	; 0
    3470:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
		LCD_voidWriteCommand(61);
    3474:	8d e3       	ldi	r24, 0x3D	; 61
    3476:	0e 94 05 0c 	call	0x180a	; 0x180a <LCD_voidWriteCommand>

		/*if Enter Button pressed for the third time print the Result*/
		if(Local_u8EnterCounter == 3)
    347a:	8a 81       	ldd	r24, Y+2	; 0x02
    347c:	83 30       	cpi	r24, 0x03	; 3
    347e:	09 f0       	breq	.+2      	; 0x3482 <main+0x2fe>
    3480:	cf ce       	rjmp	.-610    	; 0x3220 <main+0x9c>
		{
			/*Print the Arrow in the Position*/
			LCD_u8GoToXY(2, 1);
    3482:	82 e0       	ldi	r24, 0x02	; 2
    3484:	61 e0       	ldi	r22, 0x01	; 1
    3486:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
			LCD_voidWriteData(32);
    348a:	80 e2       	ldi	r24, 0x20	; 32
    348c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>
			LCD_u8GoToXY(4, 1);
    3490:	84 e0       	ldi	r24, 0x04	; 4
    3492:	61 e0       	ldi	r22, 0x01	; 1
    3494:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_u8GoToXY>
			LCD_voidWriteData(0);
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_voidWriteData>

			/*Print the Result*/
			LCD_u8WriteINT(Local_u8Result, 4, 0);
    349e:	8b 81       	ldd	r24, Y+3	; 0x03
    34a0:	88 2f       	mov	r24, r24
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	a0 e0       	ldi	r26, 0x00	; 0
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	bc 01       	movw	r22, r24
    34aa:	cd 01       	movw	r24, r26
    34ac:	44 e0       	ldi	r20, 0x04	; 4
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	0e 94 1a 11 	call	0x2234	; 0x2234 <LCD_u8WriteINT>
    34b4:	b5 ce       	rjmp	.-662    	; 0x3220 <main+0x9c>

000034b6 <__udivmodqi4>:
    34b6:	99 1b       	sub	r25, r25
    34b8:	79 e0       	ldi	r23, 0x09	; 9
    34ba:	04 c0       	rjmp	.+8      	; 0x34c4 <__udivmodqi4_ep>

000034bc <__udivmodqi4_loop>:
    34bc:	99 1f       	adc	r25, r25
    34be:	96 17       	cp	r25, r22
    34c0:	08 f0       	brcs	.+2      	; 0x34c4 <__udivmodqi4_ep>
    34c2:	96 1b       	sub	r25, r22

000034c4 <__udivmodqi4_ep>:
    34c4:	88 1f       	adc	r24, r24
    34c6:	7a 95       	dec	r23
    34c8:	c9 f7       	brne	.-14     	; 0x34bc <__udivmodqi4_loop>
    34ca:	80 95       	com	r24
    34cc:	08 95       	ret

000034ce <__udivmodsi4>:
    34ce:	a1 e2       	ldi	r26, 0x21	; 33
    34d0:	1a 2e       	mov	r1, r26
    34d2:	aa 1b       	sub	r26, r26
    34d4:	bb 1b       	sub	r27, r27
    34d6:	fd 01       	movw	r30, r26
    34d8:	0d c0       	rjmp	.+26     	; 0x34f4 <__udivmodsi4_ep>

000034da <__udivmodsi4_loop>:
    34da:	aa 1f       	adc	r26, r26
    34dc:	bb 1f       	adc	r27, r27
    34de:	ee 1f       	adc	r30, r30
    34e0:	ff 1f       	adc	r31, r31
    34e2:	a2 17       	cp	r26, r18
    34e4:	b3 07       	cpc	r27, r19
    34e6:	e4 07       	cpc	r30, r20
    34e8:	f5 07       	cpc	r31, r21
    34ea:	20 f0       	brcs	.+8      	; 0x34f4 <__udivmodsi4_ep>
    34ec:	a2 1b       	sub	r26, r18
    34ee:	b3 0b       	sbc	r27, r19
    34f0:	e4 0b       	sbc	r30, r20
    34f2:	f5 0b       	sbc	r31, r21

000034f4 <__udivmodsi4_ep>:
    34f4:	66 1f       	adc	r22, r22
    34f6:	77 1f       	adc	r23, r23
    34f8:	88 1f       	adc	r24, r24
    34fa:	99 1f       	adc	r25, r25
    34fc:	1a 94       	dec	r1
    34fe:	69 f7       	brne	.-38     	; 0x34da <__udivmodsi4_loop>
    3500:	60 95       	com	r22
    3502:	70 95       	com	r23
    3504:	80 95       	com	r24
    3506:	90 95       	com	r25
    3508:	9b 01       	movw	r18, r22
    350a:	ac 01       	movw	r20, r24
    350c:	bd 01       	movw	r22, r26
    350e:	cf 01       	movw	r24, r30
    3510:	08 95       	ret

00003512 <__prologue_saves__>:
    3512:	2f 92       	push	r2
    3514:	3f 92       	push	r3
    3516:	4f 92       	push	r4
    3518:	5f 92       	push	r5
    351a:	6f 92       	push	r6
    351c:	7f 92       	push	r7
    351e:	8f 92       	push	r8
    3520:	9f 92       	push	r9
    3522:	af 92       	push	r10
    3524:	bf 92       	push	r11
    3526:	cf 92       	push	r12
    3528:	df 92       	push	r13
    352a:	ef 92       	push	r14
    352c:	ff 92       	push	r15
    352e:	0f 93       	push	r16
    3530:	1f 93       	push	r17
    3532:	cf 93       	push	r28
    3534:	df 93       	push	r29
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62
    353a:	ca 1b       	sub	r28, r26
    353c:	db 0b       	sbc	r29, r27
    353e:	0f b6       	in	r0, 0x3f	; 63
    3540:	f8 94       	cli
    3542:	de bf       	out	0x3e, r29	; 62
    3544:	0f be       	out	0x3f, r0	; 63
    3546:	cd bf       	out	0x3d, r28	; 61
    3548:	09 94       	ijmp

0000354a <__epilogue_restores__>:
    354a:	2a 88       	ldd	r2, Y+18	; 0x12
    354c:	39 88       	ldd	r3, Y+17	; 0x11
    354e:	48 88       	ldd	r4, Y+16	; 0x10
    3550:	5f 84       	ldd	r5, Y+15	; 0x0f
    3552:	6e 84       	ldd	r6, Y+14	; 0x0e
    3554:	7d 84       	ldd	r7, Y+13	; 0x0d
    3556:	8c 84       	ldd	r8, Y+12	; 0x0c
    3558:	9b 84       	ldd	r9, Y+11	; 0x0b
    355a:	aa 84       	ldd	r10, Y+10	; 0x0a
    355c:	b9 84       	ldd	r11, Y+9	; 0x09
    355e:	c8 84       	ldd	r12, Y+8	; 0x08
    3560:	df 80       	ldd	r13, Y+7	; 0x07
    3562:	ee 80       	ldd	r14, Y+6	; 0x06
    3564:	fd 80       	ldd	r15, Y+5	; 0x05
    3566:	0c 81       	ldd	r16, Y+4	; 0x04
    3568:	1b 81       	ldd	r17, Y+3	; 0x03
    356a:	aa 81       	ldd	r26, Y+2	; 0x02
    356c:	b9 81       	ldd	r27, Y+1	; 0x01
    356e:	ce 0f       	add	r28, r30
    3570:	d1 1d       	adc	r29, r1
    3572:	0f b6       	in	r0, 0x3f	; 63
    3574:	f8 94       	cli
    3576:	de bf       	out	0x3e, r29	; 62
    3578:	0f be       	out	0x3f, r0	; 63
    357a:	cd bf       	out	0x3d, r28	; 61
    357c:	ed 01       	movw	r28, r26
    357e:	08 95       	ret

00003580 <_exit>:
    3580:	f8 94       	cli

00003582 <__stop_program>:
    3582:	ff cf       	rjmp	.-2      	; 0x3582 <__stop_program>
