
ADC01_LM35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000369c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  0000369c  00003710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002790  00000000  00000000  00003828  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000eff  00000000  00000000  00005fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  00006eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000214  00000000  00000000  00007077  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002612  00000000  00000000  0000728b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ce  00000000  00000000  0000989d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130b  00000000  00000000  0000ad6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000c078  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000307  00000000  00000000  0000c258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000c55f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000cf79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <main>
      7a:	0c 94 4c 1b 	jmp	0x3698	; 0x3698 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 15 1b 	jmp	0x362a	; 0x362a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae e6       	ldi	r26, 0x6E	; 110
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 31 1b 	jmp	0x3662	; 0x3662 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 15 1b 	jmp	0x362a	; 0x362a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8e e6       	ldi	r24, 0x6E	; 110
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 31 1b 	jmp	0x3662	; 0x3662 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 1d 1b 	jmp	0x363a	; 0x363a <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6e e6       	ldi	r22, 0x6E	; 110
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 1e 1b 	jmp	0x363c	; 0x363c <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 3a 1b 	jmp	0x3674	; 0x3674 <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 25 1b 	jmp	0x364a	; 0x364a <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 41 1b 	jmp	0x3682	; 0x3682 <__epilogue_restores__+0x20>

000009fe <__floatunsisf>:
     9fe:	a8 e0       	ldi	r26, 0x08	; 8
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	e5 e0       	ldi	r30, 0x05	; 5
     a04:	f5 e0       	ldi	r31, 0x05	; 5
     a06:	0c 94 1d 1b 	jmp	0x363a	; 0x363a <__prologue_saves__+0x10>
     a0a:	7b 01       	movw	r14, r22
     a0c:	8c 01       	movw	r16, r24
     a0e:	61 15       	cp	r22, r1
     a10:	71 05       	cpc	r23, r1
     a12:	81 05       	cpc	r24, r1
     a14:	91 05       	cpc	r25, r1
     a16:	19 f4       	brne	.+6      	; 0xa1e <__floatunsisf+0x20>
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	60 c0       	rjmp	.+192    	; 0xade <__floatunsisf+0xe0>
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	8e e1       	ldi	r24, 0x1E	; 30
     a24:	c8 2e       	mov	r12, r24
     a26:	d1 2c       	mov	r13, r1
     a28:	dc 82       	std	Y+4, r13	; 0x04
     a2a:	cb 82       	std	Y+3, r12	; 0x03
     a2c:	ed 82       	std	Y+5, r14	; 0x05
     a2e:	fe 82       	std	Y+6, r15	; 0x06
     a30:	0f 83       	std	Y+7, r16	; 0x07
     a32:	18 87       	std	Y+8, r17	; 0x08
     a34:	c8 01       	movw	r24, r16
     a36:	b7 01       	movw	r22, r14
     a38:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     a3c:	fc 01       	movw	r30, r24
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	f7 ff       	sbrs	r31, 7
     a42:	3b c0       	rjmp	.+118    	; 0xaba <__floatunsisf+0xbc>
     a44:	22 27       	eor	r18, r18
     a46:	33 27       	eor	r19, r19
     a48:	2e 1b       	sub	r18, r30
     a4a:	3f 0b       	sbc	r19, r31
     a4c:	57 01       	movw	r10, r14
     a4e:	68 01       	movw	r12, r16
     a50:	02 2e       	mov	r0, r18
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__floatunsisf+0x5e>
     a54:	d6 94       	lsr	r13
     a56:	c7 94       	ror	r12
     a58:	b7 94       	ror	r11
     a5a:	a7 94       	ror	r10
     a5c:	0a 94       	dec	r0
     a5e:	d2 f7       	brpl	.-12     	; 0xa54 <__floatunsisf+0x56>
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0x7c>
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	aa 1f       	adc	r26, r26
     a78:	bb 1f       	adc	r27, r27
     a7a:	2a 95       	dec	r18
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0x74>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	a1 09       	sbc	r26, r1
     a82:	b1 09       	sbc	r27, r1
     a84:	8e 21       	and	r24, r14
     a86:	9f 21       	and	r25, r15
     a88:	a0 23       	and	r26, r16
     a8a:	b1 23       	and	r27, r17
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	21 f0       	breq	.+8      	; 0xa9c <__floatunsisf+0x9e>
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	4a 29       	or	r20, r10
     a9e:	5b 29       	or	r21, r11
     aa0:	6c 29       	or	r22, r12
     aa2:	7d 29       	or	r23, r13
     aa4:	4d 83       	std	Y+5, r20	; 0x05
     aa6:	5e 83       	std	Y+6, r21	; 0x06
     aa8:	6f 83       	std	Y+7, r22	; 0x07
     aaa:	78 87       	std	Y+8, r23	; 0x08
     aac:	8e e1       	ldi	r24, 0x1E	; 30
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	8e 1b       	sub	r24, r30
     ab2:	9f 0b       	sbc	r25, r31
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	8b 83       	std	Y+3, r24	; 0x03
     ab8:	12 c0       	rjmp	.+36     	; 0xade <__floatunsisf+0xe0>
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	81 f0       	breq	.+32     	; 0xade <__floatunsisf+0xe0>
     abe:	0e 2e       	mov	r0, r30
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <__floatunsisf+0xcc>
     ac2:	ee 0c       	add	r14, r14
     ac4:	ff 1c       	adc	r15, r15
     ac6:	00 1f       	adc	r16, r16
     ac8:	11 1f       	adc	r17, r17
     aca:	0a 94       	dec	r0
     acc:	d2 f7       	brpl	.-12     	; 0xac2 <__floatunsisf+0xc4>
     ace:	ed 82       	std	Y+5, r14	; 0x05
     ad0:	fe 82       	std	Y+6, r15	; 0x06
     ad2:	0f 83       	std	Y+7, r16	; 0x07
     ad4:	18 87       	std	Y+8, r17	; 0x08
     ad6:	ce 1a       	sub	r12, r30
     ad8:	df 0a       	sbc	r13, r31
     ada:	dc 82       	std	Y+4, r13	; 0x04
     adc:	cb 82       	std	Y+3, r12	; 0x03
     ade:	1a 82       	std	Y+2, r1	; 0x02
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     ae8:	28 96       	adiw	r28, 0x08	; 8
     aea:	ea e0       	ldi	r30, 0x0A	; 10
     aec:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <__epilogue_restores__+0x10>

00000af0 <__clzsi2>:
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	7b 01       	movw	r14, r22
     afa:	8c 01       	movw	r16, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	e8 16       	cp	r14, r24
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	f8 06       	cpc	r15, r24
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	08 07       	cpc	r16, r24
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	18 07       	cpc	r17, r24
     b0c:	88 f4       	brcc	.+34     	; 0xb30 <__clzsi2+0x40>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	e8 16       	cp	r14, r24
     b12:	f1 04       	cpc	r15, r1
     b14:	01 05       	cpc	r16, r1
     b16:	11 05       	cpc	r17, r1
     b18:	31 f0       	breq	.+12     	; 0xb26 <__clzsi2+0x36>
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <__clzsi2+0x36>
     b1c:	88 e0       	ldi	r24, 0x08	; 8
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	17 c0       	rjmp	.+46     	; 0xb54 <__clzsi2+0x64>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	12 c0       	rjmp	.+36     	; 0xb54 <__clzsi2+0x64>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	e8 16       	cp	r14, r24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	f8 06       	cpc	r15, r24
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 07       	cpc	r16, r24
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	18 07       	cpc	r17, r24
     b40:	28 f0       	brcs	.+10     	; 0xb4c <__clzsi2+0x5c>
     b42:	88 e1       	ldi	r24, 0x18	; 24
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__clzsi2+0x64>
     b4c:	80 e1       	ldi	r24, 0x10	; 16
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	20 e2       	ldi	r18, 0x20	; 32
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	28 1b       	sub	r18, r24
     b5e:	39 0b       	sbc	r19, r25
     b60:	4a 0b       	sbc	r20, r26
     b62:	5b 0b       	sbc	r21, r27
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__clzsi2+0x7e>
     b66:	16 95       	lsr	r17
     b68:	07 95       	ror	r16
     b6a:	f7 94       	ror	r15
     b6c:	e7 94       	ror	r14
     b6e:	8a 95       	dec	r24
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__clzsi2+0x76>
     b72:	f7 01       	movw	r30, r14
     b74:	ea 58       	subi	r30, 0x8A	; 138
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	28 1b       	sub	r18, r24
     b7c:	31 09       	sbc	r19, r1
     b7e:	41 09       	sbc	r20, r1
     b80:	51 09       	sbc	r21, r1
     b82:	c9 01       	movw	r24, r18
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <__pack_f>:
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	fc 01       	movw	r30, r24
     b9a:	e4 80       	ldd	r14, Z+4	; 0x04
     b9c:	f5 80       	ldd	r15, Z+5	; 0x05
     b9e:	06 81       	ldd	r16, Z+6	; 0x06
     ba0:	17 81       	ldd	r17, Z+7	; 0x07
     ba2:	d1 80       	ldd	r13, Z+1	; 0x01
     ba4:	80 81       	ld	r24, Z
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	48 f4       	brcc	.+18     	; 0xbbc <__pack_f+0x2e>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a0 e1       	ldi	r26, 0x10	; 16
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e8 2a       	or	r14, r24
     bb4:	f9 2a       	or	r15, r25
     bb6:	0a 2b       	or	r16, r26
     bb8:	1b 2b       	or	r17, r27
     bba:	a5 c0       	rjmp	.+330    	; 0xd06 <__pack_f+0x178>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__pack_f+0x34>
     bc0:	9f c0       	rjmp	.+318    	; 0xd00 <__pack_f+0x172>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	21 f4       	brne	.+8      	; 0xbce <__pack_f+0x40>
     bc6:	ee 24       	eor	r14, r14
     bc8:	ff 24       	eor	r15, r15
     bca:	87 01       	movw	r16, r14
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <__pack_f+0x4a>
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	01 05       	cpc	r16, r1
     bd4:	11 05       	cpc	r17, r1
     bd6:	19 f4       	brne	.+6      	; 0xbde <__pack_f+0x50>
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	96 c0       	rjmp	.+300    	; 0xd0a <__pack_f+0x17c>
     bde:	62 81       	ldd	r22, Z+2	; 0x02
     be0:	73 81       	ldd	r23, Z+3	; 0x03
     be2:	9f ef       	ldi	r25, 0xFF	; 255
     be4:	62 38       	cpi	r22, 0x82	; 130
     be6:	79 07       	cpc	r23, r25
     be8:	0c f0       	brlt	.+2      	; 0xbec <__pack_f+0x5e>
     bea:	5b c0       	rjmp	.+182    	; 0xca2 <__pack_f+0x114>
     bec:	22 e8       	ldi	r18, 0x82	; 130
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	26 1b       	sub	r18, r22
     bf2:	37 0b       	sbc	r19, r23
     bf4:	2a 31       	cpi	r18, 0x1A	; 26
     bf6:	31 05       	cpc	r19, r1
     bf8:	2c f0       	brlt	.+10     	; 0xc04 <__pack_f+0x76>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	2a c0       	rjmp	.+84     	; 0xc58 <__pack_f+0xca>
     c04:	b8 01       	movw	r22, r16
     c06:	a7 01       	movw	r20, r14
     c08:	02 2e       	mov	r0, r18
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__pack_f+0x86>
     c0c:	76 95       	lsr	r23
     c0e:	67 95       	ror	r22
     c10:	57 95       	ror	r21
     c12:	47 95       	ror	r20
     c14:	0a 94       	dec	r0
     c16:	d2 f7       	brpl	.-12     	; 0xc0c <__pack_f+0x7e>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x9c>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	aa 1f       	adc	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	2a 95       	dec	r18
     c2c:	d2 f7       	brpl	.-12     	; 0xc22 <__pack_f+0x94>
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	a1 09       	sbc	r26, r1
     c32:	b1 09       	sbc	r27, r1
     c34:	8e 21       	and	r24, r14
     c36:	9f 21       	and	r25, r15
     c38:	a0 23       	and	r26, r16
     c3a:	b1 23       	and	r27, r17
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	a1 05       	cpc	r26, r1
     c40:	b1 05       	cpc	r27, r1
     c42:	21 f0       	breq	.+8      	; 0xc4c <__pack_f+0xbe>
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a0 e0       	ldi	r26, 0x00	; 0
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	9a 01       	movw	r18, r20
     c4e:	ab 01       	movw	r20, r22
     c50:	28 2b       	or	r18, r24
     c52:	39 2b       	or	r19, r25
     c54:	4a 2b       	or	r20, r26
     c56:	5b 2b       	or	r21, r27
     c58:	da 01       	movw	r26, r20
     c5a:	c9 01       	movw	r24, r18
     c5c:	8f 77       	andi	r24, 0x7F	; 127
     c5e:	90 70       	andi	r25, 0x00	; 0
     c60:	a0 70       	andi	r26, 0x00	; 0
     c62:	b0 70       	andi	r27, 0x00	; 0
     c64:	80 34       	cpi	r24, 0x40	; 64
     c66:	91 05       	cpc	r25, r1
     c68:	a1 05       	cpc	r26, r1
     c6a:	b1 05       	cpc	r27, r1
     c6c:	39 f4       	brne	.+14     	; 0xc7c <__pack_f+0xee>
     c6e:	27 ff       	sbrs	r18, 7
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <__pack_f+0xf6>
     c72:	20 5c       	subi	r18, 0xC0	; 192
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	4f 4f       	sbci	r20, 0xFF	; 255
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0xf6>
     c7c:	21 5c       	subi	r18, 0xC1	; 193
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	4f 4f       	sbci	r20, 0xFF	; 255
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	e0 e0       	ldi	r30, 0x00	; 0
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	20 30       	cpi	r18, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	3a 07       	cpc	r19, r26
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	4a 07       	cpc	r20, r26
     c92:	a0 e4       	ldi	r26, 0x40	; 64
     c94:	5a 07       	cpc	r21, r26
     c96:	10 f0       	brcs	.+4      	; 0xc9c <__pack_f+0x10e>
     c98:	e1 e0       	ldi	r30, 0x01	; 1
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	79 01       	movw	r14, r18
     c9e:	8a 01       	movw	r16, r20
     ca0:	27 c0       	rjmp	.+78     	; 0xcf0 <__pack_f+0x162>
     ca2:	60 38       	cpi	r22, 0x80	; 128
     ca4:	71 05       	cpc	r23, r1
     ca6:	64 f5       	brge	.+88     	; 0xd00 <__pack_f+0x172>
     ca8:	fb 01       	movw	r30, r22
     caa:	e1 58       	subi	r30, 0x81	; 129
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	d8 01       	movw	r26, r16
     cb0:	c7 01       	movw	r24, r14
     cb2:	8f 77       	andi	r24, 0x7F	; 127
     cb4:	90 70       	andi	r25, 0x00	; 0
     cb6:	a0 70       	andi	r26, 0x00	; 0
     cb8:	b0 70       	andi	r27, 0x00	; 0
     cba:	80 34       	cpi	r24, 0x40	; 64
     cbc:	91 05       	cpc	r25, r1
     cbe:	a1 05       	cpc	r26, r1
     cc0:	b1 05       	cpc	r27, r1
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <__pack_f+0x144>
     cc4:	e7 fe       	sbrs	r14, 7
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__pack_f+0x154>
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <__pack_f+0x14c>
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	a0 e0       	ldi	r26, 0x00	; 0
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e8 0e       	add	r14, r24
     cdc:	f9 1e       	adc	r15, r25
     cde:	0a 1f       	adc	r16, r26
     ce0:	1b 1f       	adc	r17, r27
     ce2:	17 ff       	sbrs	r17, 7
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__pack_f+0x162>
     ce6:	16 95       	lsr	r17
     ce8:	07 95       	ror	r16
     cea:	f7 94       	ror	r15
     cec:	e7 94       	ror	r14
     cee:	31 96       	adiw	r30, 0x01	; 1
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	16 95       	lsr	r17
     cf4:	07 95       	ror	r16
     cf6:	f7 94       	ror	r15
     cf8:	e7 94       	ror	r14
     cfa:	8a 95       	dec	r24
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <__pack_f+0x164>
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__pack_f+0x17c>
     d00:	ee 24       	eor	r14, r14
     d02:	ff 24       	eor	r15, r15
     d04:	87 01       	movw	r16, r14
     d06:	ef ef       	ldi	r30, 0xFF	; 255
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	6e 2f       	mov	r22, r30
     d0c:	67 95       	ror	r22
     d0e:	66 27       	eor	r22, r22
     d10:	67 95       	ror	r22
     d12:	90 2f       	mov	r25, r16
     d14:	9f 77       	andi	r25, 0x7F	; 127
     d16:	d7 94       	ror	r13
     d18:	dd 24       	eor	r13, r13
     d1a:	d7 94       	ror	r13
     d1c:	8e 2f       	mov	r24, r30
     d1e:	86 95       	lsr	r24
     d20:	49 2f       	mov	r20, r25
     d22:	46 2b       	or	r20, r22
     d24:	58 2f       	mov	r21, r24
     d26:	5d 29       	or	r21, r13
     d28:	b7 01       	movw	r22, r14
     d2a:	ca 01       	movw	r24, r20
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	08 95       	ret

00000d38 <__unpack_f>:
     d38:	fc 01       	movw	r30, r24
     d3a:	db 01       	movw	r26, r22
     d3c:	40 81       	ld	r20, Z
     d3e:	51 81       	ldd	r21, Z+1	; 0x01
     d40:	22 81       	ldd	r18, Z+2	; 0x02
     d42:	62 2f       	mov	r22, r18
     d44:	6f 77       	andi	r22, 0x7F	; 127
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	22 1f       	adc	r18, r18
     d4a:	22 27       	eor	r18, r18
     d4c:	22 1f       	adc	r18, r18
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	89 2f       	mov	r24, r25
     d52:	88 0f       	add	r24, r24
     d54:	82 2b       	or	r24, r18
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	99 1f       	adc	r25, r25
     d5c:	99 27       	eor	r25, r25
     d5e:	99 1f       	adc	r25, r25
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	9c 93       	st	X, r25
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	21 15       	cp	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	a9 f5       	brne	.+106    	; 0xdd6 <__unpack_f+0x9e>
     d6c:	41 15       	cp	r20, r1
     d6e:	51 05       	cpc	r21, r1
     d70:	61 05       	cpc	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	11 f4       	brne	.+4      	; 0xd7a <__unpack_f+0x42>
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	37 c0       	rjmp	.+110    	; 0xde8 <__unpack_f+0xb0>
     d7a:	82 e8       	ldi	r24, 0x82	; 130
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	13 96       	adiw	r26, 0x03	; 3
     d80:	9c 93       	st	X, r25
     d82:	8e 93       	st	-X, r24
     d84:	12 97       	sbiw	r26, 0x02	; 2
     d86:	9a 01       	movw	r18, r20
     d88:	ab 01       	movw	r20, r22
     d8a:	67 e0       	ldi	r22, 0x07	; 7
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	44 1f       	adc	r20, r20
     d92:	55 1f       	adc	r21, r21
     d94:	6a 95       	dec	r22
     d96:	d1 f7       	brne	.-12     	; 0xd8c <__unpack_f+0x54>
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	8c 93       	st	X, r24
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <__unpack_f+0x80>
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	44 1f       	adc	r20, r20
     da4:	55 1f       	adc	r21, r21
     da6:	12 96       	adiw	r26, 0x02	; 2
     da8:	8d 91       	ld	r24, X+
     daa:	9c 91       	ld	r25, X
     dac:	13 97       	sbiw	r26, 0x03	; 3
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	13 96       	adiw	r26, 0x03	; 3
     db2:	9c 93       	st	X, r25
     db4:	8e 93       	st	-X, r24
     db6:	12 97       	sbiw	r26, 0x02	; 2
     db8:	20 30       	cpi	r18, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	38 07       	cpc	r19, r24
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	48 07       	cpc	r20, r24
     dc2:	80 e4       	ldi	r24, 0x40	; 64
     dc4:	58 07       	cpc	r21, r24
     dc6:	58 f3       	brcs	.-42     	; 0xd9e <__unpack_f+0x66>
     dc8:	14 96       	adiw	r26, 0x04	; 4
     dca:	2d 93       	st	X+, r18
     dcc:	3d 93       	st	X+, r19
     dce:	4d 93       	st	X+, r20
     dd0:	5c 93       	st	X, r21
     dd2:	17 97       	sbiw	r26, 0x07	; 7
     dd4:	08 95       	ret
     dd6:	2f 3f       	cpi	r18, 0xFF	; 255
     dd8:	31 05       	cpc	r19, r1
     dda:	79 f4       	brne	.+30     	; 0xdfa <__unpack_f+0xc2>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	19 f4       	brne	.+6      	; 0xdec <__unpack_f+0xb4>
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	8c 93       	st	X, r24
     dea:	08 95       	ret
     dec:	64 ff       	sbrs	r22, 4
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <__unpack_f+0xbe>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <__unpack_f+0xe2>
     df6:	1c 92       	st	X, r1
     df8:	10 c0       	rjmp	.+32     	; 0xe1a <__unpack_f+0xe2>
     dfa:	2f 57       	subi	r18, 0x7F	; 127
     dfc:	30 40       	sbci	r19, 0x00	; 0
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	3c 93       	st	X, r19
     e02:	2e 93       	st	-X, r18
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	8c 93       	st	X, r24
     e0a:	87 e0       	ldi	r24, 0x07	; 7
     e0c:	44 0f       	add	r20, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	66 1f       	adc	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	8a 95       	dec	r24
     e16:	d1 f7       	brne	.-12     	; 0xe0c <__unpack_f+0xd4>
     e18:	70 64       	ori	r23, 0x40	; 64
     e1a:	14 96       	adiw	r26, 0x04	; 4
     e1c:	4d 93       	st	X+, r20
     e1e:	5d 93       	st	X+, r21
     e20:	6d 93       	st	X+, r22
     e22:	7c 93       	st	X, r23
     e24:	17 97       	sbiw	r26, 0x07	; 7
     e26:	08 95       	ret

00000e28 <__fpcmp_parts_f>:
     e28:	1f 93       	push	r17
     e2a:	dc 01       	movw	r26, r24
     e2c:	fb 01       	movw	r30, r22
     e2e:	9c 91       	ld	r25, X
     e30:	92 30       	cpi	r25, 0x02	; 2
     e32:	08 f4       	brcc	.+2      	; 0xe36 <__fpcmp_parts_f+0xe>
     e34:	47 c0       	rjmp	.+142    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e36:	80 81       	ld	r24, Z
     e38:	82 30       	cpi	r24, 0x02	; 2
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <__fpcmp_parts_f+0x16>
     e3c:	43 c0       	rjmp	.+134    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e3e:	94 30       	cpi	r25, 0x04	; 4
     e40:	51 f4       	brne	.+20     	; 0xe56 <__fpcmp_parts_f+0x2e>
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	1c 91       	ld	r17, X
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	99 f5       	brne	.+102    	; 0xeb0 <__fpcmp_parts_f+0x88>
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	68 2f       	mov	r22, r24
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	61 1b       	sub	r22, r17
     e52:	71 09       	sbc	r23, r1
     e54:	3f c0       	rjmp	.+126    	; 0xed4 <__fpcmp_parts_f+0xac>
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	21 f0       	breq	.+8      	; 0xe62 <__fpcmp_parts_f+0x3a>
     e5a:	92 30       	cpi	r25, 0x02	; 2
     e5c:	31 f4       	brne	.+12     	; 0xe6a <__fpcmp_parts_f+0x42>
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	b9 f1       	breq	.+110    	; 0xed0 <__fpcmp_parts_f+0xa8>
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	88 23       	and	r24, r24
     e66:	89 f1       	breq	.+98     	; 0xeca <__fpcmp_parts_f+0xa2>
     e68:	2d c0       	rjmp	.+90     	; 0xec4 <__fpcmp_parts_f+0x9c>
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	1c 91       	ld	r17, X
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	f1 f0       	breq	.+60     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e74:	81 81       	ldd	r24, Z+1	; 0x01
     e76:	18 17       	cp	r17, r24
     e78:	d9 f4       	brne	.+54     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e7a:	12 96       	adiw	r26, 0x02	; 2
     e7c:	2d 91       	ld	r18, X+
     e7e:	3c 91       	ld	r19, X
     e80:	13 97       	sbiw	r26, 0x03	; 3
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	82 17       	cp	r24, r18
     e88:	93 07       	cpc	r25, r19
     e8a:	94 f0       	brlt	.+36     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	bc f0       	brlt	.+46     	; 0xec0 <__fpcmp_parts_f+0x98>
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	8d 91       	ld	r24, X+
     e96:	9d 91       	ld	r25, X+
     e98:	0d 90       	ld	r0, X+
     e9a:	bc 91       	ld	r27, X
     e9c:	a0 2d       	mov	r26, r0
     e9e:	24 81       	ldd	r18, Z+4	; 0x04
     ea0:	35 81       	ldd	r19, Z+5	; 0x05
     ea2:	46 81       	ldd	r20, Z+6	; 0x06
     ea4:	57 81       	ldd	r21, Z+7	; 0x07
     ea6:	28 17       	cp	r18, r24
     ea8:	39 07       	cpc	r19, r25
     eaa:	4a 07       	cpc	r20, r26
     eac:	5b 07       	cpc	r21, r27
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <__fpcmp_parts_f+0x8e>
     eb0:	11 23       	and	r17, r17
     eb2:	41 f0       	breq	.+16     	; 0xec4 <__fpcmp_parts_f+0x9c>
     eb4:	0a c0       	rjmp	.+20     	; 0xeca <__fpcmp_parts_f+0xa2>
     eb6:	82 17       	cp	r24, r18
     eb8:	93 07       	cpc	r25, r19
     eba:	a4 07       	cpc	r26, r20
     ebc:	b5 07       	cpc	r27, r21
     ebe:	40 f4       	brcc	.+16     	; 0xed0 <__fpcmp_parts_f+0xa8>
     ec0:	11 23       	and	r17, r17
     ec2:	19 f0       	breq	.+6      	; 0xeca <__fpcmp_parts_f+0xa2>
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <__fpcmp_parts_f+0xac>
     eca:	6f ef       	ldi	r22, 0xFF	; 255
     ecc:	7f ef       	ldi	r23, 0xFF	; 255
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <__fpcmp_parts_f+0xac>
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	cb 01       	movw	r24, r22
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <ADC_voidInitialization>:
/* Description	: Initializing all required (Voltage Reference, Prescaler and Resolution) then Enable ADC
 * Input		: Non
 * Output		: Non
 */
void ADC_voidInitialization(void)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
	/*Choosing Reference Voltage*/
#if Voltage_REF == ADC_AVCC
	SET_BIT(ADMUX, ADMUX_REFS0);
     ee2:	a7 e2       	ldi	r26, 0x27	; 39
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e7 e2       	ldi	r30, 0x27	; 39
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	80 64       	ori	r24, 0x40	; 64
     eee:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_REFS1);
     ef0:	a7 e2       	ldi	r26, 0x27	; 39
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e7 e2       	ldi	r30, 0x27	; 39
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	8f 77       	andi	r24, 0x7F	; 127
     efc:	8c 93       	st	X, r24
#endif


	/*Choosing Prescaler*/
#if Prescaler == ADC_Prescaler_2
	CLR_BIT(ADCSRA, ADCSRA_ADPS0);
     efe:	a6 e2       	ldi	r26, 0x26	; 38
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e6 e2       	ldi	r30, 0x26	; 38
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8e 7f       	andi	r24, 0xFE	; 254
     f0a:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADCSRA_ADPS1);
     f0c:	a6 e2       	ldi	r26, 0x26	; 38
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e6 e2       	ldi	r30, 0x26	; 38
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	8d 7f       	andi	r24, 0xFD	; 253
     f18:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADCSRA_ADPS2);
     f1a:	a6 e2       	ldi	r26, 0x26	; 38
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e6 e2       	ldi	r30, 0x26	; 38
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	8b 7f       	andi	r24, 0xFB	; 251
     f26:	8c 93       	st	X, r24
	/*Choosing Left or Right Adjustment*/
#if Resolution == ADC_ADCL
	CLR_BIT(ADMUX, ADMUX_ADLAR);

#elif Resolution == ADC_ADCH
	SET_BIT(ADMUX, ADMUX_ADLAR);
     f28:	a7 e2       	ldi	r26, 0x27	; 39
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e7 e2       	ldi	r30, 0x27	; 39
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	80 62       	ori	r24, 0x20	; 32
     f34:	8c 93       	st	X, r24
#endif


	/*Choosing Interrupt Enable or Disable*/
#if ADC_Interrupt == ADC_Interrupt_Enable
	SET_BIT(ADCSRA, ADCSRA_ADIE);
     f36:	a6 e2       	ldi	r26, 0x26	; 38
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e6 e2       	ldi	r30, 0x26	; 38
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	88 60       	ori	r24, 0x08	; 8
     f42:	8c 93       	st	X, r24
#endif


	/*Enable or Disable ADC Peripheral*/
#if ADC_Enabling == ADC_Enable
	SET_BIT(ADCSRA, ADCSRA_ADEN);
     f44:	a6 e2       	ldi	r26, 0x26	; 38
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e6 e2       	ldi	r30, 0x26	; 38
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	80 68       	ori	r24, 0x80	; 128
     f50:	8c 93       	st	X, r24

#elif ADC_Enabling == ADC_Disable
	CLR_BIT(ADCSRA, ADCSRA_ADEN);
#endif
}
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	08 95       	ret

00000f58 <ADC_u8GetReading>:
 * Input		: Channel Number, Pointer to put the Value in
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 ADC_u8GetReading(u8 Copy_u8Channel, u16 *Copy_u16DigitalValue)
{
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <ADC_u8GetReading+0x6>
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <ADC_u8GetReading+0x8>
     f60:	0f 92       	push	r0
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	8b 83       	std	Y+3, r24	; 0x03
     f68:	7d 83       	std	Y+5, r23	; 0x05
     f6a:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8Error = 0, Local_u8LowValue = 0;
     f6c:	1a 82       	std	Y+2, r1	; 0x02
     f6e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Channel > 31)
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	80 32       	cpi	r24, 0x20	; 32
     f74:	18 f0       	brcs	.+6      	; 0xf7c <ADC_u8GetReading+0x24>
	{
		Local_u8Error = 1;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	8a 83       	std	Y+2, r24	; 0x02
     f7a:	31 c0       	rjmp	.+98     	; 0xfde <ADC_u8GetReading+0x86>
	{
		/* the anding is for make the last 3 bits as it is with no change
		 * and make the first 5 bits with zeros
		 * then the ORing for add the value of first 3 bits according to the channel
		 */
		ADMUX &= 0xE0;
     f7c:	a7 e2       	ldi	r26, 0x27	; 39
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e7 e2       	ldi	r30, 0x27	; 39
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	80 7e       	andi	r24, 0xE0	; 224
     f88:	8c 93       	st	X, r24
		ADMUX |= Copy_u8Channel;
     f8a:	a7 e2       	ldi	r26, 0x27	; 39
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e7 e2       	ldi	r30, 0x27	; 39
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	90 81       	ld	r25, Z
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	89 2b       	or	r24, r25
     f98:	8c 93       	st	X, r24

		/*Start Conversion*/
		SET_BIT(ADCSRA, ADCSRA_ADSC);
     f9a:	a6 e2       	ldi	r26, 0x26	; 38
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e6 e2       	ldi	r30, 0x26	; 38
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	80 64       	ori	r24, 0x40	; 64
     fa6:	8c 93       	st	X, r24

		/* While we polling not Interrupting
		 * wait till the conversion be done
		 */
		while(!(GET_BIT(ADCSRA, ADCSRA_ADIF)));
     fa8:	e6 e2       	ldi	r30, 0x26	; 38
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	82 95       	swap	r24
     fb0:	8f 70       	andi	r24, 0x0F	; 15
     fb2:	88 2f       	mov	r24, r24
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	81 70       	andi	r24, 0x01	; 1
     fb8:	90 70       	andi	r25, 0x00	; 0
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	a9 f3       	breq	.-22     	; 0xfa8 <ADC_u8GetReading+0x50>

		/*Set the Flag to Clear*/
		SET_BIT(ADCSRA, ADCSRA_ADIF);
     fbe:	a6 e2       	ldi	r26, 0x26	; 38
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e6 e2       	ldi	r30, 0x26	; 38
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	80 61       	ori	r24, 0x10	; 16
     fca:	8c 93       	st	X, r24
			*Copy_u16DigitalValue = (Local_u8LowValue) | (ADCH << 8);
		}
		else
		{
			/*This mean Ignoring ADCL and GET ADCH bits 2 - 9*/
			*Copy_u16DigitalValue = ADCH;
     fcc:	e5 e2       	ldi	r30, 0x25	; 37
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	ec 81       	ldd	r30, Y+4	; 0x04
     fd8:	fd 81       	ldd	r31, Y+5	; 0x05
     fda:	91 83       	std	Z+1, r25	; 0x01
     fdc:	80 83       	st	Z, r24
		}
	}

	return Local_u8Error;
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
}
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <DIO_u8SetPortDirection>:
 * Input		: Port Number, Direction
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPortDirection(u8 Copy_u8PortNB, u8 Copy_u8Dir)
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <DIO_u8SetPortDirection+0x6>
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <DIO_u8SetPortDirection+0x8>
     ff8:	0f 92       	push	r0
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	8a 83       	std	Y+2, r24	; 0x02
    1000:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    1002:	19 82       	std	Y+1, r1	; 0x01
	}

	else
		{
			/*Switch for the PORT Number if it 0 -> 3 it is OK else return Error*/
			switch(Copy_u8PortNB)
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	3d 83       	std	Y+5, r19	; 0x05
    100c:	2c 83       	std	Y+4, r18	; 0x04
    100e:	8c 81       	ldd	r24, Y+4	; 0x04
    1010:	9d 81       	ldd	r25, Y+5	; 0x05
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	91 05       	cpc	r25, r1
    1016:	d1 f0       	breq	.+52     	; 0x104c <DIO_u8SetPortDirection+0x5c>
    1018:	2c 81       	ldd	r18, Y+4	; 0x04
    101a:	3d 81       	ldd	r19, Y+5	; 0x05
    101c:	22 30       	cpi	r18, 0x02	; 2
    101e:	31 05       	cpc	r19, r1
    1020:	2c f4       	brge	.+10     	; 0x102c <DIO_u8SetPortDirection+0x3c>
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	61 f0       	breq	.+24     	; 0x1042 <DIO_u8SetPortDirection+0x52>
    102a:	1f c0       	rjmp	.+62     	; 0x106a <DIO_u8SetPortDirection+0x7a>
    102c:	2c 81       	ldd	r18, Y+4	; 0x04
    102e:	3d 81       	ldd	r19, Y+5	; 0x05
    1030:	22 30       	cpi	r18, 0x02	; 2
    1032:	31 05       	cpc	r19, r1
    1034:	81 f0       	breq	.+32     	; 0x1056 <DIO_u8SetPortDirection+0x66>
    1036:	8c 81       	ldd	r24, Y+4	; 0x04
    1038:	9d 81       	ldd	r25, Y+5	; 0x05
    103a:	83 30       	cpi	r24, 0x03	; 3
    103c:	91 05       	cpc	r25, r1
    103e:	81 f0       	breq	.+32     	; 0x1060 <DIO_u8SetPortDirection+0x70>
    1040:	14 c0       	rjmp	.+40     	; 0x106a <DIO_u8SetPortDirection+0x7a>
			{
			case DIO_PORT_0:
				DDRA = Copy_u8Dir;
    1042:	ea e3       	ldi	r30, 0x3A	; 58
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	80 83       	st	Z, r24
    104a:	11 c0       	rjmp	.+34     	; 0x106e <DIO_u8SetPortDirection+0x7e>
				break;

			case DIO_PORT_1:
				DDRB = Copy_u8Dir;
    104c:	e7 e3       	ldi	r30, 0x37	; 55
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	80 83       	st	Z, r24
    1054:	0c c0       	rjmp	.+24     	; 0x106e <DIO_u8SetPortDirection+0x7e>
				break;

			case DIO_PORT_2:
				DDRC = Copy_u8Dir;
    1056:	e4 e3       	ldi	r30, 0x34	; 52
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	80 83       	st	Z, r24
    105e:	07 c0       	rjmp	.+14     	; 0x106e <DIO_u8SetPortDirection+0x7e>
				break;

			case DIO_PORT_3:
				DDRD = Copy_u8Dir;
    1060:	e1 e3       	ldi	r30, 0x31	; 49
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	80 83       	st	Z, r24
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_u8SetPortDirection+0x7e>
				break;

			default:
				Local_u8Error = 1;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}

	return Local_u8Error;
    106e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <DIO_u8SetPortValue>:
 * Input		: Port Number, Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPortValue(u8 Copy_u8PortNB, u8 Copy_u8Value)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	00 d0       	rcall	.+0      	; 0x1086 <DIO_u8SetPortValue+0x6>
    1086:	00 d0       	rcall	.+0      	; 0x1088 <DIO_u8SetPortValue+0x8>
    1088:	0f 92       	push	r0
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	8a 83       	std	Y+2, r24	; 0x02
    1090:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    1092:	19 82       	std	Y+1, r1	; 0x01
		Local_u8Error = 1;
	}
	else
		{
			/*Switch for the PORT Number if it 0 -> 3 it is OK else return Error*/
			switch(Copy_u8PortNB)
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	3d 83       	std	Y+5, r19	; 0x05
    109c:	2c 83       	std	Y+4, r18	; 0x04
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	9d 81       	ldd	r25, Y+5	; 0x05
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	91 05       	cpc	r25, r1
    10a6:	d1 f0       	breq	.+52     	; 0x10dc <DIO_u8SetPortValue+0x5c>
    10a8:	2c 81       	ldd	r18, Y+4	; 0x04
    10aa:	3d 81       	ldd	r19, Y+5	; 0x05
    10ac:	22 30       	cpi	r18, 0x02	; 2
    10ae:	31 05       	cpc	r19, r1
    10b0:	2c f4       	brge	.+10     	; 0x10bc <DIO_u8SetPortValue+0x3c>
    10b2:	8c 81       	ldd	r24, Y+4	; 0x04
    10b4:	9d 81       	ldd	r25, Y+5	; 0x05
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	61 f0       	breq	.+24     	; 0x10d2 <DIO_u8SetPortValue+0x52>
    10ba:	1f c0       	rjmp	.+62     	; 0x10fa <DIO_u8SetPortValue+0x7a>
    10bc:	2c 81       	ldd	r18, Y+4	; 0x04
    10be:	3d 81       	ldd	r19, Y+5	; 0x05
    10c0:	22 30       	cpi	r18, 0x02	; 2
    10c2:	31 05       	cpc	r19, r1
    10c4:	81 f0       	breq	.+32     	; 0x10e6 <DIO_u8SetPortValue+0x66>
    10c6:	8c 81       	ldd	r24, Y+4	; 0x04
    10c8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ca:	83 30       	cpi	r24, 0x03	; 3
    10cc:	91 05       	cpc	r25, r1
    10ce:	81 f0       	breq	.+32     	; 0x10f0 <DIO_u8SetPortValue+0x70>
    10d0:	14 c0       	rjmp	.+40     	; 0x10fa <DIO_u8SetPortValue+0x7a>
			{
			case DIO_PORT_0:
				PORTA = Copy_u8Value;
    10d2:	eb e3       	ldi	r30, 0x3B	; 59
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	80 83       	st	Z, r24
    10da:	11 c0       	rjmp	.+34     	; 0x10fe <DIO_u8SetPortValue+0x7e>
				break;

			case DIO_PORT_1:
				PORTB = Copy_u8Value;
    10dc:	e8 e3       	ldi	r30, 0x38	; 56
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	80 83       	st	Z, r24
    10e4:	0c c0       	rjmp	.+24     	; 0x10fe <DIO_u8SetPortValue+0x7e>
				break;

			case DIO_PORT_2:
				PORTC = Copy_u8Value;
    10e6:	e5 e3       	ldi	r30, 0x35	; 53
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	80 83       	st	Z, r24
    10ee:	07 c0       	rjmp	.+14     	; 0x10fe <DIO_u8SetPortValue+0x7e>
				break;

			case DIO_PORT_3:
				PORTD = Copy_u8Value;
    10f0:	e2 e3       	ldi	r30, 0x32	; 50
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	80 83       	st	Z, r24
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <DIO_u8SetPortValue+0x7e>
				break;

			default:
				Local_u8Error = 1;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}

	return Local_u8Error;
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <DIO_u8SetPinDirection>:
 * Input		: Port Number, Pin Number, Direction
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPinDirection(u8 Copy_u8PortNB, u8 Copy_u8PinNB, u8 Copy_u8Dir)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	00 d0       	rcall	.+0      	; 0x1116 <DIO_u8SetPinDirection+0x6>
    1116:	00 d0       	rcall	.+0      	; 0x1118 <DIO_u8SetPinDirection+0x8>
    1118:	00 d0       	rcall	.+0      	; 0x111a <DIO_u8SetPinDirection+0xa>
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	8a 83       	std	Y+2, r24	; 0x02
    1120:	6b 83       	std	Y+3, r22	; 0x03
    1122:	4c 83       	std	Y+4, r20	; 0x04
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    1124:	19 82       	std	Y+1, r1	; 0x01

	/*Check that the PIN Number is between 0 -> 7 else Return Local Error with ONE*/
	if(Copy_u8PinNB > DIO_PIN_7)
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	88 30       	cpi	r24, 0x08	; 8
    112a:	10 f0       	brcs	.+4      	; 0x1130 <DIO_u8SetPinDirection+0x20>
	{
		Local_u8Error = 1;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Check if the Direction is Input or Output Else return Local Error with one*/
	if((Copy_u8Dir != DIO_INPUT) && (Copy_u8Dir != DIO_OUTPUT))
    1130:	8c 81       	ldd	r24, Y+4	; 0x04
    1132:	88 23       	and	r24, r24
    1134:	31 f0       	breq	.+12     	; 0x1142 <DIO_u8SetPinDirection+0x32>
    1136:	8c 81       	ldd	r24, Y+4	; 0x04
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	19 f0       	breq	.+6      	; 0x1142 <DIO_u8SetPinDirection+0x32>
	{
		Local_u8Error = 1;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	ac c0       	rjmp	.+344    	; 0x129a <DIO_u8SetPinDirection+0x18a>
	}

	/*Else Check for the PORT number is between 0 -> 3*/
	else
	{
		switch(Copy_u8PortNB)
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	3e 83       	std	Y+6, r19	; 0x06
    114a:	2d 83       	std	Y+5, r18	; 0x05
    114c:	6d 81       	ldd	r22, Y+5	; 0x05
    114e:	7e 81       	ldd	r23, Y+6	; 0x06
    1150:	61 30       	cpi	r22, 0x01	; 1
    1152:	71 05       	cpc	r23, r1
    1154:	d1 f1       	breq	.+116    	; 0x11ca <DIO_u8SetPinDirection+0xba>
    1156:	8d 81       	ldd	r24, Y+5	; 0x05
    1158:	9e 81       	ldd	r25, Y+6	; 0x06
    115a:	82 30       	cpi	r24, 0x02	; 2
    115c:	91 05       	cpc	r25, r1
    115e:	34 f4       	brge	.+12     	; 0x116c <DIO_u8SetPinDirection+0x5c>
    1160:	2d 81       	ldd	r18, Y+5	; 0x05
    1162:	3e 81       	ldd	r19, Y+6	; 0x06
    1164:	21 15       	cp	r18, r1
    1166:	31 05       	cpc	r19, r1
    1168:	71 f0       	breq	.+28     	; 0x1186 <DIO_u8SetPinDirection+0x76>
    116a:	95 c0       	rjmp	.+298    	; 0x1296 <DIO_u8SetPinDirection+0x186>
    116c:	6d 81       	ldd	r22, Y+5	; 0x05
    116e:	7e 81       	ldd	r23, Y+6	; 0x06
    1170:	62 30       	cpi	r22, 0x02	; 2
    1172:	71 05       	cpc	r23, r1
    1174:	09 f4       	brne	.+2      	; 0x1178 <DIO_u8SetPinDirection+0x68>
    1176:	4b c0       	rjmp	.+150    	; 0x120e <DIO_u8SetPinDirection+0xfe>
    1178:	8d 81       	ldd	r24, Y+5	; 0x05
    117a:	9e 81       	ldd	r25, Y+6	; 0x06
    117c:	83 30       	cpi	r24, 0x03	; 3
    117e:	91 05       	cpc	r25, r1
    1180:	09 f4       	brne	.+2      	; 0x1184 <DIO_u8SetPinDirection+0x74>
    1182:	67 c0       	rjmp	.+206    	; 0x1252 <DIO_u8SetPinDirection+0x142>
    1184:	88 c0       	rjmp	.+272    	; 0x1296 <DIO_u8SetPinDirection+0x186>
		{
		case DIO_PORT_0:
			ASSIGN_BIT(DDRA, Copy_u8PinNB, Copy_u8Dir);
    1186:	aa e3       	ldi	r26, 0x3A	; 58
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ea e3       	ldi	r30, 0x3A	; 58
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO_u8SetPinDirection+0x92>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	2a 95       	dec	r18
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <DIO_u8SetPinDirection+0x8e>
    11a6:	80 95       	com	r24
    11a8:	48 23       	and	r20, r24
    11aa:	8c 81       	ldd	r24, Y+4	; 0x04
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	b9 01       	movw	r22, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <DIO_u8SetPinDirection+0xae>
    11ba:	66 0f       	add	r22, r22
    11bc:	77 1f       	adc	r23, r23
    11be:	8a 95       	dec	r24
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <DIO_u8SetPinDirection+0xaa>
    11c2:	cb 01       	movw	r24, r22
    11c4:	84 2b       	or	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	68 c0       	rjmp	.+208    	; 0x129a <DIO_u8SetPinDirection+0x18a>
			break;

		case DIO_PORT_1:
			ASSIGN_BIT(DDRB, Copy_u8PinNB, Copy_u8Dir);
    11ca:	a7 e3       	ldi	r26, 0x37	; 55
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e7 e3       	ldi	r30, 0x37	; 55
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <DIO_u8SetPinDirection+0xd6>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	2a 95       	dec	r18
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <DIO_u8SetPinDirection+0xd2>
    11ea:	80 95       	com	r24
    11ec:	48 23       	and	r20, r24
    11ee:	8c 81       	ldd	r24, Y+4	; 0x04
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	b9 01       	movw	r22, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_u8SetPinDirection+0xf2>
    11fe:	66 0f       	add	r22, r22
    1200:	77 1f       	adc	r23, r23
    1202:	8a 95       	dec	r24
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <DIO_u8SetPinDirection+0xee>
    1206:	cb 01       	movw	r24, r22
    1208:	84 2b       	or	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	46 c0       	rjmp	.+140    	; 0x129a <DIO_u8SetPinDirection+0x18a>
			break;

		case DIO_PORT_2:
			ASSIGN_BIT(DDRC, Copy_u8PinNB, Copy_u8Dir);
    120e:	a4 e3       	ldi	r26, 0x34	; 52
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e4 e3       	ldi	r30, 0x34	; 52
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 c0       	rjmp	.+4      	; 0x122a <DIO_u8SetPinDirection+0x11a>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	2a 95       	dec	r18
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <DIO_u8SetPinDirection+0x116>
    122e:	80 95       	com	r24
    1230:	48 23       	and	r20, r24
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	88 2f       	mov	r24, r24
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	b9 01       	movw	r22, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_u8SetPinDirection+0x136>
    1242:	66 0f       	add	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	8a 95       	dec	r24
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_u8SetPinDirection+0x132>
    124a:	cb 01       	movw	r24, r22
    124c:	84 2b       	or	r24, r20
    124e:	8c 93       	st	X, r24
    1250:	24 c0       	rjmp	.+72     	; 0x129a <DIO_u8SetPinDirection+0x18a>
			break;

		case DIO_PORT_3:
			ASSIGN_BIT(DDRD, Copy_u8PinNB, Copy_u8Dir);
    1252:	a1 e3       	ldi	r26, 0x31	; 49
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e1 e3       	ldi	r30, 0x31	; 49
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_u8SetPinDirection+0x15e>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	2a 95       	dec	r18
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_u8SetPinDirection+0x15a>
    1272:	80 95       	com	r24
    1274:	48 23       	and	r20, r24
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	88 2f       	mov	r24, r24
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	b9 01       	movw	r22, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_u8SetPinDirection+0x17a>
    1286:	66 0f       	add	r22, r22
    1288:	77 1f       	adc	r23, r23
    128a:	8a 95       	dec	r24
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_u8SetPinDirection+0x176>
    128e:	cb 01       	movw	r24, r22
    1290:	84 2b       	or	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_u8SetPinDirection+0x18a>
			break;

		default:
			Local_u8Error = 1;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_u8Error;
    129a:	89 81       	ldd	r24, Y+1	; 0x01
}
    129c:	26 96       	adiw	r28, 0x06	; 6
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	f8 94       	cli
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <DIO_u8SetPinValue>:
 * Input		: Port Number, Pin Number, Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPinValue(u8 Copy_u8PortNB, u8 Copy_u8PinNB, u8 Copy_u8Value)
{
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <DIO_u8SetPinValue+0x6>
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <DIO_u8SetPinValue+0x8>
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <DIO_u8SetPinValue+0xa>
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	8a 83       	std	Y+2, r24	; 0x02
    12be:	6b 83       	std	Y+3, r22	; 0x03
    12c0:	4c 83       	std	Y+4, r20	; 0x04
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    12c2:	19 82       	std	Y+1, r1	; 0x01

	/*Check that the PIN Number is between 0 -> 7 else Return Local Error with ONE*/
	if(Copy_u8PinNB > DIO_PIN_7)
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	88 30       	cpi	r24, 0x08	; 8
    12c8:	10 f0       	brcs	.+4      	; 0x12ce <DIO_u8SetPinValue+0x20>
	{
		Local_u8Error = 1;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Check if the Direction is Input or Output Else return Local Error with one*/
	if((Copy_u8Value != DIO_HIGH) && (Copy_u8Value != DIO_LOW))
    12ce:	8c 81       	ldd	r24, Y+4	; 0x04
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	31 f0       	breq	.+12     	; 0x12e0 <DIO_u8SetPinValue+0x32>
    12d4:	8c 81       	ldd	r24, Y+4	; 0x04
    12d6:	88 23       	and	r24, r24
    12d8:	19 f0       	breq	.+6      	; 0x12e0 <DIO_u8SetPinValue+0x32>
	{
		Local_u8Error = 1;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	ac c0       	rjmp	.+344    	; 0x1438 <DIO_u8SetPinValue+0x18a>
	}

	/*Else Check for the PORT number is between 0 -> 3*/
	else
	{
		switch(Copy_u8PortNB)
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	3e 83       	std	Y+6, r19	; 0x06
    12e8:	2d 83       	std	Y+5, r18	; 0x05
    12ea:	6d 81       	ldd	r22, Y+5	; 0x05
    12ec:	7e 81       	ldd	r23, Y+6	; 0x06
    12ee:	61 30       	cpi	r22, 0x01	; 1
    12f0:	71 05       	cpc	r23, r1
    12f2:	d1 f1       	breq	.+116    	; 0x1368 <DIO_u8SetPinValue+0xba>
    12f4:	8d 81       	ldd	r24, Y+5	; 0x05
    12f6:	9e 81       	ldd	r25, Y+6	; 0x06
    12f8:	82 30       	cpi	r24, 0x02	; 2
    12fa:	91 05       	cpc	r25, r1
    12fc:	34 f4       	brge	.+12     	; 0x130a <DIO_u8SetPinValue+0x5c>
    12fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1300:	3e 81       	ldd	r19, Y+6	; 0x06
    1302:	21 15       	cp	r18, r1
    1304:	31 05       	cpc	r19, r1
    1306:	71 f0       	breq	.+28     	; 0x1324 <DIO_u8SetPinValue+0x76>
    1308:	95 c0       	rjmp	.+298    	; 0x1434 <DIO_u8SetPinValue+0x186>
    130a:	6d 81       	ldd	r22, Y+5	; 0x05
    130c:	7e 81       	ldd	r23, Y+6	; 0x06
    130e:	62 30       	cpi	r22, 0x02	; 2
    1310:	71 05       	cpc	r23, r1
    1312:	09 f4       	brne	.+2      	; 0x1316 <DIO_u8SetPinValue+0x68>
    1314:	4b c0       	rjmp	.+150    	; 0x13ac <DIO_u8SetPinValue+0xfe>
    1316:	8d 81       	ldd	r24, Y+5	; 0x05
    1318:	9e 81       	ldd	r25, Y+6	; 0x06
    131a:	83 30       	cpi	r24, 0x03	; 3
    131c:	91 05       	cpc	r25, r1
    131e:	09 f4       	brne	.+2      	; 0x1322 <DIO_u8SetPinValue+0x74>
    1320:	67 c0       	rjmp	.+206    	; 0x13f0 <DIO_u8SetPinValue+0x142>
    1322:	88 c0       	rjmp	.+272    	; 0x1434 <DIO_u8SetPinValue+0x186>
		{
		case DIO_PORT_0:
			ASSIGN_BIT(PORTA, Copy_u8PinNB, Copy_u8Value);
    1324:	ab e3       	ldi	r26, 0x3B	; 59
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	eb e3       	ldi	r30, 0x3B	; 59
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_u8SetPinValue+0x92>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	2a 95       	dec	r18
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_u8SetPinValue+0x8e>
    1344:	80 95       	com	r24
    1346:	48 23       	and	r20, r24
    1348:	8c 81       	ldd	r24, Y+4	; 0x04
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	88 2f       	mov	r24, r24
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	b9 01       	movw	r22, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <DIO_u8SetPinValue+0xae>
    1358:	66 0f       	add	r22, r22
    135a:	77 1f       	adc	r23, r23
    135c:	8a 95       	dec	r24
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <DIO_u8SetPinValue+0xaa>
    1360:	cb 01       	movw	r24, r22
    1362:	84 2b       	or	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	68 c0       	rjmp	.+208    	; 0x1438 <DIO_u8SetPinValue+0x18a>
			break;

		case DIO_PORT_1:
			ASSIGN_BIT(PORTB, Copy_u8PinNB, Copy_u8Value);
    1368:	a8 e3       	ldi	r26, 0x38	; 56
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e8 e3       	ldi	r30, 0x38	; 56
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <DIO_u8SetPinValue+0xd6>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	2a 95       	dec	r18
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <DIO_u8SetPinValue+0xd2>
    1388:	80 95       	com	r24
    138a:	48 23       	and	r20, r24
    138c:	8c 81       	ldd	r24, Y+4	; 0x04
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	b9 01       	movw	r22, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_u8SetPinValue+0xf2>
    139c:	66 0f       	add	r22, r22
    139e:	77 1f       	adc	r23, r23
    13a0:	8a 95       	dec	r24
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_u8SetPinValue+0xee>
    13a4:	cb 01       	movw	r24, r22
    13a6:	84 2b       	or	r24, r20
    13a8:	8c 93       	st	X, r24
    13aa:	46 c0       	rjmp	.+140    	; 0x1438 <DIO_u8SetPinValue+0x18a>
			break;

		case DIO_PORT_2:
			ASSIGN_BIT(PORTC, Copy_u8PinNB, Copy_u8Value);
    13ac:	a5 e3       	ldi	r26, 0x35	; 53
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e5 e3       	ldi	r30, 0x35	; 53
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	48 2f       	mov	r20, r24
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_u8SetPinValue+0x11a>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	2a 95       	dec	r18
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO_u8SetPinValue+0x116>
    13cc:	80 95       	com	r24
    13ce:	48 23       	and	r20, r24
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	88 2f       	mov	r24, r24
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	b9 01       	movw	r22, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <DIO_u8SetPinValue+0x136>
    13e0:	66 0f       	add	r22, r22
    13e2:	77 1f       	adc	r23, r23
    13e4:	8a 95       	dec	r24
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <DIO_u8SetPinValue+0x132>
    13e8:	cb 01       	movw	r24, r22
    13ea:	84 2b       	or	r24, r20
    13ec:	8c 93       	st	X, r24
    13ee:	24 c0       	rjmp	.+72     	; 0x1438 <DIO_u8SetPinValue+0x18a>
			break;

		case DIO_PORT_3:
			ASSIGN_BIT(PORTD, Copy_u8PinNB, Copy_u8Value);
    13f0:	a2 e3       	ldi	r26, 0x32	; 50
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e2 e3       	ldi	r30, 0x32	; 50
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 c0       	rjmp	.+4      	; 0x140c <DIO_u8SetPinValue+0x15e>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	2a 95       	dec	r18
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <DIO_u8SetPinValue+0x15a>
    1410:	80 95       	com	r24
    1412:	48 23       	and	r20, r24
    1414:	8c 81       	ldd	r24, Y+4	; 0x04
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	b9 01       	movw	r22, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_u8SetPinValue+0x17a>
    1424:	66 0f       	add	r22, r22
    1426:	77 1f       	adc	r23, r23
    1428:	8a 95       	dec	r24
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <DIO_u8SetPinValue+0x176>
    142c:	cb 01       	movw	r24, r22
    142e:	84 2b       	or	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_u8SetPinValue+0x18a>
			break;

		default:
			Local_u8Error = 1;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_u8Error;
    1438:	89 81       	ldd	r24, Y+1	; 0x01
}
    143a:	26 96       	adiw	r28, 0x06	; 6
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <DIO_u8GetPortValue>:
 * Input		: Port Number, Pointer for a Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8GetPortValue(u8 Copy_u8PortNB, u8 * Copy_u8Value)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	00 d0       	rcall	.+0      	; 0x1452 <DIO_u8GetPortValue+0x6>
    1452:	00 d0       	rcall	.+0      	; 0x1454 <DIO_u8GetPortValue+0x8>
    1454:	00 d0       	rcall	.+0      	; 0x1456 <DIO_u8GetPortValue+0xa>
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	8a 83       	std	Y+2, r24	; 0x02
    145c:	7c 83       	std	Y+4, r23	; 0x04
    145e:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    1460:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Value == NULL_POINTER)
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	19 f4       	brne	.+6      	; 0x1470 <DIO_u8GetPortValue+0x24>
	{
		Local_u8Error = 1;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	3d c0       	rjmp	.+122    	; 0x14ea <DIO_u8GetPortValue+0x9e>
	}

	else
	{
		/*Switch for the PORT Number if it 0 -> 3 it is OK else return Error*/
		switch(Copy_u8PortNB)
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	3e 83       	std	Y+6, r19	; 0x06
    1478:	2d 83       	std	Y+5, r18	; 0x05
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	91 05       	cpc	r25, r1
    1482:	e1 f0       	breq	.+56     	; 0x14bc <DIO_u8GetPortValue+0x70>
    1484:	2d 81       	ldd	r18, Y+5	; 0x05
    1486:	3e 81       	ldd	r19, Y+6	; 0x06
    1488:	22 30       	cpi	r18, 0x02	; 2
    148a:	31 05       	cpc	r19, r1
    148c:	2c f4       	brge	.+10     	; 0x1498 <DIO_u8GetPortValue+0x4c>
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	61 f0       	breq	.+24     	; 0x14ae <DIO_u8GetPortValue+0x62>
    1496:	27 c0       	rjmp	.+78     	; 0x14e6 <DIO_u8GetPortValue+0x9a>
    1498:	2d 81       	ldd	r18, Y+5	; 0x05
    149a:	3e 81       	ldd	r19, Y+6	; 0x06
    149c:	22 30       	cpi	r18, 0x02	; 2
    149e:	31 05       	cpc	r19, r1
    14a0:	a1 f0       	breq	.+40     	; 0x14ca <DIO_u8GetPortValue+0x7e>
    14a2:	8d 81       	ldd	r24, Y+5	; 0x05
    14a4:	9e 81       	ldd	r25, Y+6	; 0x06
    14a6:	83 30       	cpi	r24, 0x03	; 3
    14a8:	91 05       	cpc	r25, r1
    14aa:	b1 f0       	breq	.+44     	; 0x14d8 <DIO_u8GetPortValue+0x8c>
    14ac:	1c c0       	rjmp	.+56     	; 0x14e6 <DIO_u8GetPortValue+0x9a>
		{
		case DIO_PORT_0:
			*Copy_u8Value = PINA;
    14ae:	e9 e3       	ldi	r30, 0x39	; 57
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	eb 81       	ldd	r30, Y+3	; 0x03
    14b6:	fc 81       	ldd	r31, Y+4	; 0x04
    14b8:	80 83       	st	Z, r24
    14ba:	17 c0       	rjmp	.+46     	; 0x14ea <DIO_u8GetPortValue+0x9e>
			break;

		case DIO_PORT_1:
			*Copy_u8Value = PINB;
    14bc:	e6 e3       	ldi	r30, 0x36	; 54
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	eb 81       	ldd	r30, Y+3	; 0x03
    14c4:	fc 81       	ldd	r31, Y+4	; 0x04
    14c6:	80 83       	st	Z, r24
    14c8:	10 c0       	rjmp	.+32     	; 0x14ea <DIO_u8GetPortValue+0x9e>
			break;

		case DIO_PORT_2:
			*Copy_u8Value = PINC;
    14ca:	e3 e3       	ldi	r30, 0x33	; 51
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	eb 81       	ldd	r30, Y+3	; 0x03
    14d2:	fc 81       	ldd	r31, Y+4	; 0x04
    14d4:	80 83       	st	Z, r24
    14d6:	09 c0       	rjmp	.+18     	; 0x14ea <DIO_u8GetPortValue+0x9e>
			break;

		case DIO_PORT_3:
			*Copy_u8Value = PIND;
    14d8:	e0 e3       	ldi	r30, 0x30	; 48
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	eb 81       	ldd	r30, Y+3	; 0x03
    14e0:	fc 81       	ldd	r31, Y+4	; 0x04
    14e2:	80 83       	st	Z, r24
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_u8GetPortValue+0x9e>
			break;

		default:
			Local_u8Error = 1;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

	}
	return Local_u8Error;
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ec:	26 96       	adiw	r28, 0x06	; 6
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <DIO_u8GetPinValue>:
 * Input		: Port Number, Pin Number, Pointer for a Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8GetPinValue(u8 Copy_u8PortNB, u8 Copy_u8PinNB, u8 * Copy_u8Value)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	27 97       	sbiw	r28, 0x07	; 7
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	8a 83       	std	Y+2, r24	; 0x02
    1514:	6b 83       	std	Y+3, r22	; 0x03
    1516:	5d 83       	std	Y+5, r21	; 0x05
    1518:	4c 83       	std	Y+4, r20	; 0x04
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    151a:	19 82       	std	Y+1, r1	; 0x01

	/*Check that the PIN Number is between 0 -> 7 else Return Local Error with ONE*/
	if(Copy_u8Value == NULL_POINTER)
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	9d 81       	ldd	r25, Y+5	; 0x05
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	11 f4       	brne	.+4      	; 0x1528 <DIO_u8GetPinValue+0x2a>
	{
		Local_u8Error = 1;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	89 83       	std	Y+1, r24	; 0x01
	}
	if(Copy_u8PinNB > DIO_PIN_7)
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	88 30       	cpi	r24, 0x08	; 8
    152c:	18 f0       	brcs	.+6      	; 0x1534 <DIO_u8GetPinValue+0x36>
	{
		Local_u8Error = 1;
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	73 c0       	rjmp	.+230    	; 0x161a <DIO_u8GetPinValue+0x11c>
	}

	else
	{
		switch(Copy_u8PortNB)
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	3f 83       	std	Y+7, r19	; 0x07
    153c:	2e 83       	std	Y+6, r18	; 0x06
    153e:	4e 81       	ldd	r20, Y+6	; 0x06
    1540:	5f 81       	ldd	r21, Y+7	; 0x07
    1542:	41 30       	cpi	r20, 0x01	; 1
    1544:	51 05       	cpc	r21, r1
    1546:	59 f1       	breq	.+86     	; 0x159e <DIO_u8GetPinValue+0xa0>
    1548:	8e 81       	ldd	r24, Y+6	; 0x06
    154a:	9f 81       	ldd	r25, Y+7	; 0x07
    154c:	82 30       	cpi	r24, 0x02	; 2
    154e:	91 05       	cpc	r25, r1
    1550:	34 f4       	brge	.+12     	; 0x155e <DIO_u8GetPinValue+0x60>
    1552:	2e 81       	ldd	r18, Y+6	; 0x06
    1554:	3f 81       	ldd	r19, Y+7	; 0x07
    1556:	21 15       	cp	r18, r1
    1558:	31 05       	cpc	r19, r1
    155a:	69 f0       	breq	.+26     	; 0x1576 <DIO_u8GetPinValue+0x78>
    155c:	5c c0       	rjmp	.+184    	; 0x1616 <DIO_u8GetPinValue+0x118>
    155e:	4e 81       	ldd	r20, Y+6	; 0x06
    1560:	5f 81       	ldd	r21, Y+7	; 0x07
    1562:	42 30       	cpi	r20, 0x02	; 2
    1564:	51 05       	cpc	r21, r1
    1566:	79 f1       	breq	.+94     	; 0x15c6 <DIO_u8GetPinValue+0xc8>
    1568:	8e 81       	ldd	r24, Y+6	; 0x06
    156a:	9f 81       	ldd	r25, Y+7	; 0x07
    156c:	83 30       	cpi	r24, 0x03	; 3
    156e:	91 05       	cpc	r25, r1
    1570:	09 f4       	brne	.+2      	; 0x1574 <DIO_u8GetPinValue+0x76>
    1572:	3d c0       	rjmp	.+122    	; 0x15ee <DIO_u8GetPinValue+0xf0>
    1574:	50 c0       	rjmp	.+160    	; 0x1616 <DIO_u8GetPinValue+0x118>
		{
		case DIO_PORT_0:
			*Copy_u8Value = GET_BIT(PINA, Copy_u8PinNB);
    1576:	e9 e3       	ldi	r30, 0x39	; 57
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	88 2f       	mov	r24, r24
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	a9 01       	movw	r20, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <DIO_u8GetPinValue+0x90>
    158a:	55 95       	asr	r21
    158c:	47 95       	ror	r20
    158e:	8a 95       	dec	r24
    1590:	e2 f7       	brpl	.-8      	; 0x158a <DIO_u8GetPinValue+0x8c>
    1592:	ca 01       	movw	r24, r20
    1594:	81 70       	andi	r24, 0x01	; 1
    1596:	ec 81       	ldd	r30, Y+4	; 0x04
    1598:	fd 81       	ldd	r31, Y+5	; 0x05
    159a:	80 83       	st	Z, r24
    159c:	3e c0       	rjmp	.+124    	; 0x161a <DIO_u8GetPinValue+0x11c>
			break;

		case DIO_PORT_1:
			*Copy_u8Value = GET_BIT(PINB, Copy_u8PinNB);
    159e:	e6 e3       	ldi	r30, 0x36	; 54
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	a9 01       	movw	r20, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <DIO_u8GetPinValue+0xb8>
    15b2:	55 95       	asr	r21
    15b4:	47 95       	ror	r20
    15b6:	8a 95       	dec	r24
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <DIO_u8GetPinValue+0xb4>
    15ba:	ca 01       	movw	r24, r20
    15bc:	81 70       	andi	r24, 0x01	; 1
    15be:	ec 81       	ldd	r30, Y+4	; 0x04
    15c0:	fd 81       	ldd	r31, Y+5	; 0x05
    15c2:	80 83       	st	Z, r24
    15c4:	2a c0       	rjmp	.+84     	; 0x161a <DIO_u8GetPinValue+0x11c>
			break;

		case DIO_PORT_2:
			*Copy_u8Value = GET_BIT(PINC, Copy_u8PinNB);
    15c6:	e3 e3       	ldi	r30, 0x33	; 51
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	88 2f       	mov	r24, r24
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	a9 01       	movw	r20, r18
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <DIO_u8GetPinValue+0xe0>
    15da:	55 95       	asr	r21
    15dc:	47 95       	ror	r20
    15de:	8a 95       	dec	r24
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <DIO_u8GetPinValue+0xdc>
    15e2:	ca 01       	movw	r24, r20
    15e4:	81 70       	andi	r24, 0x01	; 1
    15e6:	ec 81       	ldd	r30, Y+4	; 0x04
    15e8:	fd 81       	ldd	r31, Y+5	; 0x05
    15ea:	80 83       	st	Z, r24
    15ec:	16 c0       	rjmp	.+44     	; 0x161a <DIO_u8GetPinValue+0x11c>
			break;

		case DIO_PORT_3:
			*Copy_u8Value = GET_BIT(PIND, Copy_u8PinNB);
    15ee:	e0 e3       	ldi	r30, 0x30	; 48
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	a9 01       	movw	r20, r18
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <DIO_u8GetPinValue+0x108>
    1602:	55 95       	asr	r21
    1604:	47 95       	ror	r20
    1606:	8a 95       	dec	r24
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <DIO_u8GetPinValue+0x104>
    160a:	ca 01       	movw	r24, r20
    160c:	81 70       	andi	r24, 0x01	; 1
    160e:	ec 81       	ldd	r30, Y+4	; 0x04
    1610:	fd 81       	ldd	r31, Y+5	; 0x05
    1612:	80 83       	st	Z, r24
    1614:	02 c0       	rjmp	.+4      	; 0x161a <DIO_u8GetPinValue+0x11c>
			break;

		default:
			Local_u8Error = 1;
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return Local_u8Error;
    161a:	89 81       	ldd	r24, Y+1	; 0x01
}
    161c:	27 96       	adiw	r28, 0x07	; 7
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <DIO_u8TogglePinValue>:
 * Input		: Port Number, Pin Number
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8TogglePinValue(u8 Copy_u8PortNB, u8 Copy_u8PinNB)
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	00 d0       	rcall	.+0      	; 0x1634 <DIO_u8TogglePinValue+0x6>
    1634:	00 d0       	rcall	.+0      	; 0x1636 <DIO_u8TogglePinValue+0x8>
    1636:	0f 92       	push	r0
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	8a 83       	std	Y+2, r24	; 0x02
    163e:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    1640:	19 82       	std	Y+1, r1	; 0x01

	/*Check that the PIN Number is between 0 -> 7 else Return Local Error with ONE*/
	if(Copy_u8PinNB > DIO_PIN_7 || Copy_u8PortNB > 3)
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	88 30       	cpi	r24, 0x08	; 8
    1646:	18 f4       	brcc	.+6      	; 0x164e <DIO_u8TogglePinValue+0x20>
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	84 30       	cpi	r24, 0x04	; 4
    164c:	18 f0       	brcs	.+6      	; 0x1654 <DIO_u8TogglePinValue+0x26>
	{
		Local_u8Error = 1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	71 c0       	rjmp	.+226    	; 0x1736 <DIO_u8TogglePinValue+0x108>
	}

	/*Else Check for the PORT number is between 0 -> 3*/
	else
	{
		switch(Copy_u8PortNB)
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	3d 83       	std	Y+5, r19	; 0x05
    165c:	2c 83       	std	Y+4, r18	; 0x04
    165e:	8c 81       	ldd	r24, Y+4	; 0x04
    1660:	9d 81       	ldd	r25, Y+5	; 0x05
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	91 05       	cpc	r25, r1
    1666:	49 f1       	breq	.+82     	; 0x16ba <DIO_u8TogglePinValue+0x8c>
    1668:	2c 81       	ldd	r18, Y+4	; 0x04
    166a:	3d 81       	ldd	r19, Y+5	; 0x05
    166c:	22 30       	cpi	r18, 0x02	; 2
    166e:	31 05       	cpc	r19, r1
    1670:	2c f4       	brge	.+10     	; 0x167c <DIO_u8TogglePinValue+0x4e>
    1672:	8c 81       	ldd	r24, Y+4	; 0x04
    1674:	9d 81       	ldd	r25, Y+5	; 0x05
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	61 f0       	breq	.+24     	; 0x1692 <DIO_u8TogglePinValue+0x64>
    167a:	5b c0       	rjmp	.+182    	; 0x1732 <DIO_u8TogglePinValue+0x104>
    167c:	2c 81       	ldd	r18, Y+4	; 0x04
    167e:	3d 81       	ldd	r19, Y+5	; 0x05
    1680:	22 30       	cpi	r18, 0x02	; 2
    1682:	31 05       	cpc	r19, r1
    1684:	71 f1       	breq	.+92     	; 0x16e2 <DIO_u8TogglePinValue+0xb4>
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	9d 81       	ldd	r25, Y+5	; 0x05
    168a:	83 30       	cpi	r24, 0x03	; 3
    168c:	91 05       	cpc	r25, r1
    168e:	e9 f1       	breq	.+122    	; 0x170a <DIO_u8TogglePinValue+0xdc>
    1690:	50 c0       	rjmp	.+160    	; 0x1732 <DIO_u8TogglePinValue+0x104>
		{
		case DIO_PORT_0:
			TOGGLE_BIT(PORTA, Copy_u8PinNB);
    1692:	ab e3       	ldi	r26, 0x3B	; 59
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	eb e3       	ldi	r30, 0x3B	; 59
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_u8TogglePinValue+0x82>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_u8TogglePinValue+0x7e>
    16b4:	84 27       	eor	r24, r20
    16b6:	8c 93       	st	X, r24
    16b8:	3e c0       	rjmp	.+124    	; 0x1736 <DIO_u8TogglePinValue+0x108>
			break;

		case DIO_PORT_1:
			TOGGLE_BIT(PORTB, Copy_u8PinNB);
    16ba:	a8 e3       	ldi	r26, 0x38	; 56
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e8 e3       	ldi	r30, 0x38	; 56
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <DIO_u8TogglePinValue+0xaa>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <DIO_u8TogglePinValue+0xa6>
    16dc:	84 27       	eor	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	2a c0       	rjmp	.+84     	; 0x1736 <DIO_u8TogglePinValue+0x108>
			break;

		case DIO_PORT_2:
			TOGGLE_BIT(PORTC, Copy_u8PinNB);
    16e2:	a5 e3       	ldi	r26, 0x35	; 53
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e5 e3       	ldi	r30, 0x35	; 53
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <DIO_u8TogglePinValue+0xd2>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <DIO_u8TogglePinValue+0xce>
    1704:	84 27       	eor	r24, r20
    1706:	8c 93       	st	X, r24
    1708:	16 c0       	rjmp	.+44     	; 0x1736 <DIO_u8TogglePinValue+0x108>
			break;

		case DIO_PORT_3:
			TOGGLE_BIT(PORTD, Copy_u8PinNB);
    170a:	a2 e3       	ldi	r26, 0x32	; 50
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e2 e3       	ldi	r30, 0x32	; 50
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 2e       	mov	r0, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_u8TogglePinValue+0xfa>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	0a 94       	dec	r0
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <DIO_u8TogglePinValue+0xf6>
    172c:	84 27       	eor	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <DIO_u8TogglePinValue+0x108>
			break;

		default:
			Local_u8Error = 1;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_u8Error;
    1736:	89 81       	ldd	r24, Y+1	; 0x01
}
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <LCD_voidWriteCommand>:
/* Description	: Send a Command to LCD through the Data PORT
 * Input		: Command
 * Output		: Non
 */
void LCD_voidWriteCommand(u8 Copy_u8Command)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	2f 97       	sbiw	r28, 0x0f	; 15
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	8f 87       	std	Y+15, r24	; 0x0f
	/*Make Sure that the Enable PIN is LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    175e:	82 e0       	ldi	r24, 0x02	; 2
    1760:	62 e0       	ldi	r22, 0x02	; 2
    1762:	40 e0       	ldi	r20, 0x00	; 0
    1764:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_u8SetPinValue>

	/*Make Sure that the Register Select PIN is LOW as (RS -> LOW for Command) (RS -> HIGH for Data)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_LOW);
    1768:	82 e0       	ldi	r24, 0x02	; 2
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	40 e0       	ldi	r20, 0x00	; 0
    176e:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_u8SetPinValue>

	/*Make Sure that the Read Write PIN is LOW as (RW -> LOW for Write) (RW -> HIGH for Read)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_LOW);
    1772:	82 e0       	ldi	r24, 0x02	; 2
    1774:	61 e0       	ldi	r22, 0x01	; 1
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_u8SetPinValue>

	/*Send the Command on Data Pins D0 -> D7*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Command);
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1780:	0e 94 40 08 	call	0x1080	; 0x1080 <DIO_u8SetPortValue>

	/*Enable Sequence*/
	/*Make the Enable Pin HIGH*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_HIGH);
    1784:	82 e0       	ldi	r24, 0x02	; 2
    1786:	62 e0       	ldi	r22, 0x02	; 2
    1788:	41 e0       	ldi	r20, 0x01	; 1
    178a:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_u8SetPinValue>
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	a0 e0       	ldi	r26, 0x00	; 0
    1794:	b0 e4       	ldi	r27, 0x40	; 64
    1796:	8b 87       	std	Y+11, r24	; 0x0b
    1798:	9c 87       	std	Y+12, r25	; 0x0c
    179a:	ad 87       	std	Y+13, r26	; 0x0d
    179c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179e:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	4a ef       	ldi	r20, 0xFA	; 250
    17ac:	54 e4       	ldi	r21, 0x44	; 68
    17ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	8f 83       	std	Y+7, r24	; 0x07
    17b8:	98 87       	std	Y+8, r25	; 0x08
    17ba:	a9 87       	std	Y+9, r26	; 0x09
    17bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17be:	6f 81       	ldd	r22, Y+7	; 0x07
    17c0:	78 85       	ldd	r23, Y+8	; 0x08
    17c2:	89 85       	ldd	r24, Y+9	; 0x09
    17c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e8       	ldi	r20, 0x80	; 128
    17cc:	5f e3       	ldi	r21, 0x3F	; 63
    17ce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17d2:	88 23       	and	r24, r24
    17d4:	2c f4       	brge	.+10     	; 0x17e0 <LCD_voidWriteCommand+0x98>
		__ticks = 1;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	9e 83       	std	Y+6, r25	; 0x06
    17dc:	8d 83       	std	Y+5, r24	; 0x05
    17de:	3f c0       	rjmp	.+126    	; 0x185e <LCD_voidWriteCommand+0x116>
	else if (__tmp > 65535)
    17e0:	6f 81       	ldd	r22, Y+7	; 0x07
    17e2:	78 85       	ldd	r23, Y+8	; 0x08
    17e4:	89 85       	ldd	r24, Y+9	; 0x09
    17e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	3f ef       	ldi	r19, 0xFF	; 255
    17ec:	4f e7       	ldi	r20, 0x7F	; 127
    17ee:	57 e4       	ldi	r21, 0x47	; 71
    17f0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17f4:	18 16       	cp	r1, r24
    17f6:	4c f5       	brge	.+82     	; 0x184a <LCD_voidWriteCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    17fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e2       	ldi	r20, 0x20	; 32
    1806:	51 e4       	ldi	r21, 0x41	; 65
    1808:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	bc 01       	movw	r22, r24
    1812:	cd 01       	movw	r24, r26
    1814:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	9e 83       	std	Y+6, r25	; 0x06
    181e:	8d 83       	std	Y+5, r24	; 0x05
    1820:	0f c0       	rjmp	.+30     	; 0x1840 <LCD_voidWriteCommand+0xf8>
    1822:	88 ec       	ldi	r24, 0xC8	; 200
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	9c 83       	std	Y+4, r25	; 0x04
    1828:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	9c 81       	ldd	r25, Y+4	; 0x04
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <LCD_voidWriteCommand+0xe6>
    1832:	9c 83       	std	Y+4, r25	; 0x04
    1834:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	9e 83       	std	Y+6, r25	; 0x06
    183e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	9e 81       	ldd	r25, Y+6	; 0x06
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	69 f7       	brne	.-38     	; 0x1822 <LCD_voidWriteCommand+0xda>
    1848:	14 c0       	rjmp	.+40     	; 0x1872 <LCD_voidWriteCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184a:	6f 81       	ldd	r22, Y+7	; 0x07
    184c:	78 85       	ldd	r23, Y+8	; 0x08
    184e:	89 85       	ldd	r24, Y+9	; 0x09
    1850:	9a 85       	ldd	r25, Y+10	; 0x0a
    1852:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	9e 83       	std	Y+6, r25	; 0x06
    185c:	8d 83       	std	Y+5, r24	; 0x05
    185e:	8d 81       	ldd	r24, Y+5	; 0x05
    1860:	9e 81       	ldd	r25, Y+6	; 0x06
    1862:	9a 83       	std	Y+2, r25	; 0x02
    1864:	89 83       	std	Y+1, r24	; 0x01
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	9a 81       	ldd	r25, Y+2	; 0x02
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <LCD_voidWriteCommand+0x122>
    186e:	9a 83       	std	Y+2, r25	; 0x02
    1870:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for 2 msec.*/
	_delay_ms(2);

	/*Re-Make Enable Pin as LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	62 e0       	ldi	r22, 0x02	; 2
    1876:	40 e0       	ldi	r20, 0x00	; 0
    1878:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_u8SetPinValue>
}
    187c:	2f 96       	adiw	r28, 0x0f	; 15
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <LCD_voidWriteData>:
/* Description	: Send a Data to LCD through the Data PORT
 * Input		: Data
 * Output		: Non
 */
void LCD_voidWriteData(u8 Copy_u8Data)
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	2f 97       	sbiw	r28, 0x0f	; 15
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	8f 87       	std	Y+15, r24	; 0x0f
	/*Make Sure that the Enable PIN is LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    18a4:	82 e0       	ldi	r24, 0x02	; 2
    18a6:	62 e0       	ldi	r22, 0x02	; 2
    18a8:	40 e0       	ldi	r20, 0x00	; 0
    18aa:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_u8SetPinValue>

	/*Make Sure that the Register Select PIN is LOW as (RS -> LOW for Command) (RS -> HIGH for Data)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_HIGH);
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	41 e0       	ldi	r20, 0x01	; 1
    18b4:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_u8SetPinValue>

	/*Make Sure that the Read Write PIN is LOW as (RW -> LOW for Write) (RW -> HIGH for Read)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_LOW);
    18b8:	82 e0       	ldi	r24, 0x02	; 2
    18ba:	61 e0       	ldi	r22, 0x01	; 1
    18bc:	40 e0       	ldi	r20, 0x00	; 0
    18be:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_u8SetPinValue>

	/*Send the Command on Data Pins D0 -> D7*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Data);
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	6f 85       	ldd	r22, Y+15	; 0x0f
    18c6:	0e 94 40 08 	call	0x1080	; 0x1080 <DIO_u8SetPortValue>

	/*Enable Sequence*/
	/*Make the Enable Pin HIGH*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_HIGH);
    18ca:	82 e0       	ldi	r24, 0x02	; 2
    18cc:	62 e0       	ldi	r22, 0x02	; 2
    18ce:	41 e0       	ldi	r20, 0x01	; 1
    18d0:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_u8SetPinValue>
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	a0 e0       	ldi	r26, 0x00	; 0
    18da:	b0 e4       	ldi	r27, 0x40	; 64
    18dc:	8b 87       	std	Y+11, r24	; 0x0b
    18de:	9c 87       	std	Y+12, r25	; 0x0c
    18e0:	ad 87       	std	Y+13, r26	; 0x0d
    18e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	4a ef       	ldi	r20, 0xFA	; 250
    18f2:	54 e4       	ldi	r21, 0x44	; 68
    18f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	8f 83       	std	Y+7, r24	; 0x07
    18fe:	98 87       	std	Y+8, r25	; 0x08
    1900:	a9 87       	std	Y+9, r26	; 0x09
    1902:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1904:	6f 81       	ldd	r22, Y+7	; 0x07
    1906:	78 85       	ldd	r23, Y+8	; 0x08
    1908:	89 85       	ldd	r24, Y+9	; 0x09
    190a:	9a 85       	ldd	r25, Y+10	; 0x0a
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e8       	ldi	r20, 0x80	; 128
    1912:	5f e3       	ldi	r21, 0x3F	; 63
    1914:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1918:	88 23       	and	r24, r24
    191a:	2c f4       	brge	.+10     	; 0x1926 <LCD_voidWriteData+0x98>
		__ticks = 1;
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	9e 83       	std	Y+6, r25	; 0x06
    1922:	8d 83       	std	Y+5, r24	; 0x05
    1924:	3f c0       	rjmp	.+126    	; 0x19a4 <LCD_voidWriteData+0x116>
	else if (__tmp > 65535)
    1926:	6f 81       	ldd	r22, Y+7	; 0x07
    1928:	78 85       	ldd	r23, Y+8	; 0x08
    192a:	89 85       	ldd	r24, Y+9	; 0x09
    192c:	9a 85       	ldd	r25, Y+10	; 0x0a
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	3f ef       	ldi	r19, 0xFF	; 255
    1932:	4f e7       	ldi	r20, 0x7F	; 127
    1934:	57 e4       	ldi	r21, 0x47	; 71
    1936:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    193a:	18 16       	cp	r1, r24
    193c:	4c f5       	brge	.+82     	; 0x1990 <LCD_voidWriteData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    193e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1940:	7c 85       	ldd	r23, Y+12	; 0x0c
    1942:	8d 85       	ldd	r24, Y+13	; 0x0d
    1944:	9e 85       	ldd	r25, Y+14	; 0x0e
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e2       	ldi	r20, 0x20	; 32
    194c:	51 e4       	ldi	r21, 0x41	; 65
    194e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	bc 01       	movw	r22, r24
    1958:	cd 01       	movw	r24, r26
    195a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	9e 83       	std	Y+6, r25	; 0x06
    1964:	8d 83       	std	Y+5, r24	; 0x05
    1966:	0f c0       	rjmp	.+30     	; 0x1986 <LCD_voidWriteData+0xf8>
    1968:	88 ec       	ldi	r24, 0xC8	; 200
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	9c 83       	std	Y+4, r25	; 0x04
    196e:	8b 83       	std	Y+3, r24	; 0x03
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <LCD_voidWriteData+0xe6>
    1978:	9c 83       	std	Y+4, r25	; 0x04
    197a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    197c:	8d 81       	ldd	r24, Y+5	; 0x05
    197e:	9e 81       	ldd	r25, Y+6	; 0x06
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	9e 83       	std	Y+6, r25	; 0x06
    1984:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	9e 81       	ldd	r25, Y+6	; 0x06
    198a:	00 97       	sbiw	r24, 0x00	; 0
    198c:	69 f7       	brne	.-38     	; 0x1968 <LCD_voidWriteData+0xda>
    198e:	14 c0       	rjmp	.+40     	; 0x19b8 <LCD_voidWriteData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1990:	6f 81       	ldd	r22, Y+7	; 0x07
    1992:	78 85       	ldd	r23, Y+8	; 0x08
    1994:	89 85       	ldd	r24, Y+9	; 0x09
    1996:	9a 85       	ldd	r25, Y+10	; 0x0a
    1998:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	9e 83       	std	Y+6, r25	; 0x06
    19a2:	8d 83       	std	Y+5, r24	; 0x05
    19a4:	8d 81       	ldd	r24, Y+5	; 0x05
    19a6:	9e 81       	ldd	r25, Y+6	; 0x06
    19a8:	9a 83       	std	Y+2, r25	; 0x02
    19aa:	89 83       	std	Y+1, r24	; 0x01
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	9a 81       	ldd	r25, Y+2	; 0x02
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	f1 f7       	brne	.-4      	; 0x19b0 <LCD_voidWriteData+0x122>
    19b4:	9a 83       	std	Y+2, r25	; 0x02
    19b6:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for 2 msec.*/
	_delay_ms(2);

	/*Re-Make Enable Pin as LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    19b8:	82 e0       	ldi	r24, 0x02	; 2
    19ba:	62 e0       	ldi	r22, 0x02	; 2
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_u8SetPinValue>
}
    19c2:	2f 96       	adiw	r28, 0x0f	; 15
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <LCD_voidInitialization>:
/* Description	: Initializing the LCD
 * Input		: Non
 * Output		: Non
 */
void LCD_voidInitialization(void)
{
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	c6 55       	subi	r28, 0x56	; 86
    19e2:	d0 40       	sbci	r29, 0x00	; 0
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	cd bf       	out	0x3d, r28	; 61
    19ee:	fe 01       	movw	r30, r28
    19f0:	ed 5a       	subi	r30, 0xAD	; 173
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	ac e0       	ldi	r26, 0x0C	; 12
    19fa:	b2 e4       	ldi	r27, 0x42	; 66
    19fc:	80 83       	st	Z, r24
    19fe:	91 83       	std	Z+1, r25	; 0x01
    1a00:	a2 83       	std	Z+2, r26	; 0x02
    1a02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a04:	8e 01       	movw	r16, r28
    1a06:	01 5b       	subi	r16, 0xB1	; 177
    1a08:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	ed 5a       	subi	r30, 0xAD	; 173
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	60 81       	ld	r22, Z
    1a12:	71 81       	ldd	r23, Z+1	; 0x01
    1a14:	82 81       	ldd	r24, Z+2	; 0x02
    1a16:	93 81       	ldd	r25, Z+3	; 0x03
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	4a ef       	ldi	r20, 0xFA	; 250
    1a1e:	54 e4       	ldi	r21, 0x44	; 68
    1a20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	f8 01       	movw	r30, r16
    1a2a:	80 83       	st	Z, r24
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	a2 83       	std	Z+2, r26	; 0x02
    1a30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a32:	fe 01       	movw	r30, r28
    1a34:	e1 5b       	subi	r30, 0xB1	; 177
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	82 81       	ldd	r24, Z+2	; 0x02
    1a3e:	93 81       	ldd	r25, Z+3	; 0x03
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e8       	ldi	r20, 0x80	; 128
    1a46:	5f e3       	ldi	r21, 0x3F	; 63
    1a48:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a4c:	88 23       	and	r24, r24
    1a4e:	44 f4       	brge	.+16     	; 0x1a60 <LCD_voidInitialization+0x8c>
		__ticks = 1;
    1a50:	fe 01       	movw	r30, r28
    1a52:	e3 5b       	subi	r30, 0xB3	; 179
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	91 83       	std	Z+1, r25	; 0x01
    1a5c:	80 83       	st	Z, r24
    1a5e:	64 c0       	rjmp	.+200    	; 0x1b28 <LCD_voidInitialization+0x154>
	else if (__tmp > 65535)
    1a60:	fe 01       	movw	r30, r28
    1a62:	e1 5b       	subi	r30, 0xB1	; 177
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	60 81       	ld	r22, Z
    1a68:	71 81       	ldd	r23, Z+1	; 0x01
    1a6a:	82 81       	ldd	r24, Z+2	; 0x02
    1a6c:	93 81       	ldd	r25, Z+3	; 0x03
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	3f ef       	ldi	r19, 0xFF	; 255
    1a72:	4f e7       	ldi	r20, 0x7F	; 127
    1a74:	57 e4       	ldi	r21, 0x47	; 71
    1a76:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a7a:	18 16       	cp	r1, r24
    1a7c:	0c f0       	brlt	.+2      	; 0x1a80 <LCD_voidInitialization+0xac>
    1a7e:	43 c0       	rjmp	.+134    	; 0x1b06 <LCD_voidInitialization+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a80:	fe 01       	movw	r30, r28
    1a82:	ed 5a       	subi	r30, 0xAD	; 173
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	60 81       	ld	r22, Z
    1a88:	71 81       	ldd	r23, Z+1	; 0x01
    1a8a:	82 81       	ldd	r24, Z+2	; 0x02
    1a8c:	93 81       	ldd	r25, Z+3	; 0x03
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e2       	ldi	r20, 0x20	; 32
    1a94:	51 e4       	ldi	r21, 0x41	; 65
    1a96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	8e 01       	movw	r16, r28
    1aa0:	03 5b       	subi	r16, 0xB3	; 179
    1aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa4:	bc 01       	movw	r22, r24
    1aa6:	cd 01       	movw	r24, r26
    1aa8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	91 83       	std	Z+1, r25	; 0x01
    1ab4:	80 83       	st	Z, r24
    1ab6:	1f c0       	rjmp	.+62     	; 0x1af6 <LCD_voidInitialization+0x122>
    1ab8:	fe 01       	movw	r30, r28
    1aba:	e5 5b       	subi	r30, 0xB5	; 181
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	88 ec       	ldi	r24, 0xC8	; 200
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	91 83       	std	Z+1, r25	; 0x01
    1ac4:	80 83       	st	Z, r24
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	e5 5b       	subi	r30, 0xB5	; 181
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	80 81       	ld	r24, Z
    1ace:	91 81       	ldd	r25, Z+1	; 0x01
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <LCD_voidInitialization+0xfc>
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e5 5b       	subi	r30, 0xB5	; 181
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	91 83       	std	Z+1, r25	; 0x01
    1adc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ade:	de 01       	movw	r26, r28
    1ae0:	a3 5b       	subi	r26, 0xB3	; 179
    1ae2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e3 5b       	subi	r30, 0xB3	; 179
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	80 81       	ld	r24, Z
    1aec:	91 81       	ldd	r25, Z+1	; 0x01
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	11 96       	adiw	r26, 0x01	; 1
    1af2:	9c 93       	st	X, r25
    1af4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af6:	fe 01       	movw	r30, r28
    1af8:	e3 5b       	subi	r30, 0xB3	; 179
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	80 81       	ld	r24, Z
    1afe:	91 81       	ldd	r25, Z+1	; 0x01
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	d1 f6       	brne	.-76     	; 0x1ab8 <LCD_voidInitialization+0xe4>
    1b04:	27 c0       	rjmp	.+78     	; 0x1b54 <LCD_voidInitialization+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b06:	8e 01       	movw	r16, r28
    1b08:	03 5b       	subi	r16, 0xB3	; 179
    1b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	e1 5b       	subi	r30, 0xB1	; 177
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	60 81       	ld	r22, Z
    1b14:	71 81       	ldd	r23, Z+1	; 0x01
    1b16:	82 81       	ldd	r24, Z+2	; 0x02
    1b18:	93 81       	ldd	r25, Z+3	; 0x03
    1b1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	f8 01       	movw	r30, r16
    1b24:	91 83       	std	Z+1, r25	; 0x01
    1b26:	80 83       	st	Z, r24
    1b28:	de 01       	movw	r26, r28
    1b2a:	a7 5b       	subi	r26, 0xB7	; 183
    1b2c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b2e:	fe 01       	movw	r30, r28
    1b30:	e3 5b       	subi	r30, 0xB3	; 179
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	80 81       	ld	r24, Z
    1b36:	91 81       	ldd	r25, Z+1	; 0x01
    1b38:	8d 93       	st	X+, r24
    1b3a:	9c 93       	st	X, r25
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	e7 5b       	subi	r30, 0xB7	; 183
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	80 81       	ld	r24, Z
    1b44:	91 81       	ldd	r25, Z+1	; 0x01
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <LCD_voidInitialization+0x172>
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e7 5b       	subi	r30, 0xB7	; 183
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	91 83       	std	Z+1, r25	; 0x01
    1b52:	80 83       	st	Z, r24
	 *				-> 5*8  -> 0
	 *
	 *DB3	Number of Lines(N) -> 1 Line  -> 0
	 *						   -> 2 Lines -> 1
	 */
	LCD_voidWriteCommand(0b00111100);
    1b54:	8c e3       	ldi	r24, 0x3C	; 60
    1b56:	0e 94 a4 0b 	call	0x1748	; 0x1748 <LCD_voidWriteCommand>
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	eb 5b       	subi	r30, 0xBB	; 187
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	a4 e3       	ldi	r26, 0x34	; 52
    1b66:	b2 e4       	ldi	r27, 0x42	; 66
    1b68:	80 83       	st	Z, r24
    1b6a:	91 83       	std	Z+1, r25	; 0x01
    1b6c:	a2 83       	std	Z+2, r26	; 0x02
    1b6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b70:	8e 01       	movw	r16, r28
    1b72:	0f 5b       	subi	r16, 0xBF	; 191
    1b74:	1f 4f       	sbci	r17, 0xFF	; 255
    1b76:	fe 01       	movw	r30, r28
    1b78:	eb 5b       	subi	r30, 0xBB	; 187
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	60 81       	ld	r22, Z
    1b7e:	71 81       	ldd	r23, Z+1	; 0x01
    1b80:	82 81       	ldd	r24, Z+2	; 0x02
    1b82:	93 81       	ldd	r25, Z+3	; 0x03
    1b84:	2b ea       	ldi	r18, 0xAB	; 171
    1b86:	3a ea       	ldi	r19, 0xAA	; 170
    1b88:	4a e2       	ldi	r20, 0x2A	; 42
    1b8a:	50 e4       	ldi	r21, 0x40	; 64
    1b8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	f8 01       	movw	r30, r16
    1b96:	80 83       	st	Z, r24
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	a2 83       	std	Z+2, r26	; 0x02
    1b9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	ef 5b       	subi	r30, 0xBF	; 191
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	60 81       	ld	r22, Z
    1ba6:	71 81       	ldd	r23, Z+1	; 0x01
    1ba8:	82 81       	ldd	r24, Z+2	; 0x02
    1baa:	93 81       	ldd	r25, Z+3	; 0x03
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e8       	ldi	r20, 0x80	; 128
    1bb2:	5f e3       	ldi	r21, 0x3F	; 63
    1bb4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bb8:	88 23       	and	r24, r24
    1bba:	34 f4       	brge	.+12     	; 0x1bc8 <LCD_voidInitialization+0x1f4>
		__ticks = 1;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	e0 5c       	subi	r30, 0xC0	; 192
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	80 83       	st	Z, r24
    1bc6:	9d c0       	rjmp	.+314    	; 0x1d02 <LCD_voidInitialization+0x32e>
	else if (__tmp > 255)
    1bc8:	fe 01       	movw	r30, r28
    1bca:	ef 5b       	subi	r30, 0xBF	; 191
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	60 81       	ld	r22, Z
    1bd0:	71 81       	ldd	r23, Z+1	; 0x01
    1bd2:	82 81       	ldd	r24, Z+2	; 0x02
    1bd4:	93 81       	ldd	r25, Z+3	; 0x03
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	4f e7       	ldi	r20, 0x7F	; 127
    1bdc:	53 e4       	ldi	r21, 0x43	; 67
    1bde:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1be2:	18 16       	cp	r1, r24
    1be4:	0c f0       	brlt	.+2      	; 0x1be8 <LCD_voidInitialization+0x214>
    1be6:	7e c0       	rjmp	.+252    	; 0x1ce4 <LCD_voidInitialization+0x310>
	{
		_delay_ms(__us / 1000.0);
    1be8:	fe 01       	movw	r30, r28
    1bea:	eb 5b       	subi	r30, 0xBB	; 187
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	4a e7       	ldi	r20, 0x7A	; 122
    1bfc:	54 e4       	ldi	r21, 0x44	; 68
    1bfe:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	8c af       	std	Y+60, r24	; 0x3c
    1c08:	9d af       	std	Y+61, r25	; 0x3d
    1c0a:	ae af       	std	Y+62, r26	; 0x3e
    1c0c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c0e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c10:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c12:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c14:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	4a ef       	ldi	r20, 0xFA	; 250
    1c1c:	54 e4       	ldi	r21, 0x44	; 68
    1c1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	88 af       	std	Y+56, r24	; 0x38
    1c28:	99 af       	std	Y+57, r25	; 0x39
    1c2a:	aa af       	std	Y+58, r26	; 0x3a
    1c2c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1c2e:	68 ad       	ldd	r22, Y+56	; 0x38
    1c30:	79 ad       	ldd	r23, Y+57	; 0x39
    1c32:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c34:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	40 e8       	ldi	r20, 0x80	; 128
    1c3c:	5f e3       	ldi	r21, 0x3F	; 63
    1c3e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c42:	88 23       	and	r24, r24
    1c44:	2c f4       	brge	.+10     	; 0x1c50 <LCD_voidInitialization+0x27c>
		__ticks = 1;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	9f ab       	std	Y+55, r25	; 0x37
    1c4c:	8e ab       	std	Y+54, r24	; 0x36
    1c4e:	3f c0       	rjmp	.+126    	; 0x1cce <LCD_voidInitialization+0x2fa>
	else if (__tmp > 65535)
    1c50:	68 ad       	ldd	r22, Y+56	; 0x38
    1c52:	79 ad       	ldd	r23, Y+57	; 0x39
    1c54:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c56:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	3f ef       	ldi	r19, 0xFF	; 255
    1c5c:	4f e7       	ldi	r20, 0x7F	; 127
    1c5e:	57 e4       	ldi	r21, 0x47	; 71
    1c60:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c64:	18 16       	cp	r1, r24
    1c66:	4c f5       	brge	.+82     	; 0x1cba <LCD_voidInitialization+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c68:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c6a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c6c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e2       	ldi	r20, 0x20	; 32
    1c76:	51 e4       	ldi	r21, 0x41	; 65
    1c78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	bc 01       	movw	r22, r24
    1c82:	cd 01       	movw	r24, r26
    1c84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	9f ab       	std	Y+55, r25	; 0x37
    1c8e:	8e ab       	std	Y+54, r24	; 0x36
    1c90:	0f c0       	rjmp	.+30     	; 0x1cb0 <LCD_voidInitialization+0x2dc>
    1c92:	88 ec       	ldi	r24, 0xC8	; 200
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	9d ab       	std	Y+53, r25	; 0x35
    1c98:	8c ab       	std	Y+52, r24	; 0x34
    1c9a:	8c a9       	ldd	r24, Y+52	; 0x34
    1c9c:	9d a9       	ldd	r25, Y+53	; 0x35
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <LCD_voidInitialization+0x2ca>
    1ca2:	9d ab       	std	Y+53, r25	; 0x35
    1ca4:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca6:	8e a9       	ldd	r24, Y+54	; 0x36
    1ca8:	9f a9       	ldd	r25, Y+55	; 0x37
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	9f ab       	std	Y+55, r25	; 0x37
    1cae:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb0:	8e a9       	ldd	r24, Y+54	; 0x36
    1cb2:	9f a9       	ldd	r25, Y+55	; 0x37
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	69 f7       	brne	.-38     	; 0x1c92 <LCD_voidInitialization+0x2be>
    1cb8:	2d c0       	rjmp	.+90     	; 0x1d14 <LCD_voidInitialization+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cba:	68 ad       	ldd	r22, Y+56	; 0x38
    1cbc:	79 ad       	ldd	r23, Y+57	; 0x39
    1cbe:	8a ad       	ldd	r24, Y+58	; 0x3a
    1cc0:	9b ad       	ldd	r25, Y+59	; 0x3b
    1cc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	9f ab       	std	Y+55, r25	; 0x37
    1ccc:	8e ab       	std	Y+54, r24	; 0x36
    1cce:	8e a9       	ldd	r24, Y+54	; 0x36
    1cd0:	9f a9       	ldd	r25, Y+55	; 0x37
    1cd2:	9b ab       	std	Y+51, r25	; 0x33
    1cd4:	8a ab       	std	Y+50, r24	; 0x32
    1cd6:	8a a9       	ldd	r24, Y+50	; 0x32
    1cd8:	9b a9       	ldd	r25, Y+51	; 0x33
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <LCD_voidInitialization+0x306>
    1cde:	9b ab       	std	Y+51, r25	; 0x33
    1ce0:	8a ab       	std	Y+50, r24	; 0x32
    1ce2:	18 c0       	rjmp	.+48     	; 0x1d14 <LCD_voidInitialization+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	ef 5b       	subi	r30, 0xBF	; 191
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	e0 5c       	subi	r30, 0xC0	; 192
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	80 83       	st	Z, r24
    1d02:	fe 01       	movw	r30, r28
    1d04:	e0 5c       	subi	r30, 0xC0	; 192
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	80 81       	ld	r24, Z
    1d0a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d0c:	89 a9       	ldd	r24, Y+49	; 0x31
    1d0e:	8a 95       	dec	r24
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <LCD_voidInitialization+0x33a>
    1d12:	89 ab       	std	Y+49, r24	; 0x31
	 * 				  -> OFF -> 0
	 *
	 * DB2 	Display(D) -> ON  -> 1
	 * 				   -> OFF -> 0
	 */
	LCD_voidWriteCommand(0b00001100);
    1d14:	8c e0       	ldi	r24, 0x0C	; 12
    1d16:	0e 94 a4 0b 	call	0x1748	; 0x1748 <LCD_voidWriteCommand>
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	a0 e8       	ldi	r26, 0x80	; 128
    1d20:	b0 e4       	ldi	r27, 0x40	; 64
    1d22:	8d a7       	std	Y+45, r24	; 0x2d
    1d24:	9e a7       	std	Y+46, r25	; 0x2e
    1d26:	af a7       	std	Y+47, r26	; 0x2f
    1d28:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d2a:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d2c:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d30:	98 a9       	ldd	r25, Y+48	; 0x30
    1d32:	2b ea       	ldi	r18, 0xAB	; 171
    1d34:	3a ea       	ldi	r19, 0xAA	; 170
    1d36:	4a e2       	ldi	r20, 0x2A	; 42
    1d38:	50 e4       	ldi	r21, 0x40	; 64
    1d3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	89 a7       	std	Y+41, r24	; 0x29
    1d44:	9a a7       	std	Y+42, r25	; 0x2a
    1d46:	ab a7       	std	Y+43, r26	; 0x2b
    1d48:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1d4a:	69 a5       	ldd	r22, Y+41	; 0x29
    1d4c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d50:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	40 e8       	ldi	r20, 0x80	; 128
    1d58:	5f e3       	ldi	r21, 0x3F	; 63
    1d5a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d5e:	88 23       	and	r24, r24
    1d60:	1c f4       	brge	.+6      	; 0x1d68 <LCD_voidInitialization+0x394>
		__ticks = 1;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	88 a7       	std	Y+40, r24	; 0x28
    1d66:	91 c0       	rjmp	.+290    	; 0x1e8a <LCD_voidInitialization+0x4b6>
	else if (__tmp > 255)
    1d68:	69 a5       	ldd	r22, Y+41	; 0x29
    1d6a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	4f e7       	ldi	r20, 0x7F	; 127
    1d76:	53 e4       	ldi	r21, 0x43	; 67
    1d78:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d7c:	18 16       	cp	r1, r24
    1d7e:	0c f0       	brlt	.+2      	; 0x1d82 <LCD_voidInitialization+0x3ae>
    1d80:	7b c0       	rjmp	.+246    	; 0x1e78 <LCD_voidInitialization+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    1d82:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d84:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d88:	98 a9       	ldd	r25, Y+48	; 0x30
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	4a e7       	ldi	r20, 0x7A	; 122
    1d90:	54 e4       	ldi	r21, 0x44	; 68
    1d92:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	8c a3       	std	Y+36, r24	; 0x24
    1d9c:	9d a3       	std	Y+37, r25	; 0x25
    1d9e:	ae a3       	std	Y+38, r26	; 0x26
    1da0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da2:	6c a1       	ldd	r22, Y+36	; 0x24
    1da4:	7d a1       	ldd	r23, Y+37	; 0x25
    1da6:	8e a1       	ldd	r24, Y+38	; 0x26
    1da8:	9f a1       	ldd	r25, Y+39	; 0x27
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	4a ef       	ldi	r20, 0xFA	; 250
    1db0:	54 e4       	ldi	r21, 0x44	; 68
    1db2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	88 a3       	std	Y+32, r24	; 0x20
    1dbc:	99 a3       	std	Y+33, r25	; 0x21
    1dbe:	aa a3       	std	Y+34, r26	; 0x22
    1dc0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1dc2:	68 a1       	ldd	r22, Y+32	; 0x20
    1dc4:	79 a1       	ldd	r23, Y+33	; 0x21
    1dc6:	8a a1       	ldd	r24, Y+34	; 0x22
    1dc8:	9b a1       	ldd	r25, Y+35	; 0x23
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e8       	ldi	r20, 0x80	; 128
    1dd0:	5f e3       	ldi	r21, 0x3F	; 63
    1dd2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dd6:	88 23       	and	r24, r24
    1dd8:	2c f4       	brge	.+10     	; 0x1de4 <LCD_voidInitialization+0x410>
		__ticks = 1;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9f 8f       	std	Y+31, r25	; 0x1f
    1de0:	8e 8f       	std	Y+30, r24	; 0x1e
    1de2:	3f c0       	rjmp	.+126    	; 0x1e62 <LCD_voidInitialization+0x48e>
	else if (__tmp > 65535)
    1de4:	68 a1       	ldd	r22, Y+32	; 0x20
    1de6:	79 a1       	ldd	r23, Y+33	; 0x21
    1de8:	8a a1       	ldd	r24, Y+34	; 0x22
    1dea:	9b a1       	ldd	r25, Y+35	; 0x23
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	3f ef       	ldi	r19, 0xFF	; 255
    1df0:	4f e7       	ldi	r20, 0x7F	; 127
    1df2:	57 e4       	ldi	r21, 0x47	; 71
    1df4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1df8:	18 16       	cp	r1, r24
    1dfa:	4c f5       	brge	.+82     	; 0x1e4e <LCD_voidInitialization+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfc:	6c a1       	ldd	r22, Y+36	; 0x24
    1dfe:	7d a1       	ldd	r23, Y+37	; 0x25
    1e00:	8e a1       	ldd	r24, Y+38	; 0x26
    1e02:	9f a1       	ldd	r25, Y+39	; 0x27
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e2       	ldi	r20, 0x20	; 32
    1e0a:	51 e4       	ldi	r21, 0x41	; 65
    1e0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	bc 01       	movw	r22, r24
    1e16:	cd 01       	movw	r24, r26
    1e18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9f 8f       	std	Y+31, r25	; 0x1f
    1e22:	8e 8f       	std	Y+30, r24	; 0x1e
    1e24:	0f c0       	rjmp	.+30     	; 0x1e44 <LCD_voidInitialization+0x470>
    1e26:	88 ec       	ldi	r24, 0xC8	; 200
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	9d 8f       	std	Y+29, r25	; 0x1d
    1e2c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e2e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e30:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <LCD_voidInitialization+0x45e>
    1e36:	9d 8f       	std	Y+29, r25	; 0x1d
    1e38:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e3c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	9f 8f       	std	Y+31, r25	; 0x1f
    1e42:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e44:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e46:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	69 f7       	brne	.-38     	; 0x1e26 <LCD_voidInitialization+0x452>
    1e4c:	24 c0       	rjmp	.+72     	; 0x1e96 <LCD_voidInitialization+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4e:	68 a1       	ldd	r22, Y+32	; 0x20
    1e50:	79 a1       	ldd	r23, Y+33	; 0x21
    1e52:	8a a1       	ldd	r24, Y+34	; 0x22
    1e54:	9b a1       	ldd	r25, Y+35	; 0x23
    1e56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	9f 8f       	std	Y+31, r25	; 0x1f
    1e60:	8e 8f       	std	Y+30, r24	; 0x1e
    1e62:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e64:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e66:	9b 8f       	std	Y+27, r25	; 0x1b
    1e68:	8a 8f       	std	Y+26, r24	; 0x1a
    1e6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e6c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <LCD_voidInitialization+0x49a>
    1e72:	9b 8f       	std	Y+27, r25	; 0x1b
    1e74:	8a 8f       	std	Y+26, r24	; 0x1a
    1e76:	0f c0       	rjmp	.+30     	; 0x1e96 <LCD_voidInitialization+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e78:	69 a5       	ldd	r22, Y+41	; 0x29
    1e7a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	88 a7       	std	Y+40, r24	; 0x28
    1e8a:	88 a5       	ldd	r24, Y+40	; 0x28
    1e8c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e8e:	89 8d       	ldd	r24, Y+25	; 0x19
    1e90:	8a 95       	dec	r24
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <LCD_voidInitialization+0x4bc>
    1e94:	89 8f       	std	Y+25, r24	; 0x19

	/*Delay to Process Display ON/OFF Control*/
	_delay_us(4);

	/*Clear LCD*/
	LCD_voidWriteCommand(0b00000001);
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	0e 94 a4 0b 	call	0x1748	; 0x1748 <LCD_voidWriteCommand>
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	a8 ec       	ldi	r26, 0xC8	; 200
    1ea2:	b4 e4       	ldi	r27, 0x44	; 68
    1ea4:	8d 8b       	std	Y+21, r24	; 0x15
    1ea6:	9e 8b       	std	Y+22, r25	; 0x16
    1ea8:	af 8b       	std	Y+23, r26	; 0x17
    1eaa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1eac:	6d 89       	ldd	r22, Y+21	; 0x15
    1eae:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb4:	2b ea       	ldi	r18, 0xAB	; 171
    1eb6:	3a ea       	ldi	r19, 0xAA	; 170
    1eb8:	4a e2       	ldi	r20, 0x2A	; 42
    1eba:	50 e4       	ldi	r21, 0x40	; 64
    1ebc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	89 8b       	std	Y+17, r24	; 0x11
    1ec6:	9a 8b       	std	Y+18, r25	; 0x12
    1ec8:	ab 8b       	std	Y+19, r26	; 0x13
    1eca:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ecc:	69 89       	ldd	r22, Y+17	; 0x11
    1ece:	7a 89       	ldd	r23, Y+18	; 0x12
    1ed0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e8       	ldi	r20, 0x80	; 128
    1eda:	5f e3       	ldi	r21, 0x3F	; 63
    1edc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ee0:	88 23       	and	r24, r24
    1ee2:	1c f4       	brge	.+6      	; 0x1eea <LCD_voidInitialization+0x516>
		__ticks = 1;
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	88 8b       	std	Y+16, r24	; 0x10
    1ee8:	91 c0       	rjmp	.+290    	; 0x200c <LCD_voidInitialization+0x638>
	else if (__tmp > 255)
    1eea:	69 89       	ldd	r22, Y+17	; 0x11
    1eec:	7a 89       	ldd	r23, Y+18	; 0x12
    1eee:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	4f e7       	ldi	r20, 0x7F	; 127
    1ef8:	53 e4       	ldi	r21, 0x43	; 67
    1efa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1efe:	18 16       	cp	r1, r24
    1f00:	0c f0       	brlt	.+2      	; 0x1f04 <LCD_voidInitialization+0x530>
    1f02:	7b c0       	rjmp	.+246    	; 0x1ffa <LCD_voidInitialization+0x626>
	{
		_delay_ms(__us / 1000.0);
    1f04:	6d 89       	ldd	r22, Y+21	; 0x15
    1f06:	7e 89       	ldd	r23, Y+22	; 0x16
    1f08:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	4a e7       	ldi	r20, 0x7A	; 122
    1f12:	54 e4       	ldi	r21, 0x44	; 68
    1f14:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	8c 87       	std	Y+12, r24	; 0x0c
    1f1e:	9d 87       	std	Y+13, r25	; 0x0d
    1f20:	ae 87       	std	Y+14, r26	; 0x0e
    1f22:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f24:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f26:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f28:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f2a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	4a ef       	ldi	r20, 0xFA	; 250
    1f32:	54 e4       	ldi	r21, 0x44	; 68
    1f34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	88 87       	std	Y+8, r24	; 0x08
    1f3e:	99 87       	std	Y+9, r25	; 0x09
    1f40:	aa 87       	std	Y+10, r26	; 0x0a
    1f42:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f44:	68 85       	ldd	r22, Y+8	; 0x08
    1f46:	79 85       	ldd	r23, Y+9	; 0x09
    1f48:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e8       	ldi	r20, 0x80	; 128
    1f52:	5f e3       	ldi	r21, 0x3F	; 63
    1f54:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f58:	88 23       	and	r24, r24
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <LCD_voidInitialization+0x592>
		__ticks = 1;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	9f 83       	std	Y+7, r25	; 0x07
    1f62:	8e 83       	std	Y+6, r24	; 0x06
    1f64:	3f c0       	rjmp	.+126    	; 0x1fe4 <LCD_voidInitialization+0x610>
	else if (__tmp > 65535)
    1f66:	68 85       	ldd	r22, Y+8	; 0x08
    1f68:	79 85       	ldd	r23, Y+9	; 0x09
    1f6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	3f ef       	ldi	r19, 0xFF	; 255
    1f72:	4f e7       	ldi	r20, 0x7F	; 127
    1f74:	57 e4       	ldi	r21, 0x47	; 71
    1f76:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f7a:	18 16       	cp	r1, r24
    1f7c:	4c f5       	brge	.+82     	; 0x1fd0 <LCD_voidInitialization+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f80:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f82:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f84:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e2       	ldi	r20, 0x20	; 32
    1f8c:	51 e4       	ldi	r21, 0x41	; 65
    1f8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	bc 01       	movw	r22, r24
    1f98:	cd 01       	movw	r24, r26
    1f9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	9f 83       	std	Y+7, r25	; 0x07
    1fa4:	8e 83       	std	Y+6, r24	; 0x06
    1fa6:	0f c0       	rjmp	.+30     	; 0x1fc6 <LCD_voidInitialization+0x5f2>
    1fa8:	88 ec       	ldi	r24, 0xC8	; 200
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9d 83       	std	Y+5, r25	; 0x05
    1fae:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <LCD_voidInitialization+0x5e0>
    1fb8:	9d 83       	std	Y+5, r25	; 0x05
    1fba:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1fbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	9f 83       	std	Y+7, r25	; 0x07
    1fc4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc6:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc8:	9f 81       	ldd	r25, Y+7	; 0x07
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	69 f7       	brne	.-38     	; 0x1fa8 <LCD_voidInitialization+0x5d4>
    1fce:	24 c0       	rjmp	.+72     	; 0x2018 <LCD_voidInitialization+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd0:	68 85       	ldd	r22, Y+8	; 0x08
    1fd2:	79 85       	ldd	r23, Y+9	; 0x09
    1fd4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fd6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	9f 83       	std	Y+7, r25	; 0x07
    1fe2:	8e 83       	std	Y+6, r24	; 0x06
    1fe4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe8:	9b 83       	std	Y+3, r25	; 0x03
    1fea:	8a 83       	std	Y+2, r24	; 0x02
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <LCD_voidInitialization+0x61c>
    1ff4:	9b 83       	std	Y+3, r25	; 0x03
    1ff6:	8a 83       	std	Y+2, r24	; 0x02
    1ff8:	0f c0       	rjmp	.+30     	; 0x2018 <LCD_voidInitialization+0x644>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ffa:	69 89       	ldd	r22, Y+17	; 0x11
    1ffc:	7a 89       	ldd	r23, Y+18	; 0x12
    1ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    2000:	9c 89       	ldd	r25, Y+20	; 0x14
    2002:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	88 8b       	std	Y+16, r24	; 0x10
    200c:	88 89       	ldd	r24, Y+16	; 0x10
    200e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	8a 95       	dec	r24
    2014:	f1 f7       	brne	.-4      	; 0x2012 <LCD_voidInitialization+0x63e>
    2016:	89 83       	std	Y+1, r24	; 0x01

	/*Delay for Process Clearing LCD*/
	_delay_us(1600);
}
    2018:	ca 5a       	subi	r28, 0xAA	; 170
    201a:	df 4f       	sbci	r29, 0xFF	; 255
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	f8 94       	cli
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	cd bf       	out	0x3d, r28	; 61
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	1f 91       	pop	r17
    202c:	0f 91       	pop	r16
    202e:	08 95       	ret

00002030 <LCD_voidClearLCD>:
/* Description	: Clear LCD
 * Input		: Non
 * Output		: Non
 */
void LCD_voidClearLCD(void)
{
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
	/*Clear LCD*/
	LCD_voidWriteCommand(0b00000001);
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <LCD_voidWriteCommand>
}
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <LCD_u8WriteString>:
 * Input		: Array of Strings, Size of this Array
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8WriteString(u8 *Copy_u8String, u8 Copy_u8StrSize)
{
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	00 d0       	rcall	.+0      	; 0x204a <LCD_u8WriteString+0x6>
    204a:	00 d0       	rcall	.+0      	; 0x204c <LCD_u8WriteString+0x8>
    204c:	0f 92       	push	r0
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	9c 83       	std	Y+4, r25	; 0x04
    2054:	8b 83       	std	Y+3, r24	; 0x03
    2056:	6d 83       	std	Y+5, r22	; 0x05
	/*Local Variables*/
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0;
    2058:	1a 82       	std	Y+2, r1	; 0x02
    205a:	19 82       	std	Y+1, r1	; 0x01

	/*Loop on the Array of the Strings and print it one by one*/
	for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Copy_u8StrSize; Local_u8LoopCtr++)
    205c:	19 82       	std	Y+1, r1	; 0x01
    205e:	0e c0       	rjmp	.+28     	; 0x207c <LCD_u8WriteString+0x38>
	{
		LCD_voidWriteData(Copy_u8String[Local_u8LoopCtr]);
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	9c 81       	ldd	r25, Y+4	; 0x04
    206a:	fc 01       	movw	r30, r24
    206c:	e2 0f       	add	r30, r18
    206e:	f3 1f       	adc	r31, r19
    2070:	80 81       	ld	r24, Z
    2072:	0e 94 47 0c 	call	0x188e	; 0x188e <LCD_voidWriteData>
{
	/*Local Variables*/
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0;

	/*Loop on the Array of the Strings and print it one by one*/
	for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Copy_u8StrSize; Local_u8LoopCtr++)
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	8f 5f       	subi	r24, 0xFF	; 255
    207a:	89 83       	std	Y+1, r24	; 0x01
    207c:	99 81       	ldd	r25, Y+1	; 0x01
    207e:	8d 81       	ldd	r24, Y+5	; 0x05
    2080:	98 17       	cp	r25, r24
    2082:	70 f3       	brcs	.-36     	; 0x2060 <LCD_u8WriteString+0x1c>
	{
		LCD_voidWriteData(Copy_u8String[Local_u8LoopCtr]);
	}

	return Local_u8Error;
    2084:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	08 95       	ret

00002096 <LCD_u8GoToXY>:
 * Input		: X Position, Y Position
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8GoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	00 d0       	rcall	.+0      	; 0x209c <LCD_u8GoToXY+0x6>
    209c:	00 d0       	rcall	.+0      	; 0x209e <LCD_u8GoToXY+0x8>
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	8b 83       	std	Y+3, r24	; 0x03
    20a4:	6c 83       	std	Y+4, r22	; 0x04
	/*Local Variables*/
	u8 Local_u8Error = 0, Local_u8Address = 0;
    20a6:	1a 82       	std	Y+2, r1	; 0x02
    20a8:	19 82       	std	Y+1, r1	; 0x01
//			 * of the Memory and the X position we need and the Command for AC eight's Bit 0b1(128)
//			 */
//			Local_u8Address = DDRAM_LINE2_FIRST_LOCATION + Copy_u8XPos + AC_REG_COMMAND;
//		}

		Local_u8Address = Copy_u8XPos + (Copy_u8YPos * DDRAM_LINE2_FIRST_LOCATION) +  AC_REG_COMMAND;
    20aa:	8c 81       	ldd	r24, Y+4	; 0x04
    20ac:	88 2f       	mov	r24, r24
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	00 24       	eor	r0, r0
    20b2:	96 95       	lsr	r25
    20b4:	87 95       	ror	r24
    20b6:	07 94       	ror	r0
    20b8:	96 95       	lsr	r25
    20ba:	87 95       	ror	r24
    20bc:	07 94       	ror	r0
    20be:	98 2f       	mov	r25, r24
    20c0:	80 2d       	mov	r24, r0
    20c2:	98 2f       	mov	r25, r24
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	89 0f       	add	r24, r25
    20c8:	80 58       	subi	r24, 0x80	; 128
    20ca:	89 83       	std	Y+1, r24	; 0x01

		/*Send the Command with the Needed Position*/
		LCD_voidWriteCommand(Local_u8Address);
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	0e 94 a4 0b 	call	0x1748	; 0x1748 <LCD_voidWriteCommand>
//	}

	return Local_u8Error;
    20d2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <LCD_u8WriteSpecialChar>:
 * Input		: An Array of the Special Characters we have only 8 Positions
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8WriteSpecialChar(u8 *Copy_u8SpecialChar, u8 Copy_ArraySize)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <LCD_u8WriteSpecialChar+0x6>
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <LCD_u8WriteSpecialChar+0x8>
    20ea:	0f 92       	push	r0
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	9c 83       	std	Y+4, r25	; 0x04
    20f2:	8b 83       	std	Y+3, r24	; 0x03
    20f4:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0;
    20f6:	1a 82       	std	Y+2, r1	; 0x02
    20f8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_ArraySize > MAX_NB_BITS_SPECIAL_CHAR)
    20fa:	8d 81       	ldd	r24, Y+5	; 0x05
    20fc:	81 34       	cpi	r24, 0x41	; 65
    20fe:	18 f0       	brcs	.+6      	; 0x2106 <LCD_u8WriteSpecialChar+0x24>
	{
		Local_u8Error = 1;
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	8a 83       	std	Y+2, r24	; 0x02
    2104:	1a c0       	rjmp	.+52     	; 0x213a <LCD_u8WriteSpecialChar+0x58>
	}

	else
	{
		/*Move the AC Register to Points to CGRAM command = 0b01 and the other 6 bits are the Position in CGRAM memory*/
		LCD_voidWriteCommand(0b01000000);
    2106:	80 e4       	ldi	r24, 0x40	; 64
    2108:	0e 94 a4 0b 	call	0x1748	; 0x1748 <LCD_voidWriteCommand>

		/*Looping on the Array of the Special Char and Write it in CGRAM*/
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < MAX_NB_BITS_SPECIAL_CHAR; Local_u8LoopCtr++)
    210c:	19 82       	std	Y+1, r1	; 0x01
    210e:	0e c0       	rjmp	.+28     	; 0x212c <LCD_u8WriteSpecialChar+0x4a>
		{
			LCD_voidWriteData(Copy_u8SpecialChar[Local_u8LoopCtr]);
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	9c 81       	ldd	r25, Y+4	; 0x04
    211a:	fc 01       	movw	r30, r24
    211c:	e2 0f       	add	r30, r18
    211e:	f3 1f       	adc	r31, r19
    2120:	80 81       	ld	r24, Z
    2122:	0e 94 47 0c 	call	0x188e	; 0x188e <LCD_voidWriteData>
	{
		/*Move the AC Register to Points to CGRAM command = 0b01 and the other 6 bits are the Position in CGRAM memory*/
		LCD_voidWriteCommand(0b01000000);

		/*Looping on the Array of the Special Char and Write it in CGRAM*/
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < MAX_NB_BITS_SPECIAL_CHAR; Local_u8LoopCtr++)
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	8f 5f       	subi	r24, 0xFF	; 255
    212a:	89 83       	std	Y+1, r24	; 0x01
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	80 34       	cpi	r24, 0x40	; 64
    2130:	78 f3       	brcs	.-34     	; 0x2110 <LCD_u8WriteSpecialChar+0x2e>
		{
			LCD_voidWriteData(Copy_u8SpecialChar[Local_u8LoopCtr]);
		}

		/*Back AC Register to points to the DDRAM*/
		LCD_u8GoToXY(0, 0);
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
	}
	return Local_u8Error;
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	08 95       	ret

0000214c <LCD_u8WriteINT>:
 * Input		: The Integer Number, X position, Y Position
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8WriteINT(u32 Copy_u32INT, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    2154:	61 97       	sbiw	r28, 0x11	; 17
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	f8 94       	cli
    215a:	de bf       	out	0x3e, r29	; 62
    215c:	0f be       	out	0x3f, r0	; 63
    215e:	cd bf       	out	0x3d, r28	; 61
    2160:	6a 87       	std	Y+10, r22	; 0x0a
    2162:	7b 87       	std	Y+11, r23	; 0x0b
    2164:	8c 87       	std	Y+12, r24	; 0x0c
    2166:	9d 87       	std	Y+13, r25	; 0x0d
    2168:	4e 87       	std	Y+14, r20	; 0x0e
    216a:	2f 87       	std	Y+15, r18	; 0x0f
	/* Local_u8LoopCtr: 	to Iterator for the loop
	 * Local_u8NOD: 		Number of Digits to make the positions of ones, tens, ...
	 * Local_u8CopyNOD: 	Copy of Number of Digits for the iteration in loop
	 * Local_u8Reminder: 	to save the Reminder (%) and check on it
	 */
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0, Local_u8NOD = 0, Local_u8CopyNOD = 0, Local_u8Reminder = 0;
    216c:	19 86       	std	Y+9, r1	; 0x09
    216e:	18 86       	std	Y+8, r1	; 0x08
    2170:	1f 82       	std	Y+7, r1	; 0x07
    2172:	1e 82       	std	Y+6, r1	; 0x06
    2174:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Temp = 0;
    2176:	19 82       	std	Y+1, r1	; 0x01
    2178:	1a 82       	std	Y+2, r1	; 0x02
    217a:	1b 82       	std	Y+3, r1	; 0x03
    217c:	1c 82       	std	Y+4, r1	; 0x04

	/*Checking on the Integer Number if it within the u32 range
	 * Check on the X position as we have 0 -> 15 position
	 * Check on the Y Position as we have 0 -> 1
	 */
	if(Copy_u32INT > MAX_U32_NB || Copy_u8XPos > 15 || Copy_u8YPos > 1)
    217e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2180:	80 31       	cpi	r24, 0x10	; 16
    2182:	18 f4       	brcc	.+6      	; 0x218a <LCD_u8WriteINT+0x3e>
    2184:	8f 85       	ldd	r24, Y+15	; 0x0f
    2186:	82 30       	cpi	r24, 0x02	; 2
    2188:	18 f0       	brcs	.+6      	; 0x2190 <LCD_u8WriteINT+0x44>
	{
		Local_u8Error = 1;
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	89 87       	std	Y+9, r24	; 0x09
    218e:	31 c1       	rjmp	.+610    	; 0x23f2 <LCD_u8WriteINT+0x2a6>

	/*if the Check is Okay with no problems*/
	else
	{
		/*Putting the Integer Value in a temporary Variable to use in our calculation without losing it*/
		Local_u32Temp = Copy_u32INT;
    2190:	8a 85       	ldd	r24, Y+10	; 0x0a
    2192:	9b 85       	ldd	r25, Y+11	; 0x0b
    2194:	ac 85       	ldd	r26, Y+12	; 0x0c
    2196:	bd 85       	ldd	r27, Y+13	; 0x0d
    2198:	89 83       	std	Y+1, r24	; 0x01
    219a:	9a 83       	std	Y+2, r25	; 0x02
    219c:	ab 83       	std	Y+3, r26	; 0x03
    219e:	bc 83       	std	Y+4, r27	; 0x04
    21a0:	15 c0       	rjmp	.+42     	; 0x21cc <LCD_u8WriteINT+0x80>

		/*Loop to get the Number of Digits*/
		while(Local_u32Temp != 0)
		{
			/*Dividing the Integer number by 10 till we have a result of Division Zero*/
			Local_u32Temp /= 10;
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	9a 81       	ldd	r25, Y+2	; 0x02
    21a6:	ab 81       	ldd	r26, Y+3	; 0x03
    21a8:	bc 81       	ldd	r27, Y+4	; 0x04
    21aa:	2a e0       	ldi	r18, 0x0A	; 10
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	50 e0       	ldi	r21, 0x00	; 0
    21b2:	bc 01       	movw	r22, r24
    21b4:	cd 01       	movw	r24, r26
    21b6:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__udivmodsi4>
    21ba:	da 01       	movw	r26, r20
    21bc:	c9 01       	movw	r24, r18
    21be:	89 83       	std	Y+1, r24	; 0x01
    21c0:	9a 83       	std	Y+2, r25	; 0x02
    21c2:	ab 83       	std	Y+3, r26	; 0x03
    21c4:	bc 83       	std	Y+4, r27	; 0x04

			/*With each Division Add 1 to Number of Digits*/
			Local_u8NOD++;
    21c6:	8f 81       	ldd	r24, Y+7	; 0x07
    21c8:	8f 5f       	subi	r24, 0xFF	; 255
    21ca:	8f 83       	std	Y+7, r24	; 0x07
	{
		/*Putting the Integer Value in a temporary Variable to use in our calculation without losing it*/
		Local_u32Temp = Copy_u32INT;

		/*Loop to get the Number of Digits*/
		while(Local_u32Temp != 0)
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	9a 81       	ldd	r25, Y+2	; 0x02
    21d0:	ab 81       	ldd	r26, Y+3	; 0x03
    21d2:	bc 81       	ldd	r27, Y+4	; 0x04
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	a1 05       	cpc	r26, r1
    21d8:	b1 05       	cpc	r27, r1
    21da:	19 f7       	brne	.-58     	; 0x21a2 <LCD_u8WriteINT+0x56>
			/*With each Division Add 1 to Number of Digits*/
			Local_u8NOD++;
		}

		/*Make a Copy from the Number of Digits to use it in looping*/
		Local_u8CopyNOD = Local_u8NOD;
    21dc:	8f 81       	ldd	r24, Y+7	; 0x07
    21de:	8e 83       	std	Y+6, r24	; 0x06

		/*Re-Make a copy of the Integer Number*/
		Local_u32Temp = Copy_u32INT;
    21e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    21e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    21e4:	ac 85       	ldd	r26, Y+12	; 0x0c
    21e6:	bd 85       	ldd	r27, Y+13	; 0x0d
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	9a 83       	std	Y+2, r25	; 0x02
    21ec:	ab 83       	std	Y+3, r26	; 0x03
    21ee:	bc 83       	std	Y+4, r27	; 0x04

		/*Now we have the Integer number and the Number of Digits so we will loop and in each loop
		 * we will make a Reminder from ones, tens and so on till our reminder be Zero
		 * and loop to print this number with the position on LCD
		 */
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Local_u8CopyNOD; Local_u8LoopCtr++)
    21f0:	18 86       	std	Y+8, r1	; 0x08
    21f2:	fa c0       	rjmp	.+500    	; 0x23e8 <LCD_u8WriteINT+0x29c>
		{
			/*Getting the Ones at first time and in second iteration tens and so on*/
			Local_u8Reminder = Local_u32Temp % 10;
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	9a 81       	ldd	r25, Y+2	; 0x02
    21f8:	ab 81       	ldd	r26, Y+3	; 0x03
    21fa:	bc 81       	ldd	r27, Y+4	; 0x04
    21fc:	2a e0       	ldi	r18, 0x0A	; 10
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	50 e0       	ldi	r21, 0x00	; 0
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__udivmodsi4>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	8d 83       	std	Y+5, r24	; 0x05

			/*By Switch we will print the number by the ASCII Code*/
			switch(Local_u8Reminder)
    2212:	8d 81       	ldd	r24, Y+5	; 0x05
    2214:	28 2f       	mov	r18, r24
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	39 8b       	std	Y+17, r19	; 0x11
    221a:	28 8b       	std	Y+16, r18	; 0x10
    221c:	88 89       	ldd	r24, Y+16	; 0x10
    221e:	99 89       	ldd	r25, Y+17	; 0x11
    2220:	84 30       	cpi	r24, 0x04	; 4
    2222:	91 05       	cpc	r25, r1
    2224:	09 f4       	brne	.+2      	; 0x2228 <LCD_u8WriteINT+0xdc>
    2226:	7b c0       	rjmp	.+246    	; 0x231e <LCD_u8WriteINT+0x1d2>
    2228:	28 89       	ldd	r18, Y+16	; 0x10
    222a:	39 89       	ldd	r19, Y+17	; 0x11
    222c:	25 30       	cpi	r18, 0x05	; 5
    222e:	31 05       	cpc	r19, r1
    2230:	ec f4       	brge	.+58     	; 0x226c <LCD_u8WriteINT+0x120>
    2232:	88 89       	ldd	r24, Y+16	; 0x10
    2234:	99 89       	ldd	r25, Y+17	; 0x11
    2236:	81 30       	cpi	r24, 0x01	; 1
    2238:	91 05       	cpc	r25, r1
    223a:	09 f4       	brne	.+2      	; 0x223e <LCD_u8WriteINT+0xf2>
    223c:	49 c0       	rjmp	.+146    	; 0x22d0 <LCD_u8WriteINT+0x184>
    223e:	28 89       	ldd	r18, Y+16	; 0x10
    2240:	39 89       	ldd	r19, Y+17	; 0x11
    2242:	22 30       	cpi	r18, 0x02	; 2
    2244:	31 05       	cpc	r19, r1
    2246:	2c f4       	brge	.+10     	; 0x2252 <LCD_u8WriteINT+0x106>
    2248:	88 89       	ldd	r24, Y+16	; 0x10
    224a:	99 89       	ldd	r25, Y+17	; 0x11
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	99 f1       	breq	.+102    	; 0x22b6 <LCD_u8WriteINT+0x16a>
    2250:	b4 c0       	rjmp	.+360    	; 0x23ba <LCD_u8WriteINT+0x26e>
    2252:	28 89       	ldd	r18, Y+16	; 0x10
    2254:	39 89       	ldd	r19, Y+17	; 0x11
    2256:	22 30       	cpi	r18, 0x02	; 2
    2258:	31 05       	cpc	r19, r1
    225a:	09 f4       	brne	.+2      	; 0x225e <LCD_u8WriteINT+0x112>
    225c:	46 c0       	rjmp	.+140    	; 0x22ea <LCD_u8WriteINT+0x19e>
    225e:	88 89       	ldd	r24, Y+16	; 0x10
    2260:	99 89       	ldd	r25, Y+17	; 0x11
    2262:	83 30       	cpi	r24, 0x03	; 3
    2264:	91 05       	cpc	r25, r1
    2266:	09 f4       	brne	.+2      	; 0x226a <LCD_u8WriteINT+0x11e>
    2268:	4d c0       	rjmp	.+154    	; 0x2304 <LCD_u8WriteINT+0x1b8>
    226a:	a7 c0       	rjmp	.+334    	; 0x23ba <LCD_u8WriteINT+0x26e>
    226c:	28 89       	ldd	r18, Y+16	; 0x10
    226e:	39 89       	ldd	r19, Y+17	; 0x11
    2270:	27 30       	cpi	r18, 0x07	; 7
    2272:	31 05       	cpc	r19, r1
    2274:	09 f4       	brne	.+2      	; 0x2278 <LCD_u8WriteINT+0x12c>
    2276:	7a c0       	rjmp	.+244    	; 0x236c <LCD_u8WriteINT+0x220>
    2278:	88 89       	ldd	r24, Y+16	; 0x10
    227a:	99 89       	ldd	r25, Y+17	; 0x11
    227c:	88 30       	cpi	r24, 0x08	; 8
    227e:	91 05       	cpc	r25, r1
    2280:	6c f4       	brge	.+26     	; 0x229c <LCD_u8WriteINT+0x150>
    2282:	28 89       	ldd	r18, Y+16	; 0x10
    2284:	39 89       	ldd	r19, Y+17	; 0x11
    2286:	25 30       	cpi	r18, 0x05	; 5
    2288:	31 05       	cpc	r19, r1
    228a:	09 f4       	brne	.+2      	; 0x228e <LCD_u8WriteINT+0x142>
    228c:	55 c0       	rjmp	.+170    	; 0x2338 <LCD_u8WriteINT+0x1ec>
    228e:	88 89       	ldd	r24, Y+16	; 0x10
    2290:	99 89       	ldd	r25, Y+17	; 0x11
    2292:	86 30       	cpi	r24, 0x06	; 6
    2294:	91 05       	cpc	r25, r1
    2296:	09 f4       	brne	.+2      	; 0x229a <LCD_u8WriteINT+0x14e>
    2298:	5c c0       	rjmp	.+184    	; 0x2352 <LCD_u8WriteINT+0x206>
    229a:	8f c0       	rjmp	.+286    	; 0x23ba <LCD_u8WriteINT+0x26e>
    229c:	28 89       	ldd	r18, Y+16	; 0x10
    229e:	39 89       	ldd	r19, Y+17	; 0x11
    22a0:	28 30       	cpi	r18, 0x08	; 8
    22a2:	31 05       	cpc	r19, r1
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <LCD_u8WriteINT+0x15c>
    22a6:	6f c0       	rjmp	.+222    	; 0x2386 <LCD_u8WriteINT+0x23a>
    22a8:	88 89       	ldd	r24, Y+16	; 0x10
    22aa:	99 89       	ldd	r25, Y+17	; 0x11
    22ac:	89 30       	cpi	r24, 0x09	; 9
    22ae:	91 05       	cpc	r25, r1
    22b0:	09 f4       	brne	.+2      	; 0x22b4 <LCD_u8WriteINT+0x168>
    22b2:	76 c0       	rjmp	.+236    	; 0x23a0 <LCD_u8WriteINT+0x254>
    22b4:	82 c0       	rjmp	.+260    	; 0x23ba <LCD_u8WriteINT+0x26e>
			 * (2 - 1) + 6 = 7 in space 7 will be 5 //TENS
			 * (1 - 1) + 6 = 6 in Space 6 will be 5 //Hundreds
			 * and so on
			 */
			case 0:		//ZERO ASCII Code is 48
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    22b6:	8f 81       	ldd	r24, Y+7	; 0x07
    22b8:	81 50       	subi	r24, 0x01	; 1
    22ba:	8f 83       	std	Y+7, r24	; 0x07
    22bc:	9f 81       	ldd	r25, Y+7	; 0x07
    22be:	8e 85       	ldd	r24, Y+14	; 0x0e
    22c0:	89 0f       	add	r24, r25
    22c2:	6f 85       	ldd	r22, Y+15	; 0x0f
    22c4:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
				LCD_voidWriteData(48);
    22c8:	80 e3       	ldi	r24, 0x30	; 48
    22ca:	0e 94 47 0c 	call	0x188e	; 0x188e <LCD_voidWriteData>
    22ce:	77 c0       	rjmp	.+238    	; 0x23be <LCD_u8WriteINT+0x272>
				break;

			case 1:		//ONE ASCII Code is 49
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    22d0:	8f 81       	ldd	r24, Y+7	; 0x07
    22d2:	81 50       	subi	r24, 0x01	; 1
    22d4:	8f 83       	std	Y+7, r24	; 0x07
    22d6:	9f 81       	ldd	r25, Y+7	; 0x07
    22d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    22da:	89 0f       	add	r24, r25
    22dc:	6f 85       	ldd	r22, Y+15	; 0x0f
    22de:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
				LCD_voidWriteData(49);
    22e2:	81 e3       	ldi	r24, 0x31	; 49
    22e4:	0e 94 47 0c 	call	0x188e	; 0x188e <LCD_voidWriteData>
    22e8:	6a c0       	rjmp	.+212    	; 0x23be <LCD_u8WriteINT+0x272>
				break;

			case 2:		//TWO ASCII Code is 50
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    22ea:	8f 81       	ldd	r24, Y+7	; 0x07
    22ec:	81 50       	subi	r24, 0x01	; 1
    22ee:	8f 83       	std	Y+7, r24	; 0x07
    22f0:	9f 81       	ldd	r25, Y+7	; 0x07
    22f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    22f4:	89 0f       	add	r24, r25
    22f6:	6f 85       	ldd	r22, Y+15	; 0x0f
    22f8:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
				LCD_voidWriteData(50);
    22fc:	82 e3       	ldi	r24, 0x32	; 50
    22fe:	0e 94 47 0c 	call	0x188e	; 0x188e <LCD_voidWriteData>
    2302:	5d c0       	rjmp	.+186    	; 0x23be <LCD_u8WriteINT+0x272>
				break;

			case 3:		//THREE ASCII Code is 51
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    2304:	8f 81       	ldd	r24, Y+7	; 0x07
    2306:	81 50       	subi	r24, 0x01	; 1
    2308:	8f 83       	std	Y+7, r24	; 0x07
    230a:	9f 81       	ldd	r25, Y+7	; 0x07
    230c:	8e 85       	ldd	r24, Y+14	; 0x0e
    230e:	89 0f       	add	r24, r25
    2310:	6f 85       	ldd	r22, Y+15	; 0x0f
    2312:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
				LCD_voidWriteData(51);
    2316:	83 e3       	ldi	r24, 0x33	; 51
    2318:	0e 94 47 0c 	call	0x188e	; 0x188e <LCD_voidWriteData>
    231c:	50 c0       	rjmp	.+160    	; 0x23be <LCD_u8WriteINT+0x272>
				break;

			case 4:		//FOUR ASCII Code is 52
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    231e:	8f 81       	ldd	r24, Y+7	; 0x07
    2320:	81 50       	subi	r24, 0x01	; 1
    2322:	8f 83       	std	Y+7, r24	; 0x07
    2324:	9f 81       	ldd	r25, Y+7	; 0x07
    2326:	8e 85       	ldd	r24, Y+14	; 0x0e
    2328:	89 0f       	add	r24, r25
    232a:	6f 85       	ldd	r22, Y+15	; 0x0f
    232c:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
				LCD_voidWriteData(52);
    2330:	84 e3       	ldi	r24, 0x34	; 52
    2332:	0e 94 47 0c 	call	0x188e	; 0x188e <LCD_voidWriteData>
    2336:	43 c0       	rjmp	.+134    	; 0x23be <LCD_u8WriteINT+0x272>
				break;

			case 5:		//FIVE ASCII Code is 53
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    2338:	8f 81       	ldd	r24, Y+7	; 0x07
    233a:	81 50       	subi	r24, 0x01	; 1
    233c:	8f 83       	std	Y+7, r24	; 0x07
    233e:	9f 81       	ldd	r25, Y+7	; 0x07
    2340:	8e 85       	ldd	r24, Y+14	; 0x0e
    2342:	89 0f       	add	r24, r25
    2344:	6f 85       	ldd	r22, Y+15	; 0x0f
    2346:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
				LCD_voidWriteData(53);
    234a:	85 e3       	ldi	r24, 0x35	; 53
    234c:	0e 94 47 0c 	call	0x188e	; 0x188e <LCD_voidWriteData>
    2350:	36 c0       	rjmp	.+108    	; 0x23be <LCD_u8WriteINT+0x272>
				break;

			case 6:		//SIX ASCII Code is 54
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    2352:	8f 81       	ldd	r24, Y+7	; 0x07
    2354:	81 50       	subi	r24, 0x01	; 1
    2356:	8f 83       	std	Y+7, r24	; 0x07
    2358:	9f 81       	ldd	r25, Y+7	; 0x07
    235a:	8e 85       	ldd	r24, Y+14	; 0x0e
    235c:	89 0f       	add	r24, r25
    235e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2360:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
				LCD_voidWriteData(54);
    2364:	86 e3       	ldi	r24, 0x36	; 54
    2366:	0e 94 47 0c 	call	0x188e	; 0x188e <LCD_voidWriteData>
    236a:	29 c0       	rjmp	.+82     	; 0x23be <LCD_u8WriteINT+0x272>
				break;

			case 7:		//SEVEN ASCII Code is 55
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    236c:	8f 81       	ldd	r24, Y+7	; 0x07
    236e:	81 50       	subi	r24, 0x01	; 1
    2370:	8f 83       	std	Y+7, r24	; 0x07
    2372:	9f 81       	ldd	r25, Y+7	; 0x07
    2374:	8e 85       	ldd	r24, Y+14	; 0x0e
    2376:	89 0f       	add	r24, r25
    2378:	6f 85       	ldd	r22, Y+15	; 0x0f
    237a:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
				LCD_voidWriteData(55);
    237e:	87 e3       	ldi	r24, 0x37	; 55
    2380:	0e 94 47 0c 	call	0x188e	; 0x188e <LCD_voidWriteData>
    2384:	1c c0       	rjmp	.+56     	; 0x23be <LCD_u8WriteINT+0x272>
				break;

			case 8:		//EIGHT ASCII Code is 56
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    2386:	8f 81       	ldd	r24, Y+7	; 0x07
    2388:	81 50       	subi	r24, 0x01	; 1
    238a:	8f 83       	std	Y+7, r24	; 0x07
    238c:	9f 81       	ldd	r25, Y+7	; 0x07
    238e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2390:	89 0f       	add	r24, r25
    2392:	6f 85       	ldd	r22, Y+15	; 0x0f
    2394:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
				LCD_voidWriteData(56);
    2398:	88 e3       	ldi	r24, 0x38	; 56
    239a:	0e 94 47 0c 	call	0x188e	; 0x188e <LCD_voidWriteData>
    239e:	0f c0       	rjmp	.+30     	; 0x23be <LCD_u8WriteINT+0x272>
				break;

			case 9:		//NINE ASCII Code is 57
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    23a0:	8f 81       	ldd	r24, Y+7	; 0x07
    23a2:	81 50       	subi	r24, 0x01	; 1
    23a4:	8f 83       	std	Y+7, r24	; 0x07
    23a6:	9f 81       	ldd	r25, Y+7	; 0x07
    23a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    23aa:	89 0f       	add	r24, r25
    23ac:	6f 85       	ldd	r22, Y+15	; 0x0f
    23ae:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
				LCD_voidWriteData(57);
    23b2:	89 e3       	ldi	r24, 0x39	; 57
    23b4:	0e 94 47 0c 	call	0x188e	; 0x188e <LCD_voidWriteData>
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <LCD_u8WriteINT+0x272>
				break;

			default:
				Local_u8Error = 1;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	89 87       	std	Y+9, r24	; 0x09
				break;
			}

			/*Dividing The Temp by 10 to get the Tens, Hundreds ... in every Iteration*/
			Local_u32Temp /= 10;
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	9a 81       	ldd	r25, Y+2	; 0x02
    23c2:	ab 81       	ldd	r26, Y+3	; 0x03
    23c4:	bc 81       	ldd	r27, Y+4	; 0x04
    23c6:	2a e0       	ldi	r18, 0x0A	; 10
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e0       	ldi	r20, 0x00	; 0
    23cc:	50 e0       	ldi	r21, 0x00	; 0
    23ce:	bc 01       	movw	r22, r24
    23d0:	cd 01       	movw	r24, r26
    23d2:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__udivmodsi4>
    23d6:	da 01       	movw	r26, r20
    23d8:	c9 01       	movw	r24, r18
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	9a 83       	std	Y+2, r25	; 0x02
    23de:	ab 83       	std	Y+3, r26	; 0x03
    23e0:	bc 83       	std	Y+4, r27	; 0x04

		/*Now we have the Integer number and the Number of Digits so we will loop and in each loop
		 * we will make a Reminder from ones, tens and so on till our reminder be Zero
		 * and loop to print this number with the position on LCD
		 */
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Local_u8CopyNOD; Local_u8LoopCtr++)
    23e2:	88 85       	ldd	r24, Y+8	; 0x08
    23e4:	8f 5f       	subi	r24, 0xFF	; 255
    23e6:	88 87       	std	Y+8, r24	; 0x08
    23e8:	98 85       	ldd	r25, Y+8	; 0x08
    23ea:	8e 81       	ldd	r24, Y+6	; 0x06
    23ec:	98 17       	cp	r25, r24
    23ee:	08 f4       	brcc	.+2      	; 0x23f2 <LCD_u8WriteINT+0x2a6>
    23f0:	01 cf       	rjmp	.-510    	; 0x21f4 <LCD_u8WriteINT+0xa8>
			/*Dividing The Temp by 10 to get the Tens, Hundreds ... in every Iteration*/
			Local_u32Temp /= 10;
		}
	}

	return Local_u8Error;
    23f2:	89 85       	ldd	r24, Y+9	; 0x09
}
    23f4:	61 96       	adiw	r28, 0x11	; 17
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <LCD_u8StringScroll>:
 * Input		: The String, String size, Time in between, Left or Right, First Line or Second one
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8StringScroll(u8 *Copy_u8String, u8 Copy_u8StrSize, u16 Copy_u16Time, u8 Copy_u8RorL, u8 Copy_u8YPos)
{
    2406:	0f 93       	push	r16
    2408:	1f 93       	push	r17
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	c0 56       	subi	r28, 0x60	; 96
    2414:	d0 40       	sbci	r29, 0x00	; 0
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	cd bf       	out	0x3d, r28	; 61
    2420:	fe 01       	movw	r30, r28
    2422:	e6 5a       	subi	r30, 0xA6	; 166
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	91 83       	std	Z+1, r25	; 0x01
    2428:	80 83       	st	Z, r24
    242a:	fe 01       	movw	r30, r28
    242c:	e4 5a       	subi	r30, 0xA4	; 164
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	60 83       	st	Z, r22
    2432:	fe 01       	movw	r30, r28
    2434:	e3 5a       	subi	r30, 0xA3	; 163
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	51 83       	std	Z+1, r21	; 0x01
    243a:	40 83       	st	Z, r20
    243c:	fe 01       	movw	r30, r28
    243e:	e1 5a       	subi	r30, 0xA1	; 161
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	20 83       	st	Z, r18
    2444:	fe 01       	movw	r30, r28
    2446:	e0 5a       	subi	r30, 0xA0	; 160
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	00 83       	st	Z, r16
	/*Local Variables*/
	u8 Local_u8Error = 0;
    244c:	fe 01       	movw	r30, r28
    244e:	e7 5a       	subi	r30, 0xA7	; 167
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	10 82       	st	Z, r1
	u8 Local_u8Move = 0, Local_u8Move2 = 0, Local_u8Move3 = 0;
    2454:	fe 01       	movw	r30, r28
    2456:	e8 5a       	subi	r30, 0xA8	; 168
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	10 82       	st	Z, r1
    245c:	fe 01       	movw	r30, r28
    245e:	e9 5a       	subi	r30, 0xA9	; 169
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	10 82       	st	Z, r1
    2464:	fe 01       	movw	r30, r28
    2466:	ea 5a       	subi	r30, 0xAA	; 170
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	10 82       	st	Z, r1
	u8 Copy_u8StringSize = Copy_u8StrSize;
    246c:	de 01       	movw	r26, r28
    246e:	ab 5a       	subi	r26, 0xAB	; 171
    2470:	bf 4f       	sbci	r27, 0xFF	; 255
    2472:	fe 01       	movw	r30, r28
    2474:	e4 5a       	subi	r30, 0xA4	; 164
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	80 81       	ld	r24, Z
    247a:	8c 93       	st	X, r24

	/* Check for String Size as the maximum is 20 Char
	 * Check for the Y Position 0 or 1
	 * Check for the Scrolling Direction Left Or Right
	 */
	if(Copy_u8StrSize > LCD_MAX_CHAR || Copy_u8YPos > 1 || Copy_u8RorL > 1)
    247c:	fe 01       	movw	r30, r28
    247e:	e4 5a       	subi	r30, 0xA4	; 164
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	80 81       	ld	r24, Z
    2484:	85 31       	cpi	r24, 0x15	; 21
    2486:	60 f4       	brcc	.+24     	; 0x24a0 <LCD_u8StringScroll+0x9a>
    2488:	fe 01       	movw	r30, r28
    248a:	e0 5a       	subi	r30, 0xA0	; 160
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 81       	ld	r24, Z
    2490:	82 30       	cpi	r24, 0x02	; 2
    2492:	30 f4       	brcc	.+12     	; 0x24a0 <LCD_u8StringScroll+0x9a>
    2494:	fe 01       	movw	r30, r28
    2496:	e1 5a       	subi	r30, 0xA1	; 161
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	80 81       	ld	r24, Z
    249c:	82 30       	cpi	r24, 0x02	; 2
    249e:	30 f0       	brcs	.+12     	; 0x24ac <LCD_u8StringScroll+0xa6>
	{
		Local_u8Error = 1;
    24a0:	fe 01       	movw	r30, r28
    24a2:	e7 5a       	subi	r30, 0xA7	; 167
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	80 83       	st	Z, r24
    24aa:	d9 c5       	rjmp	.+2994   	; 0x305e <LCD_u8StringScroll+0xc58>
	}

	else
	{
		/*This if Scrolling is to Right in Line 1*/
		if(Copy_u8RorL == LCD_SCROLL_TO_RIGHT && Copy_u8YPos == 0)
    24ac:	fe 01       	movw	r30, r28
    24ae:	e1 5a       	subi	r30, 0xA1	; 161
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	80 81       	ld	r24, Z
    24b4:	81 30       	cpi	r24, 0x01	; 1
    24b6:	09 f0       	breq	.+2      	; 0x24ba <LCD_u8StringScroll+0xb4>
    24b8:	e9 c1       	rjmp	.+978    	; 0x288c <LCD_u8StringScroll+0x486>
    24ba:	fe 01       	movw	r30, r28
    24bc:	e0 5a       	subi	r30, 0xA0	; 160
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	80 81       	ld	r24, Z
    24c2:	88 23       	and	r24, r24
    24c4:	09 f0       	breq	.+2      	; 0x24c8 <LCD_u8StringScroll+0xc2>
    24c6:	e2 c1       	rjmp	.+964    	; 0x288c <LCD_u8StringScroll+0x486>
		{
			/*Make the Move2 = Over flow of the first lone - string size*/
			Local_u8Move2 = LCD_OV_LINE_1 - (Copy_u8StrSize);
    24c8:	de 01       	movw	r26, r28
    24ca:	a9 5a       	subi	r26, 0xA9	; 169
    24cc:	bf 4f       	sbci	r27, 0xFF	; 255
    24ce:	fe 01       	movw	r30, r28
    24d0:	e4 5a       	subi	r30, 0xA4	; 164
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	97 e6       	ldi	r25, 0x67	; 103
    24d6:	80 81       	ld	r24, Z
    24d8:	29 2f       	mov	r18, r25
    24da:	28 1b       	sub	r18, r24
    24dc:	82 2f       	mov	r24, r18
    24de:	8c 93       	st	X, r24

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move <= LCD_MAX_SCROLL_LINE; Local_u8Move++)
    24e0:	fe 01       	movw	r30, r28
    24e2:	e8 5a       	subi	r30, 0xA8	; 168
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	10 82       	st	Z, r1
    24e8:	c9 c1       	rjmp	.+914    	; 0x287c <LCD_u8StringScroll+0x476>
			{
				/*if string bigger than 16*/
				if(Local_u8Move >= (LCD_LINE_NB_OF_DIGITS - Copy_u8StrSize))
    24ea:	fe 01       	movw	r30, r28
    24ec:	e8 5a       	subi	r30, 0xA8	; 168
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	80 81       	ld	r24, Z
    24f2:	48 2f       	mov	r20, r24
    24f4:	50 e0       	ldi	r21, 0x00	; 0
    24f6:	fe 01       	movw	r30, r28
    24f8:	e4 5a       	subi	r30, 0xA4	; 164
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	80 81       	ld	r24, Z
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	80 e1       	ldi	r24, 0x10	; 16
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	82 1b       	sub	r24, r18
    2508:	93 0b       	sbc	r25, r19
    250a:	48 17       	cp	r20, r24
    250c:	59 07       	cpc	r21, r25
    250e:	0c f4       	brge	.+2      	; 0x2512 <LCD_u8StringScroll+0x10c>
    2510:	06 c1       	rjmp	.+524    	; 0x271e <LCD_u8StringScroll+0x318>
				{
					/*first print the string in the shown position in 16*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2512:	fe 01       	movw	r30, r28
    2514:	e8 5a       	subi	r30, 0xA8	; 168
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	de 01       	movw	r26, r28
    251a:	a0 5a       	subi	r26, 0xA0	; 160
    251c:	bf 4f       	sbci	r27, 0xFF	; 255
    251e:	80 81       	ld	r24, Z
    2520:	6c 91       	ld	r22, X
    2522:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2526:	fe 01       	movw	r30, r28
    2528:	e6 5a       	subi	r30, 0xA6	; 166
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	80 81       	ld	r24, Z
    252e:	91 81       	ldd	r25, Z+1	; 0x01
    2530:	fe 01       	movw	r30, r28
    2532:	e4 5a       	subi	r30, 0xA4	; 164
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	60 81       	ld	r22, Z
    2538:	0e 94 22 10 	call	0x2044	; 0x2044 <LCD_u8WriteString>

					/*print the string in un-shown position */
					LCD_u8GoToXY(Local_u8Move2, Copy_u8YPos);
    253c:	fe 01       	movw	r30, r28
    253e:	e9 5a       	subi	r30, 0xA9	; 169
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	de 01       	movw	r26, r28
    2544:	a0 5a       	subi	r26, 0xA0	; 160
    2546:	bf 4f       	sbci	r27, 0xFF	; 255
    2548:	80 81       	ld	r24, Z
    254a:	6c 91       	ld	r22, X
    254c:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2550:	fe 01       	movw	r30, r28
    2552:	e6 5a       	subi	r30, 0xA6	; 166
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	80 81       	ld	r24, Z
    2558:	91 81       	ldd	r25, Z+1	; 0x01
    255a:	fe 01       	movw	r30, r28
    255c:	e4 5a       	subi	r30, 0xA4	; 164
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	60 81       	ld	r22, Z
    2562:	0e 94 22 10 	call	0x2044	; 0x2044 <LCD_u8WriteString>

//					LCD_u8WriteINT(Local_u8Move, 10, 1);
//					LCD_u8WriteINT(Copy_u8StrSize, 5, 1);

					/*delay with the given time*/
					_delay_ms(Copy_u16Time);
    2566:	fe 01       	movw	r30, r28
    2568:	e3 5a       	subi	r30, 0xA3	; 163
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	80 81       	ld	r24, Z
    256e:	91 81       	ldd	r25, Z+1	; 0x01
    2570:	cc 01       	movw	r24, r24
    2572:	a0 e0       	ldi	r26, 0x00	; 0
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	fe 01       	movw	r30, r28
    2584:	ef 5a       	subi	r30, 0xAF	; 175
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	80 83       	st	Z, r24
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	a2 83       	std	Z+2, r26	; 0x02
    258e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2590:	8e 01       	movw	r16, r28
    2592:	03 5b       	subi	r16, 0xB3	; 179
    2594:	1f 4f       	sbci	r17, 0xFF	; 255
    2596:	fe 01       	movw	r30, r28
    2598:	ef 5a       	subi	r30, 0xAF	; 175
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	60 81       	ld	r22, Z
    259e:	71 81       	ldd	r23, Z+1	; 0x01
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	93 81       	ldd	r25, Z+3	; 0x03
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	4a ef       	ldi	r20, 0xFA	; 250
    25aa:	54 e4       	ldi	r21, 0x44	; 68
    25ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	f8 01       	movw	r30, r16
    25b6:	80 83       	st	Z, r24
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	a2 83       	std	Z+2, r26	; 0x02
    25bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25be:	fe 01       	movw	r30, r28
    25c0:	e3 5b       	subi	r30, 0xB3	; 179
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	60 81       	ld	r22, Z
    25c6:	71 81       	ldd	r23, Z+1	; 0x01
    25c8:	82 81       	ldd	r24, Z+2	; 0x02
    25ca:	93 81       	ldd	r25, Z+3	; 0x03
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e8       	ldi	r20, 0x80	; 128
    25d2:	5f e3       	ldi	r21, 0x3F	; 63
    25d4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25d8:	88 23       	and	r24, r24
    25da:	44 f4       	brge	.+16     	; 0x25ec <LCD_u8StringScroll+0x1e6>
		__ticks = 1;
    25dc:	fe 01       	movw	r30, r28
    25de:	e5 5b       	subi	r30, 0xB5	; 181
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	91 83       	std	Z+1, r25	; 0x01
    25e8:	80 83       	st	Z, r24
    25ea:	64 c0       	rjmp	.+200    	; 0x26b4 <LCD_u8StringScroll+0x2ae>
	else if (__tmp > 65535)
    25ec:	fe 01       	movw	r30, r28
    25ee:	e3 5b       	subi	r30, 0xB3	; 179
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	60 81       	ld	r22, Z
    25f4:	71 81       	ldd	r23, Z+1	; 0x01
    25f6:	82 81       	ldd	r24, Z+2	; 0x02
    25f8:	93 81       	ldd	r25, Z+3	; 0x03
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	3f ef       	ldi	r19, 0xFF	; 255
    25fe:	4f e7       	ldi	r20, 0x7F	; 127
    2600:	57 e4       	ldi	r21, 0x47	; 71
    2602:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2606:	18 16       	cp	r1, r24
    2608:	0c f0       	brlt	.+2      	; 0x260c <LCD_u8StringScroll+0x206>
    260a:	43 c0       	rjmp	.+134    	; 0x2692 <LCD_u8StringScroll+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260c:	fe 01       	movw	r30, r28
    260e:	ef 5a       	subi	r30, 0xAF	; 175
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	60 81       	ld	r22, Z
    2614:	71 81       	ldd	r23, Z+1	; 0x01
    2616:	82 81       	ldd	r24, Z+2	; 0x02
    2618:	93 81       	ldd	r25, Z+3	; 0x03
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	40 e2       	ldi	r20, 0x20	; 32
    2620:	51 e4       	ldi	r21, 0x41	; 65
    2622:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	8e 01       	movw	r16, r28
    262c:	05 5b       	subi	r16, 0xB5	; 181
    262e:	1f 4f       	sbci	r17, 0xFF	; 255
    2630:	bc 01       	movw	r22, r24
    2632:	cd 01       	movw	r24, r26
    2634:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	f8 01       	movw	r30, r16
    263e:	91 83       	std	Z+1, r25	; 0x01
    2640:	80 83       	st	Z, r24
    2642:	1f c0       	rjmp	.+62     	; 0x2682 <LCD_u8StringScroll+0x27c>
    2644:	fe 01       	movw	r30, r28
    2646:	e7 5b       	subi	r30, 0xB7	; 183
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	88 ec       	ldi	r24, 0xC8	; 200
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	91 83       	std	Z+1, r25	; 0x01
    2650:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2652:	fe 01       	movw	r30, r28
    2654:	e7 5b       	subi	r30, 0xB7	; 183
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	80 81       	ld	r24, Z
    265a:	91 81       	ldd	r25, Z+1	; 0x01
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	f1 f7       	brne	.-4      	; 0x265c <LCD_u8StringScroll+0x256>
    2660:	fe 01       	movw	r30, r28
    2662:	e7 5b       	subi	r30, 0xB7	; 183
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	91 83       	std	Z+1, r25	; 0x01
    2668:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266a:	de 01       	movw	r26, r28
    266c:	a5 5b       	subi	r26, 0xB5	; 181
    266e:	bf 4f       	sbci	r27, 0xFF	; 255
    2670:	fe 01       	movw	r30, r28
    2672:	e5 5b       	subi	r30, 0xB5	; 181
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	80 81       	ld	r24, Z
    2678:	91 81       	ldd	r25, Z+1	; 0x01
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	11 96       	adiw	r26, 0x01	; 1
    267e:	9c 93       	st	X, r25
    2680:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2682:	fe 01       	movw	r30, r28
    2684:	e5 5b       	subi	r30, 0xB5	; 181
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	80 81       	ld	r24, Z
    268a:	91 81       	ldd	r25, Z+1	; 0x01
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	d1 f6       	brne	.-76     	; 0x2644 <LCD_u8StringScroll+0x23e>
    2690:	27 c0       	rjmp	.+78     	; 0x26e0 <LCD_u8StringScroll+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2692:	8e 01       	movw	r16, r28
    2694:	05 5b       	subi	r16, 0xB5	; 181
    2696:	1f 4f       	sbci	r17, 0xFF	; 255
    2698:	fe 01       	movw	r30, r28
    269a:	e3 5b       	subi	r30, 0xB3	; 179
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	60 81       	ld	r22, Z
    26a0:	71 81       	ldd	r23, Z+1	; 0x01
    26a2:	82 81       	ldd	r24, Z+2	; 0x02
    26a4:	93 81       	ldd	r25, Z+3	; 0x03
    26a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	f8 01       	movw	r30, r16
    26b0:	91 83       	std	Z+1, r25	; 0x01
    26b2:	80 83       	st	Z, r24
    26b4:	de 01       	movw	r26, r28
    26b6:	a9 5b       	subi	r26, 0xB9	; 185
    26b8:	bf 4f       	sbci	r27, 0xFF	; 255
    26ba:	fe 01       	movw	r30, r28
    26bc:	e5 5b       	subi	r30, 0xB5	; 181
    26be:	ff 4f       	sbci	r31, 0xFF	; 255
    26c0:	80 81       	ld	r24, Z
    26c2:	91 81       	ldd	r25, Z+1	; 0x01
    26c4:	8d 93       	st	X+, r24
    26c6:	9c 93       	st	X, r25
    26c8:	fe 01       	movw	r30, r28
    26ca:	e9 5b       	subi	r30, 0xB9	; 185
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	80 81       	ld	r24, Z
    26d0:	91 81       	ldd	r25, Z+1	; 0x01
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	f1 f7       	brne	.-4      	; 0x26d2 <LCD_u8StringScroll+0x2cc>
    26d6:	fe 01       	movw	r30, r28
    26d8:	e9 5b       	subi	r30, 0xB9	; 185
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	91 83       	std	Z+1, r25	; 0x01
    26de:	80 83       	st	Z, r24

					/*Clear the LCD*/
					LCD_voidClearLCD();
    26e0:	0e 94 18 10 	call	0x2030	; 0x2030 <LCD_voidClearLCD>

					/*increment Move 2*/
					Local_u8Move2++;
    26e4:	de 01       	movw	r26, r28
    26e6:	a9 5a       	subi	r26, 0xA9	; 169
    26e8:	bf 4f       	sbci	r27, 0xFF	; 255
    26ea:	fe 01       	movw	r30, r28
    26ec:	e9 5a       	subi	r30, 0xA9	; 169
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	80 81       	ld	r24, Z
    26f2:	8f 5f       	subi	r24, 0xFF	; 255
    26f4:	8c 93       	st	X, r24

					/*if Move 2 = 16 give it its initial value and break the loop*/
					if(Local_u8Move2 == LCD_OV_LINE_1)
    26f6:	fe 01       	movw	r30, r28
    26f8:	e9 5a       	subi	r30, 0xA9	; 169
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	87 36       	cpi	r24, 0x67	; 103
    2700:	09 f0       	breq	.+2      	; 0x2704 <LCD_u8StringScroll+0x2fe>
    2702:	b3 c0       	rjmp	.+358    	; 0x286a <LCD_u8StringScroll+0x464>
					{
						Local_u8Move2 = LCD_OV_LINE_1 - (Copy_u8StrSize);
    2704:	de 01       	movw	r26, r28
    2706:	a9 5a       	subi	r26, 0xA9	; 169
    2708:	bf 4f       	sbci	r27, 0xFF	; 255
    270a:	fe 01       	movw	r30, r28
    270c:	e4 5a       	subi	r30, 0xA4	; 164
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	97 e6       	ldi	r25, 0x67	; 103
    2712:	80 81       	ld	r24, Z
    2714:	f9 2f       	mov	r31, r25
    2716:	f8 1b       	sub	r31, r24
    2718:	8f 2f       	mov	r24, r31
    271a:	8c 93       	st	X, r24
    271c:	a0 c4       	rjmp	.+2368   	; 0x305e <LCD_u8StringScroll+0xc58>

				/*else mean string < 16*/
				else
				{
					/*Print the string*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    271e:	fe 01       	movw	r30, r28
    2720:	e8 5a       	subi	r30, 0xA8	; 168
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	de 01       	movw	r26, r28
    2726:	a0 5a       	subi	r26, 0xA0	; 160
    2728:	bf 4f       	sbci	r27, 0xFF	; 255
    272a:	80 81       	ld	r24, Z
    272c:	6c 91       	ld	r22, X
    272e:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2732:	fe 01       	movw	r30, r28
    2734:	e6 5a       	subi	r30, 0xA6	; 166
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	80 81       	ld	r24, Z
    273a:	91 81       	ldd	r25, Z+1	; 0x01
    273c:	fe 01       	movw	r30, r28
    273e:	e4 5a       	subi	r30, 0xA4	; 164
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	60 81       	ld	r22, Z
    2744:	0e 94 22 10 	call	0x2044	; 0x2044 <LCD_u8WriteString>

//					LCD_u8WriteINT(Local_u8Move, 10, 1);
//					LCD_u8WriteINT(Copy_u8StrSize, 5, 1);

					/*Delay the given time*/
					_delay_ms(Copy_u16Time);
    2748:	fe 01       	movw	r30, r28
    274a:	e3 5a       	subi	r30, 0xA3	; 163
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	80 81       	ld	r24, Z
    2750:	91 81       	ldd	r25, Z+1	; 0x01
    2752:	cc 01       	movw	r24, r24
    2754:	a0 e0       	ldi	r26, 0x00	; 0
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	bc 01       	movw	r22, r24
    275a:	cd 01       	movw	r24, r26
    275c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	fe 01       	movw	r30, r28
    2766:	ed 5b       	subi	r30, 0xBD	; 189
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	80 83       	st	Z, r24
    276c:	91 83       	std	Z+1, r25	; 0x01
    276e:	a2 83       	std	Z+2, r26	; 0x02
    2770:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2772:	8e 01       	movw	r16, r28
    2774:	01 5c       	subi	r16, 0xC1	; 193
    2776:	1f 4f       	sbci	r17, 0xFF	; 255
    2778:	fe 01       	movw	r30, r28
    277a:	ed 5b       	subi	r30, 0xBD	; 189
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	60 81       	ld	r22, Z
    2780:	71 81       	ldd	r23, Z+1	; 0x01
    2782:	82 81       	ldd	r24, Z+2	; 0x02
    2784:	93 81       	ldd	r25, Z+3	; 0x03
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	4a ef       	ldi	r20, 0xFA	; 250
    278c:	54 e4       	ldi	r21, 0x44	; 68
    278e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	f8 01       	movw	r30, r16
    2798:	80 83       	st	Z, r24
    279a:	91 83       	std	Z+1, r25	; 0x01
    279c:	a2 83       	std	Z+2, r26	; 0x02
    279e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27a0:	fe 01       	movw	r30, r28
    27a2:	ff 96       	adiw	r30, 0x3f	; 63
    27a4:	60 81       	ld	r22, Z
    27a6:	71 81       	ldd	r23, Z+1	; 0x01
    27a8:	82 81       	ldd	r24, Z+2	; 0x02
    27aa:	93 81       	ldd	r25, Z+3	; 0x03
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e8       	ldi	r20, 0x80	; 128
    27b2:	5f e3       	ldi	r21, 0x3F	; 63
    27b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27b8:	88 23       	and	r24, r24
    27ba:	2c f4       	brge	.+10     	; 0x27c6 <LCD_u8StringScroll+0x3c0>
		__ticks = 1;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	9e af       	std	Y+62, r25	; 0x3e
    27c2:	8d af       	std	Y+61, r24	; 0x3d
    27c4:	46 c0       	rjmp	.+140    	; 0x2852 <LCD_u8StringScroll+0x44c>
	else if (__tmp > 65535)
    27c6:	fe 01       	movw	r30, r28
    27c8:	ff 96       	adiw	r30, 0x3f	; 63
    27ca:	60 81       	ld	r22, Z
    27cc:	71 81       	ldd	r23, Z+1	; 0x01
    27ce:	82 81       	ldd	r24, Z+2	; 0x02
    27d0:	93 81       	ldd	r25, Z+3	; 0x03
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	3f ef       	ldi	r19, 0xFF	; 255
    27d6:	4f e7       	ldi	r20, 0x7F	; 127
    27d8:	57 e4       	ldi	r21, 0x47	; 71
    27da:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27de:	18 16       	cp	r1, r24
    27e0:	64 f5       	brge	.+88     	; 0x283a <LCD_u8StringScroll+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e2:	fe 01       	movw	r30, r28
    27e4:	ed 5b       	subi	r30, 0xBD	; 189
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	60 81       	ld	r22, Z
    27ea:	71 81       	ldd	r23, Z+1	; 0x01
    27ec:	82 81       	ldd	r24, Z+2	; 0x02
    27ee:	93 81       	ldd	r25, Z+3	; 0x03
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e2       	ldi	r20, 0x20	; 32
    27f6:	51 e4       	ldi	r21, 0x41	; 65
    27f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	bc 01       	movw	r22, r24
    2802:	cd 01       	movw	r24, r26
    2804:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	9e af       	std	Y+62, r25	; 0x3e
    280e:	8d af       	std	Y+61, r24	; 0x3d
    2810:	0f c0       	rjmp	.+30     	; 0x2830 <LCD_u8StringScroll+0x42a>
    2812:	88 ec       	ldi	r24, 0xC8	; 200
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	9c af       	std	Y+60, r25	; 0x3c
    2818:	8b af       	std	Y+59, r24	; 0x3b
    281a:	8b ad       	ldd	r24, Y+59	; 0x3b
    281c:	9c ad       	ldd	r25, Y+60	; 0x3c
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <LCD_u8StringScroll+0x418>
    2822:	9c af       	std	Y+60, r25	; 0x3c
    2824:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2826:	8d ad       	ldd	r24, Y+61	; 0x3d
    2828:	9e ad       	ldd	r25, Y+62	; 0x3e
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	9e af       	std	Y+62, r25	; 0x3e
    282e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2830:	8d ad       	ldd	r24, Y+61	; 0x3d
    2832:	9e ad       	ldd	r25, Y+62	; 0x3e
    2834:	00 97       	sbiw	r24, 0x00	; 0
    2836:	69 f7       	brne	.-38     	; 0x2812 <LCD_u8StringScroll+0x40c>
    2838:	16 c0       	rjmp	.+44     	; 0x2866 <LCD_u8StringScroll+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283a:	fe 01       	movw	r30, r28
    283c:	ff 96       	adiw	r30, 0x3f	; 63
    283e:	60 81       	ld	r22, Z
    2840:	71 81       	ldd	r23, Z+1	; 0x01
    2842:	82 81       	ldd	r24, Z+2	; 0x02
    2844:	93 81       	ldd	r25, Z+3	; 0x03
    2846:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	9e af       	std	Y+62, r25	; 0x3e
    2850:	8d af       	std	Y+61, r24	; 0x3d
    2852:	8d ad       	ldd	r24, Y+61	; 0x3d
    2854:	9e ad       	ldd	r25, Y+62	; 0x3e
    2856:	9a af       	std	Y+58, r25	; 0x3a
    2858:	89 af       	std	Y+57, r24	; 0x39
    285a:	89 ad       	ldd	r24, Y+57	; 0x39
    285c:	9a ad       	ldd	r25, Y+58	; 0x3a
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	f1 f7       	brne	.-4      	; 0x285e <LCD_u8StringScroll+0x458>
    2862:	9a af       	std	Y+58, r25	; 0x3a
    2864:	89 af       	std	Y+57, r24	; 0x39

					/*Clear LCD*/
					LCD_voidClearLCD();
    2866:	0e 94 18 10 	call	0x2030	; 0x2030 <LCD_voidClearLCD>
		{
			/*Make the Move2 = Over flow of the first lone - string size*/
			Local_u8Move2 = LCD_OV_LINE_1 - (Copy_u8StrSize);

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move <= LCD_MAX_SCROLL_LINE; Local_u8Move++)
    286a:	de 01       	movw	r26, r28
    286c:	a8 5a       	subi	r26, 0xA8	; 168
    286e:	bf 4f       	sbci	r27, 0xFF	; 255
    2870:	fe 01       	movw	r30, r28
    2872:	e8 5a       	subi	r30, 0xA8	; 168
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	80 81       	ld	r24, Z
    2878:	8f 5f       	subi	r24, 0xFF	; 255
    287a:	8c 93       	st	X, r24
    287c:	fe 01       	movw	r30, r28
    287e:	e8 5a       	subi	r30, 0xA8	; 168
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	80 81       	ld	r24, Z
    2884:	8a 32       	cpi	r24, 0x2A	; 42
    2886:	08 f4       	brcc	.+2      	; 0x288a <LCD_u8StringScroll+0x484>
    2888:	30 ce       	rjmp	.-928    	; 0x24ea <LCD_u8StringScroll+0xe4>
    288a:	e9 c3       	rjmp	.+2002   	; 0x305e <LCD_u8StringScroll+0xc58>
				}
			}
		}

		/*else mean scroll to left in Line 1*/
		else if(Copy_u8RorL == LCD_SCROLL_TO_LEFT && Copy_u8YPos == 0)
    288c:	fe 01       	movw	r30, r28
    288e:	e1 5a       	subi	r30, 0xA1	; 161
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 81       	ld	r24, Z
    2894:	88 23       	and	r24, r24
    2896:	09 f0       	breq	.+2      	; 0x289a <LCD_u8StringScroll+0x494>
    2898:	20 c1       	rjmp	.+576    	; 0x2ada <LCD_u8StringScroll+0x6d4>
    289a:	fe 01       	movw	r30, r28
    289c:	e0 5a       	subi	r30, 0xA0	; 160
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	80 81       	ld	r24, Z
    28a2:	88 23       	and	r24, r24
    28a4:	09 f0       	breq	.+2      	; 0x28a8 <LCD_u8StringScroll+0x4a2>
    28a6:	19 c1       	rjmp	.+562    	; 0x2ada <LCD_u8StringScroll+0x6d4>
		{
			/*Move2 = over flow + string size + 1 to make space between the last and first char in string */
			Local_u8Move2 = LCD_OV_LINE_1 + (Copy_u8StrSize + 1);
    28a8:	de 01       	movw	r26, r28
    28aa:	a9 5a       	subi	r26, 0xA9	; 169
    28ac:	bf 4f       	sbci	r27, 0xFF	; 255
    28ae:	fe 01       	movw	r30, r28
    28b0:	e4 5a       	subi	r30, 0xA4	; 164
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 81       	ld	r24, Z
    28b6:	88 59       	subi	r24, 0x98	; 152
    28b8:	8c 93       	st	X, r24

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    28ba:	fe 01       	movw	r30, r28
    28bc:	ea 5a       	subi	r30, 0xAA	; 170
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	80 e1       	ldi	r24, 0x10	; 16
    28c2:	80 83       	st	Z, r24

			/*make the Move = 104 (Over Flow + 1 (First char on LCD)) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_1 + 1); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    28c4:	fe 01       	movw	r30, r28
    28c6:	e8 5a       	subi	r30, 0xA8	; 168
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	88 e6       	ldi	r24, 0x68	; 104
    28cc:	80 83       	st	Z, r24
    28ce:	f9 c0       	rjmp	.+498    	; 0x2ac2 <LCD_u8StringScroll+0x6bc>
			{
				/*Print LCD with the Move as X position*/
				LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    28d0:	fe 01       	movw	r30, r28
    28d2:	e8 5a       	subi	r30, 0xA8	; 168
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	de 01       	movw	r26, r28
    28d8:	a0 5a       	subi	r26, 0xA0	; 160
    28da:	bf 4f       	sbci	r27, 0xFF	; 255
    28dc:	80 81       	ld	r24, Z
    28de:	6c 91       	ld	r22, X
    28e0:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
				LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    28e4:	fe 01       	movw	r30, r28
    28e6:	e6 5a       	subi	r30, 0xA6	; 166
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	80 81       	ld	r24, Z
    28ec:	91 81       	ldd	r25, Z+1	; 0x01
    28ee:	fe 01       	movw	r30, r28
    28f0:	e4 5a       	subi	r30, 0xA4	; 164
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	60 81       	ld	r22, Z
    28f6:	0e 94 22 10 	call	0x2044	; 0x2044 <LCD_u8WriteString>

				/*if String size less than 16*/
				if(Copy_u8StrSize < LCD_LINE_NB_OF_DIGITS)
    28fa:	fe 01       	movw	r30, r28
    28fc:	e4 5a       	subi	r30, 0xA4	; 164
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	80 81       	ld	r24, Z
    2902:	80 31       	cpi	r24, 0x10	; 16
    2904:	f8 f4       	brcc	.+62     	; 0x2944 <LCD_u8StringScroll+0x53e>
				{
					/*print with move 3 as X position*/
					LCD_u8GoToXY(Local_u8Move3 , Copy_u8YPos);
    2906:	fe 01       	movw	r30, r28
    2908:	ea 5a       	subi	r30, 0xAA	; 170
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	de 01       	movw	r26, r28
    290e:	a0 5a       	subi	r26, 0xA0	; 160
    2910:	bf 4f       	sbci	r27, 0xFF	; 255
    2912:	80 81       	ld	r24, Z
    2914:	6c 91       	ld	r22, X
    2916:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    291a:	fe 01       	movw	r30, r28
    291c:	e6 5a       	subi	r30, 0xA6	; 166
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	80 81       	ld	r24, Z
    2922:	91 81       	ldd	r25, Z+1	; 0x01
    2924:	fe 01       	movw	r30, r28
    2926:	e4 5a       	subi	r30, 0xA4	; 164
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	60 81       	ld	r22, Z
    292c:	0e 94 22 10 	call	0x2044	; 0x2044 <LCD_u8WriteString>

					/*De-crement move 3*/
					Local_u8Move3--;
    2930:	de 01       	movw	r26, r28
    2932:	aa 5a       	subi	r26, 0xAA	; 170
    2934:	bf 4f       	sbci	r27, 0xFF	; 255
    2936:	fe 01       	movw	r30, r28
    2938:	ea 5a       	subi	r30, 0xAA	; 170
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	80 81       	ld	r24, Z
    293e:	81 50       	subi	r24, 0x01	; 1
    2940:	8c 93       	st	X, r24
    2942:	1e c0       	rjmp	.+60     	; 0x2980 <LCD_u8StringScroll+0x57a>

				/*else mean string > 16*/
				else
				{
					/*print with the copy of string size as X position*/
					LCD_u8GoToXY(Copy_u8StringSize, Copy_u8YPos);
    2944:	fe 01       	movw	r30, r28
    2946:	eb 5a       	subi	r30, 0xAB	; 171
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	de 01       	movw	r26, r28
    294c:	a0 5a       	subi	r26, 0xA0	; 160
    294e:	bf 4f       	sbci	r27, 0xFF	; 255
    2950:	80 81       	ld	r24, Z
    2952:	6c 91       	ld	r22, X
    2954:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2958:	fe 01       	movw	r30, r28
    295a:	e6 5a       	subi	r30, 0xA6	; 166
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	80 81       	ld	r24, Z
    2960:	91 81       	ldd	r25, Z+1	; 0x01
    2962:	fe 01       	movw	r30, r28
    2964:	e4 5a       	subi	r30, 0xA4	; 164
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	60 81       	ld	r22, Z
    296a:	0e 94 22 10 	call	0x2044	; 0x2044 <LCD_u8WriteString>

					/*de-crement the copy of the sting size*/
					Copy_u8StringSize--;
    296e:	de 01       	movw	r26, r28
    2970:	ab 5a       	subi	r26, 0xAB	; 171
    2972:	bf 4f       	sbci	r27, 0xFF	; 255
    2974:	fe 01       	movw	r30, r28
    2976:	eb 5a       	subi	r30, 0xAB	; 171
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	80 81       	ld	r24, Z
    297c:	81 50       	subi	r24, 0x01	; 1
    297e:	8c 93       	st	X, r24
//				LCD_u8WriteINT(Local_u8Move, 10, 1);
//				LCD_u8WriteINT(Copy_u8StrSize, 5, 1);
//				LCD_u8WriteINT(Copy_u8StringSize, 1, 1);

				/*Delay with the given time*/
				_delay_ms(Copy_u16Time);
    2980:	fe 01       	movw	r30, r28
    2982:	e3 5a       	subi	r30, 0xA3	; 163
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	80 81       	ld	r24, Z
    2988:	91 81       	ldd	r25, Z+1	; 0x01
    298a:	cc 01       	movw	r24, r24
    298c:	a0 e0       	ldi	r26, 0x00	; 0
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	bc 01       	movw	r22, r24
    2992:	cd 01       	movw	r24, r26
    2994:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	8d ab       	std	Y+53, r24	; 0x35
    299e:	9e ab       	std	Y+54, r25	; 0x36
    29a0:	af ab       	std	Y+55, r26	; 0x37
    29a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a4:	6d a9       	ldd	r22, Y+53	; 0x35
    29a6:	7e a9       	ldd	r23, Y+54	; 0x36
    29a8:	8f a9       	ldd	r24, Y+55	; 0x37
    29aa:	98 ad       	ldd	r25, Y+56	; 0x38
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	4a ef       	ldi	r20, 0xFA	; 250
    29b2:	54 e4       	ldi	r21, 0x44	; 68
    29b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	89 ab       	std	Y+49, r24	; 0x31
    29be:	9a ab       	std	Y+50, r25	; 0x32
    29c0:	ab ab       	std	Y+51, r26	; 0x33
    29c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29c4:	69 a9       	ldd	r22, Y+49	; 0x31
    29c6:	7a a9       	ldd	r23, Y+50	; 0x32
    29c8:	8b a9       	ldd	r24, Y+51	; 0x33
    29ca:	9c a9       	ldd	r25, Y+52	; 0x34
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e8       	ldi	r20, 0x80	; 128
    29d2:	5f e3       	ldi	r21, 0x3F	; 63
    29d4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29d8:	88 23       	and	r24, r24
    29da:	2c f4       	brge	.+10     	; 0x29e6 <LCD_u8StringScroll+0x5e0>
		__ticks = 1;
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	98 ab       	std	Y+48, r25	; 0x30
    29e2:	8f a7       	std	Y+47, r24	; 0x2f
    29e4:	3f c0       	rjmp	.+126    	; 0x2a64 <LCD_u8StringScroll+0x65e>
	else if (__tmp > 65535)
    29e6:	69 a9       	ldd	r22, Y+49	; 0x31
    29e8:	7a a9       	ldd	r23, Y+50	; 0x32
    29ea:	8b a9       	ldd	r24, Y+51	; 0x33
    29ec:	9c a9       	ldd	r25, Y+52	; 0x34
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	3f ef       	ldi	r19, 0xFF	; 255
    29f2:	4f e7       	ldi	r20, 0x7F	; 127
    29f4:	57 e4       	ldi	r21, 0x47	; 71
    29f6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29fa:	18 16       	cp	r1, r24
    29fc:	4c f5       	brge	.+82     	; 0x2a50 <LCD_u8StringScroll+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fe:	6d a9       	ldd	r22, Y+53	; 0x35
    2a00:	7e a9       	ldd	r23, Y+54	; 0x36
    2a02:	8f a9       	ldd	r24, Y+55	; 0x37
    2a04:	98 ad       	ldd	r25, Y+56	; 0x38
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e2       	ldi	r20, 0x20	; 32
    2a0c:	51 e4       	ldi	r21, 0x41	; 65
    2a0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	bc 01       	movw	r22, r24
    2a18:	cd 01       	movw	r24, r26
    2a1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	98 ab       	std	Y+48, r25	; 0x30
    2a24:	8f a7       	std	Y+47, r24	; 0x2f
    2a26:	0f c0       	rjmp	.+30     	; 0x2a46 <LCD_u8StringScroll+0x640>
    2a28:	88 ec       	ldi	r24, 0xC8	; 200
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	9e a7       	std	Y+46, r25	; 0x2e
    2a2e:	8d a7       	std	Y+45, r24	; 0x2d
    2a30:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a32:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <LCD_u8StringScroll+0x62e>
    2a38:	9e a7       	std	Y+46, r25	; 0x2e
    2a3a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a3e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	98 ab       	std	Y+48, r25	; 0x30
    2a44:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a46:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a48:	98 a9       	ldd	r25, Y+48	; 0x30
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	69 f7       	brne	.-38     	; 0x2a28 <LCD_u8StringScroll+0x622>
    2a4e:	14 c0       	rjmp	.+40     	; 0x2a78 <LCD_u8StringScroll+0x672>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a50:	69 a9       	ldd	r22, Y+49	; 0x31
    2a52:	7a a9       	ldd	r23, Y+50	; 0x32
    2a54:	8b a9       	ldd	r24, Y+51	; 0x33
    2a56:	9c a9       	ldd	r25, Y+52	; 0x34
    2a58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	98 ab       	std	Y+48, r25	; 0x30
    2a62:	8f a7       	std	Y+47, r24	; 0x2f
    2a64:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a66:	98 a9       	ldd	r25, Y+48	; 0x30
    2a68:	9c a7       	std	Y+44, r25	; 0x2c
    2a6a:	8b a7       	std	Y+43, r24	; 0x2b
    2a6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	f1 f7       	brne	.-4      	; 0x2a70 <LCD_u8StringScroll+0x66a>
    2a74:	9c a7       	std	Y+44, r25	; 0x2c
    2a76:	8b a7       	std	Y+43, r24	; 0x2b

				/*Clear LCD*/
				LCD_voidClearLCD();
    2a78:	0e 94 18 10 	call	0x2030	; 0x2030 <LCD_voidClearLCD>

				/*if Move 3 = 0 or Copy of string size = 0 re-intiate their value and break the loop*/
				if(Local_u8Move3 == 0 || Copy_u8StringSize == 0)
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	ea 5a       	subi	r30, 0xAA	; 170
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	80 81       	ld	r24, Z
    2a84:	88 23       	and	r24, r24
    2a86:	31 f0       	breq	.+12     	; 0x2a94 <LCD_u8StringScroll+0x68e>
    2a88:	fe 01       	movw	r30, r28
    2a8a:	eb 5a       	subi	r30, 0xAB	; 171
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	80 81       	ld	r24, Z
    2a90:	88 23       	and	r24, r24
    2a92:	71 f4       	brne	.+28     	; 0x2ab0 <LCD_u8StringScroll+0x6aa>
				{
					Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    2a94:	fe 01       	movw	r30, r28
    2a96:	ea 5a       	subi	r30, 0xAA	; 170
    2a98:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9a:	80 e1       	ldi	r24, 0x10	; 16
    2a9c:	80 83       	st	Z, r24
					Copy_u8StringSize = Copy_u8StrSize;
    2a9e:	de 01       	movw	r26, r28
    2aa0:	ab 5a       	subi	r26, 0xAB	; 171
    2aa2:	bf 4f       	sbci	r27, 0xFF	; 255
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e4 5a       	subi	r30, 0xA4	; 164
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	80 81       	ld	r24, Z
    2aac:	8c 93       	st	X, r24
    2aae:	d7 c2       	rjmp	.+1454   	; 0x305e <LCD_u8StringScroll+0xc58>

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;

			/*make the Move = 104 (Over Flow + 1 (First char on LCD)) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_1 + 1); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    2ab0:	de 01       	movw	r26, r28
    2ab2:	a8 5a       	subi	r26, 0xA8	; 168
    2ab4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e8 5a       	subi	r30, 0xA8	; 168
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	80 81       	ld	r24, Z
    2abe:	81 50       	subi	r24, 0x01	; 1
    2ac0:	8c 93       	st	X, r24
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	e8 5a       	subi	r30, 0xA8	; 168
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	de 01       	movw	r26, r28
    2aca:	a9 5a       	subi	r26, 0xA9	; 169
    2acc:	bf 4f       	sbci	r27, 0xFF	; 255
    2ace:	90 81       	ld	r25, Z
    2ad0:	8c 91       	ld	r24, X
    2ad2:	89 17       	cp	r24, r25
    2ad4:	08 f0       	brcs	.+2      	; 0x2ad8 <LCD_u8StringScroll+0x6d2>
    2ad6:	fc ce       	rjmp	.-520    	; 0x28d0 <LCD_u8StringScroll+0x4ca>
    2ad8:	c2 c2       	rjmp	.+1412   	; 0x305e <LCD_u8StringScroll+0xc58>
				}
			}
		}

		/*This if Scrolling is to Right in Line 2*/
		else if(Copy_u8RorL == LCD_SCROLL_TO_RIGHT && Copy_u8YPos == 1)
    2ada:	fe 01       	movw	r30, r28
    2adc:	e1 5a       	subi	r30, 0xA1	; 161
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	80 81       	ld	r24, Z
    2ae2:	81 30       	cpi	r24, 0x01	; 1
    2ae4:	09 f0       	breq	.+2      	; 0x2ae8 <LCD_u8StringScroll+0x6e2>
    2ae6:	95 c1       	rjmp	.+810    	; 0x2e12 <LCD_u8StringScroll+0xa0c>
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e0 5a       	subi	r30, 0xA0	; 160
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	80 81       	ld	r24, Z
    2af0:	81 30       	cpi	r24, 0x01	; 1
    2af2:	09 f0       	breq	.+2      	; 0x2af6 <LCD_u8StringScroll+0x6f0>
    2af4:	8e c1       	rjmp	.+796    	; 0x2e12 <LCD_u8StringScroll+0xa0c>
		{
			/*Make the Move2 = Over flow of the second line - string size*/
			Local_u8Move2 = LCD_OV_LINE_2 - Copy_u8StrSize;
    2af6:	de 01       	movw	r26, r28
    2af8:	a9 5a       	subi	r26, 0xA9	; 169
    2afa:	bf 4f       	sbci	r27, 0xFF	; 255
    2afc:	fe 01       	movw	r30, r28
    2afe:	e4 5a       	subi	r30, 0xA4	; 164
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	98 ee       	ldi	r25, 0xE8	; 232
    2b04:	80 81       	ld	r24, Z
    2b06:	f9 2f       	mov	r31, r25
    2b08:	f8 1b       	sub	r31, r24
    2b0a:	8f 2f       	mov	r24, r31
    2b0c:	8c 93       	st	X, r24

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move < LCD_MAX_SCROLL_LINE; Local_u8Move++)
    2b0e:	fe 01       	movw	r30, r28
    2b10:	e8 5a       	subi	r30, 0xA8	; 168
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	10 82       	st	Z, r1
    2b16:	75 c1       	rjmp	.+746    	; 0x2e02 <LCD_u8StringScroll+0x9fc>
			{
				/*if string bigger than 16*/
				if(Local_u8Move >= (LCD_LINE_NB_OF_DIGITS - Copy_u8StrSize))
    2b18:	fe 01       	movw	r30, r28
    2b1a:	e8 5a       	subi	r30, 0xA8	; 168
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	80 81       	ld	r24, Z
    2b20:	48 2f       	mov	r20, r24
    2b22:	50 e0       	ldi	r21, 0x00	; 0
    2b24:	fe 01       	movw	r30, r28
    2b26:	e4 5a       	subi	r30, 0xA4	; 164
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	80 81       	ld	r24, Z
    2b2c:	28 2f       	mov	r18, r24
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	80 e1       	ldi	r24, 0x10	; 16
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	82 1b       	sub	r24, r18
    2b36:	93 0b       	sbc	r25, r19
    2b38:	48 17       	cp	r20, r24
    2b3a:	59 07       	cpc	r21, r25
    2b3c:	0c f4       	brge	.+2      	; 0x2b40 <LCD_u8StringScroll+0x73a>
    2b3e:	c5 c0       	rjmp	.+394    	; 0x2cca <LCD_u8StringScroll+0x8c4>
				{
					/*first print the string in the shown position in 16*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2b40:	fe 01       	movw	r30, r28
    2b42:	e8 5a       	subi	r30, 0xA8	; 168
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	de 01       	movw	r26, r28
    2b48:	a0 5a       	subi	r26, 0xA0	; 160
    2b4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b4c:	80 81       	ld	r24, Z
    2b4e:	6c 91       	ld	r22, X
    2b50:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2b54:	fe 01       	movw	r30, r28
    2b56:	e6 5a       	subi	r30, 0xA6	; 166
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	80 81       	ld	r24, Z
    2b5c:	91 81       	ldd	r25, Z+1	; 0x01
    2b5e:	fe 01       	movw	r30, r28
    2b60:	e4 5a       	subi	r30, 0xA4	; 164
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	60 81       	ld	r22, Z
    2b66:	0e 94 22 10 	call	0x2044	; 0x2044 <LCD_u8WriteString>

					/*print the string in un-shown position */
					LCD_u8GoToXY(Local_u8Move2, Copy_u8YPos);
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	e9 5a       	subi	r30, 0xA9	; 169
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	de 01       	movw	r26, r28
    2b72:	a0 5a       	subi	r26, 0xA0	; 160
    2b74:	bf 4f       	sbci	r27, 0xFF	; 255
    2b76:	80 81       	ld	r24, Z
    2b78:	6c 91       	ld	r22, X
    2b7a:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2b7e:	fe 01       	movw	r30, r28
    2b80:	e6 5a       	subi	r30, 0xA6	; 166
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	80 81       	ld	r24, Z
    2b86:	91 81       	ldd	r25, Z+1	; 0x01
    2b88:	fe 01       	movw	r30, r28
    2b8a:	e4 5a       	subi	r30, 0xA4	; 164
    2b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8e:	60 81       	ld	r22, Z
    2b90:	0e 94 22 10 	call	0x2044	; 0x2044 <LCD_u8WriteString>
//					LCD_u8WriteINT(Local_u8Move, 0, 0);
//					LCD_u8WriteINT(Local_u8Move2, 5, 0);
//					LCD_u8WriteINT(Copy_u8StrSize, 10, 0);

					/*delay with the given time*/
					_delay_ms(Copy_u16Time);
    2b94:	fe 01       	movw	r30, r28
    2b96:	e3 5a       	subi	r30, 0xA3	; 163
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	80 81       	ld	r24, Z
    2b9c:	91 81       	ldd	r25, Z+1	; 0x01
    2b9e:	cc 01       	movw	r24, r24
    2ba0:	a0 e0       	ldi	r26, 0x00	; 0
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	bc 01       	movw	r22, r24
    2ba6:	cd 01       	movw	r24, r26
    2ba8:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	8f a3       	std	Y+39, r24	; 0x27
    2bb2:	98 a7       	std	Y+40, r25	; 0x28
    2bb4:	a9 a7       	std	Y+41, r26	; 0x29
    2bb6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb8:	6f a1       	ldd	r22, Y+39	; 0x27
    2bba:	78 a5       	ldd	r23, Y+40	; 0x28
    2bbc:	89 a5       	ldd	r24, Y+41	; 0x29
    2bbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	4a ef       	ldi	r20, 0xFA	; 250
    2bc6:	54 e4       	ldi	r21, 0x44	; 68
    2bc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	8b a3       	std	Y+35, r24	; 0x23
    2bd2:	9c a3       	std	Y+36, r25	; 0x24
    2bd4:	ad a3       	std	Y+37, r26	; 0x25
    2bd6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bd8:	6b a1       	ldd	r22, Y+35	; 0x23
    2bda:	7c a1       	ldd	r23, Y+36	; 0x24
    2bdc:	8d a1       	ldd	r24, Y+37	; 0x25
    2bde:	9e a1       	ldd	r25, Y+38	; 0x26
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	40 e8       	ldi	r20, 0x80	; 128
    2be6:	5f e3       	ldi	r21, 0x3F	; 63
    2be8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2bec:	88 23       	and	r24, r24
    2bee:	2c f4       	brge	.+10     	; 0x2bfa <LCD_u8StringScroll+0x7f4>
		__ticks = 1;
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	9a a3       	std	Y+34, r25	; 0x22
    2bf6:	89 a3       	std	Y+33, r24	; 0x21
    2bf8:	3f c0       	rjmp	.+126    	; 0x2c78 <LCD_u8StringScroll+0x872>
	else if (__tmp > 65535)
    2bfa:	6b a1       	ldd	r22, Y+35	; 0x23
    2bfc:	7c a1       	ldd	r23, Y+36	; 0x24
    2bfe:	8d a1       	ldd	r24, Y+37	; 0x25
    2c00:	9e a1       	ldd	r25, Y+38	; 0x26
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	3f ef       	ldi	r19, 0xFF	; 255
    2c06:	4f e7       	ldi	r20, 0x7F	; 127
    2c08:	57 e4       	ldi	r21, 0x47	; 71
    2c0a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c0e:	18 16       	cp	r1, r24
    2c10:	4c f5       	brge	.+82     	; 0x2c64 <LCD_u8StringScroll+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c12:	6f a1       	ldd	r22, Y+39	; 0x27
    2c14:	78 a5       	ldd	r23, Y+40	; 0x28
    2c16:	89 a5       	ldd	r24, Y+41	; 0x29
    2c18:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	40 e2       	ldi	r20, 0x20	; 32
    2c20:	51 e4       	ldi	r21, 0x41	; 65
    2c22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	bc 01       	movw	r22, r24
    2c2c:	cd 01       	movw	r24, r26
    2c2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	9a a3       	std	Y+34, r25	; 0x22
    2c38:	89 a3       	std	Y+33, r24	; 0x21
    2c3a:	0f c0       	rjmp	.+30     	; 0x2c5a <LCD_u8StringScroll+0x854>
    2c3c:	88 ec       	ldi	r24, 0xC8	; 200
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	98 a3       	std	Y+32, r25	; 0x20
    2c42:	8f 8f       	std	Y+31, r24	; 0x1f
    2c44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c46:	98 a1       	ldd	r25, Y+32	; 0x20
    2c48:	01 97       	sbiw	r24, 0x01	; 1
    2c4a:	f1 f7       	brne	.-4      	; 0x2c48 <LCD_u8StringScroll+0x842>
    2c4c:	98 a3       	std	Y+32, r25	; 0x20
    2c4e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c50:	89 a1       	ldd	r24, Y+33	; 0x21
    2c52:	9a a1       	ldd	r25, Y+34	; 0x22
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	9a a3       	std	Y+34, r25	; 0x22
    2c58:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c5c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c5e:	00 97       	sbiw	r24, 0x00	; 0
    2c60:	69 f7       	brne	.-38     	; 0x2c3c <LCD_u8StringScroll+0x836>
    2c62:	14 c0       	rjmp	.+40     	; 0x2c8c <LCD_u8StringScroll+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c64:	6b a1       	ldd	r22, Y+35	; 0x23
    2c66:	7c a1       	ldd	r23, Y+36	; 0x24
    2c68:	8d a1       	ldd	r24, Y+37	; 0x25
    2c6a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	9a a3       	std	Y+34, r25	; 0x22
    2c76:	89 a3       	std	Y+33, r24	; 0x21
    2c78:	89 a1       	ldd	r24, Y+33	; 0x21
    2c7a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c7c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c7e:	8d 8f       	std	Y+29, r24	; 0x1d
    2c80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	f1 f7       	brne	.-4      	; 0x2c84 <LCD_u8StringScroll+0x87e>
    2c88:	9e 8f       	std	Y+30, r25	; 0x1e
    2c8a:	8d 8f       	std	Y+29, r24	; 0x1d

					/*Clear the LCD*/
					LCD_voidClearLCD();
    2c8c:	0e 94 18 10 	call	0x2030	; 0x2030 <LCD_voidClearLCD>

					/*Increment Move 2*/
					Local_u8Move2++;
    2c90:	de 01       	movw	r26, r28
    2c92:	a9 5a       	subi	r26, 0xA9	; 169
    2c94:	bf 4f       	sbci	r27, 0xFF	; 255
    2c96:	fe 01       	movw	r30, r28
    2c98:	e9 5a       	subi	r30, 0xA9	; 169
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	80 81       	ld	r24, Z
    2c9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ca0:	8c 93       	st	X, r24

					/*if Move 2 = 323 the over flow of line two give it its initial value and break the loop*/
					if(Local_u8Move2 == LCD_OV_LINE_2)
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	e9 5a       	subi	r30, 0xA9	; 169
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	80 81       	ld	r24, Z
    2caa:	88 3e       	cpi	r24, 0xE8	; 232
    2cac:	09 f0       	breq	.+2      	; 0x2cb0 <LCD_u8StringScroll+0x8aa>
    2cae:	a0 c0       	rjmp	.+320    	; 0x2df0 <LCD_u8StringScroll+0x9ea>
					{
						Local_u8Move2 = LCD_OV_LINE_2 - Copy_u8StrSize;
    2cb0:	de 01       	movw	r26, r28
    2cb2:	a9 5a       	subi	r26, 0xA9	; 169
    2cb4:	bf 4f       	sbci	r27, 0xFF	; 255
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	e4 5a       	subi	r30, 0xA4	; 164
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	98 ee       	ldi	r25, 0xE8	; 232
    2cbe:	80 81       	ld	r24, Z
    2cc0:	29 2f       	mov	r18, r25
    2cc2:	28 1b       	sub	r18, r24
    2cc4:	82 2f       	mov	r24, r18
    2cc6:	8c 93       	st	X, r24
    2cc8:	ca c1       	rjmp	.+916    	; 0x305e <LCD_u8StringScroll+0xc58>

				/*else mean string < 16*/
				else
				{
					/*Print the string*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2cca:	fe 01       	movw	r30, r28
    2ccc:	e8 5a       	subi	r30, 0xA8	; 168
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	de 01       	movw	r26, r28
    2cd2:	a0 5a       	subi	r26, 0xA0	; 160
    2cd4:	bf 4f       	sbci	r27, 0xFF	; 255
    2cd6:	80 81       	ld	r24, Z
    2cd8:	6c 91       	ld	r22, X
    2cda:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e6 5a       	subi	r30, 0xA6	; 166
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	80 81       	ld	r24, Z
    2ce6:	91 81       	ldd	r25, Z+1	; 0x01
    2ce8:	fe 01       	movw	r30, r28
    2cea:	e4 5a       	subi	r30, 0xA4	; 164
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	60 81       	ld	r22, Z
    2cf0:	0e 94 22 10 	call	0x2044	; 0x2044 <LCD_u8WriteString>
//					LCD_u8WriteINT(Local_u8Move, 0, 0);
//					LCD_u8WriteINT(Local_u8Move2, 5, 0);
//					LCD_u8WriteINT(Copy_u8StrSize, 10, 0);

					/*Delay the given time*/
					_delay_ms(Copy_u16Time);
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	e3 5a       	subi	r30, 0xA3	; 163
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	80 81       	ld	r24, Z
    2cfc:	91 81       	ldd	r25, Z+1	; 0x01
    2cfe:	cc 01       	movw	r24, r24
    2d00:	a0 e0       	ldi	r26, 0x00	; 0
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	bc 01       	movw	r22, r24
    2d06:	cd 01       	movw	r24, r26
    2d08:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	89 8f       	std	Y+25, r24	; 0x19
    2d12:	9a 8f       	std	Y+26, r25	; 0x1a
    2d14:	ab 8f       	std	Y+27, r26	; 0x1b
    2d16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d18:	69 8d       	ldd	r22, Y+25	; 0x19
    2d1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	4a ef       	ldi	r20, 0xFA	; 250
    2d26:	54 e4       	ldi	r21, 0x44	; 68
    2d28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	8d 8b       	std	Y+21, r24	; 0x15
    2d32:	9e 8b       	std	Y+22, r25	; 0x16
    2d34:	af 8b       	std	Y+23, r26	; 0x17
    2d36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d38:	6d 89       	ldd	r22, Y+21	; 0x15
    2d3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 e8       	ldi	r20, 0x80	; 128
    2d46:	5f e3       	ldi	r21, 0x3F	; 63
    2d48:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d4c:	88 23       	and	r24, r24
    2d4e:	2c f4       	brge	.+10     	; 0x2d5a <LCD_u8StringScroll+0x954>
		__ticks = 1;
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	9c 8b       	std	Y+20, r25	; 0x14
    2d56:	8b 8b       	std	Y+19, r24	; 0x13
    2d58:	3f c0       	rjmp	.+126    	; 0x2dd8 <LCD_u8StringScroll+0x9d2>
	else if (__tmp > 65535)
    2d5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d5c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d60:	98 8d       	ldd	r25, Y+24	; 0x18
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	3f ef       	ldi	r19, 0xFF	; 255
    2d66:	4f e7       	ldi	r20, 0x7F	; 127
    2d68:	57 e4       	ldi	r21, 0x47	; 71
    2d6a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d6e:	18 16       	cp	r1, r24
    2d70:	4c f5       	brge	.+82     	; 0x2dc4 <LCD_u8StringScroll+0x9be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d72:	69 8d       	ldd	r22, Y+25	; 0x19
    2d74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	40 e2       	ldi	r20, 0x20	; 32
    2d80:	51 e4       	ldi	r21, 0x41	; 65
    2d82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	bc 01       	movw	r22, r24
    2d8c:	cd 01       	movw	r24, r26
    2d8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	9c 8b       	std	Y+20, r25	; 0x14
    2d98:	8b 8b       	std	Y+19, r24	; 0x13
    2d9a:	0f c0       	rjmp	.+30     	; 0x2dba <LCD_u8StringScroll+0x9b4>
    2d9c:	88 ec       	ldi	r24, 0xC8	; 200
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	9a 8b       	std	Y+18, r25	; 0x12
    2da2:	89 8b       	std	Y+17, r24	; 0x11
    2da4:	89 89       	ldd	r24, Y+17	; 0x11
    2da6:	9a 89       	ldd	r25, Y+18	; 0x12
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	f1 f7       	brne	.-4      	; 0x2da8 <LCD_u8StringScroll+0x9a2>
    2dac:	9a 8b       	std	Y+18, r25	; 0x12
    2dae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db0:	8b 89       	ldd	r24, Y+19	; 0x13
    2db2:	9c 89       	ldd	r25, Y+20	; 0x14
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	9c 8b       	std	Y+20, r25	; 0x14
    2db8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dba:	8b 89       	ldd	r24, Y+19	; 0x13
    2dbc:	9c 89       	ldd	r25, Y+20	; 0x14
    2dbe:	00 97       	sbiw	r24, 0x00	; 0
    2dc0:	69 f7       	brne	.-38     	; 0x2d9c <LCD_u8StringScroll+0x996>
    2dc2:	14 c0       	rjmp	.+40     	; 0x2dec <LCD_u8StringScroll+0x9e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc4:	6d 89       	ldd	r22, Y+21	; 0x15
    2dc6:	7e 89       	ldd	r23, Y+22	; 0x16
    2dc8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dca:	98 8d       	ldd	r25, Y+24	; 0x18
    2dcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	9c 8b       	std	Y+20, r25	; 0x14
    2dd6:	8b 8b       	std	Y+19, r24	; 0x13
    2dd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dda:	9c 89       	ldd	r25, Y+20	; 0x14
    2ddc:	98 8b       	std	Y+16, r25	; 0x10
    2dde:	8f 87       	std	Y+15, r24	; 0x0f
    2de0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2de2:	98 89       	ldd	r25, Y+16	; 0x10
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	f1 f7       	brne	.-4      	; 0x2de4 <LCD_u8StringScroll+0x9de>
    2de8:	98 8b       	std	Y+16, r25	; 0x10
    2dea:	8f 87       	std	Y+15, r24	; 0x0f

					/*Clear LCD*/
					LCD_voidClearLCD();
    2dec:	0e 94 18 10 	call	0x2030	; 0x2030 <LCD_voidClearLCD>
		{
			/*Make the Move2 = Over flow of the second line - string size*/
			Local_u8Move2 = LCD_OV_LINE_2 - Copy_u8StrSize;

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move < LCD_MAX_SCROLL_LINE; Local_u8Move++)
    2df0:	de 01       	movw	r26, r28
    2df2:	a8 5a       	subi	r26, 0xA8	; 168
    2df4:	bf 4f       	sbci	r27, 0xFF	; 255
    2df6:	fe 01       	movw	r30, r28
    2df8:	e8 5a       	subi	r30, 0xA8	; 168
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	80 81       	ld	r24, Z
    2dfe:	8f 5f       	subi	r24, 0xFF	; 255
    2e00:	8c 93       	st	X, r24
    2e02:	fe 01       	movw	r30, r28
    2e04:	e8 5a       	subi	r30, 0xA8	; 168
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	80 81       	ld	r24, Z
    2e0a:	89 32       	cpi	r24, 0x29	; 41
    2e0c:	08 f4       	brcc	.+2      	; 0x2e10 <LCD_u8StringScroll+0xa0a>
    2e0e:	84 ce       	rjmp	.-760    	; 0x2b18 <LCD_u8StringScroll+0x712>
    2e10:	26 c1       	rjmp	.+588    	; 0x305e <LCD_u8StringScroll+0xc58>
				}
			}
		}

		/*This if Scrolling is to Left in Line 2*/
		else if(Copy_u8RorL == LCD_SCROLL_TO_LEFT && Copy_u8YPos == 1)
    2e12:	fe 01       	movw	r30, r28
    2e14:	e1 5a       	subi	r30, 0xA1	; 161
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	80 81       	ld	r24, Z
    2e1a:	88 23       	and	r24, r24
    2e1c:	09 f0       	breq	.+2      	; 0x2e20 <LCD_u8StringScroll+0xa1a>
    2e1e:	1f c1       	rjmp	.+574    	; 0x305e <LCD_u8StringScroll+0xc58>
    2e20:	fe 01       	movw	r30, r28
    2e22:	e0 5a       	subi	r30, 0xA0	; 160
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	80 81       	ld	r24, Z
    2e28:	81 30       	cpi	r24, 0x01	; 1
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <LCD_u8StringScroll+0xa28>
    2e2c:	18 c1       	rjmp	.+560    	; 0x305e <LCD_u8StringScroll+0xc58>
		{
			/*Move2 = over flow line 2 + string size + 1 to make space between the last and first char in string */
			Local_u8Move2 = LCD_OV_LINE_2 + (Copy_u8StrSize + 1);
    2e2e:	de 01       	movw	r26, r28
    2e30:	a9 5a       	subi	r26, 0xA9	; 169
    2e32:	bf 4f       	sbci	r27, 0xFF	; 255
    2e34:	fe 01       	movw	r30, r28
    2e36:	e4 5a       	subi	r30, 0xA4	; 164
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	80 81       	ld	r24, Z
    2e3c:	87 51       	subi	r24, 0x17	; 23
    2e3e:	8c 93       	st	X, r24

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    2e40:	fe 01       	movw	r30, r28
    2e42:	ea 5a       	subi	r30, 0xAA	; 170
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	80 e1       	ldi	r24, 0x10	; 16
    2e48:	80 83       	st	Z, r24

			/*make the Move = 232 (Over Flow) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_2); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	e8 5a       	subi	r30, 0xA8	; 168
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	88 ee       	ldi	r24, 0xE8	; 232
    2e52:	80 83       	st	Z, r24
    2e54:	f9 c0       	rjmp	.+498    	; 0x3048 <LCD_u8StringScroll+0xc42>
			{
				/*Print LCD with the Move as X position*/
				LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2e56:	fe 01       	movw	r30, r28
    2e58:	e8 5a       	subi	r30, 0xA8	; 168
    2e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5c:	de 01       	movw	r26, r28
    2e5e:	a0 5a       	subi	r26, 0xA0	; 160
    2e60:	bf 4f       	sbci	r27, 0xFF	; 255
    2e62:	80 81       	ld	r24, Z
    2e64:	6c 91       	ld	r22, X
    2e66:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
				LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	e6 5a       	subi	r30, 0xA6	; 166
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	80 81       	ld	r24, Z
    2e72:	91 81       	ldd	r25, Z+1	; 0x01
    2e74:	fe 01       	movw	r30, r28
    2e76:	e4 5a       	subi	r30, 0xA4	; 164
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	60 81       	ld	r22, Z
    2e7c:	0e 94 22 10 	call	0x2044	; 0x2044 <LCD_u8WriteString>

				/*if String size less than 16*/
				if(Copy_u8StrSize < LCD_LINE_NB_OF_DIGITS)
    2e80:	fe 01       	movw	r30, r28
    2e82:	e4 5a       	subi	r30, 0xA4	; 164
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	80 81       	ld	r24, Z
    2e88:	80 31       	cpi	r24, 0x10	; 16
    2e8a:	f8 f4       	brcc	.+62     	; 0x2eca <LCD_u8StringScroll+0xac4>
				{
					/*print with move 3 as X position*/
					LCD_u8GoToXY(Local_u8Move3 , Copy_u8YPos);
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	ea 5a       	subi	r30, 0xAA	; 170
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	de 01       	movw	r26, r28
    2e94:	a0 5a       	subi	r26, 0xA0	; 160
    2e96:	bf 4f       	sbci	r27, 0xFF	; 255
    2e98:	80 81       	ld	r24, Z
    2e9a:	6c 91       	ld	r22, X
    2e9c:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	e6 5a       	subi	r30, 0xA6	; 166
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	80 81       	ld	r24, Z
    2ea8:	91 81       	ldd	r25, Z+1	; 0x01
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e4 5a       	subi	r30, 0xA4	; 164
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	60 81       	ld	r22, Z
    2eb2:	0e 94 22 10 	call	0x2044	; 0x2044 <LCD_u8WriteString>

					/*Decrement Move 3*/
					Local_u8Move3--;
    2eb6:	de 01       	movw	r26, r28
    2eb8:	aa 5a       	subi	r26, 0xAA	; 170
    2eba:	bf 4f       	sbci	r27, 0xFF	; 255
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	ea 5a       	subi	r30, 0xAA	; 170
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	80 81       	ld	r24, Z
    2ec4:	81 50       	subi	r24, 0x01	; 1
    2ec6:	8c 93       	st	X, r24
    2ec8:	1e c0       	rjmp	.+60     	; 0x2f06 <LCD_u8StringScroll+0xb00>

				/*else mean string > 16*/
				else
				{
					/*print with the copy of string size as X position*/
					LCD_u8GoToXY(Copy_u8StringSize, Copy_u8YPos);
    2eca:	fe 01       	movw	r30, r28
    2ecc:	eb 5a       	subi	r30, 0xAB	; 171
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	de 01       	movw	r26, r28
    2ed2:	a0 5a       	subi	r26, 0xA0	; 160
    2ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed6:	80 81       	ld	r24, Z
    2ed8:	6c 91       	ld	r22, X
    2eda:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2ede:	fe 01       	movw	r30, r28
    2ee0:	e6 5a       	subi	r30, 0xA6	; 166
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	80 81       	ld	r24, Z
    2ee6:	91 81       	ldd	r25, Z+1	; 0x01
    2ee8:	fe 01       	movw	r30, r28
    2eea:	e4 5a       	subi	r30, 0xA4	; 164
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	60 81       	ld	r22, Z
    2ef0:	0e 94 22 10 	call	0x2044	; 0x2044 <LCD_u8WriteString>

					/*de-crement the copy of the sting size*/
					Copy_u8StringSize--;
    2ef4:	de 01       	movw	r26, r28
    2ef6:	ab 5a       	subi	r26, 0xAB	; 171
    2ef8:	bf 4f       	sbci	r27, 0xFF	; 255
    2efa:	fe 01       	movw	r30, r28
    2efc:	eb 5a       	subi	r30, 0xAB	; 171
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	80 81       	ld	r24, Z
    2f02:	81 50       	subi	r24, 0x01	; 1
    2f04:	8c 93       	st	X, r24
//				LCD_u8WriteINT(Local_u8Move, 10, 0);
//				LCD_u8WriteINT(Copy_u8StrSize, 5, 0);
//				LCD_u8WriteINT(Copy_u8StringSize, 1, 0);

				/*Delay the Given time*/
				_delay_ms(Copy_u16Time);
    2f06:	fe 01       	movw	r30, r28
    2f08:	e3 5a       	subi	r30, 0xA3	; 163
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	80 81       	ld	r24, Z
    2f0e:	91 81       	ldd	r25, Z+1	; 0x01
    2f10:	cc 01       	movw	r24, r24
    2f12:	a0 e0       	ldi	r26, 0x00	; 0
    2f14:	b0 e0       	ldi	r27, 0x00	; 0
    2f16:	bc 01       	movw	r22, r24
    2f18:	cd 01       	movw	r24, r26
    2f1a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	8b 87       	std	Y+11, r24	; 0x0b
    2f24:	9c 87       	std	Y+12, r25	; 0x0c
    2f26:	ad 87       	std	Y+13, r26	; 0x0d
    2f28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	4a ef       	ldi	r20, 0xFA	; 250
    2f38:	54 e4       	ldi	r21, 0x44	; 68
    2f3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	8f 83       	std	Y+7, r24	; 0x07
    2f44:	98 87       	std	Y+8, r25	; 0x08
    2f46:	a9 87       	std	Y+9, r26	; 0x09
    2f48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f4c:	78 85       	ldd	r23, Y+8	; 0x08
    2f4e:	89 85       	ldd	r24, Y+9	; 0x09
    2f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	40 e8       	ldi	r20, 0x80	; 128
    2f58:	5f e3       	ldi	r21, 0x3F	; 63
    2f5a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2f5e:	88 23       	and	r24, r24
    2f60:	2c f4       	brge	.+10     	; 0x2f6c <LCD_u8StringScroll+0xb66>
		__ticks = 1;
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	9e 83       	std	Y+6, r25	; 0x06
    2f68:	8d 83       	std	Y+5, r24	; 0x05
    2f6a:	3f c0       	rjmp	.+126    	; 0x2fea <LCD_u8StringScroll+0xbe4>
	else if (__tmp > 65535)
    2f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f6e:	78 85       	ldd	r23, Y+8	; 0x08
    2f70:	89 85       	ldd	r24, Y+9	; 0x09
    2f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	3f ef       	ldi	r19, 0xFF	; 255
    2f78:	4f e7       	ldi	r20, 0x7F	; 127
    2f7a:	57 e4       	ldi	r21, 0x47	; 71
    2f7c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2f80:	18 16       	cp	r1, r24
    2f82:	4c f5       	brge	.+82     	; 0x2fd6 <LCD_u8StringScroll+0xbd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	40 e2       	ldi	r20, 0x20	; 32
    2f92:	51 e4       	ldi	r21, 0x41	; 65
    2f94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	bc 01       	movw	r22, r24
    2f9e:	cd 01       	movw	r24, r26
    2fa0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	9e 83       	std	Y+6, r25	; 0x06
    2faa:	8d 83       	std	Y+5, r24	; 0x05
    2fac:	0f c0       	rjmp	.+30     	; 0x2fcc <LCD_u8StringScroll+0xbc6>
    2fae:	88 ec       	ldi	r24, 0xC8	; 200
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	9c 83       	std	Y+4, r25	; 0x04
    2fb4:	8b 83       	std	Y+3, r24	; 0x03
    2fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	f1 f7       	brne	.-4      	; 0x2fba <LCD_u8StringScroll+0xbb4>
    2fbe:	9c 83       	std	Y+4, r25	; 0x04
    2fc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	9e 83       	std	Y+6, r25	; 0x06
    2fca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fce:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd0:	00 97       	sbiw	r24, 0x00	; 0
    2fd2:	69 f7       	brne	.-38     	; 0x2fae <LCD_u8StringScroll+0xba8>
    2fd4:	14 c0       	rjmp	.+40     	; 0x2ffe <LCD_u8StringScroll+0xbf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd8:	78 85       	ldd	r23, Y+8	; 0x08
    2fda:	89 85       	ldd	r24, Y+9	; 0x09
    2fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	9e 83       	std	Y+6, r25	; 0x06
    2fe8:	8d 83       	std	Y+5, r24	; 0x05
    2fea:	8d 81       	ldd	r24, Y+5	; 0x05
    2fec:	9e 81       	ldd	r25, Y+6	; 0x06
    2fee:	9a 83       	std	Y+2, r25	; 0x02
    2ff0:	89 83       	std	Y+1, r24	; 0x01
    2ff2:	89 81       	ldd	r24, Y+1	; 0x01
    2ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	f1 f7       	brne	.-4      	; 0x2ff6 <LCD_u8StringScroll+0xbf0>
    2ffa:	9a 83       	std	Y+2, r25	; 0x02
    2ffc:	89 83       	std	Y+1, r24	; 0x01

				/*Clear LCD*/
				LCD_voidClearLCD();
    2ffe:	0e 94 18 10 	call	0x2030	; 0x2030 <LCD_voidClearLCD>

				/*if Move 3 = 0 or Copy of string size = 0 re-intiate their value and break the loop*/
				if(Local_u8Move3 == 0 || Copy_u8StringSize == 0)
    3002:	fe 01       	movw	r30, r28
    3004:	ea 5a       	subi	r30, 0xAA	; 170
    3006:	ff 4f       	sbci	r31, 0xFF	; 255
    3008:	80 81       	ld	r24, Z
    300a:	88 23       	and	r24, r24
    300c:	31 f0       	breq	.+12     	; 0x301a <LCD_u8StringScroll+0xc14>
    300e:	fe 01       	movw	r30, r28
    3010:	eb 5a       	subi	r30, 0xAB	; 171
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	80 81       	ld	r24, Z
    3016:	88 23       	and	r24, r24
    3018:	71 f4       	brne	.+28     	; 0x3036 <LCD_u8StringScroll+0xc30>
				{
					Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    301a:	fe 01       	movw	r30, r28
    301c:	ea 5a       	subi	r30, 0xAA	; 170
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	80 e1       	ldi	r24, 0x10	; 16
    3022:	80 83       	st	Z, r24
					Copy_u8StringSize = Copy_u8StrSize;
    3024:	de 01       	movw	r26, r28
    3026:	ab 5a       	subi	r26, 0xAB	; 171
    3028:	bf 4f       	sbci	r27, 0xFF	; 255
    302a:	fe 01       	movw	r30, r28
    302c:	e4 5a       	subi	r30, 0xA4	; 164
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	80 81       	ld	r24, Z
    3032:	8c 93       	st	X, r24
    3034:	14 c0       	rjmp	.+40     	; 0x305e <LCD_u8StringScroll+0xc58>

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;

			/*make the Move = 232 (Over Flow) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_2); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    3036:	de 01       	movw	r26, r28
    3038:	a8 5a       	subi	r26, 0xA8	; 168
    303a:	bf 4f       	sbci	r27, 0xFF	; 255
    303c:	fe 01       	movw	r30, r28
    303e:	e8 5a       	subi	r30, 0xA8	; 168
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	80 81       	ld	r24, Z
    3044:	81 50       	subi	r24, 0x01	; 1
    3046:	8c 93       	st	X, r24
    3048:	fe 01       	movw	r30, r28
    304a:	e8 5a       	subi	r30, 0xA8	; 168
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	de 01       	movw	r26, r28
    3050:	a9 5a       	subi	r26, 0xA9	; 169
    3052:	bf 4f       	sbci	r27, 0xFF	; 255
    3054:	90 81       	ld	r25, Z
    3056:	8c 91       	ld	r24, X
    3058:	89 17       	cp	r24, r25
    305a:	08 f0       	brcs	.+2      	; 0x305e <LCD_u8StringScroll+0xc58>
    305c:	fc ce       	rjmp	.-520    	; 0x2e56 <LCD_u8StringScroll+0xa50>
			}
		}
	}

	/*return the Error*/
	return Local_u8Error;
    305e:	fe 01       	movw	r30, r28
    3060:	e7 5a       	subi	r30, 0xA7	; 167
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	80 81       	ld	r24, Z
}
    3066:	c0 5a       	subi	r28, 0xA0	; 160
    3068:	df 4f       	sbci	r29, 0xFF	; 255
    306a:	0f b6       	in	r0, 0x3f	; 63
    306c:	f8 94       	cli
    306e:	de bf       	out	0x3e, r29	; 62
    3070:	0f be       	out	0x3f, r0	; 63
    3072:	cd bf       	out	0x3d, r28	; 61
    3074:	cf 91       	pop	r28
    3076:	df 91       	pop	r29
    3078:	1f 91       	pop	r17
    307a:	0f 91       	pop	r16
    307c:	08 95       	ret

0000307e <LCD_u8FloatNB>:
 * Input		: The Float Number, Number of float Digits, X Position and Y Position
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8FloatNB(f32 Copy_f32Float, u8 Local_u8FloatDigits, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    307e:	ef 92       	push	r14
    3080:	ff 92       	push	r15
    3082:	0f 93       	push	r16
    3084:	1f 93       	push	r17
    3086:	df 93       	push	r29
    3088:	cf 93       	push	r28
    308a:	cd b7       	in	r28, 0x3d	; 61
    308c:	de b7       	in	r29, 0x3e	; 62
    308e:	6a 97       	sbiw	r28, 0x1a	; 26
    3090:	0f b6       	in	r0, 0x3f	; 63
    3092:	f8 94       	cli
    3094:	de bf       	out	0x3e, r29	; 62
    3096:	0f be       	out	0x3f, r0	; 63
    3098:	cd bf       	out	0x3d, r28	; 61
    309a:	6c 8b       	std	Y+20, r22	; 0x14
    309c:	7d 8b       	std	Y+21, r23	; 0x15
    309e:	8e 8b       	std	Y+22, r24	; 0x16
    30a0:	9f 8b       	std	Y+23, r25	; 0x17
    30a2:	48 8f       	std	Y+24, r20	; 0x18
    30a4:	29 8f       	std	Y+25, r18	; 0x19
    30a6:	0a 8f       	std	Y+26, r16	; 0x1a
	/*Local Variables*/
	u8 Local_u8Error = 0, Local_u8NOD = 0, Local_u8Iterator = 0;
    30a8:	1b 8a       	std	Y+19, r1	; 0x13
    30aa:	1a 8a       	std	Y+18, r1	; 0x12
    30ac:	19 8a       	std	Y+17, r1	; 0x11
	u32 Local_u32IPart = 0, Local_u32Temp = 0, Local_u32FNOD = 1, Lcal_u32FPart = 0;
    30ae:	1d 86       	std	Y+13, r1	; 0x0d
    30b0:	1e 86       	std	Y+14, r1	; 0x0e
    30b2:	1f 86       	std	Y+15, r1	; 0x0f
    30b4:	18 8a       	std	Y+16, r1	; 0x10
    30b6:	19 86       	std	Y+9, r1	; 0x09
    30b8:	1a 86       	std	Y+10, r1	; 0x0a
    30ba:	1b 86       	std	Y+11, r1	; 0x0b
    30bc:	1c 86       	std	Y+12, r1	; 0x0c
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	a0 e0       	ldi	r26, 0x00	; 0
    30c4:	b0 e0       	ldi	r27, 0x00	; 0
    30c6:	8d 83       	std	Y+5, r24	; 0x05
    30c8:	9e 83       	std	Y+6, r25	; 0x06
    30ca:	af 83       	std	Y+7, r26	; 0x07
    30cc:	b8 87       	std	Y+8, r27	; 0x08
    30ce:	19 82       	std	Y+1, r1	; 0x01
    30d0:	1a 82       	std	Y+2, r1	; 0x02
    30d2:	1b 82       	std	Y+3, r1	; 0x03
    30d4:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_u8XPos > 15 || Copy_u8YPos > 1)
    30d6:	89 8d       	ldd	r24, Y+25	; 0x19
    30d8:	80 31       	cpi	r24, 0x10	; 16
    30da:	18 f4       	brcc	.+6      	; 0x30e2 <LCD_u8FloatNB+0x64>
    30dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30de:	82 30       	cpi	r24, 0x02	; 2
    30e0:	18 f0       	brcs	.+6      	; 0x30e8 <LCD_u8FloatNB+0x6a>
	{
		Local_u8Error = 1;
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	8b 8b       	std	Y+19, r24	; 0x13
    30e6:	99 c0       	rjmp	.+306    	; 0x321a <LCD_u8FloatNB+0x19c>
	}
	else
	{
		Local_u32IPart = Copy_f32Float;
    30e8:	6c 89       	ldd	r22, Y+20	; 0x14
    30ea:	7d 89       	ldd	r23, Y+21	; 0x15
    30ec:	8e 89       	ldd	r24, Y+22	; 0x16
    30ee:	9f 89       	ldd	r25, Y+23	; 0x17
    30f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	8d 87       	std	Y+13, r24	; 0x0d
    30fa:	9e 87       	std	Y+14, r25	; 0x0e
    30fc:	af 87       	std	Y+15, r26	; 0x0f
    30fe:	b8 8b       	std	Y+16, r27	; 0x10
		Local_u32Temp = Local_u32IPart;
    3100:	8d 85       	ldd	r24, Y+13	; 0x0d
    3102:	9e 85       	ldd	r25, Y+14	; 0x0e
    3104:	af 85       	ldd	r26, Y+15	; 0x0f
    3106:	b8 89       	ldd	r27, Y+16	; 0x10
    3108:	89 87       	std	Y+9, r24	; 0x09
    310a:	9a 87       	std	Y+10, r25	; 0x0a
    310c:	ab 87       	std	Y+11, r26	; 0x0b
    310e:	bc 87       	std	Y+12, r27	; 0x0c
    3110:	15 c0       	rjmp	.+42     	; 0x313c <LCD_u8FloatNB+0xbe>

		/*Loop to get the Number of Digits*/
		while(Local_u32Temp != 0)
		{
			/*Dividing the Integer number by 10 till we have a result of Division Zero*/
			Local_u32Temp /= 10;
    3112:	89 85       	ldd	r24, Y+9	; 0x09
    3114:	9a 85       	ldd	r25, Y+10	; 0x0a
    3116:	ab 85       	ldd	r26, Y+11	; 0x0b
    3118:	bc 85       	ldd	r27, Y+12	; 0x0c
    311a:	2a e0       	ldi	r18, 0x0A	; 10
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	40 e0       	ldi	r20, 0x00	; 0
    3120:	50 e0       	ldi	r21, 0x00	; 0
    3122:	bc 01       	movw	r22, r24
    3124:	cd 01       	movw	r24, r26
    3126:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__udivmodsi4>
    312a:	da 01       	movw	r26, r20
    312c:	c9 01       	movw	r24, r18
    312e:	89 87       	std	Y+9, r24	; 0x09
    3130:	9a 87       	std	Y+10, r25	; 0x0a
    3132:	ab 87       	std	Y+11, r26	; 0x0b
    3134:	bc 87       	std	Y+12, r27	; 0x0c

			/*With each Division Add 1 to Number of Digits*/
			Local_u8NOD++;
    3136:	8a 89       	ldd	r24, Y+18	; 0x12
    3138:	8f 5f       	subi	r24, 0xFF	; 255
    313a:	8a 8b       	std	Y+18, r24	; 0x12
	{
		Local_u32IPart = Copy_f32Float;
		Local_u32Temp = Local_u32IPart;

		/*Loop to get the Number of Digits*/
		while(Local_u32Temp != 0)
    313c:	89 85       	ldd	r24, Y+9	; 0x09
    313e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3140:	ab 85       	ldd	r26, Y+11	; 0x0b
    3142:	bc 85       	ldd	r27, Y+12	; 0x0c
    3144:	00 97       	sbiw	r24, 0x00	; 0
    3146:	a1 05       	cpc	r26, r1
    3148:	b1 05       	cpc	r27, r1
    314a:	19 f7       	brne	.-58     	; 0x3112 <LCD_u8FloatNB+0x94>

			/*With each Division Add 1 to Number of Digits*/
			Local_u8NOD++;
		}

		for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8FloatDigits; Local_u8Iterator++)
    314c:	19 8a       	std	Y+17, r1	; 0x11
    314e:	15 c0       	rjmp	.+42     	; 0x317a <LCD_u8FloatNB+0xfc>
		{
			Local_u32FNOD = Local_u32FNOD * 10;
    3150:	8d 81       	ldd	r24, Y+5	; 0x05
    3152:	9e 81       	ldd	r25, Y+6	; 0x06
    3154:	af 81       	ldd	r26, Y+7	; 0x07
    3156:	b8 85       	ldd	r27, Y+8	; 0x08
    3158:	2a e0       	ldi	r18, 0x0A	; 10
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	40 e0       	ldi	r20, 0x00	; 0
    315e:	50 e0       	ldi	r21, 0x00	; 0
    3160:	bc 01       	movw	r22, r24
    3162:	cd 01       	movw	r24, r26
    3164:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsi3>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	8d 83       	std	Y+5, r24	; 0x05
    316e:	9e 83       	std	Y+6, r25	; 0x06
    3170:	af 83       	std	Y+7, r26	; 0x07
    3172:	b8 87       	std	Y+8, r27	; 0x08

			/*With each Division Add 1 to Number of Digits*/
			Local_u8NOD++;
		}

		for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8FloatDigits; Local_u8Iterator++)
    3174:	89 89       	ldd	r24, Y+17	; 0x11
    3176:	8f 5f       	subi	r24, 0xFF	; 255
    3178:	89 8b       	std	Y+17, r24	; 0x11
    317a:	99 89       	ldd	r25, Y+17	; 0x11
    317c:	88 8d       	ldd	r24, Y+24	; 0x18
    317e:	98 17       	cp	r25, r24
    3180:	38 f3       	brcs	.-50     	; 0x3150 <LCD_u8FloatNB+0xd2>
		{
			Local_u32FNOD = Local_u32FNOD * 10;
		}

		Lcal_u32FPart = ((Copy_f32Float - Local_u32IPart) * Local_u32FNOD);
    3182:	6d 85       	ldd	r22, Y+13	; 0x0d
    3184:	7e 85       	ldd	r23, Y+14	; 0x0e
    3186:	8f 85       	ldd	r24, Y+15	; 0x0f
    3188:	98 89       	ldd	r25, Y+16	; 0x10
    318a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    318e:	9b 01       	movw	r18, r22
    3190:	ac 01       	movw	r20, r24
    3192:	6c 89       	ldd	r22, Y+20	; 0x14
    3194:	7d 89       	ldd	r23, Y+21	; 0x15
    3196:	8e 89       	ldd	r24, Y+22	; 0x16
    3198:	9f 89       	ldd	r25, Y+23	; 0x17
    319a:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    319e:	dc 01       	movw	r26, r24
    31a0:	cb 01       	movw	r24, r22
    31a2:	7c 01       	movw	r14, r24
    31a4:	8d 01       	movw	r16, r26
    31a6:	6d 81       	ldd	r22, Y+5	; 0x05
    31a8:	7e 81       	ldd	r23, Y+6	; 0x06
    31aa:	8f 81       	ldd	r24, Y+7	; 0x07
    31ac:	98 85       	ldd	r25, Y+8	; 0x08
    31ae:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    31b2:	9b 01       	movw	r18, r22
    31b4:	ac 01       	movw	r20, r24
    31b6:	c8 01       	movw	r24, r16
    31b8:	b7 01       	movw	r22, r14
    31ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	bc 01       	movw	r22, r24
    31c4:	cd 01       	movw	r24, r26
    31c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	89 83       	std	Y+1, r24	; 0x01
    31d0:	9a 83       	std	Y+2, r25	; 0x02
    31d2:	ab 83       	std	Y+3, r26	; 0x03
    31d4:	bc 83       	std	Y+4, r27	; 0x04

		LCD_u8WriteINT(Local_u32IPart, Copy_u8XPos, Copy_u8YPos);
    31d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31da:	af 85       	ldd	r26, Y+15	; 0x0f
    31dc:	b8 89       	ldd	r27, Y+16	; 0x10
    31de:	bc 01       	movw	r22, r24
    31e0:	cd 01       	movw	r24, r26
    31e2:	49 8d       	ldd	r20, Y+25	; 0x19
    31e4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    31e6:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_u8WriteINT>

		LCD_u8GoToXY((Copy_u8XPos + Local_u8NOD), Copy_u8YPos);
    31ea:	99 8d       	ldd	r25, Y+25	; 0x19
    31ec:	8a 89       	ldd	r24, Y+18	; 0x12
    31ee:	89 0f       	add	r24, r25
    31f0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    31f2:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
		LCD_voidWriteData('.');
    31f6:	8e e2       	ldi	r24, 0x2E	; 46
    31f8:	0e 94 47 0c 	call	0x188e	; 0x188e <LCD_voidWriteData>

		LCD_u8WriteINT(Lcal_u32FPart, (Copy_u8XPos + Local_u8NOD + 1), Copy_u8YPos);
    31fc:	99 8d       	ldd	r25, Y+25	; 0x19
    31fe:	8a 89       	ldd	r24, Y+18	; 0x12
    3200:	89 0f       	add	r24, r25
    3202:	28 2f       	mov	r18, r24
    3204:	2f 5f       	subi	r18, 0xFF	; 255
    3206:	89 81       	ldd	r24, Y+1	; 0x01
    3208:	9a 81       	ldd	r25, Y+2	; 0x02
    320a:	ab 81       	ldd	r26, Y+3	; 0x03
    320c:	bc 81       	ldd	r27, Y+4	; 0x04
    320e:	bc 01       	movw	r22, r24
    3210:	cd 01       	movw	r24, r26
    3212:	42 2f       	mov	r20, r18
    3214:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3216:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_u8WriteINT>
	}
		return Local_u8Error;
    321a:	8b 89       	ldd	r24, Y+19	; 0x13
}
    321c:	6a 96       	adiw	r28, 0x1a	; 26
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	f8 94       	cli
    3222:	de bf       	out	0x3e, r29	; 62
    3224:	0f be       	out	0x3f, r0	; 63
    3226:	cd bf       	out	0x3d, r28	; 61
    3228:	cf 91       	pop	r28
    322a:	df 91       	pop	r29
    322c:	1f 91       	pop	r17
    322e:	0f 91       	pop	r16
    3230:	ff 90       	pop	r15
    3232:	ef 90       	pop	r14
    3234:	08 95       	ret

00003236 <LM35_u8Tempreature>:
 * Input		: Sensor Read, pointer to store the converted Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LM35_u8Tempreature(u16 Copy_u16SensorRead, f32 *Copy_f32ActualValue)
{
    3236:	df 93       	push	r29
    3238:	cf 93       	push	r28
    323a:	cd b7       	in	r28, 0x3d	; 61
    323c:	de b7       	in	r29, 0x3e	; 62
    323e:	2c 97       	sbiw	r28, 0x0c	; 12
    3240:	0f b6       	in	r0, 0x3f	; 63
    3242:	f8 94       	cli
    3244:	de bf       	out	0x3e, r29	; 62
    3246:	0f be       	out	0x3f, r0	; 63
    3248:	cd bf       	out	0x3d, r28	; 61
    324a:	98 87       	std	Y+8, r25	; 0x08
    324c:	8f 83       	std	Y+7, r24	; 0x07
    324e:	7a 87       	std	Y+10, r23	; 0x0a
    3250:	69 87       	std	Y+9, r22	; 0x09
	u8  Local_u8Erorr = 0, Local_u8VoltageRef = 0;
    3252:	1e 82       	std	Y+6, r1	; 0x06
    3254:	1d 82       	std	Y+5, r1	; 0x05
	f32 Local_f32StepSize = 0;
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	a0 e0       	ldi	r26, 0x00	; 0
    325c:	b0 e0       	ldi	r27, 0x00	; 0
    325e:	89 83       	std	Y+1, r24	; 0x01
    3260:	9a 83       	std	Y+2, r25	; 0x02
    3262:	ab 83       	std	Y+3, r26	; 0x03
    3264:	bc 83       	std	Y+4, r27	; 0x04

#if Voltage_REF == ADC_AVCC
	Local_u8VoltageRef = 5;
    3266:	85 e0       	ldi	r24, 0x05	; 5
    3268:	8d 83       	std	Y+5, r24	; 0x05
#elif Voltage_REF == ADV_AREF
	Local_u8VoltageRef = 2.56;

#endif

	Local_f32StepSize = ((Local_u8VoltageRef / 1024) * 1000);	//Gives me Step Size in mV
    326a:	8d 81       	ldd	r24, Y+5	; 0x05
    326c:	88 2f       	mov	r24, r24
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	9c 87       	std	Y+12, r25	; 0x0c
    3272:	8b 87       	std	Y+11, r24	; 0x0b
    3274:	4b 85       	ldd	r20, Y+11	; 0x0b
    3276:	5c 85       	ldd	r21, Y+12	; 0x0c
    3278:	55 23       	and	r21, r21
    327a:	34 f4       	brge	.+12     	; 0x3288 <LM35_u8Tempreature+0x52>
    327c:	8b 85       	ldd	r24, Y+11	; 0x0b
    327e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3280:	81 50       	subi	r24, 0x01	; 1
    3282:	9c 4f       	sbci	r25, 0xFC	; 252
    3284:	9c 87       	std	Y+12, r25	; 0x0c
    3286:	8b 87       	std	Y+11, r24	; 0x0b
    3288:	8b 85       	ldd	r24, Y+11	; 0x0b
    328a:	9c 85       	ldd	r25, Y+12	; 0x0c
    328c:	89 2f       	mov	r24, r25
    328e:	99 0f       	add	r25, r25
    3290:	99 0b       	sbc	r25, r25
    3292:	85 95       	asr	r24
    3294:	85 95       	asr	r24
    3296:	9c 01       	movw	r18, r24
    3298:	88 ee       	ldi	r24, 0xE8	; 232
    329a:	93 e0       	ldi	r25, 0x03	; 3
    329c:	ac 01       	movw	r20, r24
    329e:	24 9f       	mul	r18, r20
    32a0:	c0 01       	movw	r24, r0
    32a2:	25 9f       	mul	r18, r21
    32a4:	90 0d       	add	r25, r0
    32a6:	34 9f       	mul	r19, r20
    32a8:	90 0d       	add	r25, r0
    32aa:	11 24       	eor	r1, r1
    32ac:	aa 27       	eor	r26, r26
    32ae:	97 fd       	sbrc	r25, 7
    32b0:	a0 95       	com	r26
    32b2:	ba 2f       	mov	r27, r26
    32b4:	bc 01       	movw	r22, r24
    32b6:	cd 01       	movw	r24, r26
    32b8:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	89 83       	std	Y+1, r24	; 0x01
    32c2:	9a 83       	std	Y+2, r25	; 0x02
    32c4:	ab 83       	std	Y+3, r26	; 0x03
    32c6:	bc 83       	std	Y+4, r27	; 0x04

	*Copy_f32ActualValue = (Copy_u16SensorRead * Local_f32StepSize) / 10;
    32c8:	8f 81       	ldd	r24, Y+7	; 0x07
    32ca:	98 85       	ldd	r25, Y+8	; 0x08
    32cc:	cc 01       	movw	r24, r24
    32ce:	a0 e0       	ldi	r26, 0x00	; 0
    32d0:	b0 e0       	ldi	r27, 0x00	; 0
    32d2:	bc 01       	movw	r22, r24
    32d4:	cd 01       	movw	r24, r26
    32d6:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	bc 01       	movw	r22, r24
    32e0:	cd 01       	movw	r24, r26
    32e2:	29 81       	ldd	r18, Y+1	; 0x01
    32e4:	3a 81       	ldd	r19, Y+2	; 0x02
    32e6:	4b 81       	ldd	r20, Y+3	; 0x03
    32e8:	5c 81       	ldd	r21, Y+4	; 0x04
    32ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32ee:	dc 01       	movw	r26, r24
    32f0:	cb 01       	movw	r24, r22
    32f2:	bc 01       	movw	r22, r24
    32f4:	cd 01       	movw	r24, r26
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 e2       	ldi	r20, 0x20	; 32
    32fc:	51 e4       	ldi	r21, 0x41	; 65
    32fe:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	e9 85       	ldd	r30, Y+9	; 0x09
    3308:	fa 85       	ldd	r31, Y+10	; 0x0a
    330a:	80 83       	st	Z, r24
    330c:	91 83       	std	Z+1, r25	; 0x01
    330e:	a2 83       	std	Z+2, r26	; 0x02
    3310:	b3 83       	std	Z+3, r27	; 0x03

	return Local_u8Erorr;
    3312:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3314:	2c 96       	adiw	r28, 0x0c	; 12
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	f8 94       	cli
    331a:	de bf       	out	0x3e, r29	; 62
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	cd bf       	out	0x3d, r28	; 61
    3320:	cf 91       	pop	r28
    3322:	df 91       	pop	r29
    3324:	08 95       	ret

00003326 <LM35_u8TempPrintLCD>:
 * Input		: Temp Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LM35_u8TempPrintLCD(f32 Copy_f32Temp)
{
    3326:	0f 93       	push	r16
    3328:	df 93       	push	r29
    332a:	cf 93       	push	r28
    332c:	cd b7       	in	r28, 0x3d	; 61
    332e:	de b7       	in	r29, 0x3e	; 62
    3330:	62 97       	sbiw	r28, 0x12	; 18
    3332:	0f b6       	in	r0, 0x3f	; 63
    3334:	f8 94       	cli
    3336:	de bf       	out	0x3e, r29	; 62
    3338:	0f be       	out	0x3f, r0	; 63
    333a:	cd bf       	out	0x3d, r28	; 61
    333c:	6a 87       	std	Y+10, r22	; 0x0a
    333e:	7b 87       	std	Y+11, r23	; 0x0b
    3340:	8c 87       	std	Y+12, r24	; 0x0c
    3342:	9d 87       	std	Y+13, r25	; 0x0d
	u8 Local_u8Error = 0;
    3344:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8String[] = "Temp: "; //Max 20 Char
    3346:	ce 01       	movw	r24, r28
    3348:	03 96       	adiw	r24, 0x03	; 3
    334a:	9f 87       	std	Y+15, r25	; 0x0f
    334c:	8e 87       	std	Y+14, r24	; 0x0e
    334e:	e0 e6       	ldi	r30, 0x60	; 96
    3350:	f0 e0       	ldi	r31, 0x00	; 0
    3352:	f9 8b       	std	Y+17, r31	; 0x11
    3354:	e8 8b       	std	Y+16, r30	; 0x10
    3356:	f7 e0       	ldi	r31, 0x07	; 7
    3358:	fa 8b       	std	Y+18, r31	; 0x12
    335a:	e8 89       	ldd	r30, Y+16	; 0x10
    335c:	f9 89       	ldd	r31, Y+17	; 0x11
    335e:	00 80       	ld	r0, Z
    3360:	88 89       	ldd	r24, Y+16	; 0x10
    3362:	99 89       	ldd	r25, Y+17	; 0x11
    3364:	01 96       	adiw	r24, 0x01	; 1
    3366:	99 8b       	std	Y+17, r25	; 0x11
    3368:	88 8b       	std	Y+16, r24	; 0x10
    336a:	ee 85       	ldd	r30, Y+14	; 0x0e
    336c:	ff 85       	ldd	r31, Y+15	; 0x0f
    336e:	00 82       	st	Z, r0
    3370:	8e 85       	ldd	r24, Y+14	; 0x0e
    3372:	9f 85       	ldd	r25, Y+15	; 0x0f
    3374:	01 96       	adiw	r24, 0x01	; 1
    3376:	9f 87       	std	Y+15, r25	; 0x0f
    3378:	8e 87       	std	Y+14, r24	; 0x0e
    337a:	9a 89       	ldd	r25, Y+18	; 0x12
    337c:	91 50       	subi	r25, 0x01	; 1
    337e:	9a 8b       	std	Y+18, r25	; 0x12
    3380:	ea 89       	ldd	r30, Y+18	; 0x12
    3382:	ee 23       	and	r30, r30
    3384:	51 f7       	brne	.-44     	; 0x335a <LM35_u8TempPrintLCD+0x34>
	u8 Local_u8StringSize = (sizeof(Local_u8String) - 1);
    3386:	86 e0       	ldi	r24, 0x06	; 6
    3388:	89 83       	std	Y+1, r24	; 0x01

	LCD_u8WriteString(Local_u8String, Local_u8StringSize);
    338a:	ce 01       	movw	r24, r28
    338c:	03 96       	adiw	r24, 0x03	; 3
    338e:	69 81       	ldd	r22, Y+1	; 0x01
    3390:	0e 94 22 10 	call	0x2044	; 0x2044 <LCD_u8WriteString>

	LCD_u8FloatNB(Copy_f32Temp, 3, 7, 0);
    3394:	8a 85       	ldd	r24, Y+10	; 0x0a
    3396:	9b 85       	ldd	r25, Y+11	; 0x0b
    3398:	ac 85       	ldd	r26, Y+12	; 0x0c
    339a:	bd 85       	ldd	r27, Y+13	; 0x0d
    339c:	bc 01       	movw	r22, r24
    339e:	cd 01       	movw	r24, r26
    33a0:	43 e0       	ldi	r20, 0x03	; 3
    33a2:	27 e0       	ldi	r18, 0x07	; 7
    33a4:	00 e0       	ldi	r16, 0x00	; 0
    33a6:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_u8FloatNB>

	return Local_u8Error;
    33aa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    33ac:	62 96       	adiw	r28, 0x12	; 18
    33ae:	0f b6       	in	r0, 0x3f	; 63
    33b0:	f8 94       	cli
    33b2:	de bf       	out	0x3e, r29	; 62
    33b4:	0f be       	out	0x3f, r0	; 63
    33b6:	cd bf       	out	0x3d, r28	; 61
    33b8:	cf 91       	pop	r28
    33ba:	df 91       	pop	r29
    33bc:	0f 91       	pop	r16
    33be:	08 95       	ret

000033c0 <main>:
#include "ADC_interface.h"
#include "LM35_interface.h"
#include <avr/delay.h>

void main(void)
{
    33c0:	0f 93       	push	r16
    33c2:	df 93       	push	r29
    33c4:	cf 93       	push	r28
    33c6:	cd b7       	in	r28, 0x3d	; 61
    33c8:	de b7       	in	r29, 0x3e	; 62
    33ca:	a1 97       	sbiw	r28, 0x21	; 33
    33cc:	0f b6       	in	r0, 0x3f	; 63
    33ce:	f8 94       	cli
    33d0:	de bf       	out	0x3e, r29	; 62
    33d2:	0f be       	out	0x3f, r0	; 63
    33d4:	cd bf       	out	0x3d, r28	; 61
	/*Local Variables*/
	u8 Local_u8String[] = "Temp: "; //Max 20 Char
    33d6:	ce 01       	movw	r24, r28
    33d8:	40 96       	adiw	r24, 0x10	; 16
    33da:	9e 8f       	std	Y+30, r25	; 0x1e
    33dc:	8d 8f       	std	Y+29, r24	; 0x1d
    33de:	e7 e6       	ldi	r30, 0x67	; 103
    33e0:	f0 e0       	ldi	r31, 0x00	; 0
    33e2:	f8 a3       	std	Y+32, r31	; 0x20
    33e4:	ef 8f       	std	Y+31, r30	; 0x1f
    33e6:	f7 e0       	ldi	r31, 0x07	; 7
    33e8:	f9 a3       	std	Y+33, r31	; 0x21
    33ea:	ef 8d       	ldd	r30, Y+31	; 0x1f
    33ec:	f8 a1       	ldd	r31, Y+32	; 0x20
    33ee:	00 80       	ld	r0, Z
    33f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33f2:	98 a1       	ldd	r25, Y+32	; 0x20
    33f4:	01 96       	adiw	r24, 0x01	; 1
    33f6:	98 a3       	std	Y+32, r25	; 0x20
    33f8:	8f 8f       	std	Y+31, r24	; 0x1f
    33fa:	ed 8d       	ldd	r30, Y+29	; 0x1d
    33fc:	fe 8d       	ldd	r31, Y+30	; 0x1e
    33fe:	00 82       	st	Z, r0
    3400:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3402:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3404:	01 96       	adiw	r24, 0x01	; 1
    3406:	9e 8f       	std	Y+30, r25	; 0x1e
    3408:	8d 8f       	std	Y+29, r24	; 0x1d
    340a:	99 a1       	ldd	r25, Y+33	; 0x21
    340c:	91 50       	subi	r25, 0x01	; 1
    340e:	99 a3       	std	Y+33, r25	; 0x21
    3410:	e9 a1       	ldd	r30, Y+33	; 0x21
    3412:	ee 23       	and	r30, r30
    3414:	51 f7       	brne	.-44     	; 0x33ea <main+0x2a>
	u8 Local_u8StringSize = (sizeof(Local_u8String) - 1);
    3416:	86 e0       	ldi	r24, 0x06	; 6
    3418:	8f 87       	std	Y+15, r24	; 0x0f
	u16 Local_u16ADCValue = 0;
    341a:	18 8e       	std	Y+24, r1	; 0x18
    341c:	1f 8a       	std	Y+23, r1	; 0x17
	f32 Local_f32ActualTemp = 0;
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	a0 e0       	ldi	r26, 0x00	; 0
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	89 8f       	std	Y+25, r24	; 0x19
    3428:	9a 8f       	std	Y+26, r25	; 0x1a
    342a:	ab 8f       	std	Y+27, r26	; 0x1b
    342c:	bc 8f       	std	Y+28, r27	; 0x1c

	DIO_u8SetPortDirection(LCD_DATA_PORT, DIO_MAX_PORT_VALUE);
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	6f ef       	ldi	r22, 0xFF	; 255
    3432:	0e 94 f8 07 	call	0xff0	; 0xff0 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_OUTPUT);
    3436:	82 e0       	ldi	r24, 0x02	; 2
    3438:	60 e0       	ldi	r22, 0x00	; 0
    343a:	41 e0       	ldi	r20, 0x01	; 1
    343c:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_OUTPUT);
    3440:	82 e0       	ldi	r24, 0x02	; 2
    3442:	61 e0       	ldi	r22, 0x01	; 1
    3444:	41 e0       	ldi	r20, 0x01	; 1
    3446:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_E_PIN, DIO_OUTPUT);
    344a:	82 e0       	ldi	r24, 0x02	; 2
    344c:	62 e0       	ldi	r22, 0x02	; 2
    344e:	41 e0       	ldi	r20, 0x01	; 1
    3450:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_u8SetPinDirection>

	/*LCD Initialization*/
	LCD_voidInitialization();
    3454:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <LCD_voidInitialization>

	/*ADC Initialization*/
	ADC_voidInitialization();
    3458:	0e 94 6d 07 	call	0xeda	; 0xeda <ADC_voidInitialization>

	/*ADC PIN Direction*/
	DIO_u8SetPinDirection(DIO_PORT_0, DIO_PIN_0, DIO_INPUT);
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	60 e0       	ldi	r22, 0x00	; 0
    3460:	40 e0       	ldi	r20, 0x00	; 0
    3462:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_u8SetPinDirection>

	while(1)
	{
		/*Get the Digital Reading from ADC*/
		ADC_u8GetReading(Channel_0, &Local_u16ADCValue);
    3466:	9e 01       	movw	r18, r28
    3468:	29 5e       	subi	r18, 0xE9	; 233
    346a:	3f 4f       	sbci	r19, 0xFF	; 255
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	b9 01       	movw	r22, r18
    3470:	0e 94 ac 07 	call	0xf58	; 0xf58 <ADC_u8GetReading>

		/*Convert the Value to Actual TEMP*/
		LM35_u8Tempreature(Local_u16ADCValue, &Local_f32ActualTemp);
    3474:	8f 89       	ldd	r24, Y+23	; 0x17
    3476:	98 8d       	ldd	r25, Y+24	; 0x18
    3478:	9e 01       	movw	r18, r28
    347a:	27 5e       	subi	r18, 0xE7	; 231
    347c:	3f 4f       	sbci	r19, 0xFF	; 255
    347e:	b9 01       	movw	r22, r18
    3480:	0e 94 1b 19 	call	0x3236	; 0x3236 <LM35_u8Tempreature>

		/*Print the Actual TEMP on LCD*/
		LCD_u8GoToXY(0, 0);
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	60 e0       	ldi	r22, 0x00	; 0
    3488:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_u8GoToXY>
		LCD_u8WriteString(Local_u8String, Local_u8StringSize);
    348c:	ce 01       	movw	r24, r28
    348e:	40 96       	adiw	r24, 0x10	; 16
    3490:	6f 85       	ldd	r22, Y+15	; 0x0f
    3492:	0e 94 22 10 	call	0x2044	; 0x2044 <LCD_u8WriteString>

		LCD_u8FloatNB(Local_f32ActualTemp, 3, 6, 0);
    3496:	89 8d       	ldd	r24, Y+25	; 0x19
    3498:	9a 8d       	ldd	r25, Y+26	; 0x1a
    349a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    349c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    349e:	bc 01       	movw	r22, r24
    34a0:	cd 01       	movw	r24, r26
    34a2:	43 e0       	ldi	r20, 0x03	; 3
    34a4:	26 e0       	ldi	r18, 0x06	; 6
    34a6:	00 e0       	ldi	r16, 0x00	; 0
    34a8:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_u8FloatNB>
		LCD_u8WriteINT(Local_u16ADCValue, 0, 1);
    34ac:	8f 89       	ldd	r24, Y+23	; 0x17
    34ae:	98 8d       	ldd	r25, Y+24	; 0x18
    34b0:	cc 01       	movw	r24, r24
    34b2:	a0 e0       	ldi	r26, 0x00	; 0
    34b4:	b0 e0       	ldi	r27, 0x00	; 0
    34b6:	bc 01       	movw	r22, r24
    34b8:	cd 01       	movw	r24, r26
    34ba:	40 e0       	ldi	r20, 0x00	; 0
    34bc:	21 e0       	ldi	r18, 0x01	; 1
    34be:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_u8WriteINT>
    34c2:	80 e0       	ldi	r24, 0x00	; 0
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	aa ef       	ldi	r26, 0xFA	; 250
    34c8:	b3 e4       	ldi	r27, 0x43	; 67
    34ca:	8b 87       	std	Y+11, r24	; 0x0b
    34cc:	9c 87       	std	Y+12, r25	; 0x0c
    34ce:	ad 87       	std	Y+13, r26	; 0x0d
    34d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    34d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    34d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	4a ef       	ldi	r20, 0xFA	; 250
    34e0:	54 e4       	ldi	r21, 0x44	; 68
    34e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	8f 83       	std	Y+7, r24	; 0x07
    34ec:	98 87       	std	Y+8, r25	; 0x08
    34ee:	a9 87       	std	Y+9, r26	; 0x09
    34f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34f2:	6f 81       	ldd	r22, Y+7	; 0x07
    34f4:	78 85       	ldd	r23, Y+8	; 0x08
    34f6:	89 85       	ldd	r24, Y+9	; 0x09
    34f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	40 e8       	ldi	r20, 0x80	; 128
    3500:	5f e3       	ldi	r21, 0x3F	; 63
    3502:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3506:	88 23       	and	r24, r24
    3508:	2c f4       	brge	.+10     	; 0x3514 <main+0x154>
		__ticks = 1;
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	9e 83       	std	Y+6, r25	; 0x06
    3510:	8d 83       	std	Y+5, r24	; 0x05
    3512:	3f c0       	rjmp	.+126    	; 0x3592 <main+0x1d2>
	else if (__tmp > 65535)
    3514:	6f 81       	ldd	r22, Y+7	; 0x07
    3516:	78 85       	ldd	r23, Y+8	; 0x08
    3518:	89 85       	ldd	r24, Y+9	; 0x09
    351a:	9a 85       	ldd	r25, Y+10	; 0x0a
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	3f ef       	ldi	r19, 0xFF	; 255
    3520:	4f e7       	ldi	r20, 0x7F	; 127
    3522:	57 e4       	ldi	r21, 0x47	; 71
    3524:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3528:	18 16       	cp	r1, r24
    352a:	4c f5       	brge	.+82     	; 0x357e <main+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    352c:	6b 85       	ldd	r22, Y+11	; 0x0b
    352e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3530:	8d 85       	ldd	r24, Y+13	; 0x0d
    3532:	9e 85       	ldd	r25, Y+14	; 0x0e
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	40 e2       	ldi	r20, 0x20	; 32
    353a:	51 e4       	ldi	r21, 0x41	; 65
    353c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	bc 01       	movw	r22, r24
    3546:	cd 01       	movw	r24, r26
    3548:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	9e 83       	std	Y+6, r25	; 0x06
    3552:	8d 83       	std	Y+5, r24	; 0x05
    3554:	0f c0       	rjmp	.+30     	; 0x3574 <main+0x1b4>
    3556:	88 ec       	ldi	r24, 0xC8	; 200
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	9c 83       	std	Y+4, r25	; 0x04
    355c:	8b 83       	std	Y+3, r24	; 0x03
    355e:	8b 81       	ldd	r24, Y+3	; 0x03
    3560:	9c 81       	ldd	r25, Y+4	; 0x04
    3562:	01 97       	sbiw	r24, 0x01	; 1
    3564:	f1 f7       	brne	.-4      	; 0x3562 <main+0x1a2>
    3566:	9c 83       	std	Y+4, r25	; 0x04
    3568:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    356a:	8d 81       	ldd	r24, Y+5	; 0x05
    356c:	9e 81       	ldd	r25, Y+6	; 0x06
    356e:	01 97       	sbiw	r24, 0x01	; 1
    3570:	9e 83       	std	Y+6, r25	; 0x06
    3572:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3574:	8d 81       	ldd	r24, Y+5	; 0x05
    3576:	9e 81       	ldd	r25, Y+6	; 0x06
    3578:	00 97       	sbiw	r24, 0x00	; 0
    357a:	69 f7       	brne	.-38     	; 0x3556 <main+0x196>
    357c:	74 cf       	rjmp	.-280    	; 0x3466 <main+0xa6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    357e:	6f 81       	ldd	r22, Y+7	; 0x07
    3580:	78 85       	ldd	r23, Y+8	; 0x08
    3582:	89 85       	ldd	r24, Y+9	; 0x09
    3584:	9a 85       	ldd	r25, Y+10	; 0x0a
    3586:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    358a:	dc 01       	movw	r26, r24
    358c:	cb 01       	movw	r24, r22
    358e:	9e 83       	std	Y+6, r25	; 0x06
    3590:	8d 83       	std	Y+5, r24	; 0x05
    3592:	8d 81       	ldd	r24, Y+5	; 0x05
    3594:	9e 81       	ldd	r25, Y+6	; 0x06
    3596:	9a 83       	std	Y+2, r25	; 0x02
    3598:	89 83       	std	Y+1, r24	; 0x01
    359a:	89 81       	ldd	r24, Y+1	; 0x01
    359c:	9a 81       	ldd	r25, Y+2	; 0x02
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	f1 f7       	brne	.-4      	; 0x359e <main+0x1de>
    35a2:	9a 83       	std	Y+2, r25	; 0x02
    35a4:	89 83       	std	Y+1, r24	; 0x01
    35a6:	5f cf       	rjmp	.-322    	; 0x3466 <main+0xa6>

000035a8 <__mulsi3>:
    35a8:	62 9f       	mul	r22, r18
    35aa:	d0 01       	movw	r26, r0
    35ac:	73 9f       	mul	r23, r19
    35ae:	f0 01       	movw	r30, r0
    35b0:	82 9f       	mul	r24, r18
    35b2:	e0 0d       	add	r30, r0
    35b4:	f1 1d       	adc	r31, r1
    35b6:	64 9f       	mul	r22, r20
    35b8:	e0 0d       	add	r30, r0
    35ba:	f1 1d       	adc	r31, r1
    35bc:	92 9f       	mul	r25, r18
    35be:	f0 0d       	add	r31, r0
    35c0:	83 9f       	mul	r24, r19
    35c2:	f0 0d       	add	r31, r0
    35c4:	74 9f       	mul	r23, r20
    35c6:	f0 0d       	add	r31, r0
    35c8:	65 9f       	mul	r22, r21
    35ca:	f0 0d       	add	r31, r0
    35cc:	99 27       	eor	r25, r25
    35ce:	72 9f       	mul	r23, r18
    35d0:	b0 0d       	add	r27, r0
    35d2:	e1 1d       	adc	r30, r1
    35d4:	f9 1f       	adc	r31, r25
    35d6:	63 9f       	mul	r22, r19
    35d8:	b0 0d       	add	r27, r0
    35da:	e1 1d       	adc	r30, r1
    35dc:	f9 1f       	adc	r31, r25
    35de:	bd 01       	movw	r22, r26
    35e0:	cf 01       	movw	r24, r30
    35e2:	11 24       	eor	r1, r1
    35e4:	08 95       	ret

000035e6 <__udivmodsi4>:
    35e6:	a1 e2       	ldi	r26, 0x21	; 33
    35e8:	1a 2e       	mov	r1, r26
    35ea:	aa 1b       	sub	r26, r26
    35ec:	bb 1b       	sub	r27, r27
    35ee:	fd 01       	movw	r30, r26
    35f0:	0d c0       	rjmp	.+26     	; 0x360c <__udivmodsi4_ep>

000035f2 <__udivmodsi4_loop>:
    35f2:	aa 1f       	adc	r26, r26
    35f4:	bb 1f       	adc	r27, r27
    35f6:	ee 1f       	adc	r30, r30
    35f8:	ff 1f       	adc	r31, r31
    35fa:	a2 17       	cp	r26, r18
    35fc:	b3 07       	cpc	r27, r19
    35fe:	e4 07       	cpc	r30, r20
    3600:	f5 07       	cpc	r31, r21
    3602:	20 f0       	brcs	.+8      	; 0x360c <__udivmodsi4_ep>
    3604:	a2 1b       	sub	r26, r18
    3606:	b3 0b       	sbc	r27, r19
    3608:	e4 0b       	sbc	r30, r20
    360a:	f5 0b       	sbc	r31, r21

0000360c <__udivmodsi4_ep>:
    360c:	66 1f       	adc	r22, r22
    360e:	77 1f       	adc	r23, r23
    3610:	88 1f       	adc	r24, r24
    3612:	99 1f       	adc	r25, r25
    3614:	1a 94       	dec	r1
    3616:	69 f7       	brne	.-38     	; 0x35f2 <__udivmodsi4_loop>
    3618:	60 95       	com	r22
    361a:	70 95       	com	r23
    361c:	80 95       	com	r24
    361e:	90 95       	com	r25
    3620:	9b 01       	movw	r18, r22
    3622:	ac 01       	movw	r20, r24
    3624:	bd 01       	movw	r22, r26
    3626:	cf 01       	movw	r24, r30
    3628:	08 95       	ret

0000362a <__prologue_saves__>:
    362a:	2f 92       	push	r2
    362c:	3f 92       	push	r3
    362e:	4f 92       	push	r4
    3630:	5f 92       	push	r5
    3632:	6f 92       	push	r6
    3634:	7f 92       	push	r7
    3636:	8f 92       	push	r8
    3638:	9f 92       	push	r9
    363a:	af 92       	push	r10
    363c:	bf 92       	push	r11
    363e:	cf 92       	push	r12
    3640:	df 92       	push	r13
    3642:	ef 92       	push	r14
    3644:	ff 92       	push	r15
    3646:	0f 93       	push	r16
    3648:	1f 93       	push	r17
    364a:	cf 93       	push	r28
    364c:	df 93       	push	r29
    364e:	cd b7       	in	r28, 0x3d	; 61
    3650:	de b7       	in	r29, 0x3e	; 62
    3652:	ca 1b       	sub	r28, r26
    3654:	db 0b       	sbc	r29, r27
    3656:	0f b6       	in	r0, 0x3f	; 63
    3658:	f8 94       	cli
    365a:	de bf       	out	0x3e, r29	; 62
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	cd bf       	out	0x3d, r28	; 61
    3660:	09 94       	ijmp

00003662 <__epilogue_restores__>:
    3662:	2a 88       	ldd	r2, Y+18	; 0x12
    3664:	39 88       	ldd	r3, Y+17	; 0x11
    3666:	48 88       	ldd	r4, Y+16	; 0x10
    3668:	5f 84       	ldd	r5, Y+15	; 0x0f
    366a:	6e 84       	ldd	r6, Y+14	; 0x0e
    366c:	7d 84       	ldd	r7, Y+13	; 0x0d
    366e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3670:	9b 84       	ldd	r9, Y+11	; 0x0b
    3672:	aa 84       	ldd	r10, Y+10	; 0x0a
    3674:	b9 84       	ldd	r11, Y+9	; 0x09
    3676:	c8 84       	ldd	r12, Y+8	; 0x08
    3678:	df 80       	ldd	r13, Y+7	; 0x07
    367a:	ee 80       	ldd	r14, Y+6	; 0x06
    367c:	fd 80       	ldd	r15, Y+5	; 0x05
    367e:	0c 81       	ldd	r16, Y+4	; 0x04
    3680:	1b 81       	ldd	r17, Y+3	; 0x03
    3682:	aa 81       	ldd	r26, Y+2	; 0x02
    3684:	b9 81       	ldd	r27, Y+1	; 0x01
    3686:	ce 0f       	add	r28, r30
    3688:	d1 1d       	adc	r29, r1
    368a:	0f b6       	in	r0, 0x3f	; 63
    368c:	f8 94       	cli
    368e:	de bf       	out	0x3e, r29	; 62
    3690:	0f be       	out	0x3f, r0	; 63
    3692:	cd bf       	out	0x3d, r28	; 61
    3694:	ed 01       	movw	r28, r26
    3696:	08 95       	ret

00003698 <_exit>:
    3698:	f8 94       	cli

0000369a <__stop_program>:
    369a:	ff cf       	rjmp	.-2      	; 0x369a <__stop_program>
