
LCD_FatlaMan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000354c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015e  00800060  0000354c  000035c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000243c  00000000  00000000  00003720  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c91  00000000  00000000  00005b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000067ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  0000698d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00006b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00008f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000a310  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000b4e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000b6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000b99e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c30c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <main>
      7a:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad e7       	ldi	r26, 0x7D	; 125
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 89 1a 	jmp	0x3512	; 0x3512 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 95 1a 	jmp	0x352a	; 0x352a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 95 1a 	jmp	0x352a	; 0x352a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d e7       	ldi	r24, 0x7D	; 125
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 89 1a 	jmp	0x3512	; 0x3512 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6d e7       	ldi	r22, 0x7D	; 125
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 95 1a 	jmp	0x352a	; 0x352a <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 95 1a 	jmp	0x352a	; 0x352a <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 95 1a 	jmp	0x352a	; 0x352a <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	eb 57       	subi	r30, 0x7B	; 123
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <DIO_u8SetPortDirection>:
 * Input		: Port Number, Direction
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPortDirection(u8 Copy_u8PortNB, u8 Copy_u8Dir)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <DIO_u8SetPortDirection+0x6>
     e24:	00 d0       	rcall	.+0      	; 0xe26 <DIO_u8SetPortDirection+0x8>
     e26:	0f 92       	push	r0
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	8a 83       	std	Y+2, r24	; 0x02
     e2e:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
     e30:	19 82       	std	Y+1, r1	; 0x01
	}

	else
		{
			/*Switch for the PORT Number if it 0 -> 3 it is OK else return Error*/
			switch(Copy_u8PortNB)
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	3d 83       	std	Y+5, r19	; 0x05
     e3a:	2c 83       	std	Y+4, r18	; 0x04
     e3c:	8c 81       	ldd	r24, Y+4	; 0x04
     e3e:	9d 81       	ldd	r25, Y+5	; 0x05
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	91 05       	cpc	r25, r1
     e44:	d1 f0       	breq	.+52     	; 0xe7a <DIO_u8SetPortDirection+0x5c>
     e46:	2c 81       	ldd	r18, Y+4	; 0x04
     e48:	3d 81       	ldd	r19, Y+5	; 0x05
     e4a:	22 30       	cpi	r18, 0x02	; 2
     e4c:	31 05       	cpc	r19, r1
     e4e:	2c f4       	brge	.+10     	; 0xe5a <DIO_u8SetPortDirection+0x3c>
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	9d 81       	ldd	r25, Y+5	; 0x05
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	61 f0       	breq	.+24     	; 0xe70 <DIO_u8SetPortDirection+0x52>
     e58:	1f c0       	rjmp	.+62     	; 0xe98 <DIO_u8SetPortDirection+0x7a>
     e5a:	2c 81       	ldd	r18, Y+4	; 0x04
     e5c:	3d 81       	ldd	r19, Y+5	; 0x05
     e5e:	22 30       	cpi	r18, 0x02	; 2
     e60:	31 05       	cpc	r19, r1
     e62:	81 f0       	breq	.+32     	; 0xe84 <DIO_u8SetPortDirection+0x66>
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	9d 81       	ldd	r25, Y+5	; 0x05
     e68:	83 30       	cpi	r24, 0x03	; 3
     e6a:	91 05       	cpc	r25, r1
     e6c:	81 f0       	breq	.+32     	; 0xe8e <DIO_u8SetPortDirection+0x70>
     e6e:	14 c0       	rjmp	.+40     	; 0xe98 <DIO_u8SetPortDirection+0x7a>
			{
			case DIO_PORT_0:
				DDRA = Copy_u8Dir;
     e70:	ea e3       	ldi	r30, 0x3A	; 58
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	80 83       	st	Z, r24
     e78:	11 c0       	rjmp	.+34     	; 0xe9c <DIO_u8SetPortDirection+0x7e>
				break;

			case DIO_PORT_1:
				DDRB = Copy_u8Dir;
     e7a:	e7 e3       	ldi	r30, 0x37	; 55
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	80 83       	st	Z, r24
     e82:	0c c0       	rjmp	.+24     	; 0xe9c <DIO_u8SetPortDirection+0x7e>
				break;

			case DIO_PORT_2:
				DDRC = Copy_u8Dir;
     e84:	e4 e3       	ldi	r30, 0x34	; 52
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	80 83       	st	Z, r24
     e8c:	07 c0       	rjmp	.+14     	; 0xe9c <DIO_u8SetPortDirection+0x7e>
				break;

			case DIO_PORT_3:
				DDRD = Copy_u8Dir;
     e8e:	e1 e3       	ldi	r30, 0x31	; 49
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	80 83       	st	Z, r24
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_u8SetPortDirection+0x7e>
				break;

			default:
				Local_u8Error = 1;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}

	return Local_u8Error;
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <DIO_u8SetPortValue>:
 * Input		: Port Number, Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPortValue(u8 Copy_u8PortNB, u8 Copy_u8Value)
{
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <DIO_u8SetPortValue+0x6>
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <DIO_u8SetPortValue+0x8>
     eb6:	0f 92       	push	r0
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	8a 83       	std	Y+2, r24	; 0x02
     ebe:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
     ec0:	19 82       	std	Y+1, r1	; 0x01
		Local_u8Error = 1;
	}
	else
		{
			/*Switch for the PORT Number if it 0 -> 3 it is OK else return Error*/
			switch(Copy_u8PortNB)
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	3d 83       	std	Y+5, r19	; 0x05
     eca:	2c 83       	std	Y+4, r18	; 0x04
     ecc:	8c 81       	ldd	r24, Y+4	; 0x04
     ece:	9d 81       	ldd	r25, Y+5	; 0x05
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	91 05       	cpc	r25, r1
     ed4:	d1 f0       	breq	.+52     	; 0xf0a <DIO_u8SetPortValue+0x5c>
     ed6:	2c 81       	ldd	r18, Y+4	; 0x04
     ed8:	3d 81       	ldd	r19, Y+5	; 0x05
     eda:	22 30       	cpi	r18, 0x02	; 2
     edc:	31 05       	cpc	r19, r1
     ede:	2c f4       	brge	.+10     	; 0xeea <DIO_u8SetPortValue+0x3c>
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	9d 81       	ldd	r25, Y+5	; 0x05
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	61 f0       	breq	.+24     	; 0xf00 <DIO_u8SetPortValue+0x52>
     ee8:	1f c0       	rjmp	.+62     	; 0xf28 <DIO_u8SetPortValue+0x7a>
     eea:	2c 81       	ldd	r18, Y+4	; 0x04
     eec:	3d 81       	ldd	r19, Y+5	; 0x05
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	81 f0       	breq	.+32     	; 0xf14 <DIO_u8SetPortValue+0x66>
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	9d 81       	ldd	r25, Y+5	; 0x05
     ef8:	83 30       	cpi	r24, 0x03	; 3
     efa:	91 05       	cpc	r25, r1
     efc:	81 f0       	breq	.+32     	; 0xf1e <DIO_u8SetPortValue+0x70>
     efe:	14 c0       	rjmp	.+40     	; 0xf28 <DIO_u8SetPortValue+0x7a>
			{
			case DIO_PORT_0:
				PORTA = Copy_u8Value;
     f00:	eb e3       	ldi	r30, 0x3B	; 59
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	80 83       	st	Z, r24
     f08:	11 c0       	rjmp	.+34     	; 0xf2c <DIO_u8SetPortValue+0x7e>
				break;

			case DIO_PORT_1:
				PORTB = Copy_u8Value;
     f0a:	e8 e3       	ldi	r30, 0x38	; 56
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	80 83       	st	Z, r24
     f12:	0c c0       	rjmp	.+24     	; 0xf2c <DIO_u8SetPortValue+0x7e>
				break;

			case DIO_PORT_2:
				PORTC = Copy_u8Value;
     f14:	e5 e3       	ldi	r30, 0x35	; 53
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	80 83       	st	Z, r24
     f1c:	07 c0       	rjmp	.+14     	; 0xf2c <DIO_u8SetPortValue+0x7e>
				break;

			case DIO_PORT_3:
				PORTD = Copy_u8Value;
     f1e:	e2 e3       	ldi	r30, 0x32	; 50
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	80 83       	st	Z, r24
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_u8SetPortValue+0x7e>
				break;

			default:
				Local_u8Error = 1;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}

	return Local_u8Error;
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <DIO_u8SetPinDirection>:
 * Input		: Port Number, Pin Number, Direction
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPinDirection(u8 Copy_u8PortNB, u8 Copy_u8PinNB, u8 Copy_u8Dir)
{
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	00 d0       	rcall	.+0      	; 0xf44 <DIO_u8SetPinDirection+0x6>
     f44:	00 d0       	rcall	.+0      	; 0xf46 <DIO_u8SetPinDirection+0x8>
     f46:	00 d0       	rcall	.+0      	; 0xf48 <DIO_u8SetPinDirection+0xa>
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	8a 83       	std	Y+2, r24	; 0x02
     f4e:	6b 83       	std	Y+3, r22	; 0x03
     f50:	4c 83       	std	Y+4, r20	; 0x04
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
     f52:	19 82       	std	Y+1, r1	; 0x01

	/*Check that the PIN Number is between 0 -> 7 else Return Local Error with ONE*/
	if(Copy_u8PinNB > DIO_PIN_7)
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	88 30       	cpi	r24, 0x08	; 8
     f58:	10 f0       	brcs	.+4      	; 0xf5e <DIO_u8SetPinDirection+0x20>
	{
		Local_u8Error = 1;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Check if the Direction is Input or Output Else return Local Error with one*/
	if((Copy_u8Dir != DIO_INPUT) && (Copy_u8Dir != DIO_OUTPUT))
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	88 23       	and	r24, r24
     f62:	31 f0       	breq	.+12     	; 0xf70 <DIO_u8SetPinDirection+0x32>
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	19 f0       	breq	.+6      	; 0xf70 <DIO_u8SetPinDirection+0x32>
	{
		Local_u8Error = 1;
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	ac c0       	rjmp	.+344    	; 0x10c8 <DIO_u8SetPinDirection+0x18a>
	}

	/*Else Check for the PORT number is between 0 -> 3*/
	else
	{
		switch(Copy_u8PortNB)
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	3e 83       	std	Y+6, r19	; 0x06
     f78:	2d 83       	std	Y+5, r18	; 0x05
     f7a:	6d 81       	ldd	r22, Y+5	; 0x05
     f7c:	7e 81       	ldd	r23, Y+6	; 0x06
     f7e:	61 30       	cpi	r22, 0x01	; 1
     f80:	71 05       	cpc	r23, r1
     f82:	d1 f1       	breq	.+116    	; 0xff8 <DIO_u8SetPinDirection+0xba>
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	9e 81       	ldd	r25, Y+6	; 0x06
     f88:	82 30       	cpi	r24, 0x02	; 2
     f8a:	91 05       	cpc	r25, r1
     f8c:	34 f4       	brge	.+12     	; 0xf9a <DIO_u8SetPinDirection+0x5c>
     f8e:	2d 81       	ldd	r18, Y+5	; 0x05
     f90:	3e 81       	ldd	r19, Y+6	; 0x06
     f92:	21 15       	cp	r18, r1
     f94:	31 05       	cpc	r19, r1
     f96:	71 f0       	breq	.+28     	; 0xfb4 <DIO_u8SetPinDirection+0x76>
     f98:	95 c0       	rjmp	.+298    	; 0x10c4 <DIO_u8SetPinDirection+0x186>
     f9a:	6d 81       	ldd	r22, Y+5	; 0x05
     f9c:	7e 81       	ldd	r23, Y+6	; 0x06
     f9e:	62 30       	cpi	r22, 0x02	; 2
     fa0:	71 05       	cpc	r23, r1
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <DIO_u8SetPinDirection+0x68>
     fa4:	4b c0       	rjmp	.+150    	; 0x103c <DIO_u8SetPinDirection+0xfe>
     fa6:	8d 81       	ldd	r24, Y+5	; 0x05
     fa8:	9e 81       	ldd	r25, Y+6	; 0x06
     faa:	83 30       	cpi	r24, 0x03	; 3
     fac:	91 05       	cpc	r25, r1
     fae:	09 f4       	brne	.+2      	; 0xfb2 <DIO_u8SetPinDirection+0x74>
     fb0:	67 c0       	rjmp	.+206    	; 0x1080 <DIO_u8SetPinDirection+0x142>
     fb2:	88 c0       	rjmp	.+272    	; 0x10c4 <DIO_u8SetPinDirection+0x186>
		{
		case DIO_PORT_0:
			ASSIGN_BIT(DDRA, Copy_u8PinNB, Copy_u8Dir);
     fb4:	aa e3       	ldi	r26, 0x3A	; 58
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	ea e3       	ldi	r30, 0x3A	; 58
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <DIO_u8SetPinDirection+0x92>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	2a 95       	dec	r18
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <DIO_u8SetPinDirection+0x8e>
     fd4:	80 95       	com	r24
     fd6:	48 23       	and	r20, r24
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	88 2f       	mov	r24, r24
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	b9 01       	movw	r22, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_u8SetPinDirection+0xae>
     fe8:	66 0f       	add	r22, r22
     fea:	77 1f       	adc	r23, r23
     fec:	8a 95       	dec	r24
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_u8SetPinDirection+0xaa>
     ff0:	cb 01       	movw	r24, r22
     ff2:	84 2b       	or	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	68 c0       	rjmp	.+208    	; 0x10c8 <DIO_u8SetPinDirection+0x18a>
			break;

		case DIO_PORT_1:
			ASSIGN_BIT(DDRB, Copy_u8PinNB, Copy_u8Dir);
     ff8:	a7 e3       	ldi	r26, 0x37	; 55
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e7 e3       	ldi	r30, 0x37	; 55
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_u8SetPinDirection+0xd6>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	2a 95       	dec	r18
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_u8SetPinDirection+0xd2>
    1018:	80 95       	com	r24
    101a:	48 23       	and	r20, r24
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	88 2f       	mov	r24, r24
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	b9 01       	movw	r22, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_u8SetPinDirection+0xf2>
    102c:	66 0f       	add	r22, r22
    102e:	77 1f       	adc	r23, r23
    1030:	8a 95       	dec	r24
    1032:	e2 f7       	brpl	.-8      	; 0x102c <DIO_u8SetPinDirection+0xee>
    1034:	cb 01       	movw	r24, r22
    1036:	84 2b       	or	r24, r20
    1038:	8c 93       	st	X, r24
    103a:	46 c0       	rjmp	.+140    	; 0x10c8 <DIO_u8SetPinDirection+0x18a>
			break;

		case DIO_PORT_2:
			ASSIGN_BIT(DDRC, Copy_u8PinNB, Copy_u8Dir);
    103c:	a4 e3       	ldi	r26, 0x34	; 52
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e4 e3       	ldi	r30, 0x34	; 52
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_u8SetPinDirection+0x11a>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	2a 95       	dec	r18
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <DIO_u8SetPinDirection+0x116>
    105c:	80 95       	com	r24
    105e:	48 23       	and	r20, r24
    1060:	8c 81       	ldd	r24, Y+4	; 0x04
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	88 2f       	mov	r24, r24
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	b9 01       	movw	r22, r18
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <DIO_u8SetPinDirection+0x136>
    1070:	66 0f       	add	r22, r22
    1072:	77 1f       	adc	r23, r23
    1074:	8a 95       	dec	r24
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <DIO_u8SetPinDirection+0x132>
    1078:	cb 01       	movw	r24, r22
    107a:	84 2b       	or	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	24 c0       	rjmp	.+72     	; 0x10c8 <DIO_u8SetPinDirection+0x18a>
			break;

		case DIO_PORT_3:
			ASSIGN_BIT(DDRD, Copy_u8PinNB, Copy_u8Dir);
    1080:	a1 e3       	ldi	r26, 0x31	; 49
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e1 e3       	ldi	r30, 0x31	; 49
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_u8SetPinDirection+0x15e>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	2a 95       	dec	r18
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <DIO_u8SetPinDirection+0x15a>
    10a0:	80 95       	com	r24
    10a2:	48 23       	and	r20, r24
    10a4:	8c 81       	ldd	r24, Y+4	; 0x04
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	b9 01       	movw	r22, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_u8SetPinDirection+0x17a>
    10b4:	66 0f       	add	r22, r22
    10b6:	77 1f       	adc	r23, r23
    10b8:	8a 95       	dec	r24
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_u8SetPinDirection+0x176>
    10bc:	cb 01       	movw	r24, r22
    10be:	84 2b       	or	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_u8SetPinDirection+0x18a>
			break;

		default:
			Local_u8Error = 1;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_u8Error;
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ca:	26 96       	adiw	r28, 0x06	; 6
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <DIO_u8SetPinValue>:
 * Input		: Port Number, Pin Number, Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPinValue(u8 Copy_u8PortNB, u8 Copy_u8PinNB, u8 Copy_u8Value)
{
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <DIO_u8SetPinValue+0x6>
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <DIO_u8SetPinValue+0x8>
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <DIO_u8SetPinValue+0xa>
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	8a 83       	std	Y+2, r24	; 0x02
    10ec:	6b 83       	std	Y+3, r22	; 0x03
    10ee:	4c 83       	std	Y+4, r20	; 0x04
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    10f0:	19 82       	std	Y+1, r1	; 0x01

	/*Check that the PIN Number is between 0 -> 7 else Return Local Error with ONE*/
	if(Copy_u8PinNB > DIO_PIN_7)
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	88 30       	cpi	r24, 0x08	; 8
    10f6:	10 f0       	brcs	.+4      	; 0x10fc <DIO_u8SetPinValue+0x20>
	{
		Local_u8Error = 1;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Check if the Direction is Input or Output Else return Local Error with one*/
	if((Copy_u8Value != DIO_HIGH) && (Copy_u8Value != DIO_LOW))
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	31 f0       	breq	.+12     	; 0x110e <DIO_u8SetPinValue+0x32>
    1102:	8c 81       	ldd	r24, Y+4	; 0x04
    1104:	88 23       	and	r24, r24
    1106:	19 f0       	breq	.+6      	; 0x110e <DIO_u8SetPinValue+0x32>
	{
		Local_u8Error = 1;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	89 83       	std	Y+1, r24	; 0x01
    110c:	ac c0       	rjmp	.+344    	; 0x1266 <DIO_u8SetPinValue+0x18a>
	}

	/*Else Check for the PORT number is between 0 -> 3*/
	else
	{
		switch(Copy_u8PortNB)
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	3e 83       	std	Y+6, r19	; 0x06
    1116:	2d 83       	std	Y+5, r18	; 0x05
    1118:	6d 81       	ldd	r22, Y+5	; 0x05
    111a:	7e 81       	ldd	r23, Y+6	; 0x06
    111c:	61 30       	cpi	r22, 0x01	; 1
    111e:	71 05       	cpc	r23, r1
    1120:	d1 f1       	breq	.+116    	; 0x1196 <DIO_u8SetPinValue+0xba>
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	82 30       	cpi	r24, 0x02	; 2
    1128:	91 05       	cpc	r25, r1
    112a:	34 f4       	brge	.+12     	; 0x1138 <DIO_u8SetPinValue+0x5c>
    112c:	2d 81       	ldd	r18, Y+5	; 0x05
    112e:	3e 81       	ldd	r19, Y+6	; 0x06
    1130:	21 15       	cp	r18, r1
    1132:	31 05       	cpc	r19, r1
    1134:	71 f0       	breq	.+28     	; 0x1152 <DIO_u8SetPinValue+0x76>
    1136:	95 c0       	rjmp	.+298    	; 0x1262 <DIO_u8SetPinValue+0x186>
    1138:	6d 81       	ldd	r22, Y+5	; 0x05
    113a:	7e 81       	ldd	r23, Y+6	; 0x06
    113c:	62 30       	cpi	r22, 0x02	; 2
    113e:	71 05       	cpc	r23, r1
    1140:	09 f4       	brne	.+2      	; 0x1144 <DIO_u8SetPinValue+0x68>
    1142:	4b c0       	rjmp	.+150    	; 0x11da <DIO_u8SetPinValue+0xfe>
    1144:	8d 81       	ldd	r24, Y+5	; 0x05
    1146:	9e 81       	ldd	r25, Y+6	; 0x06
    1148:	83 30       	cpi	r24, 0x03	; 3
    114a:	91 05       	cpc	r25, r1
    114c:	09 f4       	brne	.+2      	; 0x1150 <DIO_u8SetPinValue+0x74>
    114e:	67 c0       	rjmp	.+206    	; 0x121e <DIO_u8SetPinValue+0x142>
    1150:	88 c0       	rjmp	.+272    	; 0x1262 <DIO_u8SetPinValue+0x186>
		{
		case DIO_PORT_0:
			ASSIGN_BIT(PORTA, Copy_u8PinNB, Copy_u8Value);
    1152:	ab e3       	ldi	r26, 0x3B	; 59
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	eb e3       	ldi	r30, 0x3B	; 59
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_u8SetPinValue+0x92>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	2a 95       	dec	r18
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_u8SetPinValue+0x8e>
    1172:	80 95       	com	r24
    1174:	48 23       	and	r20, r24
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	b9 01       	movw	r22, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <DIO_u8SetPinValue+0xae>
    1186:	66 0f       	add	r22, r22
    1188:	77 1f       	adc	r23, r23
    118a:	8a 95       	dec	r24
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <DIO_u8SetPinValue+0xaa>
    118e:	cb 01       	movw	r24, r22
    1190:	84 2b       	or	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	68 c0       	rjmp	.+208    	; 0x1266 <DIO_u8SetPinValue+0x18a>
			break;

		case DIO_PORT_1:
			ASSIGN_BIT(PORTB, Copy_u8PinNB, Copy_u8Value);
    1196:	a8 e3       	ldi	r26, 0x38	; 56
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e8 e3       	ldi	r30, 0x38	; 56
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	48 2f       	mov	r20, r24
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <DIO_u8SetPinValue+0xd6>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	2a 95       	dec	r18
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <DIO_u8SetPinValue+0xd2>
    11b6:	80 95       	com	r24
    11b8:	48 23       	and	r20, r24
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	b9 01       	movw	r22, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_u8SetPinValue+0xf2>
    11ca:	66 0f       	add	r22, r22
    11cc:	77 1f       	adc	r23, r23
    11ce:	8a 95       	dec	r24
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_u8SetPinValue+0xee>
    11d2:	cb 01       	movw	r24, r22
    11d4:	84 2b       	or	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	46 c0       	rjmp	.+140    	; 0x1266 <DIO_u8SetPinValue+0x18a>
			break;

		case DIO_PORT_2:
			ASSIGN_BIT(PORTC, Copy_u8PinNB, Copy_u8Value);
    11da:	a5 e3       	ldi	r26, 0x35	; 53
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e5 e3       	ldi	r30, 0x35	; 53
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_u8SetPinValue+0x11a>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	2a 95       	dec	r18
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_u8SetPinValue+0x116>
    11fa:	80 95       	com	r24
    11fc:	48 23       	and	r20, r24
    11fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	b9 01       	movw	r22, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <DIO_u8SetPinValue+0x136>
    120e:	66 0f       	add	r22, r22
    1210:	77 1f       	adc	r23, r23
    1212:	8a 95       	dec	r24
    1214:	e2 f7       	brpl	.-8      	; 0x120e <DIO_u8SetPinValue+0x132>
    1216:	cb 01       	movw	r24, r22
    1218:	84 2b       	or	r24, r20
    121a:	8c 93       	st	X, r24
    121c:	24 c0       	rjmp	.+72     	; 0x1266 <DIO_u8SetPinValue+0x18a>
			break;

		case DIO_PORT_3:
			ASSIGN_BIT(PORTD, Copy_u8PinNB, Copy_u8Value);
    121e:	a2 e3       	ldi	r26, 0x32	; 50
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e2 e3       	ldi	r30, 0x32	; 50
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	48 2f       	mov	r20, r24
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 c0       	rjmp	.+4      	; 0x123a <DIO_u8SetPinValue+0x15e>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	2a 95       	dec	r18
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <DIO_u8SetPinValue+0x15a>
    123e:	80 95       	com	r24
    1240:	48 23       	and	r20, r24
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	b9 01       	movw	r22, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <DIO_u8SetPinValue+0x17a>
    1252:	66 0f       	add	r22, r22
    1254:	77 1f       	adc	r23, r23
    1256:	8a 95       	dec	r24
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <DIO_u8SetPinValue+0x176>
    125a:	cb 01       	movw	r24, r22
    125c:	84 2b       	or	r24, r20
    125e:	8c 93       	st	X, r24
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <DIO_u8SetPinValue+0x18a>
			break;

		default:
			Local_u8Error = 1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_u8Error;
    1266:	89 81       	ldd	r24, Y+1	; 0x01
}
    1268:	26 96       	adiw	r28, 0x06	; 6
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <DIO_u8GetPortValue>:
 * Input		: Port Number, Pointer for a Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8GetPortValue(u8 Copy_u8PortNB, u8 * Copy_u8Value)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <DIO_u8GetPortValue+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <DIO_u8GetPortValue+0x8>
    1282:	00 d0       	rcall	.+0      	; 0x1284 <DIO_u8GetPortValue+0xa>
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	8a 83       	std	Y+2, r24	; 0x02
    128a:	7c 83       	std	Y+4, r23	; 0x04
    128c:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    128e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Value == NULL_POINTER)
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	19 f4       	brne	.+6      	; 0x129e <DIO_u8GetPortValue+0x24>
	{
		Local_u8Error = 1;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	3d c0       	rjmp	.+122    	; 0x1318 <DIO_u8GetPortValue+0x9e>
	}

	else
	{
		/*Switch for the PORT Number if it 0 -> 3 it is OK else return Error*/
		switch(Copy_u8PortNB)
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	3e 83       	std	Y+6, r19	; 0x06
    12a6:	2d 83       	std	Y+5, r18	; 0x05
    12a8:	8d 81       	ldd	r24, Y+5	; 0x05
    12aa:	9e 81       	ldd	r25, Y+6	; 0x06
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	91 05       	cpc	r25, r1
    12b0:	e1 f0       	breq	.+56     	; 0x12ea <DIO_u8GetPortValue+0x70>
    12b2:	2d 81       	ldd	r18, Y+5	; 0x05
    12b4:	3e 81       	ldd	r19, Y+6	; 0x06
    12b6:	22 30       	cpi	r18, 0x02	; 2
    12b8:	31 05       	cpc	r19, r1
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <DIO_u8GetPortValue+0x4c>
    12bc:	8d 81       	ldd	r24, Y+5	; 0x05
    12be:	9e 81       	ldd	r25, Y+6	; 0x06
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	61 f0       	breq	.+24     	; 0x12dc <DIO_u8GetPortValue+0x62>
    12c4:	27 c0       	rjmp	.+78     	; 0x1314 <DIO_u8GetPortValue+0x9a>
    12c6:	2d 81       	ldd	r18, Y+5	; 0x05
    12c8:	3e 81       	ldd	r19, Y+6	; 0x06
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	a1 f0       	breq	.+40     	; 0x12f8 <DIO_u8GetPortValue+0x7e>
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	9e 81       	ldd	r25, Y+6	; 0x06
    12d4:	83 30       	cpi	r24, 0x03	; 3
    12d6:	91 05       	cpc	r25, r1
    12d8:	b1 f0       	breq	.+44     	; 0x1306 <DIO_u8GetPortValue+0x8c>
    12da:	1c c0       	rjmp	.+56     	; 0x1314 <DIO_u8GetPortValue+0x9a>
		{
		case DIO_PORT_0:
			*Copy_u8Value = PINA;
    12dc:	e9 e3       	ldi	r30, 0x39	; 57
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	eb 81       	ldd	r30, Y+3	; 0x03
    12e4:	fc 81       	ldd	r31, Y+4	; 0x04
    12e6:	80 83       	st	Z, r24
    12e8:	17 c0       	rjmp	.+46     	; 0x1318 <DIO_u8GetPortValue+0x9e>
			break;

		case DIO_PORT_1:
			*Copy_u8Value = PINB;
    12ea:	e6 e3       	ldi	r30, 0x36	; 54
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	eb 81       	ldd	r30, Y+3	; 0x03
    12f2:	fc 81       	ldd	r31, Y+4	; 0x04
    12f4:	80 83       	st	Z, r24
    12f6:	10 c0       	rjmp	.+32     	; 0x1318 <DIO_u8GetPortValue+0x9e>
			break;

		case DIO_PORT_2:
			*Copy_u8Value = PINC;
    12f8:	e3 e3       	ldi	r30, 0x33	; 51
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1300:	fc 81       	ldd	r31, Y+4	; 0x04
    1302:	80 83       	st	Z, r24
    1304:	09 c0       	rjmp	.+18     	; 0x1318 <DIO_u8GetPortValue+0x9e>
			break;

		case DIO_PORT_3:
			*Copy_u8Value = PIND;
    1306:	e0 e3       	ldi	r30, 0x30	; 48
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	eb 81       	ldd	r30, Y+3	; 0x03
    130e:	fc 81       	ldd	r31, Y+4	; 0x04
    1310:	80 83       	st	Z, r24
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_u8GetPortValue+0x9e>
			break;

		default:
			Local_u8Error = 1;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

	}
	return Local_u8Error;
    1318:	89 81       	ldd	r24, Y+1	; 0x01
}
    131a:	26 96       	adiw	r28, 0x06	; 6
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	de bf       	out	0x3e, r29	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <DIO_u8GetPinValue>:
 * Input		: Port Number, Pin Number, Pointer for a Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8GetPinValue(u8 Copy_u8PortNB, u8 Copy_u8PinNB, u8 * Copy_u8Value)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	27 97       	sbiw	r28, 0x07	; 7
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	8a 83       	std	Y+2, r24	; 0x02
    1342:	6b 83       	std	Y+3, r22	; 0x03
    1344:	5d 83       	std	Y+5, r21	; 0x05
    1346:	4c 83       	std	Y+4, r20	; 0x04
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    1348:	19 82       	std	Y+1, r1	; 0x01

	/*Check that the PIN Number is between 0 -> 7 else Return Local Error with ONE*/
	if(Copy_u8Value == NULL_POINTER)
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	9d 81       	ldd	r25, Y+5	; 0x05
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	11 f4       	brne	.+4      	; 0x1356 <DIO_u8GetPinValue+0x2a>
	{
		Local_u8Error = 1;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	89 83       	std	Y+1, r24	; 0x01
	}
	if(Copy_u8PinNB > DIO_PIN_7)
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	88 30       	cpi	r24, 0x08	; 8
    135a:	18 f0       	brcs	.+6      	; 0x1362 <DIO_u8GetPinValue+0x36>
	{
		Local_u8Error = 1;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	73 c0       	rjmp	.+230    	; 0x1448 <DIO_u8GetPinValue+0x11c>
	}

	else
	{
		switch(Copy_u8PortNB)
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	3f 83       	std	Y+7, r19	; 0x07
    136a:	2e 83       	std	Y+6, r18	; 0x06
    136c:	4e 81       	ldd	r20, Y+6	; 0x06
    136e:	5f 81       	ldd	r21, Y+7	; 0x07
    1370:	41 30       	cpi	r20, 0x01	; 1
    1372:	51 05       	cpc	r21, r1
    1374:	59 f1       	breq	.+86     	; 0x13cc <DIO_u8GetPinValue+0xa0>
    1376:	8e 81       	ldd	r24, Y+6	; 0x06
    1378:	9f 81       	ldd	r25, Y+7	; 0x07
    137a:	82 30       	cpi	r24, 0x02	; 2
    137c:	91 05       	cpc	r25, r1
    137e:	34 f4       	brge	.+12     	; 0x138c <DIO_u8GetPinValue+0x60>
    1380:	2e 81       	ldd	r18, Y+6	; 0x06
    1382:	3f 81       	ldd	r19, Y+7	; 0x07
    1384:	21 15       	cp	r18, r1
    1386:	31 05       	cpc	r19, r1
    1388:	69 f0       	breq	.+26     	; 0x13a4 <DIO_u8GetPinValue+0x78>
    138a:	5c c0       	rjmp	.+184    	; 0x1444 <DIO_u8GetPinValue+0x118>
    138c:	4e 81       	ldd	r20, Y+6	; 0x06
    138e:	5f 81       	ldd	r21, Y+7	; 0x07
    1390:	42 30       	cpi	r20, 0x02	; 2
    1392:	51 05       	cpc	r21, r1
    1394:	79 f1       	breq	.+94     	; 0x13f4 <DIO_u8GetPinValue+0xc8>
    1396:	8e 81       	ldd	r24, Y+6	; 0x06
    1398:	9f 81       	ldd	r25, Y+7	; 0x07
    139a:	83 30       	cpi	r24, 0x03	; 3
    139c:	91 05       	cpc	r25, r1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <DIO_u8GetPinValue+0x76>
    13a0:	3d c0       	rjmp	.+122    	; 0x141c <DIO_u8GetPinValue+0xf0>
    13a2:	50 c0       	rjmp	.+160    	; 0x1444 <DIO_u8GetPinValue+0x118>
		{
		case DIO_PORT_0:
			*Copy_u8Value = GET_BIT(PINA, Copy_u8PinNB);
    13a4:	e9 e3       	ldi	r30, 0x39	; 57
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a9 01       	movw	r20, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <DIO_u8GetPinValue+0x90>
    13b8:	55 95       	asr	r21
    13ba:	47 95       	ror	r20
    13bc:	8a 95       	dec	r24
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <DIO_u8GetPinValue+0x8c>
    13c0:	ca 01       	movw	r24, r20
    13c2:	81 70       	andi	r24, 0x01	; 1
    13c4:	ec 81       	ldd	r30, Y+4	; 0x04
    13c6:	fd 81       	ldd	r31, Y+5	; 0x05
    13c8:	80 83       	st	Z, r24
    13ca:	3e c0       	rjmp	.+124    	; 0x1448 <DIO_u8GetPinValue+0x11c>
			break;

		case DIO_PORT_1:
			*Copy_u8Value = GET_BIT(PINB, Copy_u8PinNB);
    13cc:	e6 e3       	ldi	r30, 0x36	; 54
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	88 2f       	mov	r24, r24
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	a9 01       	movw	r20, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <DIO_u8GetPinValue+0xb8>
    13e0:	55 95       	asr	r21
    13e2:	47 95       	ror	r20
    13e4:	8a 95       	dec	r24
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <DIO_u8GetPinValue+0xb4>
    13e8:	ca 01       	movw	r24, r20
    13ea:	81 70       	andi	r24, 0x01	; 1
    13ec:	ec 81       	ldd	r30, Y+4	; 0x04
    13ee:	fd 81       	ldd	r31, Y+5	; 0x05
    13f0:	80 83       	st	Z, r24
    13f2:	2a c0       	rjmp	.+84     	; 0x1448 <DIO_u8GetPinValue+0x11c>
			break;

		case DIO_PORT_2:
			*Copy_u8Value = GET_BIT(PINC, Copy_u8PinNB);
    13f4:	e3 e3       	ldi	r30, 0x33	; 51
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	88 2f       	mov	r24, r24
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	a9 01       	movw	r20, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <DIO_u8GetPinValue+0xe0>
    1408:	55 95       	asr	r21
    140a:	47 95       	ror	r20
    140c:	8a 95       	dec	r24
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <DIO_u8GetPinValue+0xdc>
    1410:	ca 01       	movw	r24, r20
    1412:	81 70       	andi	r24, 0x01	; 1
    1414:	ec 81       	ldd	r30, Y+4	; 0x04
    1416:	fd 81       	ldd	r31, Y+5	; 0x05
    1418:	80 83       	st	Z, r24
    141a:	16 c0       	rjmp	.+44     	; 0x1448 <DIO_u8GetPinValue+0x11c>
			break;

		case DIO_PORT_3:
			*Copy_u8Value = GET_BIT(PIND, Copy_u8PinNB);
    141c:	e0 e3       	ldi	r30, 0x30	; 48
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	a9 01       	movw	r20, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_u8GetPinValue+0x108>
    1430:	55 95       	asr	r21
    1432:	47 95       	ror	r20
    1434:	8a 95       	dec	r24
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_u8GetPinValue+0x104>
    1438:	ca 01       	movw	r24, r20
    143a:	81 70       	andi	r24, 0x01	; 1
    143c:	ec 81       	ldd	r30, Y+4	; 0x04
    143e:	fd 81       	ldd	r31, Y+5	; 0x05
    1440:	80 83       	st	Z, r24
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <DIO_u8GetPinValue+0x11c>
			break;

		default:
			Local_u8Error = 1;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return Local_u8Error;
    1448:	89 81       	ldd	r24, Y+1	; 0x01
}
    144a:	27 96       	adiw	r28, 0x07	; 7
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <LCD_voidWriteCommand>:
/* Description	: Send a Command to LCD through the Data PORT
 * Input		: Command
 * Output		: Non
 */
void LCD_voidWriteCommand(u8 Copy_u8Command)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	2f 97       	sbiw	r28, 0x0f	; 15
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	8f 87       	std	Y+15, r24	; 0x0f
	/*Make Sure that the Enable PIN is LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	62 e0       	ldi	r22, 0x02	; 2
    1476:	40 e0       	ldi	r20, 0x00	; 0
    1478:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>

	/*Make Sure that the Register Select PIN is LOW as (RS -> LOW for Command) (RS -> HIGH for Data)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_LOW);
    147c:	82 e0       	ldi	r24, 0x02	; 2
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	40 e0       	ldi	r20, 0x00	; 0
    1482:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>

	/*Make Sure that the Read Write PIN is LOW as (RW -> LOW for Write) (RW -> HIGH for Read)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_LOW);
    1486:	82 e0       	ldi	r24, 0x02	; 2
    1488:	61 e0       	ldi	r22, 0x01	; 1
    148a:	40 e0       	ldi	r20, 0x00	; 0
    148c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>

	/*Send the Command on Data Pins D0 -> D7*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Command);
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	6f 85       	ldd	r22, Y+15	; 0x0f
    1494:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_u8SetPortValue>

	/*Enable Sequence*/
	/*Make the Enable Pin HIGH*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_HIGH);
    1498:	82 e0       	ldi	r24, 0x02	; 2
    149a:	62 e0       	ldi	r22, 0x02	; 2
    149c:	41 e0       	ldi	r20, 0x01	; 1
    149e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	a0 e0       	ldi	r26, 0x00	; 0
    14a8:	b0 e4       	ldi	r27, 0x40	; 64
    14aa:	8b 87       	std	Y+11, r24	; 0x0b
    14ac:	9c 87       	std	Y+12, r25	; 0x0c
    14ae:	ad 87       	std	Y+13, r26	; 0x0d
    14b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	4a ef       	ldi	r20, 0xFA	; 250
    14c0:	54 e4       	ldi	r21, 0x44	; 68
    14c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	8f 83       	std	Y+7, r24	; 0x07
    14cc:	98 87       	std	Y+8, r25	; 0x08
    14ce:	a9 87       	std	Y+9, r26	; 0x09
    14d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14d2:	6f 81       	ldd	r22, Y+7	; 0x07
    14d4:	78 85       	ldd	r23, Y+8	; 0x08
    14d6:	89 85       	ldd	r24, Y+9	; 0x09
    14d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e8       	ldi	r20, 0x80	; 128
    14e0:	5f e3       	ldi	r21, 0x3F	; 63
    14e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14e6:	88 23       	and	r24, r24
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <LCD_voidWriteCommand+0x98>
		__ticks = 1;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	9e 83       	std	Y+6, r25	; 0x06
    14f0:	8d 83       	std	Y+5, r24	; 0x05
    14f2:	3f c0       	rjmp	.+126    	; 0x1572 <LCD_voidWriteCommand+0x116>
	else if (__tmp > 65535)
    14f4:	6f 81       	ldd	r22, Y+7	; 0x07
    14f6:	78 85       	ldd	r23, Y+8	; 0x08
    14f8:	89 85       	ldd	r24, Y+9	; 0x09
    14fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	3f ef       	ldi	r19, 0xFF	; 255
    1500:	4f e7       	ldi	r20, 0x7F	; 127
    1502:	57 e4       	ldi	r21, 0x47	; 71
    1504:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1508:	18 16       	cp	r1, r24
    150a:	4c f5       	brge	.+82     	; 0x155e <LCD_voidWriteCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150c:	6b 85       	ldd	r22, Y+11	; 0x0b
    150e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1510:	8d 85       	ldd	r24, Y+13	; 0x0d
    1512:	9e 85       	ldd	r25, Y+14	; 0x0e
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e2       	ldi	r20, 0x20	; 32
    151a:	51 e4       	ldi	r21, 0x41	; 65
    151c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	9e 83       	std	Y+6, r25	; 0x06
    1532:	8d 83       	std	Y+5, r24	; 0x05
    1534:	0f c0       	rjmp	.+30     	; 0x1554 <LCD_voidWriteCommand+0xf8>
    1536:	88 ec       	ldi	r24, 0xC8	; 200
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	9c 83       	std	Y+4, r25	; 0x04
    153c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	9c 81       	ldd	r25, Y+4	; 0x04
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <LCD_voidWriteCommand+0xe6>
    1546:	9c 83       	std	Y+4, r25	; 0x04
    1548:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154a:	8d 81       	ldd	r24, Y+5	; 0x05
    154c:	9e 81       	ldd	r25, Y+6	; 0x06
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	9e 83       	std	Y+6, r25	; 0x06
    1552:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1554:	8d 81       	ldd	r24, Y+5	; 0x05
    1556:	9e 81       	ldd	r25, Y+6	; 0x06
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	69 f7       	brne	.-38     	; 0x1536 <LCD_voidWriteCommand+0xda>
    155c:	14 c0       	rjmp	.+40     	; 0x1586 <LCD_voidWriteCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155e:	6f 81       	ldd	r22, Y+7	; 0x07
    1560:	78 85       	ldd	r23, Y+8	; 0x08
    1562:	89 85       	ldd	r24, Y+9	; 0x09
    1564:	9a 85       	ldd	r25, Y+10	; 0x0a
    1566:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	9e 83       	std	Y+6, r25	; 0x06
    1570:	8d 83       	std	Y+5, r24	; 0x05
    1572:	8d 81       	ldd	r24, Y+5	; 0x05
    1574:	9e 81       	ldd	r25, Y+6	; 0x06
    1576:	9a 83       	std	Y+2, r25	; 0x02
    1578:	89 83       	std	Y+1, r24	; 0x01
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	9a 81       	ldd	r25, Y+2	; 0x02
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <LCD_voidWriteCommand+0x122>
    1582:	9a 83       	std	Y+2, r25	; 0x02
    1584:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for 2 msec.*/
	_delay_ms(2);

	/*Re-Make Enable Pin as LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    1586:	82 e0       	ldi	r24, 0x02	; 2
    1588:	62 e0       	ldi	r22, 0x02	; 2
    158a:	40 e0       	ldi	r20, 0x00	; 0
    158c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
}
    1590:	2f 96       	adiw	r28, 0x0f	; 15
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <LCD_voidWriteData>:
/* Description	: Send a Data to LCD through the Data PORT
 * Input		: Data
 * Output		: Non
 */
void LCD_voidWriteData(u8 Copy_u8Data)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	2f 97       	sbiw	r28, 0x0f	; 15
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	8f 87       	std	Y+15, r24	; 0x0f
	/*Make Sure that the Enable PIN is LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    15b8:	82 e0       	ldi	r24, 0x02	; 2
    15ba:	62 e0       	ldi	r22, 0x02	; 2
    15bc:	40 e0       	ldi	r20, 0x00	; 0
    15be:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>

	/*Make Sure that the Register Select PIN is LOW as (RS -> LOW for Command) (RS -> HIGH for Data)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_HIGH);
    15c2:	82 e0       	ldi	r24, 0x02	; 2
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	41 e0       	ldi	r20, 0x01	; 1
    15c8:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>

	/*Make Sure that the Read Write PIN is LOW as (RW -> LOW for Write) (RW -> HIGH for Read)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_LOW);
    15cc:	82 e0       	ldi	r24, 0x02	; 2
    15ce:	61 e0       	ldi	r22, 0x01	; 1
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>

	/*Send the Command on Data Pins D0 -> D7*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Data);
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	6f 85       	ldd	r22, Y+15	; 0x0f
    15da:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_u8SetPortValue>

	/*Enable Sequence*/
	/*Make the Enable Pin HIGH*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_HIGH);
    15de:	82 e0       	ldi	r24, 0x02	; 2
    15e0:	62 e0       	ldi	r22, 0x02	; 2
    15e2:	41 e0       	ldi	r20, 0x01	; 1
    15e4:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	a0 e0       	ldi	r26, 0x00	; 0
    15ee:	b0 e4       	ldi	r27, 0x40	; 64
    15f0:	8b 87       	std	Y+11, r24	; 0x0b
    15f2:	9c 87       	std	Y+12, r25	; 0x0c
    15f4:	ad 87       	std	Y+13, r26	; 0x0d
    15f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    15fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	4a ef       	ldi	r20, 0xFA	; 250
    1606:	54 e4       	ldi	r21, 0x44	; 68
    1608:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	8f 83       	std	Y+7, r24	; 0x07
    1612:	98 87       	std	Y+8, r25	; 0x08
    1614:	a9 87       	std	Y+9, r26	; 0x09
    1616:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1618:	6f 81       	ldd	r22, Y+7	; 0x07
    161a:	78 85       	ldd	r23, Y+8	; 0x08
    161c:	89 85       	ldd	r24, Y+9	; 0x09
    161e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e8       	ldi	r20, 0x80	; 128
    1626:	5f e3       	ldi	r21, 0x3F	; 63
    1628:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    162c:	88 23       	and	r24, r24
    162e:	2c f4       	brge	.+10     	; 0x163a <LCD_voidWriteData+0x98>
		__ticks = 1;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	9e 83       	std	Y+6, r25	; 0x06
    1636:	8d 83       	std	Y+5, r24	; 0x05
    1638:	3f c0       	rjmp	.+126    	; 0x16b8 <LCD_voidWriteData+0x116>
	else if (__tmp > 65535)
    163a:	6f 81       	ldd	r22, Y+7	; 0x07
    163c:	78 85       	ldd	r23, Y+8	; 0x08
    163e:	89 85       	ldd	r24, Y+9	; 0x09
    1640:	9a 85       	ldd	r25, Y+10	; 0x0a
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	3f ef       	ldi	r19, 0xFF	; 255
    1646:	4f e7       	ldi	r20, 0x7F	; 127
    1648:	57 e4       	ldi	r21, 0x47	; 71
    164a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    164e:	18 16       	cp	r1, r24
    1650:	4c f5       	brge	.+82     	; 0x16a4 <LCD_voidWriteData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1652:	6b 85       	ldd	r22, Y+11	; 0x0b
    1654:	7c 85       	ldd	r23, Y+12	; 0x0c
    1656:	8d 85       	ldd	r24, Y+13	; 0x0d
    1658:	9e 85       	ldd	r25, Y+14	; 0x0e
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	40 e2       	ldi	r20, 0x20	; 32
    1660:	51 e4       	ldi	r21, 0x41	; 65
    1662:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	bc 01       	movw	r22, r24
    166c:	cd 01       	movw	r24, r26
    166e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	9e 83       	std	Y+6, r25	; 0x06
    1678:	8d 83       	std	Y+5, r24	; 0x05
    167a:	0f c0       	rjmp	.+30     	; 0x169a <LCD_voidWriteData+0xf8>
    167c:	88 ec       	ldi	r24, 0xC8	; 200
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	9c 83       	std	Y+4, r25	; 0x04
    1682:	8b 83       	std	Y+3, r24	; 0x03
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <LCD_voidWriteData+0xe6>
    168c:	9c 83       	std	Y+4, r25	; 0x04
    168e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	9e 81       	ldd	r25, Y+6	; 0x06
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	9e 83       	std	Y+6, r25	; 0x06
    1698:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	69 f7       	brne	.-38     	; 0x167c <LCD_voidWriteData+0xda>
    16a2:	14 c0       	rjmp	.+40     	; 0x16cc <LCD_voidWriteData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a4:	6f 81       	ldd	r22, Y+7	; 0x07
    16a6:	78 85       	ldd	r23, Y+8	; 0x08
    16a8:	89 85       	ldd	r24, Y+9	; 0x09
    16aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	9e 83       	std	Y+6, r25	; 0x06
    16b6:	8d 83       	std	Y+5, r24	; 0x05
    16b8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ba:	9e 81       	ldd	r25, Y+6	; 0x06
    16bc:	9a 83       	std	Y+2, r25	; 0x02
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	9a 81       	ldd	r25, Y+2	; 0x02
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <LCD_voidWriteData+0x122>
    16c8:	9a 83       	std	Y+2, r25	; 0x02
    16ca:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for 2 msec.*/
	_delay_ms(2);

	/*Re-Make Enable Pin as LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	62 e0       	ldi	r22, 0x02	; 2
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
}
    16d6:	2f 96       	adiw	r28, 0x0f	; 15
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <LCD_voidInitialization>:
/* Description	: Initializing the LCD
 * Input		: Non
 * Output		: Non
 */
void LCD_voidInitialization(void)
{
    16e8:	0f 93       	push	r16
    16ea:	1f 93       	push	r17
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	c6 55       	subi	r28, 0x56	; 86
    16f6:	d0 40       	sbci	r29, 0x00	; 0
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	fe 01       	movw	r30, r28
    1704:	ed 5a       	subi	r30, 0xAD	; 173
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	ac e0       	ldi	r26, 0x0C	; 12
    170e:	b2 e4       	ldi	r27, 0x42	; 66
    1710:	80 83       	st	Z, r24
    1712:	91 83       	std	Z+1, r25	; 0x01
    1714:	a2 83       	std	Z+2, r26	; 0x02
    1716:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1718:	8e 01       	movw	r16, r28
    171a:	01 5b       	subi	r16, 0xB1	; 177
    171c:	1f 4f       	sbci	r17, 0xFF	; 255
    171e:	fe 01       	movw	r30, r28
    1720:	ed 5a       	subi	r30, 0xAD	; 173
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	60 81       	ld	r22, Z
    1726:	71 81       	ldd	r23, Z+1	; 0x01
    1728:	82 81       	ldd	r24, Z+2	; 0x02
    172a:	93 81       	ldd	r25, Z+3	; 0x03
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	4a ef       	ldi	r20, 0xFA	; 250
    1732:	54 e4       	ldi	r21, 0x44	; 68
    1734:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	f8 01       	movw	r30, r16
    173e:	80 83       	st	Z, r24
    1740:	91 83       	std	Z+1, r25	; 0x01
    1742:	a2 83       	std	Z+2, r26	; 0x02
    1744:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1746:	fe 01       	movw	r30, r28
    1748:	e1 5b       	subi	r30, 0xB1	; 177
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	60 81       	ld	r22, Z
    174e:	71 81       	ldd	r23, Z+1	; 0x01
    1750:	82 81       	ldd	r24, Z+2	; 0x02
    1752:	93 81       	ldd	r25, Z+3	; 0x03
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e8       	ldi	r20, 0x80	; 128
    175a:	5f e3       	ldi	r21, 0x3F	; 63
    175c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1760:	88 23       	and	r24, r24
    1762:	44 f4       	brge	.+16     	; 0x1774 <LCD_voidInitialization+0x8c>
		__ticks = 1;
    1764:	fe 01       	movw	r30, r28
    1766:	e3 5b       	subi	r30, 0xB3	; 179
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	91 83       	std	Z+1, r25	; 0x01
    1770:	80 83       	st	Z, r24
    1772:	64 c0       	rjmp	.+200    	; 0x183c <LCD_voidInitialization+0x154>
	else if (__tmp > 65535)
    1774:	fe 01       	movw	r30, r28
    1776:	e1 5b       	subi	r30, 0xB1	; 177
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	60 81       	ld	r22, Z
    177c:	71 81       	ldd	r23, Z+1	; 0x01
    177e:	82 81       	ldd	r24, Z+2	; 0x02
    1780:	93 81       	ldd	r25, Z+3	; 0x03
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	3f ef       	ldi	r19, 0xFF	; 255
    1786:	4f e7       	ldi	r20, 0x7F	; 127
    1788:	57 e4       	ldi	r21, 0x47	; 71
    178a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    178e:	18 16       	cp	r1, r24
    1790:	0c f0       	brlt	.+2      	; 0x1794 <LCD_voidInitialization+0xac>
    1792:	43 c0       	rjmp	.+134    	; 0x181a <LCD_voidInitialization+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1794:	fe 01       	movw	r30, r28
    1796:	ed 5a       	subi	r30, 0xAD	; 173
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	60 81       	ld	r22, Z
    179c:	71 81       	ldd	r23, Z+1	; 0x01
    179e:	82 81       	ldd	r24, Z+2	; 0x02
    17a0:	93 81       	ldd	r25, Z+3	; 0x03
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e2       	ldi	r20, 0x20	; 32
    17a8:	51 e4       	ldi	r21, 0x41	; 65
    17aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	8e 01       	movw	r16, r28
    17b4:	03 5b       	subi	r16, 0xB3	; 179
    17b6:	1f 4f       	sbci	r17, 0xFF	; 255
    17b8:	bc 01       	movw	r22, r24
    17ba:	cd 01       	movw	r24, r26
    17bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	f8 01       	movw	r30, r16
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24
    17ca:	1f c0       	rjmp	.+62     	; 0x180a <LCD_voidInitialization+0x122>
    17cc:	fe 01       	movw	r30, r28
    17ce:	e5 5b       	subi	r30, 0xB5	; 181
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	88 ec       	ldi	r24, 0xC8	; 200
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	91 83       	std	Z+1, r25	; 0x01
    17d8:	80 83       	st	Z, r24
    17da:	fe 01       	movw	r30, r28
    17dc:	e5 5b       	subi	r30, 0xB5	; 181
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	80 81       	ld	r24, Z
    17e2:	91 81       	ldd	r25, Z+1	; 0x01
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <LCD_voidInitialization+0xfc>
    17e8:	fe 01       	movw	r30, r28
    17ea:	e5 5b       	subi	r30, 0xB5	; 181
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f2:	de 01       	movw	r26, r28
    17f4:	a3 5b       	subi	r26, 0xB3	; 179
    17f6:	bf 4f       	sbci	r27, 0xFF	; 255
    17f8:	fe 01       	movw	r30, r28
    17fa:	e3 5b       	subi	r30, 0xB3	; 179
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	80 81       	ld	r24, Z
    1800:	91 81       	ldd	r25, Z+1	; 0x01
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	11 96       	adiw	r26, 0x01	; 1
    1806:	9c 93       	st	X, r25
    1808:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180a:	fe 01       	movw	r30, r28
    180c:	e3 5b       	subi	r30, 0xB3	; 179
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	d1 f6       	brne	.-76     	; 0x17cc <LCD_voidInitialization+0xe4>
    1818:	27 c0       	rjmp	.+78     	; 0x1868 <LCD_voidInitialization+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181a:	8e 01       	movw	r16, r28
    181c:	03 5b       	subi	r16, 0xB3	; 179
    181e:	1f 4f       	sbci	r17, 0xFF	; 255
    1820:	fe 01       	movw	r30, r28
    1822:	e1 5b       	subi	r30, 0xB1	; 177
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	60 81       	ld	r22, Z
    1828:	71 81       	ldd	r23, Z+1	; 0x01
    182a:	82 81       	ldd	r24, Z+2	; 0x02
    182c:	93 81       	ldd	r25, Z+3	; 0x03
    182e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	f8 01       	movw	r30, r16
    1838:	91 83       	std	Z+1, r25	; 0x01
    183a:	80 83       	st	Z, r24
    183c:	de 01       	movw	r26, r28
    183e:	a7 5b       	subi	r26, 0xB7	; 183
    1840:	bf 4f       	sbci	r27, 0xFF	; 255
    1842:	fe 01       	movw	r30, r28
    1844:	e3 5b       	subi	r30, 0xB3	; 179
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	80 81       	ld	r24, Z
    184a:	91 81       	ldd	r25, Z+1	; 0x01
    184c:	8d 93       	st	X+, r24
    184e:	9c 93       	st	X, r25
    1850:	fe 01       	movw	r30, r28
    1852:	e7 5b       	subi	r30, 0xB7	; 183
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	80 81       	ld	r24, Z
    1858:	91 81       	ldd	r25, Z+1	; 0x01
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <LCD_voidInitialization+0x172>
    185e:	fe 01       	movw	r30, r28
    1860:	e7 5b       	subi	r30, 0xB7	; 183
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	91 83       	std	Z+1, r25	; 0x01
    1866:	80 83       	st	Z, r24
	 *				-> 5*8  -> 0
	 *
	 *DB3	Number of Lines(N) -> 1 Line  -> 0
	 *						   -> 2 Lines -> 1
	 */
	LCD_voidWriteCommand(0b00111100);
    1868:	8c e3       	ldi	r24, 0x3C	; 60
    186a:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_voidWriteCommand>
    186e:	fe 01       	movw	r30, r28
    1870:	eb 5b       	subi	r30, 0xBB	; 187
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	a4 e3       	ldi	r26, 0x34	; 52
    187a:	b2 e4       	ldi	r27, 0x42	; 66
    187c:	80 83       	st	Z, r24
    187e:	91 83       	std	Z+1, r25	; 0x01
    1880:	a2 83       	std	Z+2, r26	; 0x02
    1882:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1884:	8e 01       	movw	r16, r28
    1886:	0f 5b       	subi	r16, 0xBF	; 191
    1888:	1f 4f       	sbci	r17, 0xFF	; 255
    188a:	fe 01       	movw	r30, r28
    188c:	eb 5b       	subi	r30, 0xBB	; 187
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	60 81       	ld	r22, Z
    1892:	71 81       	ldd	r23, Z+1	; 0x01
    1894:	82 81       	ldd	r24, Z+2	; 0x02
    1896:	93 81       	ldd	r25, Z+3	; 0x03
    1898:	2b ea       	ldi	r18, 0xAB	; 171
    189a:	3a ea       	ldi	r19, 0xAA	; 170
    189c:	4a e2       	ldi	r20, 0x2A	; 42
    189e:	50 e4       	ldi	r21, 0x40	; 64
    18a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	f8 01       	movw	r30, r16
    18aa:	80 83       	st	Z, r24
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	a2 83       	std	Z+2, r26	; 0x02
    18b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18b2:	fe 01       	movw	r30, r28
    18b4:	ef 5b       	subi	r30, 0xBF	; 191
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	60 81       	ld	r22, Z
    18ba:	71 81       	ldd	r23, Z+1	; 0x01
    18bc:	82 81       	ldd	r24, Z+2	; 0x02
    18be:	93 81       	ldd	r25, Z+3	; 0x03
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 e8       	ldi	r20, 0x80	; 128
    18c6:	5f e3       	ldi	r21, 0x3F	; 63
    18c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18cc:	88 23       	and	r24, r24
    18ce:	34 f4       	brge	.+12     	; 0x18dc <LCD_voidInitialization+0x1f4>
		__ticks = 1;
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	fe 01       	movw	r30, r28
    18d4:	e0 5c       	subi	r30, 0xC0	; 192
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	80 83       	st	Z, r24
    18da:	9d c0       	rjmp	.+314    	; 0x1a16 <LCD_voidInitialization+0x32e>
	else if (__tmp > 255)
    18dc:	fe 01       	movw	r30, r28
    18de:	ef 5b       	subi	r30, 0xBF	; 191
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	60 81       	ld	r22, Z
    18e4:	71 81       	ldd	r23, Z+1	; 0x01
    18e6:	82 81       	ldd	r24, Z+2	; 0x02
    18e8:	93 81       	ldd	r25, Z+3	; 0x03
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	4f e7       	ldi	r20, 0x7F	; 127
    18f0:	53 e4       	ldi	r21, 0x43	; 67
    18f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18f6:	18 16       	cp	r1, r24
    18f8:	0c f0       	brlt	.+2      	; 0x18fc <LCD_voidInitialization+0x214>
    18fa:	7e c0       	rjmp	.+252    	; 0x19f8 <LCD_voidInitialization+0x310>
	{
		_delay_ms(__us / 1000.0);
    18fc:	fe 01       	movw	r30, r28
    18fe:	eb 5b       	subi	r30, 0xBB	; 187
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	60 81       	ld	r22, Z
    1904:	71 81       	ldd	r23, Z+1	; 0x01
    1906:	82 81       	ldd	r24, Z+2	; 0x02
    1908:	93 81       	ldd	r25, Z+3	; 0x03
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	4a e7       	ldi	r20, 0x7A	; 122
    1910:	54 e4       	ldi	r21, 0x44	; 68
    1912:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	8c af       	std	Y+60, r24	; 0x3c
    191c:	9d af       	std	Y+61, r25	; 0x3d
    191e:	ae af       	std	Y+62, r26	; 0x3e
    1920:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1922:	6c ad       	ldd	r22, Y+60	; 0x3c
    1924:	7d ad       	ldd	r23, Y+61	; 0x3d
    1926:	8e ad       	ldd	r24, Y+62	; 0x3e
    1928:	9f ad       	ldd	r25, Y+63	; 0x3f
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	4a ef       	ldi	r20, 0xFA	; 250
    1930:	54 e4       	ldi	r21, 0x44	; 68
    1932:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	88 af       	std	Y+56, r24	; 0x38
    193c:	99 af       	std	Y+57, r25	; 0x39
    193e:	aa af       	std	Y+58, r26	; 0x3a
    1940:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1942:	68 ad       	ldd	r22, Y+56	; 0x38
    1944:	79 ad       	ldd	r23, Y+57	; 0x39
    1946:	8a ad       	ldd	r24, Y+58	; 0x3a
    1948:	9b ad       	ldd	r25, Y+59	; 0x3b
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e8       	ldi	r20, 0x80	; 128
    1950:	5f e3       	ldi	r21, 0x3F	; 63
    1952:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1956:	88 23       	and	r24, r24
    1958:	2c f4       	brge	.+10     	; 0x1964 <LCD_voidInitialization+0x27c>
		__ticks = 1;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	9f ab       	std	Y+55, r25	; 0x37
    1960:	8e ab       	std	Y+54, r24	; 0x36
    1962:	3f c0       	rjmp	.+126    	; 0x19e2 <LCD_voidInitialization+0x2fa>
	else if (__tmp > 65535)
    1964:	68 ad       	ldd	r22, Y+56	; 0x38
    1966:	79 ad       	ldd	r23, Y+57	; 0x39
    1968:	8a ad       	ldd	r24, Y+58	; 0x3a
    196a:	9b ad       	ldd	r25, Y+59	; 0x3b
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	3f ef       	ldi	r19, 0xFF	; 255
    1970:	4f e7       	ldi	r20, 0x7F	; 127
    1972:	57 e4       	ldi	r21, 0x47	; 71
    1974:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1978:	18 16       	cp	r1, r24
    197a:	4c f5       	brge	.+82     	; 0x19ce <LCD_voidInitialization+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197c:	6c ad       	ldd	r22, Y+60	; 0x3c
    197e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1980:	8e ad       	ldd	r24, Y+62	; 0x3e
    1982:	9f ad       	ldd	r25, Y+63	; 0x3f
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e2       	ldi	r20, 0x20	; 32
    198a:	51 e4       	ldi	r21, 0x41	; 65
    198c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	9f ab       	std	Y+55, r25	; 0x37
    19a2:	8e ab       	std	Y+54, r24	; 0x36
    19a4:	0f c0       	rjmp	.+30     	; 0x19c4 <LCD_voidInitialization+0x2dc>
    19a6:	88 ec       	ldi	r24, 0xC8	; 200
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9d ab       	std	Y+53, r25	; 0x35
    19ac:	8c ab       	std	Y+52, r24	; 0x34
    19ae:	8c a9       	ldd	r24, Y+52	; 0x34
    19b0:	9d a9       	ldd	r25, Y+53	; 0x35
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <LCD_voidInitialization+0x2ca>
    19b6:	9d ab       	std	Y+53, r25	; 0x35
    19b8:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ba:	8e a9       	ldd	r24, Y+54	; 0x36
    19bc:	9f a9       	ldd	r25, Y+55	; 0x37
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	9f ab       	std	Y+55, r25	; 0x37
    19c2:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c4:	8e a9       	ldd	r24, Y+54	; 0x36
    19c6:	9f a9       	ldd	r25, Y+55	; 0x37
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	69 f7       	brne	.-38     	; 0x19a6 <LCD_voidInitialization+0x2be>
    19cc:	2d c0       	rjmp	.+90     	; 0x1a28 <LCD_voidInitialization+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ce:	68 ad       	ldd	r22, Y+56	; 0x38
    19d0:	79 ad       	ldd	r23, Y+57	; 0x39
    19d2:	8a ad       	ldd	r24, Y+58	; 0x3a
    19d4:	9b ad       	ldd	r25, Y+59	; 0x3b
    19d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9f ab       	std	Y+55, r25	; 0x37
    19e0:	8e ab       	std	Y+54, r24	; 0x36
    19e2:	8e a9       	ldd	r24, Y+54	; 0x36
    19e4:	9f a9       	ldd	r25, Y+55	; 0x37
    19e6:	9b ab       	std	Y+51, r25	; 0x33
    19e8:	8a ab       	std	Y+50, r24	; 0x32
    19ea:	8a a9       	ldd	r24, Y+50	; 0x32
    19ec:	9b a9       	ldd	r25, Y+51	; 0x33
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <LCD_voidInitialization+0x306>
    19f2:	9b ab       	std	Y+51, r25	; 0x33
    19f4:	8a ab       	std	Y+50, r24	; 0x32
    19f6:	18 c0       	rjmp	.+48     	; 0x1a28 <LCD_voidInitialization+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19f8:	fe 01       	movw	r30, r28
    19fa:	ef 5b       	subi	r30, 0xBF	; 191
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	60 81       	ld	r22, Z
    1a00:	71 81       	ldd	r23, Z+1	; 0x01
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	93 81       	ldd	r25, Z+3	; 0x03
    1a06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	fe 01       	movw	r30, r28
    1a10:	e0 5c       	subi	r30, 0xC0	; 192
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	80 83       	st	Z, r24
    1a16:	fe 01       	movw	r30, r28
    1a18:	e0 5c       	subi	r30, 0xC0	; 192
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	80 81       	ld	r24, Z
    1a1e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a20:	89 a9       	ldd	r24, Y+49	; 0x31
    1a22:	8a 95       	dec	r24
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <LCD_voidInitialization+0x33a>
    1a26:	89 ab       	std	Y+49, r24	; 0x31
	 * 				  -> OFF -> 0
	 *
	 * DB2 	Display(D) -> ON  -> 1
	 * 				   -> OFF -> 0
	 */
	LCD_voidWriteCommand(0b00001100);
    1a28:	8c e0       	ldi	r24, 0x0C	; 12
    1a2a:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_voidWriteCommand>
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	a0 e8       	ldi	r26, 0x80	; 128
    1a34:	b0 e4       	ldi	r27, 0x40	; 64
    1a36:	8d a7       	std	Y+45, r24	; 0x2d
    1a38:	9e a7       	std	Y+46, r25	; 0x2e
    1a3a:	af a7       	std	Y+47, r26	; 0x2f
    1a3c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a3e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a40:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a44:	98 a9       	ldd	r25, Y+48	; 0x30
    1a46:	2b ea       	ldi	r18, 0xAB	; 171
    1a48:	3a ea       	ldi	r19, 0xAA	; 170
    1a4a:	4a e2       	ldi	r20, 0x2A	; 42
    1a4c:	50 e4       	ldi	r21, 0x40	; 64
    1a4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	89 a7       	std	Y+41, r24	; 0x29
    1a58:	9a a7       	std	Y+42, r25	; 0x2a
    1a5a:	ab a7       	std	Y+43, r26	; 0x2b
    1a5c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1a5e:	69 a5       	ldd	r22, Y+41	; 0x29
    1a60:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a62:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a64:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e8       	ldi	r20, 0x80	; 128
    1a6c:	5f e3       	ldi	r21, 0x3F	; 63
    1a6e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a72:	88 23       	and	r24, r24
    1a74:	1c f4       	brge	.+6      	; 0x1a7c <LCD_voidInitialization+0x394>
		__ticks = 1;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	88 a7       	std	Y+40, r24	; 0x28
    1a7a:	91 c0       	rjmp	.+290    	; 0x1b9e <LCD_voidInitialization+0x4b6>
	else if (__tmp > 255)
    1a7c:	69 a5       	ldd	r22, Y+41	; 0x29
    1a7e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a80:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a82:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4f e7       	ldi	r20, 0x7F	; 127
    1a8a:	53 e4       	ldi	r21, 0x43	; 67
    1a8c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a90:	18 16       	cp	r1, r24
    1a92:	0c f0       	brlt	.+2      	; 0x1a96 <LCD_voidInitialization+0x3ae>
    1a94:	7b c0       	rjmp	.+246    	; 0x1b8c <LCD_voidInitialization+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    1a96:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a98:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	4a e7       	ldi	r20, 0x7A	; 122
    1aa4:	54 e4       	ldi	r21, 0x44	; 68
    1aa6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	8c a3       	std	Y+36, r24	; 0x24
    1ab0:	9d a3       	std	Y+37, r25	; 0x25
    1ab2:	ae a3       	std	Y+38, r26	; 0x26
    1ab4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab6:	6c a1       	ldd	r22, Y+36	; 0x24
    1ab8:	7d a1       	ldd	r23, Y+37	; 0x25
    1aba:	8e a1       	ldd	r24, Y+38	; 0x26
    1abc:	9f a1       	ldd	r25, Y+39	; 0x27
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	4a ef       	ldi	r20, 0xFA	; 250
    1ac4:	54 e4       	ldi	r21, 0x44	; 68
    1ac6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	88 a3       	std	Y+32, r24	; 0x20
    1ad0:	99 a3       	std	Y+33, r25	; 0x21
    1ad2:	aa a3       	std	Y+34, r26	; 0x22
    1ad4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1ad6:	68 a1       	ldd	r22, Y+32	; 0x20
    1ad8:	79 a1       	ldd	r23, Y+33	; 0x21
    1ada:	8a a1       	ldd	r24, Y+34	; 0x22
    1adc:	9b a1       	ldd	r25, Y+35	; 0x23
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e8       	ldi	r20, 0x80	; 128
    1ae4:	5f e3       	ldi	r21, 0x3F	; 63
    1ae6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1aea:	88 23       	and	r24, r24
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <LCD_voidInitialization+0x410>
		__ticks = 1;
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	9f 8f       	std	Y+31, r25	; 0x1f
    1af4:	8e 8f       	std	Y+30, r24	; 0x1e
    1af6:	3f c0       	rjmp	.+126    	; 0x1b76 <LCD_voidInitialization+0x48e>
	else if (__tmp > 65535)
    1af8:	68 a1       	ldd	r22, Y+32	; 0x20
    1afa:	79 a1       	ldd	r23, Y+33	; 0x21
    1afc:	8a a1       	ldd	r24, Y+34	; 0x22
    1afe:	9b a1       	ldd	r25, Y+35	; 0x23
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	3f ef       	ldi	r19, 0xFF	; 255
    1b04:	4f e7       	ldi	r20, 0x7F	; 127
    1b06:	57 e4       	ldi	r21, 0x47	; 71
    1b08:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b0c:	18 16       	cp	r1, r24
    1b0e:	4c f5       	brge	.+82     	; 0x1b62 <LCD_voidInitialization+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b10:	6c a1       	ldd	r22, Y+36	; 0x24
    1b12:	7d a1       	ldd	r23, Y+37	; 0x25
    1b14:	8e a1       	ldd	r24, Y+38	; 0x26
    1b16:	9f a1       	ldd	r25, Y+39	; 0x27
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e2       	ldi	r20, 0x20	; 32
    1b1e:	51 e4       	ldi	r21, 0x41	; 65
    1b20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	bc 01       	movw	r22, r24
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	9f 8f       	std	Y+31, r25	; 0x1f
    1b36:	8e 8f       	std	Y+30, r24	; 0x1e
    1b38:	0f c0       	rjmp	.+30     	; 0x1b58 <LCD_voidInitialization+0x470>
    1b3a:	88 ec       	ldi	r24, 0xC8	; 200
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	9d 8f       	std	Y+29, r25	; 0x1d
    1b40:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b42:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b44:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <LCD_voidInitialization+0x45e>
    1b4a:	9d 8f       	std	Y+29, r25	; 0x1d
    1b4c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b50:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	9f 8f       	std	Y+31, r25	; 0x1f
    1b56:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b58:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b5a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	69 f7       	brne	.-38     	; 0x1b3a <LCD_voidInitialization+0x452>
    1b60:	24 c0       	rjmp	.+72     	; 0x1baa <LCD_voidInitialization+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b62:	68 a1       	ldd	r22, Y+32	; 0x20
    1b64:	79 a1       	ldd	r23, Y+33	; 0x21
    1b66:	8a a1       	ldd	r24, Y+34	; 0x22
    1b68:	9b a1       	ldd	r25, Y+35	; 0x23
    1b6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9f 8f       	std	Y+31, r25	; 0x1f
    1b74:	8e 8f       	std	Y+30, r24	; 0x1e
    1b76:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b78:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b7a:	9b 8f       	std	Y+27, r25	; 0x1b
    1b7c:	8a 8f       	std	Y+26, r24	; 0x1a
    1b7e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b80:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <LCD_voidInitialization+0x49a>
    1b86:	9b 8f       	std	Y+27, r25	; 0x1b
    1b88:	8a 8f       	std	Y+26, r24	; 0x1a
    1b8a:	0f c0       	rjmp	.+30     	; 0x1baa <LCD_voidInitialization+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b8c:	69 a5       	ldd	r22, Y+41	; 0x29
    1b8e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b90:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b92:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	88 a7       	std	Y+40, r24	; 0x28
    1b9e:	88 a5       	ldd	r24, Y+40	; 0x28
    1ba0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ba2:	89 8d       	ldd	r24, Y+25	; 0x19
    1ba4:	8a 95       	dec	r24
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <LCD_voidInitialization+0x4bc>
    1ba8:	89 8f       	std	Y+25, r24	; 0x19

	/*Delay to Process Display ON/OFF Control*/
	_delay_us(4);

	/*Clear LCD*/
	LCD_voidWriteCommand(0b00000001);
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_voidWriteCommand>
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	a8 ec       	ldi	r26, 0xC8	; 200
    1bb6:	b4 e4       	ldi	r27, 0x44	; 68
    1bb8:	8d 8b       	std	Y+21, r24	; 0x15
    1bba:	9e 8b       	std	Y+22, r25	; 0x16
    1bbc:	af 8b       	std	Y+23, r26	; 0x17
    1bbe:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bc0:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc2:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc8:	2b ea       	ldi	r18, 0xAB	; 171
    1bca:	3a ea       	ldi	r19, 0xAA	; 170
    1bcc:	4a e2       	ldi	r20, 0x2A	; 42
    1bce:	50 e4       	ldi	r21, 0x40	; 64
    1bd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	89 8b       	std	Y+17, r24	; 0x11
    1bda:	9a 8b       	std	Y+18, r25	; 0x12
    1bdc:	ab 8b       	std	Y+19, r26	; 0x13
    1bde:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1be0:	69 89       	ldd	r22, Y+17	; 0x11
    1be2:	7a 89       	ldd	r23, Y+18	; 0x12
    1be4:	8b 89       	ldd	r24, Y+19	; 0x13
    1be6:	9c 89       	ldd	r25, Y+20	; 0x14
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	40 e8       	ldi	r20, 0x80	; 128
    1bee:	5f e3       	ldi	r21, 0x3F	; 63
    1bf0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bf4:	88 23       	and	r24, r24
    1bf6:	1c f4       	brge	.+6      	; 0x1bfe <LCD_voidInitialization+0x516>
		__ticks = 1;
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	88 8b       	std	Y+16, r24	; 0x10
    1bfc:	91 c0       	rjmp	.+290    	; 0x1d20 <LCD_voidInitialization+0x638>
	else if (__tmp > 255)
    1bfe:	69 89       	ldd	r22, Y+17	; 0x11
    1c00:	7a 89       	ldd	r23, Y+18	; 0x12
    1c02:	8b 89       	ldd	r24, Y+19	; 0x13
    1c04:	9c 89       	ldd	r25, Y+20	; 0x14
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	4f e7       	ldi	r20, 0x7F	; 127
    1c0c:	53 e4       	ldi	r21, 0x43	; 67
    1c0e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c12:	18 16       	cp	r1, r24
    1c14:	0c f0       	brlt	.+2      	; 0x1c18 <LCD_voidInitialization+0x530>
    1c16:	7b c0       	rjmp	.+246    	; 0x1d0e <LCD_voidInitialization+0x626>
	{
		_delay_ms(__us / 1000.0);
    1c18:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	4a e7       	ldi	r20, 0x7A	; 122
    1c26:	54 e4       	ldi	r21, 0x44	; 68
    1c28:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	8c 87       	std	Y+12, r24	; 0x0c
    1c32:	9d 87       	std	Y+13, r25	; 0x0d
    1c34:	ae 87       	std	Y+14, r26	; 0x0e
    1c36:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c38:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c3a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c3e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	4a ef       	ldi	r20, 0xFA	; 250
    1c46:	54 e4       	ldi	r21, 0x44	; 68
    1c48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	88 87       	std	Y+8, r24	; 0x08
    1c52:	99 87       	std	Y+9, r25	; 0x09
    1c54:	aa 87       	std	Y+10, r26	; 0x0a
    1c56:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1c58:	68 85       	ldd	r22, Y+8	; 0x08
    1c5a:	79 85       	ldd	r23, Y+9	; 0x09
    1c5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e8       	ldi	r20, 0x80	; 128
    1c66:	5f e3       	ldi	r21, 0x3F	; 63
    1c68:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c6c:	88 23       	and	r24, r24
    1c6e:	2c f4       	brge	.+10     	; 0x1c7a <LCD_voidInitialization+0x592>
		__ticks = 1;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9f 83       	std	Y+7, r25	; 0x07
    1c76:	8e 83       	std	Y+6, r24	; 0x06
    1c78:	3f c0       	rjmp	.+126    	; 0x1cf8 <LCD_voidInitialization+0x610>
	else if (__tmp > 65535)
    1c7a:	68 85       	ldd	r22, Y+8	; 0x08
    1c7c:	79 85       	ldd	r23, Y+9	; 0x09
    1c7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c80:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	3f ef       	ldi	r19, 0xFF	; 255
    1c86:	4f e7       	ldi	r20, 0x7F	; 127
    1c88:	57 e4       	ldi	r21, 0x47	; 71
    1c8a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c8e:	18 16       	cp	r1, r24
    1c90:	4c f5       	brge	.+82     	; 0x1ce4 <LCD_voidInitialization+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c92:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c94:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c96:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c98:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e2       	ldi	r20, 0x20	; 32
    1ca0:	51 e4       	ldi	r21, 0x41	; 65
    1ca2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	bc 01       	movw	r22, r24
    1cac:	cd 01       	movw	r24, r26
    1cae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	9f 83       	std	Y+7, r25	; 0x07
    1cb8:	8e 83       	std	Y+6, r24	; 0x06
    1cba:	0f c0       	rjmp	.+30     	; 0x1cda <LCD_voidInitialization+0x5f2>
    1cbc:	88 ec       	ldi	r24, 0xC8	; 200
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	9d 83       	std	Y+5, r25	; 0x05
    1cc2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <LCD_voidInitialization+0x5e0>
    1ccc:	9d 83       	std	Y+5, r25	; 0x05
    1cce:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd2:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	9f 83       	std	Y+7, r25	; 0x07
    1cd8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cda:	8e 81       	ldd	r24, Y+6	; 0x06
    1cdc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	69 f7       	brne	.-38     	; 0x1cbc <LCD_voidInitialization+0x5d4>
    1ce2:	24 c0       	rjmp	.+72     	; 0x1d2c <LCD_voidInitialization+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce4:	68 85       	ldd	r22, Y+8	; 0x08
    1ce6:	79 85       	ldd	r23, Y+9	; 0x09
    1ce8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cea:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9f 83       	std	Y+7, r25	; 0x07
    1cf6:	8e 83       	std	Y+6, r24	; 0x06
    1cf8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfa:	9f 81       	ldd	r25, Y+7	; 0x07
    1cfc:	9b 83       	std	Y+3, r25	; 0x03
    1cfe:	8a 83       	std	Y+2, r24	; 0x02
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	9b 81       	ldd	r25, Y+3	; 0x03
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <LCD_voidInitialization+0x61c>
    1d08:	9b 83       	std	Y+3, r25	; 0x03
    1d0a:	8a 83       	std	Y+2, r24	; 0x02
    1d0c:	0f c0       	rjmp	.+30     	; 0x1d2c <LCD_voidInitialization+0x644>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d0e:	69 89       	ldd	r22, Y+17	; 0x11
    1d10:	7a 89       	ldd	r23, Y+18	; 0x12
    1d12:	8b 89       	ldd	r24, Y+19	; 0x13
    1d14:	9c 89       	ldd	r25, Y+20	; 0x14
    1d16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	88 8b       	std	Y+16, r24	; 0x10
    1d20:	88 89       	ldd	r24, Y+16	; 0x10
    1d22:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	8a 95       	dec	r24
    1d28:	f1 f7       	brne	.-4      	; 0x1d26 <LCD_voidInitialization+0x63e>
    1d2a:	89 83       	std	Y+1, r24	; 0x01

	/*Delay for Process Clearing LCD*/
	_delay_us(1600);
}
    1d2c:	ca 5a       	subi	r28, 0xAA	; 170
    1d2e:	df 4f       	sbci	r29, 0xFF	; 255
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	08 95       	ret

00001d44 <LCD_voidClearLCD>:
/* Description	: Clear LCD
 * Input		: Non
 * Output		: Non
 */
void LCD_voidClearLCD(void)
{
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
	/*Clear LCD*/
	LCD_voidWriteCommand(0b00000001);
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_voidWriteCommand>
}
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <LCD_u8WriteString>:
 * Input		: Array of Strings, Size of this Array
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8WriteString(u8 *Copy_u8String, u8 Copy_u8StrSize)
{
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <LCD_u8WriteString+0x6>
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <LCD_u8WriteString+0x8>
    1d60:	0f 92       	push	r0
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	9c 83       	std	Y+4, r25	; 0x04
    1d68:	8b 83       	std	Y+3, r24	; 0x03
    1d6a:	6d 83       	std	Y+5, r22	; 0x05
	/*Local Variables*/
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0;
    1d6c:	1a 82       	std	Y+2, r1	; 0x02
    1d6e:	19 82       	std	Y+1, r1	; 0x01

	/*Loop on the Array of the Strings and print it one by one*/
	for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Copy_u8StrSize; Local_u8LoopCtr++)
    1d70:	19 82       	std	Y+1, r1	; 0x01
    1d72:	0e c0       	rjmp	.+28     	; 0x1d90 <LCD_u8WriteString+0x38>
	{
		LCD_voidWriteData(Copy_u8String[Local_u8LoopCtr]);
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	fc 01       	movw	r30, r24
    1d80:	e2 0f       	add	r30, r18
    1d82:	f3 1f       	adc	r31, r19
    1d84:	80 81       	ld	r24, Z
    1d86:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>
{
	/*Local Variables*/
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0;

	/*Loop on the Array of the Strings and print it one by one*/
	for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Copy_u8StrSize; Local_u8LoopCtr++)
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	8f 5f       	subi	r24, 0xFF	; 255
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	99 81       	ldd	r25, Y+1	; 0x01
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	98 17       	cp	r25, r24
    1d96:	70 f3       	brcs	.-36     	; 0x1d74 <LCD_u8WriteString+0x1c>
	{
		LCD_voidWriteData(Copy_u8String[Local_u8LoopCtr]);
	}

	return Local_u8Error;
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <LCD_u8GoToXY>:
 * Input		: X Position, Y Position
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8GoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	00 d0       	rcall	.+0      	; 0x1db0 <LCD_u8GoToXY+0x6>
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <LCD_u8GoToXY+0x8>
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	8b 83       	std	Y+3, r24	; 0x03
    1db8:	6c 83       	std	Y+4, r22	; 0x04
	/*Local Variables*/
	u8 Local_u8Error = 0, Local_u8Address = 0;
    1dba:	1a 82       	std	Y+2, r1	; 0x02
    1dbc:	19 82       	std	Y+1, r1	; 0x01
//			 * of the Memory and the X position we need and the Command for AC eight's Bit 0b1(128)
//			 */
//			Local_u8Address = DDRAM_LINE2_FIRST_LOCATION + Copy_u8XPos + AC_REG_COMMAND;
//		}

		Local_u8Address = Copy_u8XPos + (Copy_u8YPos * DDRAM_LINE2_FIRST_LOCATION) +  AC_REG_COMMAND;
    1dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	00 24       	eor	r0, r0
    1dc6:	96 95       	lsr	r25
    1dc8:	87 95       	ror	r24
    1dca:	07 94       	ror	r0
    1dcc:	96 95       	lsr	r25
    1dce:	87 95       	ror	r24
    1dd0:	07 94       	ror	r0
    1dd2:	98 2f       	mov	r25, r24
    1dd4:	80 2d       	mov	r24, r0
    1dd6:	98 2f       	mov	r25, r24
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	89 0f       	add	r24, r25
    1ddc:	80 58       	subi	r24, 0x80	; 128
    1dde:	89 83       	std	Y+1, r24	; 0x01

		/*Send the Command with the Needed Position*/
		LCD_voidWriteCommand(Local_u8Address);
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_voidWriteCommand>
//	}

	return Local_u8Error;
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <LCD_u8WriteSpecialChar>:
 * Input		: An Array of the Special Characters we have only 8 Positions
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8WriteSpecialChar(u8 *Copy_u8SpecialChar, u8 Copy_ArraySize)
{
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <LCD_u8WriteSpecialChar+0x6>
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <LCD_u8WriteSpecialChar+0x8>
    1dfe:	0f 92       	push	r0
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	9c 83       	std	Y+4, r25	; 0x04
    1e06:	8b 83       	std	Y+3, r24	; 0x03
    1e08:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0;
    1e0a:	1a 82       	std	Y+2, r1	; 0x02
    1e0c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_ArraySize > MAX_NB_BITS_SPECIAL_CHAR)
    1e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e10:	81 34       	cpi	r24, 0x41	; 65
    1e12:	18 f0       	brcs	.+6      	; 0x1e1a <LCD_u8WriteSpecialChar+0x24>
	{
		Local_u8Error = 1;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	8a 83       	std	Y+2, r24	; 0x02
    1e18:	1a c0       	rjmp	.+52     	; 0x1e4e <LCD_u8WriteSpecialChar+0x58>
	}

	else
	{
		/*Move the AC Register to Points to CGRAM command = 0b01 and the other 6 bits are the Position in CGRAM memory*/
		LCD_voidWriteCommand(0b01000000);
    1e1a:	80 e4       	ldi	r24, 0x40	; 64
    1e1c:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_voidWriteCommand>

		/*Looping on the Array of the Special Char and Write it in CGRAM*/
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < MAX_NB_BITS_SPECIAL_CHAR; Local_u8LoopCtr++)
    1e20:	19 82       	std	Y+1, r1	; 0x01
    1e22:	0e c0       	rjmp	.+28     	; 0x1e40 <LCD_u8WriteSpecialChar+0x4a>
		{
			LCD_voidWriteData(Copy_u8SpecialChar[Local_u8LoopCtr]);
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2e:	fc 01       	movw	r30, r24
    1e30:	e2 0f       	add	r30, r18
    1e32:	f3 1f       	adc	r31, r19
    1e34:	80 81       	ld	r24, Z
    1e36:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>
	{
		/*Move the AC Register to Points to CGRAM command = 0b01 and the other 6 bits are the Position in CGRAM memory*/
		LCD_voidWriteCommand(0b01000000);

		/*Looping on the Array of the Special Char and Write it in CGRAM*/
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < MAX_NB_BITS_SPECIAL_CHAR; Local_u8LoopCtr++)
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	8f 5f       	subi	r24, 0xFF	; 255
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	80 34       	cpi	r24, 0x40	; 64
    1e44:	78 f3       	brcs	.-34     	; 0x1e24 <LCD_u8WriteSpecialChar+0x2e>
		{
			LCD_voidWriteData(Copy_u8SpecialChar[Local_u8LoopCtr]);
		}

		/*Back AC Register to points to the DDRAM*/
		LCD_u8GoToXY(0, 0);
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	60 e0       	ldi	r22, 0x00	; 0
    1e4a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
	}
	return Local_u8Error;
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	08 95       	ret

00001e60 <LCD_u8WriteINT>:
 * Input		: The Integer Number, X position, Y Position
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8WriteINT(u32 Copy_u32INT, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	61 97       	sbiw	r28, 0x11	; 17
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
    1e74:	6a 87       	std	Y+10, r22	; 0x0a
    1e76:	7b 87       	std	Y+11, r23	; 0x0b
    1e78:	8c 87       	std	Y+12, r24	; 0x0c
    1e7a:	9d 87       	std	Y+13, r25	; 0x0d
    1e7c:	4e 87       	std	Y+14, r20	; 0x0e
    1e7e:	2f 87       	std	Y+15, r18	; 0x0f
	/* Local_u8LoopCtr: 	to Iterator for the loop
	 * Local_u8NOD: 		Number of Digits to make the positions of ones, tens, ...
	 * Local_u8CopyNOD: 	Copy of Number of Digits for the iteration in loop
	 * Local_u8Reminder: 	to save the Reminder (%) and check on it
	 */
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0, Local_u8NOD = 0, Local_u8CopyNOD = 0, Local_u8Reminder = 0;
    1e80:	19 86       	std	Y+9, r1	; 0x09
    1e82:	18 86       	std	Y+8, r1	; 0x08
    1e84:	1f 82       	std	Y+7, r1	; 0x07
    1e86:	1e 82       	std	Y+6, r1	; 0x06
    1e88:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Temp = 0;
    1e8a:	19 82       	std	Y+1, r1	; 0x01
    1e8c:	1a 82       	std	Y+2, r1	; 0x02
    1e8e:	1b 82       	std	Y+3, r1	; 0x03
    1e90:	1c 82       	std	Y+4, r1	; 0x04

	/*Checking on the Integer Number if it within the u32 range
	 * Check on the X position as we have 0 -> 15 position
	 * Check on the Y Position as we have 0 -> 1
	 */
	if(Copy_u32INT > MAX_U32_NB || Copy_u8XPos > 15 || Copy_u8YPos > 1)
    1e92:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e94:	80 31       	cpi	r24, 0x10	; 16
    1e96:	18 f4       	brcc	.+6      	; 0x1e9e <LCD_u8WriteINT+0x3e>
    1e98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e9a:	82 30       	cpi	r24, 0x02	; 2
    1e9c:	18 f0       	brcs	.+6      	; 0x1ea4 <LCD_u8WriteINT+0x44>
	{
		Local_u8Error = 1;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	89 87       	std	Y+9, r24	; 0x09
    1ea2:	31 c1       	rjmp	.+610    	; 0x2106 <LCD_u8WriteINT+0x2a6>

	/*if the Check is Okay with no problems*/
	else
	{
		/*Putting the Integer Value in a temporary Variable to use in our calculation without losing it*/
		Local_u32Temp = Copy_u32INT;
    1ea4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ea6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ea8:	ac 85       	ldd	r26, Y+12	; 0x0c
    1eaa:	bd 85       	ldd	r27, Y+13	; 0x0d
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	9a 83       	std	Y+2, r25	; 0x02
    1eb0:	ab 83       	std	Y+3, r26	; 0x03
    1eb2:	bc 83       	std	Y+4, r27	; 0x04
    1eb4:	15 c0       	rjmp	.+42     	; 0x1ee0 <LCD_u8WriteINT+0x80>

		/*Loop to get the Number of Digits*/
		while(Local_u32Temp != 0)
		{
			/*Dividing the Integer number by 10 till we have a result of Division Zero*/
			Local_u32Temp /= 10;
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eba:	ab 81       	ldd	r26, Y+3	; 0x03
    1ebc:	bc 81       	ldd	r27, Y+4	; 0x04
    1ebe:	2a e0       	ldi	r18, 0x0A	; 10
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e0       	ldi	r20, 0x00	; 0
    1ec4:	50 e0       	ldi	r21, 0x00	; 0
    1ec6:	bc 01       	movw	r22, r24
    1ec8:	cd 01       	movw	r24, r26
    1eca:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__udivmodsi4>
    1ece:	da 01       	movw	r26, r20
    1ed0:	c9 01       	movw	r24, r18
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	9a 83       	std	Y+2, r25	; 0x02
    1ed6:	ab 83       	std	Y+3, r26	; 0x03
    1ed8:	bc 83       	std	Y+4, r27	; 0x04

			/*With each Division Add 1 to Number of Digits*/
			Local_u8NOD++;
    1eda:	8f 81       	ldd	r24, Y+7	; 0x07
    1edc:	8f 5f       	subi	r24, 0xFF	; 255
    1ede:	8f 83       	std	Y+7, r24	; 0x07
	{
		/*Putting the Integer Value in a temporary Variable to use in our calculation without losing it*/
		Local_u32Temp = Copy_u32INT;

		/*Loop to get the Number of Digits*/
		while(Local_u32Temp != 0)
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee4:	ab 81       	ldd	r26, Y+3	; 0x03
    1ee6:	bc 81       	ldd	r27, Y+4	; 0x04
    1ee8:	00 97       	sbiw	r24, 0x00	; 0
    1eea:	a1 05       	cpc	r26, r1
    1eec:	b1 05       	cpc	r27, r1
    1eee:	19 f7       	brne	.-58     	; 0x1eb6 <LCD_u8WriteINT+0x56>
			/*With each Division Add 1 to Number of Digits*/
			Local_u8NOD++;
		}

		/*Make a Copy from the Number of Digits to use it in looping*/
		Local_u8CopyNOD = Local_u8NOD;
    1ef0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef2:	8e 83       	std	Y+6, r24	; 0x06

		/*Re-Make a copy of the Integer Number*/
		Local_u32Temp = Copy_u32INT;
    1ef4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ef6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ef8:	ac 85       	ldd	r26, Y+12	; 0x0c
    1efa:	bd 85       	ldd	r27, Y+13	; 0x0d
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	9a 83       	std	Y+2, r25	; 0x02
    1f00:	ab 83       	std	Y+3, r26	; 0x03
    1f02:	bc 83       	std	Y+4, r27	; 0x04

		/*Now we have the Integer number and the Number of Digits so we will loop and in each loop
		 * we will make a Reminder from ones, tens and so on till our reminder be Zero
		 * and loop to print this number with the position on LCD
		 */
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Local_u8CopyNOD; Local_u8LoopCtr++)
    1f04:	18 86       	std	Y+8, r1	; 0x08
    1f06:	fa c0       	rjmp	.+500    	; 0x20fc <LCD_u8WriteINT+0x29c>
		{
			/*Getting the Ones at first time and in second iteration tens and so on*/
			Local_u8Reminder = Local_u32Temp % 10;
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0c:	ab 81       	ldd	r26, Y+3	; 0x03
    1f0e:	bc 81       	ldd	r27, Y+4	; 0x04
    1f10:	2a e0       	ldi	r18, 0x0A	; 10
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	50 e0       	ldi	r21, 0x00	; 0
    1f18:	bc 01       	movw	r22, r24
    1f1a:	cd 01       	movw	r24, r26
    1f1c:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__udivmodsi4>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	8d 83       	std	Y+5, r24	; 0x05

			/*By Switch we will print the number by the ASCII Code*/
			switch(Local_u8Reminder)
    1f26:	8d 81       	ldd	r24, Y+5	; 0x05
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	39 8b       	std	Y+17, r19	; 0x11
    1f2e:	28 8b       	std	Y+16, r18	; 0x10
    1f30:	88 89       	ldd	r24, Y+16	; 0x10
    1f32:	99 89       	ldd	r25, Y+17	; 0x11
    1f34:	84 30       	cpi	r24, 0x04	; 4
    1f36:	91 05       	cpc	r25, r1
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <LCD_u8WriteINT+0xdc>
    1f3a:	7b c0       	rjmp	.+246    	; 0x2032 <LCD_u8WriteINT+0x1d2>
    1f3c:	28 89       	ldd	r18, Y+16	; 0x10
    1f3e:	39 89       	ldd	r19, Y+17	; 0x11
    1f40:	25 30       	cpi	r18, 0x05	; 5
    1f42:	31 05       	cpc	r19, r1
    1f44:	ec f4       	brge	.+58     	; 0x1f80 <LCD_u8WriteINT+0x120>
    1f46:	88 89       	ldd	r24, Y+16	; 0x10
    1f48:	99 89       	ldd	r25, Y+17	; 0x11
    1f4a:	81 30       	cpi	r24, 0x01	; 1
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	09 f4       	brne	.+2      	; 0x1f52 <LCD_u8WriteINT+0xf2>
    1f50:	49 c0       	rjmp	.+146    	; 0x1fe4 <LCD_u8WriteINT+0x184>
    1f52:	28 89       	ldd	r18, Y+16	; 0x10
    1f54:	39 89       	ldd	r19, Y+17	; 0x11
    1f56:	22 30       	cpi	r18, 0x02	; 2
    1f58:	31 05       	cpc	r19, r1
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <LCD_u8WriteINT+0x106>
    1f5c:	88 89       	ldd	r24, Y+16	; 0x10
    1f5e:	99 89       	ldd	r25, Y+17	; 0x11
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	99 f1       	breq	.+102    	; 0x1fca <LCD_u8WriteINT+0x16a>
    1f64:	b4 c0       	rjmp	.+360    	; 0x20ce <LCD_u8WriteINT+0x26e>
    1f66:	28 89       	ldd	r18, Y+16	; 0x10
    1f68:	39 89       	ldd	r19, Y+17	; 0x11
    1f6a:	22 30       	cpi	r18, 0x02	; 2
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <LCD_u8WriteINT+0x112>
    1f70:	46 c0       	rjmp	.+140    	; 0x1ffe <LCD_u8WriteINT+0x19e>
    1f72:	88 89       	ldd	r24, Y+16	; 0x10
    1f74:	99 89       	ldd	r25, Y+17	; 0x11
    1f76:	83 30       	cpi	r24, 0x03	; 3
    1f78:	91 05       	cpc	r25, r1
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <LCD_u8WriteINT+0x11e>
    1f7c:	4d c0       	rjmp	.+154    	; 0x2018 <LCD_u8WriteINT+0x1b8>
    1f7e:	a7 c0       	rjmp	.+334    	; 0x20ce <LCD_u8WriteINT+0x26e>
    1f80:	28 89       	ldd	r18, Y+16	; 0x10
    1f82:	39 89       	ldd	r19, Y+17	; 0x11
    1f84:	27 30       	cpi	r18, 0x07	; 7
    1f86:	31 05       	cpc	r19, r1
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <LCD_u8WriteINT+0x12c>
    1f8a:	7a c0       	rjmp	.+244    	; 0x2080 <LCD_u8WriteINT+0x220>
    1f8c:	88 89       	ldd	r24, Y+16	; 0x10
    1f8e:	99 89       	ldd	r25, Y+17	; 0x11
    1f90:	88 30       	cpi	r24, 0x08	; 8
    1f92:	91 05       	cpc	r25, r1
    1f94:	6c f4       	brge	.+26     	; 0x1fb0 <LCD_u8WriteINT+0x150>
    1f96:	28 89       	ldd	r18, Y+16	; 0x10
    1f98:	39 89       	ldd	r19, Y+17	; 0x11
    1f9a:	25 30       	cpi	r18, 0x05	; 5
    1f9c:	31 05       	cpc	r19, r1
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <LCD_u8WriteINT+0x142>
    1fa0:	55 c0       	rjmp	.+170    	; 0x204c <LCD_u8WriteINT+0x1ec>
    1fa2:	88 89       	ldd	r24, Y+16	; 0x10
    1fa4:	99 89       	ldd	r25, Y+17	; 0x11
    1fa6:	86 30       	cpi	r24, 0x06	; 6
    1fa8:	91 05       	cpc	r25, r1
    1faa:	09 f4       	brne	.+2      	; 0x1fae <LCD_u8WriteINT+0x14e>
    1fac:	5c c0       	rjmp	.+184    	; 0x2066 <LCD_u8WriteINT+0x206>
    1fae:	8f c0       	rjmp	.+286    	; 0x20ce <LCD_u8WriteINT+0x26e>
    1fb0:	28 89       	ldd	r18, Y+16	; 0x10
    1fb2:	39 89       	ldd	r19, Y+17	; 0x11
    1fb4:	28 30       	cpi	r18, 0x08	; 8
    1fb6:	31 05       	cpc	r19, r1
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <LCD_u8WriteINT+0x15c>
    1fba:	6f c0       	rjmp	.+222    	; 0x209a <LCD_u8WriteINT+0x23a>
    1fbc:	88 89       	ldd	r24, Y+16	; 0x10
    1fbe:	99 89       	ldd	r25, Y+17	; 0x11
    1fc0:	89 30       	cpi	r24, 0x09	; 9
    1fc2:	91 05       	cpc	r25, r1
    1fc4:	09 f4       	brne	.+2      	; 0x1fc8 <LCD_u8WriteINT+0x168>
    1fc6:	76 c0       	rjmp	.+236    	; 0x20b4 <LCD_u8WriteINT+0x254>
    1fc8:	82 c0       	rjmp	.+260    	; 0x20ce <LCD_u8WriteINT+0x26e>
			 * (2 - 1) + 6 = 7 in space 7 will be 5 //TENS
			 * (1 - 1) + 6 = 6 in Space 6 will be 5 //Hundreds
			 * and so on
			 */
			case 0:		//ZERO ASCII Code is 48
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    1fca:	8f 81       	ldd	r24, Y+7	; 0x07
    1fcc:	81 50       	subi	r24, 0x01	; 1
    1fce:	8f 83       	std	Y+7, r24	; 0x07
    1fd0:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fd4:	89 0f       	add	r24, r25
    1fd6:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fd8:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
				LCD_voidWriteData(48);
    1fdc:	80 e3       	ldi	r24, 0x30	; 48
    1fde:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>
    1fe2:	77 c0       	rjmp	.+238    	; 0x20d2 <LCD_u8WriteINT+0x272>
				break;

			case 1:		//ONE ASCII Code is 49
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    1fe4:	8f 81       	ldd	r24, Y+7	; 0x07
    1fe6:	81 50       	subi	r24, 0x01	; 1
    1fe8:	8f 83       	std	Y+7, r24	; 0x07
    1fea:	9f 81       	ldd	r25, Y+7	; 0x07
    1fec:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fee:	89 0f       	add	r24, r25
    1ff0:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ff2:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
				LCD_voidWriteData(49);
    1ff6:	81 e3       	ldi	r24, 0x31	; 49
    1ff8:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>
    1ffc:	6a c0       	rjmp	.+212    	; 0x20d2 <LCD_u8WriteINT+0x272>
				break;

			case 2:		//TWO ASCII Code is 50
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    1ffe:	8f 81       	ldd	r24, Y+7	; 0x07
    2000:	81 50       	subi	r24, 0x01	; 1
    2002:	8f 83       	std	Y+7, r24	; 0x07
    2004:	9f 81       	ldd	r25, Y+7	; 0x07
    2006:	8e 85       	ldd	r24, Y+14	; 0x0e
    2008:	89 0f       	add	r24, r25
    200a:	6f 85       	ldd	r22, Y+15	; 0x0f
    200c:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
				LCD_voidWriteData(50);
    2010:	82 e3       	ldi	r24, 0x32	; 50
    2012:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>
    2016:	5d c0       	rjmp	.+186    	; 0x20d2 <LCD_u8WriteINT+0x272>
				break;

			case 3:		//THREE ASCII Code is 51
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    2018:	8f 81       	ldd	r24, Y+7	; 0x07
    201a:	81 50       	subi	r24, 0x01	; 1
    201c:	8f 83       	std	Y+7, r24	; 0x07
    201e:	9f 81       	ldd	r25, Y+7	; 0x07
    2020:	8e 85       	ldd	r24, Y+14	; 0x0e
    2022:	89 0f       	add	r24, r25
    2024:	6f 85       	ldd	r22, Y+15	; 0x0f
    2026:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
				LCD_voidWriteData(51);
    202a:	83 e3       	ldi	r24, 0x33	; 51
    202c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>
    2030:	50 c0       	rjmp	.+160    	; 0x20d2 <LCD_u8WriteINT+0x272>
				break;

			case 4:		//FOUR ASCII Code is 52
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    2032:	8f 81       	ldd	r24, Y+7	; 0x07
    2034:	81 50       	subi	r24, 0x01	; 1
    2036:	8f 83       	std	Y+7, r24	; 0x07
    2038:	9f 81       	ldd	r25, Y+7	; 0x07
    203a:	8e 85       	ldd	r24, Y+14	; 0x0e
    203c:	89 0f       	add	r24, r25
    203e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2040:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
				LCD_voidWriteData(52);
    2044:	84 e3       	ldi	r24, 0x34	; 52
    2046:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>
    204a:	43 c0       	rjmp	.+134    	; 0x20d2 <LCD_u8WriteINT+0x272>
				break;

			case 5:		//FIVE ASCII Code is 53
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    204c:	8f 81       	ldd	r24, Y+7	; 0x07
    204e:	81 50       	subi	r24, 0x01	; 1
    2050:	8f 83       	std	Y+7, r24	; 0x07
    2052:	9f 81       	ldd	r25, Y+7	; 0x07
    2054:	8e 85       	ldd	r24, Y+14	; 0x0e
    2056:	89 0f       	add	r24, r25
    2058:	6f 85       	ldd	r22, Y+15	; 0x0f
    205a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
				LCD_voidWriteData(53);
    205e:	85 e3       	ldi	r24, 0x35	; 53
    2060:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>
    2064:	36 c0       	rjmp	.+108    	; 0x20d2 <LCD_u8WriteINT+0x272>
				break;

			case 6:		//SIX ASCII Code is 54
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    2066:	8f 81       	ldd	r24, Y+7	; 0x07
    2068:	81 50       	subi	r24, 0x01	; 1
    206a:	8f 83       	std	Y+7, r24	; 0x07
    206c:	9f 81       	ldd	r25, Y+7	; 0x07
    206e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2070:	89 0f       	add	r24, r25
    2072:	6f 85       	ldd	r22, Y+15	; 0x0f
    2074:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
				LCD_voidWriteData(54);
    2078:	86 e3       	ldi	r24, 0x36	; 54
    207a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>
    207e:	29 c0       	rjmp	.+82     	; 0x20d2 <LCD_u8WriteINT+0x272>
				break;

			case 7:		//SEVEN ASCII Code is 55
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    2080:	8f 81       	ldd	r24, Y+7	; 0x07
    2082:	81 50       	subi	r24, 0x01	; 1
    2084:	8f 83       	std	Y+7, r24	; 0x07
    2086:	9f 81       	ldd	r25, Y+7	; 0x07
    2088:	8e 85       	ldd	r24, Y+14	; 0x0e
    208a:	89 0f       	add	r24, r25
    208c:	6f 85       	ldd	r22, Y+15	; 0x0f
    208e:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
				LCD_voidWriteData(55);
    2092:	87 e3       	ldi	r24, 0x37	; 55
    2094:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>
    2098:	1c c0       	rjmp	.+56     	; 0x20d2 <LCD_u8WriteINT+0x272>
				break;

			case 8:		//EIGHT ASCII Code is 56
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    209a:	8f 81       	ldd	r24, Y+7	; 0x07
    209c:	81 50       	subi	r24, 0x01	; 1
    209e:	8f 83       	std	Y+7, r24	; 0x07
    20a0:	9f 81       	ldd	r25, Y+7	; 0x07
    20a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    20a4:	89 0f       	add	r24, r25
    20a6:	6f 85       	ldd	r22, Y+15	; 0x0f
    20a8:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
				LCD_voidWriteData(56);
    20ac:	88 e3       	ldi	r24, 0x38	; 56
    20ae:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>
    20b2:	0f c0       	rjmp	.+30     	; 0x20d2 <LCD_u8WriteINT+0x272>
				break;

			case 9:		//NINE ASCII Code is 57
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    20b4:	8f 81       	ldd	r24, Y+7	; 0x07
    20b6:	81 50       	subi	r24, 0x01	; 1
    20b8:	8f 83       	std	Y+7, r24	; 0x07
    20ba:	9f 81       	ldd	r25, Y+7	; 0x07
    20bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    20be:	89 0f       	add	r24, r25
    20c0:	6f 85       	ldd	r22, Y+15	; 0x0f
    20c2:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
				LCD_voidWriteData(57);
    20c6:	89 e3       	ldi	r24, 0x39	; 57
    20c8:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <LCD_u8WriteINT+0x272>
				break;

			default:
				Local_u8Error = 1;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	89 87       	std	Y+9, r24	; 0x09
				break;
			}

			/*Dividing The Temp by 10 to get the Tens, Hundreds ... in every Iteration*/
			Local_u32Temp /= 10;
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	9a 81       	ldd	r25, Y+2	; 0x02
    20d6:	ab 81       	ldd	r26, Y+3	; 0x03
    20d8:	bc 81       	ldd	r27, Y+4	; 0x04
    20da:	2a e0       	ldi	r18, 0x0A	; 10
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	50 e0       	ldi	r21, 0x00	; 0
    20e2:	bc 01       	movw	r22, r24
    20e4:	cd 01       	movw	r24, r26
    20e6:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__udivmodsi4>
    20ea:	da 01       	movw	r26, r20
    20ec:	c9 01       	movw	r24, r18
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	9a 83       	std	Y+2, r25	; 0x02
    20f2:	ab 83       	std	Y+3, r26	; 0x03
    20f4:	bc 83       	std	Y+4, r27	; 0x04

		/*Now we have the Integer number and the Number of Digits so we will loop and in each loop
		 * we will make a Reminder from ones, tens and so on till our reminder be Zero
		 * and loop to print this number with the position on LCD
		 */
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Local_u8CopyNOD; Local_u8LoopCtr++)
    20f6:	88 85       	ldd	r24, Y+8	; 0x08
    20f8:	8f 5f       	subi	r24, 0xFF	; 255
    20fa:	88 87       	std	Y+8, r24	; 0x08
    20fc:	98 85       	ldd	r25, Y+8	; 0x08
    20fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2100:	98 17       	cp	r25, r24
    2102:	08 f4       	brcc	.+2      	; 0x2106 <LCD_u8WriteINT+0x2a6>
    2104:	01 cf       	rjmp	.-510    	; 0x1f08 <LCD_u8WriteINT+0xa8>
			/*Dividing The Temp by 10 to get the Tens, Hundreds ... in every Iteration*/
			Local_u32Temp /= 10;
		}
	}

	return Local_u8Error;
    2106:	89 85       	ldd	r24, Y+9	; 0x09
}
    2108:	61 96       	adiw	r28, 0x11	; 17
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <LCD_u8StringScroll>:
 * Input		: The String, String size, Time in between, Left or Right, First Line or Second one
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8StringScroll(u8 *Copy_u8String, u8 Copy_u8StrSize, u16 Copy_u16Time, u8 Copy_u8RorL, u8 Copy_u8YPos)
{
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	c0 56       	subi	r28, 0x60	; 96
    2128:	d0 40       	sbci	r29, 0x00	; 0
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	fe 01       	movw	r30, r28
    2136:	e6 5a       	subi	r30, 0xA6	; 166
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	91 83       	std	Z+1, r25	; 0x01
    213c:	80 83       	st	Z, r24
    213e:	fe 01       	movw	r30, r28
    2140:	e4 5a       	subi	r30, 0xA4	; 164
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	60 83       	st	Z, r22
    2146:	fe 01       	movw	r30, r28
    2148:	e3 5a       	subi	r30, 0xA3	; 163
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	51 83       	std	Z+1, r21	; 0x01
    214e:	40 83       	st	Z, r20
    2150:	fe 01       	movw	r30, r28
    2152:	e1 5a       	subi	r30, 0xA1	; 161
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	20 83       	st	Z, r18
    2158:	fe 01       	movw	r30, r28
    215a:	e0 5a       	subi	r30, 0xA0	; 160
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	00 83       	st	Z, r16
	/*Local Variables*/
	u8 Local_u8Error = 0;
    2160:	fe 01       	movw	r30, r28
    2162:	e7 5a       	subi	r30, 0xA7	; 167
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	10 82       	st	Z, r1
	u8 Local_u8Move = 0, Local_u8Move2 = 0, Local_u8Move3 = 0;
    2168:	fe 01       	movw	r30, r28
    216a:	e8 5a       	subi	r30, 0xA8	; 168
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	10 82       	st	Z, r1
    2170:	fe 01       	movw	r30, r28
    2172:	e9 5a       	subi	r30, 0xA9	; 169
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	10 82       	st	Z, r1
    2178:	fe 01       	movw	r30, r28
    217a:	ea 5a       	subi	r30, 0xAA	; 170
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	10 82       	st	Z, r1
	u8 Copy_u8StringSize = Copy_u8StrSize;
    2180:	de 01       	movw	r26, r28
    2182:	ab 5a       	subi	r26, 0xAB	; 171
    2184:	bf 4f       	sbci	r27, 0xFF	; 255
    2186:	fe 01       	movw	r30, r28
    2188:	e4 5a       	subi	r30, 0xA4	; 164
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	80 81       	ld	r24, Z
    218e:	8c 93       	st	X, r24

	/* Check for String Size as the maximum is 20 Char
	 * Check for the Y Position 0 or 1
	 * Check for the Scrolling Direction Left Or Right
	 */
	if(Copy_u8StrSize > LCD_MAX_CHAR || Copy_u8YPos > 1 || Copy_u8RorL > 1)
    2190:	fe 01       	movw	r30, r28
    2192:	e4 5a       	subi	r30, 0xA4	; 164
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	80 81       	ld	r24, Z
    2198:	85 31       	cpi	r24, 0x15	; 21
    219a:	60 f4       	brcc	.+24     	; 0x21b4 <LCD_u8StringScroll+0x9a>
    219c:	fe 01       	movw	r30, r28
    219e:	e0 5a       	subi	r30, 0xA0	; 160
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	80 81       	ld	r24, Z
    21a4:	82 30       	cpi	r24, 0x02	; 2
    21a6:	30 f4       	brcc	.+12     	; 0x21b4 <LCD_u8StringScroll+0x9a>
    21a8:	fe 01       	movw	r30, r28
    21aa:	e1 5a       	subi	r30, 0xA1	; 161
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	80 81       	ld	r24, Z
    21b0:	82 30       	cpi	r24, 0x02	; 2
    21b2:	30 f0       	brcs	.+12     	; 0x21c0 <LCD_u8StringScroll+0xa6>
	{
		Local_u8Error = 1;
    21b4:	fe 01       	movw	r30, r28
    21b6:	e7 5a       	subi	r30, 0xA7	; 167
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	80 83       	st	Z, r24
    21be:	d9 c5       	rjmp	.+2994   	; 0x2d72 <LCD_u8StringScroll+0xc58>
	}

	else
	{
		/*This if Scrolling is to Right in Line 1*/
		if(Copy_u8RorL == LCD_SCROLL_TO_RIGHT && Copy_u8YPos == 0)
    21c0:	fe 01       	movw	r30, r28
    21c2:	e1 5a       	subi	r30, 0xA1	; 161
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	80 81       	ld	r24, Z
    21c8:	81 30       	cpi	r24, 0x01	; 1
    21ca:	09 f0       	breq	.+2      	; 0x21ce <LCD_u8StringScroll+0xb4>
    21cc:	e9 c1       	rjmp	.+978    	; 0x25a0 <LCD_u8StringScroll+0x486>
    21ce:	fe 01       	movw	r30, r28
    21d0:	e0 5a       	subi	r30, 0xA0	; 160
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	80 81       	ld	r24, Z
    21d6:	88 23       	and	r24, r24
    21d8:	09 f0       	breq	.+2      	; 0x21dc <LCD_u8StringScroll+0xc2>
    21da:	e2 c1       	rjmp	.+964    	; 0x25a0 <LCD_u8StringScroll+0x486>
		{
			/*Make the Move2 = Over flow of the first lone - string size*/
			Local_u8Move2 = LCD_OV_LINE_1 - (Copy_u8StrSize);
    21dc:	de 01       	movw	r26, r28
    21de:	a9 5a       	subi	r26, 0xA9	; 169
    21e0:	bf 4f       	sbci	r27, 0xFF	; 255
    21e2:	fe 01       	movw	r30, r28
    21e4:	e4 5a       	subi	r30, 0xA4	; 164
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	97 e6       	ldi	r25, 0x67	; 103
    21ea:	80 81       	ld	r24, Z
    21ec:	29 2f       	mov	r18, r25
    21ee:	28 1b       	sub	r18, r24
    21f0:	82 2f       	mov	r24, r18
    21f2:	8c 93       	st	X, r24

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move <= LCD_MAX_SCROLL_LINE; Local_u8Move++)
    21f4:	fe 01       	movw	r30, r28
    21f6:	e8 5a       	subi	r30, 0xA8	; 168
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	10 82       	st	Z, r1
    21fc:	c9 c1       	rjmp	.+914    	; 0x2590 <LCD_u8StringScroll+0x476>
			{
				/*if string bigger than 16*/
				if(Local_u8Move >= (LCD_LINE_NB_OF_DIGITS - Copy_u8StrSize))
    21fe:	fe 01       	movw	r30, r28
    2200:	e8 5a       	subi	r30, 0xA8	; 168
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	80 81       	ld	r24, Z
    2206:	48 2f       	mov	r20, r24
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	fe 01       	movw	r30, r28
    220c:	e4 5a       	subi	r30, 0xA4	; 164
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	80 81       	ld	r24, Z
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	80 e1       	ldi	r24, 0x10	; 16
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	82 1b       	sub	r24, r18
    221c:	93 0b       	sbc	r25, r19
    221e:	48 17       	cp	r20, r24
    2220:	59 07       	cpc	r21, r25
    2222:	0c f4       	brge	.+2      	; 0x2226 <LCD_u8StringScroll+0x10c>
    2224:	06 c1       	rjmp	.+524    	; 0x2432 <LCD_u8StringScroll+0x318>
				{
					/*first print the string in the shown position in 16*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2226:	fe 01       	movw	r30, r28
    2228:	e8 5a       	subi	r30, 0xA8	; 168
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	de 01       	movw	r26, r28
    222e:	a0 5a       	subi	r26, 0xA0	; 160
    2230:	bf 4f       	sbci	r27, 0xFF	; 255
    2232:	80 81       	ld	r24, Z
    2234:	6c 91       	ld	r22, X
    2236:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    223a:	fe 01       	movw	r30, r28
    223c:	e6 5a       	subi	r30, 0xA6	; 166
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	80 81       	ld	r24, Z
    2242:	91 81       	ldd	r25, Z+1	; 0x01
    2244:	fe 01       	movw	r30, r28
    2246:	e4 5a       	subi	r30, 0xA4	; 164
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	60 81       	ld	r22, Z
    224c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_u8WriteString>

					/*print the string in un-shown position */
					LCD_u8GoToXY(Local_u8Move2, Copy_u8YPos);
    2250:	fe 01       	movw	r30, r28
    2252:	e9 5a       	subi	r30, 0xA9	; 169
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	de 01       	movw	r26, r28
    2258:	a0 5a       	subi	r26, 0xA0	; 160
    225a:	bf 4f       	sbci	r27, 0xFF	; 255
    225c:	80 81       	ld	r24, Z
    225e:	6c 91       	ld	r22, X
    2260:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2264:	fe 01       	movw	r30, r28
    2266:	e6 5a       	subi	r30, 0xA6	; 166
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	80 81       	ld	r24, Z
    226c:	91 81       	ldd	r25, Z+1	; 0x01
    226e:	fe 01       	movw	r30, r28
    2270:	e4 5a       	subi	r30, 0xA4	; 164
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	60 81       	ld	r22, Z
    2276:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_u8WriteString>

//					LCD_u8WriteINT(Local_u8Move, 10, 1);
//					LCD_u8WriteINT(Copy_u8StrSize, 5, 1);

					/*delay with the given time*/
					_delay_ms(Copy_u16Time);
    227a:	fe 01       	movw	r30, r28
    227c:	e3 5a       	subi	r30, 0xA3	; 163
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	80 81       	ld	r24, Z
    2282:	91 81       	ldd	r25, Z+1	; 0x01
    2284:	cc 01       	movw	r24, r24
    2286:	a0 e0       	ldi	r26, 0x00	; 0
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	bc 01       	movw	r22, r24
    228c:	cd 01       	movw	r24, r26
    228e:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	fe 01       	movw	r30, r28
    2298:	ef 5a       	subi	r30, 0xAF	; 175
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	80 83       	st	Z, r24
    229e:	91 83       	std	Z+1, r25	; 0x01
    22a0:	a2 83       	std	Z+2, r26	; 0x02
    22a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a4:	8e 01       	movw	r16, r28
    22a6:	03 5b       	subi	r16, 0xB3	; 179
    22a8:	1f 4f       	sbci	r17, 0xFF	; 255
    22aa:	fe 01       	movw	r30, r28
    22ac:	ef 5a       	subi	r30, 0xAF	; 175
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	60 81       	ld	r22, Z
    22b2:	71 81       	ldd	r23, Z+1	; 0x01
    22b4:	82 81       	ldd	r24, Z+2	; 0x02
    22b6:	93 81       	ldd	r25, Z+3	; 0x03
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	4a ef       	ldi	r20, 0xFA	; 250
    22be:	54 e4       	ldi	r21, 0x44	; 68
    22c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	f8 01       	movw	r30, r16
    22ca:	80 83       	st	Z, r24
    22cc:	91 83       	std	Z+1, r25	; 0x01
    22ce:	a2 83       	std	Z+2, r26	; 0x02
    22d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22d2:	fe 01       	movw	r30, r28
    22d4:	e3 5b       	subi	r30, 0xB3	; 179
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	60 81       	ld	r22, Z
    22da:	71 81       	ldd	r23, Z+1	; 0x01
    22dc:	82 81       	ldd	r24, Z+2	; 0x02
    22de:	93 81       	ldd	r25, Z+3	; 0x03
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e8       	ldi	r20, 0x80	; 128
    22e6:	5f e3       	ldi	r21, 0x3F	; 63
    22e8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22ec:	88 23       	and	r24, r24
    22ee:	44 f4       	brge	.+16     	; 0x2300 <LCD_u8StringScroll+0x1e6>
		__ticks = 1;
    22f0:	fe 01       	movw	r30, r28
    22f2:	e5 5b       	subi	r30, 0xB5	; 181
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	91 83       	std	Z+1, r25	; 0x01
    22fc:	80 83       	st	Z, r24
    22fe:	64 c0       	rjmp	.+200    	; 0x23c8 <LCD_u8StringScroll+0x2ae>
	else if (__tmp > 65535)
    2300:	fe 01       	movw	r30, r28
    2302:	e3 5b       	subi	r30, 0xB3	; 179
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	60 81       	ld	r22, Z
    2308:	71 81       	ldd	r23, Z+1	; 0x01
    230a:	82 81       	ldd	r24, Z+2	; 0x02
    230c:	93 81       	ldd	r25, Z+3	; 0x03
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	3f ef       	ldi	r19, 0xFF	; 255
    2312:	4f e7       	ldi	r20, 0x7F	; 127
    2314:	57 e4       	ldi	r21, 0x47	; 71
    2316:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    231a:	18 16       	cp	r1, r24
    231c:	0c f0       	brlt	.+2      	; 0x2320 <LCD_u8StringScroll+0x206>
    231e:	43 c0       	rjmp	.+134    	; 0x23a6 <LCD_u8StringScroll+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2320:	fe 01       	movw	r30, r28
    2322:	ef 5a       	subi	r30, 0xAF	; 175
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	60 81       	ld	r22, Z
    2328:	71 81       	ldd	r23, Z+1	; 0x01
    232a:	82 81       	ldd	r24, Z+2	; 0x02
    232c:	93 81       	ldd	r25, Z+3	; 0x03
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e2       	ldi	r20, 0x20	; 32
    2334:	51 e4       	ldi	r21, 0x41	; 65
    2336:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	8e 01       	movw	r16, r28
    2340:	05 5b       	subi	r16, 0xB5	; 181
    2342:	1f 4f       	sbci	r17, 0xFF	; 255
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	f8 01       	movw	r30, r16
    2352:	91 83       	std	Z+1, r25	; 0x01
    2354:	80 83       	st	Z, r24
    2356:	1f c0       	rjmp	.+62     	; 0x2396 <LCD_u8StringScroll+0x27c>
    2358:	fe 01       	movw	r30, r28
    235a:	e7 5b       	subi	r30, 0xB7	; 183
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	88 ec       	ldi	r24, 0xC8	; 200
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	91 83       	std	Z+1, r25	; 0x01
    2364:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2366:	fe 01       	movw	r30, r28
    2368:	e7 5b       	subi	r30, 0xB7	; 183
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 81       	ld	r24, Z
    236e:	91 81       	ldd	r25, Z+1	; 0x01
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	f1 f7       	brne	.-4      	; 0x2370 <LCD_u8StringScroll+0x256>
    2374:	fe 01       	movw	r30, r28
    2376:	e7 5b       	subi	r30, 0xB7	; 183
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	91 83       	std	Z+1, r25	; 0x01
    237c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237e:	de 01       	movw	r26, r28
    2380:	a5 5b       	subi	r26, 0xB5	; 181
    2382:	bf 4f       	sbci	r27, 0xFF	; 255
    2384:	fe 01       	movw	r30, r28
    2386:	e5 5b       	subi	r30, 0xB5	; 181
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	80 81       	ld	r24, Z
    238c:	91 81       	ldd	r25, Z+1	; 0x01
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	11 96       	adiw	r26, 0x01	; 1
    2392:	9c 93       	st	X, r25
    2394:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2396:	fe 01       	movw	r30, r28
    2398:	e5 5b       	subi	r30, 0xB5	; 181
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	80 81       	ld	r24, Z
    239e:	91 81       	ldd	r25, Z+1	; 0x01
    23a0:	00 97       	sbiw	r24, 0x00	; 0
    23a2:	d1 f6       	brne	.-76     	; 0x2358 <LCD_u8StringScroll+0x23e>
    23a4:	27 c0       	rjmp	.+78     	; 0x23f4 <LCD_u8StringScroll+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a6:	8e 01       	movw	r16, r28
    23a8:	05 5b       	subi	r16, 0xB5	; 181
    23aa:	1f 4f       	sbci	r17, 0xFF	; 255
    23ac:	fe 01       	movw	r30, r28
    23ae:	e3 5b       	subi	r30, 0xB3	; 179
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	60 81       	ld	r22, Z
    23b4:	71 81       	ldd	r23, Z+1	; 0x01
    23b6:	82 81       	ldd	r24, Z+2	; 0x02
    23b8:	93 81       	ldd	r25, Z+3	; 0x03
    23ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	f8 01       	movw	r30, r16
    23c4:	91 83       	std	Z+1, r25	; 0x01
    23c6:	80 83       	st	Z, r24
    23c8:	de 01       	movw	r26, r28
    23ca:	a9 5b       	subi	r26, 0xB9	; 185
    23cc:	bf 4f       	sbci	r27, 0xFF	; 255
    23ce:	fe 01       	movw	r30, r28
    23d0:	e5 5b       	subi	r30, 0xB5	; 181
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 81       	ld	r24, Z
    23d6:	91 81       	ldd	r25, Z+1	; 0x01
    23d8:	8d 93       	st	X+, r24
    23da:	9c 93       	st	X, r25
    23dc:	fe 01       	movw	r30, r28
    23de:	e9 5b       	subi	r30, 0xB9	; 185
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	80 81       	ld	r24, Z
    23e4:	91 81       	ldd	r25, Z+1	; 0x01
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <LCD_u8StringScroll+0x2cc>
    23ea:	fe 01       	movw	r30, r28
    23ec:	e9 5b       	subi	r30, 0xB9	; 185
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	91 83       	std	Z+1, r25	; 0x01
    23f2:	80 83       	st	Z, r24

					/*Clear the LCD*/
					LCD_voidClearLCD();
    23f4:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_voidClearLCD>

					/*increment Move 2*/
					Local_u8Move2++;
    23f8:	de 01       	movw	r26, r28
    23fa:	a9 5a       	subi	r26, 0xA9	; 169
    23fc:	bf 4f       	sbci	r27, 0xFF	; 255
    23fe:	fe 01       	movw	r30, r28
    2400:	e9 5a       	subi	r30, 0xA9	; 169
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	8f 5f       	subi	r24, 0xFF	; 255
    2408:	8c 93       	st	X, r24

					/*if Move 2 = 16 give it its initial value and break the loop*/
					if(Local_u8Move2 == LCD_OV_LINE_1)
    240a:	fe 01       	movw	r30, r28
    240c:	e9 5a       	subi	r30, 0xA9	; 169
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	80 81       	ld	r24, Z
    2412:	87 36       	cpi	r24, 0x67	; 103
    2414:	09 f0       	breq	.+2      	; 0x2418 <LCD_u8StringScroll+0x2fe>
    2416:	b3 c0       	rjmp	.+358    	; 0x257e <LCD_u8StringScroll+0x464>
					{
						Local_u8Move2 = LCD_OV_LINE_1 - (Copy_u8StrSize);
    2418:	de 01       	movw	r26, r28
    241a:	a9 5a       	subi	r26, 0xA9	; 169
    241c:	bf 4f       	sbci	r27, 0xFF	; 255
    241e:	fe 01       	movw	r30, r28
    2420:	e4 5a       	subi	r30, 0xA4	; 164
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	97 e6       	ldi	r25, 0x67	; 103
    2426:	80 81       	ld	r24, Z
    2428:	f9 2f       	mov	r31, r25
    242a:	f8 1b       	sub	r31, r24
    242c:	8f 2f       	mov	r24, r31
    242e:	8c 93       	st	X, r24
    2430:	a0 c4       	rjmp	.+2368   	; 0x2d72 <LCD_u8StringScroll+0xc58>

				/*else mean string < 16*/
				else
				{
					/*Print the string*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2432:	fe 01       	movw	r30, r28
    2434:	e8 5a       	subi	r30, 0xA8	; 168
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	de 01       	movw	r26, r28
    243a:	a0 5a       	subi	r26, 0xA0	; 160
    243c:	bf 4f       	sbci	r27, 0xFF	; 255
    243e:	80 81       	ld	r24, Z
    2440:	6c 91       	ld	r22, X
    2442:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2446:	fe 01       	movw	r30, r28
    2448:	e6 5a       	subi	r30, 0xA6	; 166
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	80 81       	ld	r24, Z
    244e:	91 81       	ldd	r25, Z+1	; 0x01
    2450:	fe 01       	movw	r30, r28
    2452:	e4 5a       	subi	r30, 0xA4	; 164
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	60 81       	ld	r22, Z
    2458:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_u8WriteString>

//					LCD_u8WriteINT(Local_u8Move, 10, 1);
//					LCD_u8WriteINT(Copy_u8StrSize, 5, 1);

					/*Delay the given time*/
					_delay_ms(Copy_u16Time);
    245c:	fe 01       	movw	r30, r28
    245e:	e3 5a       	subi	r30, 0xA3	; 163
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	80 81       	ld	r24, Z
    2464:	91 81       	ldd	r25, Z+1	; 0x01
    2466:	cc 01       	movw	r24, r24
    2468:	a0 e0       	ldi	r26, 0x00	; 0
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	bc 01       	movw	r22, r24
    246e:	cd 01       	movw	r24, r26
    2470:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	fe 01       	movw	r30, r28
    247a:	ed 5b       	subi	r30, 0xBD	; 189
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	80 83       	st	Z, r24
    2480:	91 83       	std	Z+1, r25	; 0x01
    2482:	a2 83       	std	Z+2, r26	; 0x02
    2484:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2486:	8e 01       	movw	r16, r28
    2488:	01 5c       	subi	r16, 0xC1	; 193
    248a:	1f 4f       	sbci	r17, 0xFF	; 255
    248c:	fe 01       	movw	r30, r28
    248e:	ed 5b       	subi	r30, 0xBD	; 189
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	60 81       	ld	r22, Z
    2494:	71 81       	ldd	r23, Z+1	; 0x01
    2496:	82 81       	ldd	r24, Z+2	; 0x02
    2498:	93 81       	ldd	r25, Z+3	; 0x03
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	4a ef       	ldi	r20, 0xFA	; 250
    24a0:	54 e4       	ldi	r21, 0x44	; 68
    24a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	f8 01       	movw	r30, r16
    24ac:	80 83       	st	Z, r24
    24ae:	91 83       	std	Z+1, r25	; 0x01
    24b0:	a2 83       	std	Z+2, r26	; 0x02
    24b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24b4:	fe 01       	movw	r30, r28
    24b6:	ff 96       	adiw	r30, 0x3f	; 63
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e8       	ldi	r20, 0x80	; 128
    24c6:	5f e3       	ldi	r21, 0x3F	; 63
    24c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24cc:	88 23       	and	r24, r24
    24ce:	2c f4       	brge	.+10     	; 0x24da <LCD_u8StringScroll+0x3c0>
		__ticks = 1;
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	9e af       	std	Y+62, r25	; 0x3e
    24d6:	8d af       	std	Y+61, r24	; 0x3d
    24d8:	46 c0       	rjmp	.+140    	; 0x2566 <LCD_u8StringScroll+0x44c>
	else if (__tmp > 65535)
    24da:	fe 01       	movw	r30, r28
    24dc:	ff 96       	adiw	r30, 0x3f	; 63
    24de:	60 81       	ld	r22, Z
    24e0:	71 81       	ldd	r23, Z+1	; 0x01
    24e2:	82 81       	ldd	r24, Z+2	; 0x02
    24e4:	93 81       	ldd	r25, Z+3	; 0x03
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	3f ef       	ldi	r19, 0xFF	; 255
    24ea:	4f e7       	ldi	r20, 0x7F	; 127
    24ec:	57 e4       	ldi	r21, 0x47	; 71
    24ee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24f2:	18 16       	cp	r1, r24
    24f4:	64 f5       	brge	.+88     	; 0x254e <LCD_u8StringScroll+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f6:	fe 01       	movw	r30, r28
    24f8:	ed 5b       	subi	r30, 0xBD	; 189
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	60 81       	ld	r22, Z
    24fe:	71 81       	ldd	r23, Z+1	; 0x01
    2500:	82 81       	ldd	r24, Z+2	; 0x02
    2502:	93 81       	ldd	r25, Z+3	; 0x03
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	40 e2       	ldi	r20, 0x20	; 32
    250a:	51 e4       	ldi	r21, 0x41	; 65
    250c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	bc 01       	movw	r22, r24
    2516:	cd 01       	movw	r24, r26
    2518:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	9e af       	std	Y+62, r25	; 0x3e
    2522:	8d af       	std	Y+61, r24	; 0x3d
    2524:	0f c0       	rjmp	.+30     	; 0x2544 <LCD_u8StringScroll+0x42a>
    2526:	88 ec       	ldi	r24, 0xC8	; 200
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	9c af       	std	Y+60, r25	; 0x3c
    252c:	8b af       	std	Y+59, r24	; 0x3b
    252e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2530:	9c ad       	ldd	r25, Y+60	; 0x3c
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <LCD_u8StringScroll+0x418>
    2536:	9c af       	std	Y+60, r25	; 0x3c
    2538:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253a:	8d ad       	ldd	r24, Y+61	; 0x3d
    253c:	9e ad       	ldd	r25, Y+62	; 0x3e
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	9e af       	std	Y+62, r25	; 0x3e
    2542:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2544:	8d ad       	ldd	r24, Y+61	; 0x3d
    2546:	9e ad       	ldd	r25, Y+62	; 0x3e
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	69 f7       	brne	.-38     	; 0x2526 <LCD_u8StringScroll+0x40c>
    254c:	16 c0       	rjmp	.+44     	; 0x257a <LCD_u8StringScroll+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254e:	fe 01       	movw	r30, r28
    2550:	ff 96       	adiw	r30, 0x3f	; 63
    2552:	60 81       	ld	r22, Z
    2554:	71 81       	ldd	r23, Z+1	; 0x01
    2556:	82 81       	ldd	r24, Z+2	; 0x02
    2558:	93 81       	ldd	r25, Z+3	; 0x03
    255a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	9e af       	std	Y+62, r25	; 0x3e
    2564:	8d af       	std	Y+61, r24	; 0x3d
    2566:	8d ad       	ldd	r24, Y+61	; 0x3d
    2568:	9e ad       	ldd	r25, Y+62	; 0x3e
    256a:	9a af       	std	Y+58, r25	; 0x3a
    256c:	89 af       	std	Y+57, r24	; 0x39
    256e:	89 ad       	ldd	r24, Y+57	; 0x39
    2570:	9a ad       	ldd	r25, Y+58	; 0x3a
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <LCD_u8StringScroll+0x458>
    2576:	9a af       	std	Y+58, r25	; 0x3a
    2578:	89 af       	std	Y+57, r24	; 0x39

					/*Clear LCD*/
					LCD_voidClearLCD();
    257a:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_voidClearLCD>
		{
			/*Make the Move2 = Over flow of the first lone - string size*/
			Local_u8Move2 = LCD_OV_LINE_1 - (Copy_u8StrSize);

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move <= LCD_MAX_SCROLL_LINE; Local_u8Move++)
    257e:	de 01       	movw	r26, r28
    2580:	a8 5a       	subi	r26, 0xA8	; 168
    2582:	bf 4f       	sbci	r27, 0xFF	; 255
    2584:	fe 01       	movw	r30, r28
    2586:	e8 5a       	subi	r30, 0xA8	; 168
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	80 81       	ld	r24, Z
    258c:	8f 5f       	subi	r24, 0xFF	; 255
    258e:	8c 93       	st	X, r24
    2590:	fe 01       	movw	r30, r28
    2592:	e8 5a       	subi	r30, 0xA8	; 168
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	80 81       	ld	r24, Z
    2598:	8a 32       	cpi	r24, 0x2A	; 42
    259a:	08 f4       	brcc	.+2      	; 0x259e <LCD_u8StringScroll+0x484>
    259c:	30 ce       	rjmp	.-928    	; 0x21fe <LCD_u8StringScroll+0xe4>
    259e:	e9 c3       	rjmp	.+2002   	; 0x2d72 <LCD_u8StringScroll+0xc58>
				}
			}
		}

		/*else mean scroll to left in Line 1*/
		else if(Copy_u8RorL == LCD_SCROLL_TO_LEFT && Copy_u8YPos == 0)
    25a0:	fe 01       	movw	r30, r28
    25a2:	e1 5a       	subi	r30, 0xA1	; 161
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	80 81       	ld	r24, Z
    25a8:	88 23       	and	r24, r24
    25aa:	09 f0       	breq	.+2      	; 0x25ae <LCD_u8StringScroll+0x494>
    25ac:	20 c1       	rjmp	.+576    	; 0x27ee <LCD_u8StringScroll+0x6d4>
    25ae:	fe 01       	movw	r30, r28
    25b0:	e0 5a       	subi	r30, 0xA0	; 160
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	80 81       	ld	r24, Z
    25b6:	88 23       	and	r24, r24
    25b8:	09 f0       	breq	.+2      	; 0x25bc <LCD_u8StringScroll+0x4a2>
    25ba:	19 c1       	rjmp	.+562    	; 0x27ee <LCD_u8StringScroll+0x6d4>
		{
			/*Move2 = over flow + string size + 1 to make space between the last and first char in string */
			Local_u8Move2 = LCD_OV_LINE_1 + (Copy_u8StrSize + 1);
    25bc:	de 01       	movw	r26, r28
    25be:	a9 5a       	subi	r26, 0xA9	; 169
    25c0:	bf 4f       	sbci	r27, 0xFF	; 255
    25c2:	fe 01       	movw	r30, r28
    25c4:	e4 5a       	subi	r30, 0xA4	; 164
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	80 81       	ld	r24, Z
    25ca:	88 59       	subi	r24, 0x98	; 152
    25cc:	8c 93       	st	X, r24

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    25ce:	fe 01       	movw	r30, r28
    25d0:	ea 5a       	subi	r30, 0xAA	; 170
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	80 e1       	ldi	r24, 0x10	; 16
    25d6:	80 83       	st	Z, r24

			/*make the Move = 104 (Over Flow + 1 (First char on LCD)) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_1 + 1); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    25d8:	fe 01       	movw	r30, r28
    25da:	e8 5a       	subi	r30, 0xA8	; 168
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	88 e6       	ldi	r24, 0x68	; 104
    25e0:	80 83       	st	Z, r24
    25e2:	f9 c0       	rjmp	.+498    	; 0x27d6 <LCD_u8StringScroll+0x6bc>
			{
				/*Print LCD with the Move as X position*/
				LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    25e4:	fe 01       	movw	r30, r28
    25e6:	e8 5a       	subi	r30, 0xA8	; 168
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	de 01       	movw	r26, r28
    25ec:	a0 5a       	subi	r26, 0xA0	; 160
    25ee:	bf 4f       	sbci	r27, 0xFF	; 255
    25f0:	80 81       	ld	r24, Z
    25f2:	6c 91       	ld	r22, X
    25f4:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
				LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    25f8:	fe 01       	movw	r30, r28
    25fa:	e6 5a       	subi	r30, 0xA6	; 166
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	80 81       	ld	r24, Z
    2600:	91 81       	ldd	r25, Z+1	; 0x01
    2602:	fe 01       	movw	r30, r28
    2604:	e4 5a       	subi	r30, 0xA4	; 164
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	60 81       	ld	r22, Z
    260a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_u8WriteString>

				/*if String size less than 16*/
				if(Copy_u8StrSize < LCD_LINE_NB_OF_DIGITS)
    260e:	fe 01       	movw	r30, r28
    2610:	e4 5a       	subi	r30, 0xA4	; 164
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	80 81       	ld	r24, Z
    2616:	80 31       	cpi	r24, 0x10	; 16
    2618:	f8 f4       	brcc	.+62     	; 0x2658 <LCD_u8StringScroll+0x53e>
				{
					/*print with move 3 as X position*/
					LCD_u8GoToXY(Local_u8Move3 , Copy_u8YPos);
    261a:	fe 01       	movw	r30, r28
    261c:	ea 5a       	subi	r30, 0xAA	; 170
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	de 01       	movw	r26, r28
    2622:	a0 5a       	subi	r26, 0xA0	; 160
    2624:	bf 4f       	sbci	r27, 0xFF	; 255
    2626:	80 81       	ld	r24, Z
    2628:	6c 91       	ld	r22, X
    262a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    262e:	fe 01       	movw	r30, r28
    2630:	e6 5a       	subi	r30, 0xA6	; 166
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	80 81       	ld	r24, Z
    2636:	91 81       	ldd	r25, Z+1	; 0x01
    2638:	fe 01       	movw	r30, r28
    263a:	e4 5a       	subi	r30, 0xA4	; 164
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	60 81       	ld	r22, Z
    2640:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_u8WriteString>

					/*De-crement move 3*/
					Local_u8Move3--;
    2644:	de 01       	movw	r26, r28
    2646:	aa 5a       	subi	r26, 0xAA	; 170
    2648:	bf 4f       	sbci	r27, 0xFF	; 255
    264a:	fe 01       	movw	r30, r28
    264c:	ea 5a       	subi	r30, 0xAA	; 170
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	80 81       	ld	r24, Z
    2652:	81 50       	subi	r24, 0x01	; 1
    2654:	8c 93       	st	X, r24
    2656:	1e c0       	rjmp	.+60     	; 0x2694 <LCD_u8StringScroll+0x57a>

				/*else mean string > 16*/
				else
				{
					/*print with the copy of string size as X position*/
					LCD_u8GoToXY(Copy_u8StringSize, Copy_u8YPos);
    2658:	fe 01       	movw	r30, r28
    265a:	eb 5a       	subi	r30, 0xAB	; 171
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	de 01       	movw	r26, r28
    2660:	a0 5a       	subi	r26, 0xA0	; 160
    2662:	bf 4f       	sbci	r27, 0xFF	; 255
    2664:	80 81       	ld	r24, Z
    2666:	6c 91       	ld	r22, X
    2668:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    266c:	fe 01       	movw	r30, r28
    266e:	e6 5a       	subi	r30, 0xA6	; 166
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	80 81       	ld	r24, Z
    2674:	91 81       	ldd	r25, Z+1	; 0x01
    2676:	fe 01       	movw	r30, r28
    2678:	e4 5a       	subi	r30, 0xA4	; 164
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	60 81       	ld	r22, Z
    267e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_u8WriteString>

					/*de-crement the copy of the sting size*/
					Copy_u8StringSize--;
    2682:	de 01       	movw	r26, r28
    2684:	ab 5a       	subi	r26, 0xAB	; 171
    2686:	bf 4f       	sbci	r27, 0xFF	; 255
    2688:	fe 01       	movw	r30, r28
    268a:	eb 5a       	subi	r30, 0xAB	; 171
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	80 81       	ld	r24, Z
    2690:	81 50       	subi	r24, 0x01	; 1
    2692:	8c 93       	st	X, r24
//				LCD_u8WriteINT(Local_u8Move, 10, 1);
//				LCD_u8WriteINT(Copy_u8StrSize, 5, 1);
//				LCD_u8WriteINT(Copy_u8StringSize, 1, 1);

				/*Delay with the given time*/
				_delay_ms(Copy_u16Time);
    2694:	fe 01       	movw	r30, r28
    2696:	e3 5a       	subi	r30, 0xA3	; 163
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	80 81       	ld	r24, Z
    269c:	91 81       	ldd	r25, Z+1	; 0x01
    269e:	cc 01       	movw	r24, r24
    26a0:	a0 e0       	ldi	r26, 0x00	; 0
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	8d ab       	std	Y+53, r24	; 0x35
    26b2:	9e ab       	std	Y+54, r25	; 0x36
    26b4:	af ab       	std	Y+55, r26	; 0x37
    26b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b8:	6d a9       	ldd	r22, Y+53	; 0x35
    26ba:	7e a9       	ldd	r23, Y+54	; 0x36
    26bc:	8f a9       	ldd	r24, Y+55	; 0x37
    26be:	98 ad       	ldd	r25, Y+56	; 0x38
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	4a ef       	ldi	r20, 0xFA	; 250
    26c6:	54 e4       	ldi	r21, 0x44	; 68
    26c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	89 ab       	std	Y+49, r24	; 0x31
    26d2:	9a ab       	std	Y+50, r25	; 0x32
    26d4:	ab ab       	std	Y+51, r26	; 0x33
    26d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26d8:	69 a9       	ldd	r22, Y+49	; 0x31
    26da:	7a a9       	ldd	r23, Y+50	; 0x32
    26dc:	8b a9       	ldd	r24, Y+51	; 0x33
    26de:	9c a9       	ldd	r25, Y+52	; 0x34
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e8       	ldi	r20, 0x80	; 128
    26e6:	5f e3       	ldi	r21, 0x3F	; 63
    26e8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26ec:	88 23       	and	r24, r24
    26ee:	2c f4       	brge	.+10     	; 0x26fa <LCD_u8StringScroll+0x5e0>
		__ticks = 1;
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	98 ab       	std	Y+48, r25	; 0x30
    26f6:	8f a7       	std	Y+47, r24	; 0x2f
    26f8:	3f c0       	rjmp	.+126    	; 0x2778 <LCD_u8StringScroll+0x65e>
	else if (__tmp > 65535)
    26fa:	69 a9       	ldd	r22, Y+49	; 0x31
    26fc:	7a a9       	ldd	r23, Y+50	; 0x32
    26fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2700:	9c a9       	ldd	r25, Y+52	; 0x34
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	3f ef       	ldi	r19, 0xFF	; 255
    2706:	4f e7       	ldi	r20, 0x7F	; 127
    2708:	57 e4       	ldi	r21, 0x47	; 71
    270a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    270e:	18 16       	cp	r1, r24
    2710:	4c f5       	brge	.+82     	; 0x2764 <LCD_u8StringScroll+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2712:	6d a9       	ldd	r22, Y+53	; 0x35
    2714:	7e a9       	ldd	r23, Y+54	; 0x36
    2716:	8f a9       	ldd	r24, Y+55	; 0x37
    2718:	98 ad       	ldd	r25, Y+56	; 0x38
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e2       	ldi	r20, 0x20	; 32
    2720:	51 e4       	ldi	r21, 0x41	; 65
    2722:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	98 ab       	std	Y+48, r25	; 0x30
    2738:	8f a7       	std	Y+47, r24	; 0x2f
    273a:	0f c0       	rjmp	.+30     	; 0x275a <LCD_u8StringScroll+0x640>
    273c:	88 ec       	ldi	r24, 0xC8	; 200
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9e a7       	std	Y+46, r25	; 0x2e
    2742:	8d a7       	std	Y+45, r24	; 0x2d
    2744:	8d a5       	ldd	r24, Y+45	; 0x2d
    2746:	9e a5       	ldd	r25, Y+46	; 0x2e
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <LCD_u8StringScroll+0x62e>
    274c:	9e a7       	std	Y+46, r25	; 0x2e
    274e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2750:	8f a5       	ldd	r24, Y+47	; 0x2f
    2752:	98 a9       	ldd	r25, Y+48	; 0x30
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	98 ab       	std	Y+48, r25	; 0x30
    2758:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275a:	8f a5       	ldd	r24, Y+47	; 0x2f
    275c:	98 a9       	ldd	r25, Y+48	; 0x30
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	69 f7       	brne	.-38     	; 0x273c <LCD_u8StringScroll+0x622>
    2762:	14 c0       	rjmp	.+40     	; 0x278c <LCD_u8StringScroll+0x672>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2764:	69 a9       	ldd	r22, Y+49	; 0x31
    2766:	7a a9       	ldd	r23, Y+50	; 0x32
    2768:	8b a9       	ldd	r24, Y+51	; 0x33
    276a:	9c a9       	ldd	r25, Y+52	; 0x34
    276c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	98 ab       	std	Y+48, r25	; 0x30
    2776:	8f a7       	std	Y+47, r24	; 0x2f
    2778:	8f a5       	ldd	r24, Y+47	; 0x2f
    277a:	98 a9       	ldd	r25, Y+48	; 0x30
    277c:	9c a7       	std	Y+44, r25	; 0x2c
    277e:	8b a7       	std	Y+43, r24	; 0x2b
    2780:	8b a5       	ldd	r24, Y+43	; 0x2b
    2782:	9c a5       	ldd	r25, Y+44	; 0x2c
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <LCD_u8StringScroll+0x66a>
    2788:	9c a7       	std	Y+44, r25	; 0x2c
    278a:	8b a7       	std	Y+43, r24	; 0x2b

				/*Clear LCD*/
				LCD_voidClearLCD();
    278c:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_voidClearLCD>

				/*if Move 3 = 0 or Copy of string size = 0 re-intiate their value and break the loop*/
				if(Local_u8Move3 == 0 || Copy_u8StringSize == 0)
    2790:	fe 01       	movw	r30, r28
    2792:	ea 5a       	subi	r30, 0xAA	; 170
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	80 81       	ld	r24, Z
    2798:	88 23       	and	r24, r24
    279a:	31 f0       	breq	.+12     	; 0x27a8 <LCD_u8StringScroll+0x68e>
    279c:	fe 01       	movw	r30, r28
    279e:	eb 5a       	subi	r30, 0xAB	; 171
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	80 81       	ld	r24, Z
    27a4:	88 23       	and	r24, r24
    27a6:	71 f4       	brne	.+28     	; 0x27c4 <LCD_u8StringScroll+0x6aa>
				{
					Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    27a8:	fe 01       	movw	r30, r28
    27aa:	ea 5a       	subi	r30, 0xAA	; 170
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	80 e1       	ldi	r24, 0x10	; 16
    27b0:	80 83       	st	Z, r24
					Copy_u8StringSize = Copy_u8StrSize;
    27b2:	de 01       	movw	r26, r28
    27b4:	ab 5a       	subi	r26, 0xAB	; 171
    27b6:	bf 4f       	sbci	r27, 0xFF	; 255
    27b8:	fe 01       	movw	r30, r28
    27ba:	e4 5a       	subi	r30, 0xA4	; 164
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	80 81       	ld	r24, Z
    27c0:	8c 93       	st	X, r24
    27c2:	d7 c2       	rjmp	.+1454   	; 0x2d72 <LCD_u8StringScroll+0xc58>

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;

			/*make the Move = 104 (Over Flow + 1 (First char on LCD)) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_1 + 1); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    27c4:	de 01       	movw	r26, r28
    27c6:	a8 5a       	subi	r26, 0xA8	; 168
    27c8:	bf 4f       	sbci	r27, 0xFF	; 255
    27ca:	fe 01       	movw	r30, r28
    27cc:	e8 5a       	subi	r30, 0xA8	; 168
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	80 81       	ld	r24, Z
    27d2:	81 50       	subi	r24, 0x01	; 1
    27d4:	8c 93       	st	X, r24
    27d6:	fe 01       	movw	r30, r28
    27d8:	e8 5a       	subi	r30, 0xA8	; 168
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	de 01       	movw	r26, r28
    27de:	a9 5a       	subi	r26, 0xA9	; 169
    27e0:	bf 4f       	sbci	r27, 0xFF	; 255
    27e2:	90 81       	ld	r25, Z
    27e4:	8c 91       	ld	r24, X
    27e6:	89 17       	cp	r24, r25
    27e8:	08 f0       	brcs	.+2      	; 0x27ec <LCD_u8StringScroll+0x6d2>
    27ea:	fc ce       	rjmp	.-520    	; 0x25e4 <LCD_u8StringScroll+0x4ca>
    27ec:	c2 c2       	rjmp	.+1412   	; 0x2d72 <LCD_u8StringScroll+0xc58>
				}
			}
		}

		/*This if Scrolling is to Right in Line 2*/
		else if(Copy_u8RorL == LCD_SCROLL_TO_RIGHT && Copy_u8YPos == 1)
    27ee:	fe 01       	movw	r30, r28
    27f0:	e1 5a       	subi	r30, 0xA1	; 161
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	80 81       	ld	r24, Z
    27f6:	81 30       	cpi	r24, 0x01	; 1
    27f8:	09 f0       	breq	.+2      	; 0x27fc <LCD_u8StringScroll+0x6e2>
    27fa:	95 c1       	rjmp	.+810    	; 0x2b26 <LCD_u8StringScroll+0xa0c>
    27fc:	fe 01       	movw	r30, r28
    27fe:	e0 5a       	subi	r30, 0xA0	; 160
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	80 81       	ld	r24, Z
    2804:	81 30       	cpi	r24, 0x01	; 1
    2806:	09 f0       	breq	.+2      	; 0x280a <LCD_u8StringScroll+0x6f0>
    2808:	8e c1       	rjmp	.+796    	; 0x2b26 <LCD_u8StringScroll+0xa0c>
		{
			/*Make the Move2 = Over flow of the second line - string size*/
			Local_u8Move2 = LCD_OV_LINE_2 - Copy_u8StrSize;
    280a:	de 01       	movw	r26, r28
    280c:	a9 5a       	subi	r26, 0xA9	; 169
    280e:	bf 4f       	sbci	r27, 0xFF	; 255
    2810:	fe 01       	movw	r30, r28
    2812:	e4 5a       	subi	r30, 0xA4	; 164
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	98 ee       	ldi	r25, 0xE8	; 232
    2818:	80 81       	ld	r24, Z
    281a:	f9 2f       	mov	r31, r25
    281c:	f8 1b       	sub	r31, r24
    281e:	8f 2f       	mov	r24, r31
    2820:	8c 93       	st	X, r24

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move < LCD_MAX_SCROLL_LINE; Local_u8Move++)
    2822:	fe 01       	movw	r30, r28
    2824:	e8 5a       	subi	r30, 0xA8	; 168
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	10 82       	st	Z, r1
    282a:	75 c1       	rjmp	.+746    	; 0x2b16 <LCD_u8StringScroll+0x9fc>
			{
				/*if string bigger than 16*/
				if(Local_u8Move >= (LCD_LINE_NB_OF_DIGITS - Copy_u8StrSize))
    282c:	fe 01       	movw	r30, r28
    282e:	e8 5a       	subi	r30, 0xA8	; 168
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	80 81       	ld	r24, Z
    2834:	48 2f       	mov	r20, r24
    2836:	50 e0       	ldi	r21, 0x00	; 0
    2838:	fe 01       	movw	r30, r28
    283a:	e4 5a       	subi	r30, 0xA4	; 164
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	80 81       	ld	r24, Z
    2840:	28 2f       	mov	r18, r24
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	80 e1       	ldi	r24, 0x10	; 16
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	82 1b       	sub	r24, r18
    284a:	93 0b       	sbc	r25, r19
    284c:	48 17       	cp	r20, r24
    284e:	59 07       	cpc	r21, r25
    2850:	0c f4       	brge	.+2      	; 0x2854 <LCD_u8StringScroll+0x73a>
    2852:	c5 c0       	rjmp	.+394    	; 0x29de <LCD_u8StringScroll+0x8c4>
				{
					/*first print the string in the shown position in 16*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2854:	fe 01       	movw	r30, r28
    2856:	e8 5a       	subi	r30, 0xA8	; 168
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	de 01       	movw	r26, r28
    285c:	a0 5a       	subi	r26, 0xA0	; 160
    285e:	bf 4f       	sbci	r27, 0xFF	; 255
    2860:	80 81       	ld	r24, Z
    2862:	6c 91       	ld	r22, X
    2864:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2868:	fe 01       	movw	r30, r28
    286a:	e6 5a       	subi	r30, 0xA6	; 166
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 81       	ld	r24, Z
    2870:	91 81       	ldd	r25, Z+1	; 0x01
    2872:	fe 01       	movw	r30, r28
    2874:	e4 5a       	subi	r30, 0xA4	; 164
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	60 81       	ld	r22, Z
    287a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_u8WriteString>

					/*print the string in un-shown position */
					LCD_u8GoToXY(Local_u8Move2, Copy_u8YPos);
    287e:	fe 01       	movw	r30, r28
    2880:	e9 5a       	subi	r30, 0xA9	; 169
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	de 01       	movw	r26, r28
    2886:	a0 5a       	subi	r26, 0xA0	; 160
    2888:	bf 4f       	sbci	r27, 0xFF	; 255
    288a:	80 81       	ld	r24, Z
    288c:	6c 91       	ld	r22, X
    288e:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2892:	fe 01       	movw	r30, r28
    2894:	e6 5a       	subi	r30, 0xA6	; 166
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	80 81       	ld	r24, Z
    289a:	91 81       	ldd	r25, Z+1	; 0x01
    289c:	fe 01       	movw	r30, r28
    289e:	e4 5a       	subi	r30, 0xA4	; 164
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	60 81       	ld	r22, Z
    28a4:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_u8WriteString>
//					LCD_u8WriteINT(Local_u8Move, 0, 0);
//					LCD_u8WriteINT(Local_u8Move2, 5, 0);
//					LCD_u8WriteINT(Copy_u8StrSize, 10, 0);

					/*delay with the given time*/
					_delay_ms(Copy_u16Time);
    28a8:	fe 01       	movw	r30, r28
    28aa:	e3 5a       	subi	r30, 0xA3	; 163
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	80 81       	ld	r24, Z
    28b0:	91 81       	ldd	r25, Z+1	; 0x01
    28b2:	cc 01       	movw	r24, r24
    28b4:	a0 e0       	ldi	r26, 0x00	; 0
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	bc 01       	movw	r22, r24
    28ba:	cd 01       	movw	r24, r26
    28bc:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	8f a3       	std	Y+39, r24	; 0x27
    28c6:	98 a7       	std	Y+40, r25	; 0x28
    28c8:	a9 a7       	std	Y+41, r26	; 0x29
    28ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28cc:	6f a1       	ldd	r22, Y+39	; 0x27
    28ce:	78 a5       	ldd	r23, Y+40	; 0x28
    28d0:	89 a5       	ldd	r24, Y+41	; 0x29
    28d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	4a ef       	ldi	r20, 0xFA	; 250
    28da:	54 e4       	ldi	r21, 0x44	; 68
    28dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	8b a3       	std	Y+35, r24	; 0x23
    28e6:	9c a3       	std	Y+36, r25	; 0x24
    28e8:	ad a3       	std	Y+37, r26	; 0x25
    28ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28ec:	6b a1       	ldd	r22, Y+35	; 0x23
    28ee:	7c a1       	ldd	r23, Y+36	; 0x24
    28f0:	8d a1       	ldd	r24, Y+37	; 0x25
    28f2:	9e a1       	ldd	r25, Y+38	; 0x26
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e8       	ldi	r20, 0x80	; 128
    28fa:	5f e3       	ldi	r21, 0x3F	; 63
    28fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2900:	88 23       	and	r24, r24
    2902:	2c f4       	brge	.+10     	; 0x290e <LCD_u8StringScroll+0x7f4>
		__ticks = 1;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	9a a3       	std	Y+34, r25	; 0x22
    290a:	89 a3       	std	Y+33, r24	; 0x21
    290c:	3f c0       	rjmp	.+126    	; 0x298c <LCD_u8StringScroll+0x872>
	else if (__tmp > 65535)
    290e:	6b a1       	ldd	r22, Y+35	; 0x23
    2910:	7c a1       	ldd	r23, Y+36	; 0x24
    2912:	8d a1       	ldd	r24, Y+37	; 0x25
    2914:	9e a1       	ldd	r25, Y+38	; 0x26
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	3f ef       	ldi	r19, 0xFF	; 255
    291a:	4f e7       	ldi	r20, 0x7F	; 127
    291c:	57 e4       	ldi	r21, 0x47	; 71
    291e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2922:	18 16       	cp	r1, r24
    2924:	4c f5       	brge	.+82     	; 0x2978 <LCD_u8StringScroll+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2926:	6f a1       	ldd	r22, Y+39	; 0x27
    2928:	78 a5       	ldd	r23, Y+40	; 0x28
    292a:	89 a5       	ldd	r24, Y+41	; 0x29
    292c:	9a a5       	ldd	r25, Y+42	; 0x2a
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e2       	ldi	r20, 0x20	; 32
    2934:	51 e4       	ldi	r21, 0x41	; 65
    2936:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	9a a3       	std	Y+34, r25	; 0x22
    294c:	89 a3       	std	Y+33, r24	; 0x21
    294e:	0f c0       	rjmp	.+30     	; 0x296e <LCD_u8StringScroll+0x854>
    2950:	88 ec       	ldi	r24, 0xC8	; 200
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	98 a3       	std	Y+32, r25	; 0x20
    2956:	8f 8f       	std	Y+31, r24	; 0x1f
    2958:	8f 8d       	ldd	r24, Y+31	; 0x1f
    295a:	98 a1       	ldd	r25, Y+32	; 0x20
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <LCD_u8StringScroll+0x842>
    2960:	98 a3       	std	Y+32, r25	; 0x20
    2962:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2964:	89 a1       	ldd	r24, Y+33	; 0x21
    2966:	9a a1       	ldd	r25, Y+34	; 0x22
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	9a a3       	std	Y+34, r25	; 0x22
    296c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296e:	89 a1       	ldd	r24, Y+33	; 0x21
    2970:	9a a1       	ldd	r25, Y+34	; 0x22
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	69 f7       	brne	.-38     	; 0x2950 <LCD_u8StringScroll+0x836>
    2976:	14 c0       	rjmp	.+40     	; 0x29a0 <LCD_u8StringScroll+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2978:	6b a1       	ldd	r22, Y+35	; 0x23
    297a:	7c a1       	ldd	r23, Y+36	; 0x24
    297c:	8d a1       	ldd	r24, Y+37	; 0x25
    297e:	9e a1       	ldd	r25, Y+38	; 0x26
    2980:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	9a a3       	std	Y+34, r25	; 0x22
    298a:	89 a3       	std	Y+33, r24	; 0x21
    298c:	89 a1       	ldd	r24, Y+33	; 0x21
    298e:	9a a1       	ldd	r25, Y+34	; 0x22
    2990:	9e 8f       	std	Y+30, r25	; 0x1e
    2992:	8d 8f       	std	Y+29, r24	; 0x1d
    2994:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2996:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <LCD_u8StringScroll+0x87e>
    299c:	9e 8f       	std	Y+30, r25	; 0x1e
    299e:	8d 8f       	std	Y+29, r24	; 0x1d

					/*Clear the LCD*/
					LCD_voidClearLCD();
    29a0:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_voidClearLCD>

					/*Increment Move 2*/
					Local_u8Move2++;
    29a4:	de 01       	movw	r26, r28
    29a6:	a9 5a       	subi	r26, 0xA9	; 169
    29a8:	bf 4f       	sbci	r27, 0xFF	; 255
    29aa:	fe 01       	movw	r30, r28
    29ac:	e9 5a       	subi	r30, 0xA9	; 169
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	80 81       	ld	r24, Z
    29b2:	8f 5f       	subi	r24, 0xFF	; 255
    29b4:	8c 93       	st	X, r24

					/*if Move 2 = 323 the over flow of line two give it its initial value and break the loop*/
					if(Local_u8Move2 == LCD_OV_LINE_2)
    29b6:	fe 01       	movw	r30, r28
    29b8:	e9 5a       	subi	r30, 0xA9	; 169
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	80 81       	ld	r24, Z
    29be:	88 3e       	cpi	r24, 0xE8	; 232
    29c0:	09 f0       	breq	.+2      	; 0x29c4 <LCD_u8StringScroll+0x8aa>
    29c2:	a0 c0       	rjmp	.+320    	; 0x2b04 <LCD_u8StringScroll+0x9ea>
					{
						Local_u8Move2 = LCD_OV_LINE_2 - Copy_u8StrSize;
    29c4:	de 01       	movw	r26, r28
    29c6:	a9 5a       	subi	r26, 0xA9	; 169
    29c8:	bf 4f       	sbci	r27, 0xFF	; 255
    29ca:	fe 01       	movw	r30, r28
    29cc:	e4 5a       	subi	r30, 0xA4	; 164
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	98 ee       	ldi	r25, 0xE8	; 232
    29d2:	80 81       	ld	r24, Z
    29d4:	29 2f       	mov	r18, r25
    29d6:	28 1b       	sub	r18, r24
    29d8:	82 2f       	mov	r24, r18
    29da:	8c 93       	st	X, r24
    29dc:	ca c1       	rjmp	.+916    	; 0x2d72 <LCD_u8StringScroll+0xc58>

				/*else mean string < 16*/
				else
				{
					/*Print the string*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    29de:	fe 01       	movw	r30, r28
    29e0:	e8 5a       	subi	r30, 0xA8	; 168
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	de 01       	movw	r26, r28
    29e6:	a0 5a       	subi	r26, 0xA0	; 160
    29e8:	bf 4f       	sbci	r27, 0xFF	; 255
    29ea:	80 81       	ld	r24, Z
    29ec:	6c 91       	ld	r22, X
    29ee:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    29f2:	fe 01       	movw	r30, r28
    29f4:	e6 5a       	subi	r30, 0xA6	; 166
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	80 81       	ld	r24, Z
    29fa:	91 81       	ldd	r25, Z+1	; 0x01
    29fc:	fe 01       	movw	r30, r28
    29fe:	e4 5a       	subi	r30, 0xA4	; 164
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	60 81       	ld	r22, Z
    2a04:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_u8WriteString>
//					LCD_u8WriteINT(Local_u8Move, 0, 0);
//					LCD_u8WriteINT(Local_u8Move2, 5, 0);
//					LCD_u8WriteINT(Copy_u8StrSize, 10, 0);

					/*Delay the given time*/
					_delay_ms(Copy_u16Time);
    2a08:	fe 01       	movw	r30, r28
    2a0a:	e3 5a       	subi	r30, 0xA3	; 163
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	80 81       	ld	r24, Z
    2a10:	91 81       	ldd	r25, Z+1	; 0x01
    2a12:	cc 01       	movw	r24, r24
    2a14:	a0 e0       	ldi	r26, 0x00	; 0
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	bc 01       	movw	r22, r24
    2a1a:	cd 01       	movw	r24, r26
    2a1c:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	89 8f       	std	Y+25, r24	; 0x19
    2a26:	9a 8f       	std	Y+26, r25	; 0x1a
    2a28:	ab 8f       	std	Y+27, r26	; 0x1b
    2a2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a2c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	4a ef       	ldi	r20, 0xFA	; 250
    2a3a:	54 e4       	ldi	r21, 0x44	; 68
    2a3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	8d 8b       	std	Y+21, r24	; 0x15
    2a46:	9e 8b       	std	Y+22, r25	; 0x16
    2a48:	af 8b       	std	Y+23, r26	; 0x17
    2a4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a50:	8f 89       	ldd	r24, Y+23	; 0x17
    2a52:	98 8d       	ldd	r25, Y+24	; 0x18
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	40 e8       	ldi	r20, 0x80	; 128
    2a5a:	5f e3       	ldi	r21, 0x3F	; 63
    2a5c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a60:	88 23       	and	r24, r24
    2a62:	2c f4       	brge	.+10     	; 0x2a6e <LCD_u8StringScroll+0x954>
		__ticks = 1;
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	9c 8b       	std	Y+20, r25	; 0x14
    2a6a:	8b 8b       	std	Y+19, r24	; 0x13
    2a6c:	3f c0       	rjmp	.+126    	; 0x2aec <LCD_u8StringScroll+0x9d2>
	else if (__tmp > 65535)
    2a6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a70:	7e 89       	ldd	r23, Y+22	; 0x16
    2a72:	8f 89       	ldd	r24, Y+23	; 0x17
    2a74:	98 8d       	ldd	r25, Y+24	; 0x18
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	3f ef       	ldi	r19, 0xFF	; 255
    2a7a:	4f e7       	ldi	r20, 0x7F	; 127
    2a7c:	57 e4       	ldi	r21, 0x47	; 71
    2a7e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a82:	18 16       	cp	r1, r24
    2a84:	4c f5       	brge	.+82     	; 0x2ad8 <LCD_u8StringScroll+0x9be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a86:	69 8d       	ldd	r22, Y+25	; 0x19
    2a88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e2       	ldi	r20, 0x20	; 32
    2a94:	51 e4       	ldi	r21, 0x41	; 65
    2a96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	bc 01       	movw	r22, r24
    2aa0:	cd 01       	movw	r24, r26
    2aa2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	9c 8b       	std	Y+20, r25	; 0x14
    2aac:	8b 8b       	std	Y+19, r24	; 0x13
    2aae:	0f c0       	rjmp	.+30     	; 0x2ace <LCD_u8StringScroll+0x9b4>
    2ab0:	88 ec       	ldi	r24, 0xC8	; 200
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	9a 8b       	std	Y+18, r25	; 0x12
    2ab6:	89 8b       	std	Y+17, r24	; 0x11
    2ab8:	89 89       	ldd	r24, Y+17	; 0x11
    2aba:	9a 89       	ldd	r25, Y+18	; 0x12
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <LCD_u8StringScroll+0x9a2>
    2ac0:	9a 8b       	std	Y+18, r25	; 0x12
    2ac2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac8:	01 97       	sbiw	r24, 0x01	; 1
    2aca:	9c 8b       	std	Y+20, r25	; 0x14
    2acc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ace:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	69 f7       	brne	.-38     	; 0x2ab0 <LCD_u8StringScroll+0x996>
    2ad6:	14 c0       	rjmp	.+40     	; 0x2b00 <LCD_u8StringScroll+0x9e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad8:	6d 89       	ldd	r22, Y+21	; 0x15
    2ada:	7e 89       	ldd	r23, Y+22	; 0x16
    2adc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ade:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	9c 8b       	std	Y+20, r25	; 0x14
    2aea:	8b 8b       	std	Y+19, r24	; 0x13
    2aec:	8b 89       	ldd	r24, Y+19	; 0x13
    2aee:	9c 89       	ldd	r25, Y+20	; 0x14
    2af0:	98 8b       	std	Y+16, r25	; 0x10
    2af2:	8f 87       	std	Y+15, r24	; 0x0f
    2af4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2af6:	98 89       	ldd	r25, Y+16	; 0x10
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	f1 f7       	brne	.-4      	; 0x2af8 <LCD_u8StringScroll+0x9de>
    2afc:	98 8b       	std	Y+16, r25	; 0x10
    2afe:	8f 87       	std	Y+15, r24	; 0x0f

					/*Clear LCD*/
					LCD_voidClearLCD();
    2b00:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_voidClearLCD>
		{
			/*Make the Move2 = Over flow of the second line - string size*/
			Local_u8Move2 = LCD_OV_LINE_2 - Copy_u8StrSize;

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move < LCD_MAX_SCROLL_LINE; Local_u8Move++)
    2b04:	de 01       	movw	r26, r28
    2b06:	a8 5a       	subi	r26, 0xA8	; 168
    2b08:	bf 4f       	sbci	r27, 0xFF	; 255
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	e8 5a       	subi	r30, 0xA8	; 168
    2b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b10:	80 81       	ld	r24, Z
    2b12:	8f 5f       	subi	r24, 0xFF	; 255
    2b14:	8c 93       	st	X, r24
    2b16:	fe 01       	movw	r30, r28
    2b18:	e8 5a       	subi	r30, 0xA8	; 168
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	80 81       	ld	r24, Z
    2b1e:	89 32       	cpi	r24, 0x29	; 41
    2b20:	08 f4       	brcc	.+2      	; 0x2b24 <LCD_u8StringScroll+0xa0a>
    2b22:	84 ce       	rjmp	.-760    	; 0x282c <LCD_u8StringScroll+0x712>
    2b24:	26 c1       	rjmp	.+588    	; 0x2d72 <LCD_u8StringScroll+0xc58>
				}
			}
		}

		/*This if Scrolling is to Left in Line 2*/
		else if(Copy_u8RorL == LCD_SCROLL_TO_LEFT && Copy_u8YPos == 1)
    2b26:	fe 01       	movw	r30, r28
    2b28:	e1 5a       	subi	r30, 0xA1	; 161
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	80 81       	ld	r24, Z
    2b2e:	88 23       	and	r24, r24
    2b30:	09 f0       	breq	.+2      	; 0x2b34 <LCD_u8StringScroll+0xa1a>
    2b32:	1f c1       	rjmp	.+574    	; 0x2d72 <LCD_u8StringScroll+0xc58>
    2b34:	fe 01       	movw	r30, r28
    2b36:	e0 5a       	subi	r30, 0xA0	; 160
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	80 81       	ld	r24, Z
    2b3c:	81 30       	cpi	r24, 0x01	; 1
    2b3e:	09 f0       	breq	.+2      	; 0x2b42 <LCD_u8StringScroll+0xa28>
    2b40:	18 c1       	rjmp	.+560    	; 0x2d72 <LCD_u8StringScroll+0xc58>
		{
			/*Move2 = over flow line 2 + string size + 1 to make space between the last and first char in string */
			Local_u8Move2 = LCD_OV_LINE_2 + (Copy_u8StrSize + 1);
    2b42:	de 01       	movw	r26, r28
    2b44:	a9 5a       	subi	r26, 0xA9	; 169
    2b46:	bf 4f       	sbci	r27, 0xFF	; 255
    2b48:	fe 01       	movw	r30, r28
    2b4a:	e4 5a       	subi	r30, 0xA4	; 164
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	80 81       	ld	r24, Z
    2b50:	87 51       	subi	r24, 0x17	; 23
    2b52:	8c 93       	st	X, r24

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    2b54:	fe 01       	movw	r30, r28
    2b56:	ea 5a       	subi	r30, 0xAA	; 170
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	80 e1       	ldi	r24, 0x10	; 16
    2b5c:	80 83       	st	Z, r24

			/*make the Move = 232 (Over Flow) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_2); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    2b5e:	fe 01       	movw	r30, r28
    2b60:	e8 5a       	subi	r30, 0xA8	; 168
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	88 ee       	ldi	r24, 0xE8	; 232
    2b66:	80 83       	st	Z, r24
    2b68:	f9 c0       	rjmp	.+498    	; 0x2d5c <LCD_u8StringScroll+0xc42>
			{
				/*Print LCD with the Move as X position*/
				LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	e8 5a       	subi	r30, 0xA8	; 168
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	de 01       	movw	r26, r28
    2b72:	a0 5a       	subi	r26, 0xA0	; 160
    2b74:	bf 4f       	sbci	r27, 0xFF	; 255
    2b76:	80 81       	ld	r24, Z
    2b78:	6c 91       	ld	r22, X
    2b7a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
				LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2b7e:	fe 01       	movw	r30, r28
    2b80:	e6 5a       	subi	r30, 0xA6	; 166
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	80 81       	ld	r24, Z
    2b86:	91 81       	ldd	r25, Z+1	; 0x01
    2b88:	fe 01       	movw	r30, r28
    2b8a:	e4 5a       	subi	r30, 0xA4	; 164
    2b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8e:	60 81       	ld	r22, Z
    2b90:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_u8WriteString>

				/*if String size less than 16*/
				if(Copy_u8StrSize < LCD_LINE_NB_OF_DIGITS)
    2b94:	fe 01       	movw	r30, r28
    2b96:	e4 5a       	subi	r30, 0xA4	; 164
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	80 81       	ld	r24, Z
    2b9c:	80 31       	cpi	r24, 0x10	; 16
    2b9e:	f8 f4       	brcc	.+62     	; 0x2bde <LCD_u8StringScroll+0xac4>
				{
					/*print with move 3 as X position*/
					LCD_u8GoToXY(Local_u8Move3 , Copy_u8YPos);
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	ea 5a       	subi	r30, 0xAA	; 170
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	de 01       	movw	r26, r28
    2ba8:	a0 5a       	subi	r26, 0xA0	; 160
    2baa:	bf 4f       	sbci	r27, 0xFF	; 255
    2bac:	80 81       	ld	r24, Z
    2bae:	6c 91       	ld	r22, X
    2bb0:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	e6 5a       	subi	r30, 0xA6	; 166
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	80 81       	ld	r24, Z
    2bbc:	91 81       	ldd	r25, Z+1	; 0x01
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e4 5a       	subi	r30, 0xA4	; 164
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	60 81       	ld	r22, Z
    2bc6:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_u8WriteString>

					/*Decrement Move 3*/
					Local_u8Move3--;
    2bca:	de 01       	movw	r26, r28
    2bcc:	aa 5a       	subi	r26, 0xAA	; 170
    2bce:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	ea 5a       	subi	r30, 0xAA	; 170
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	80 81       	ld	r24, Z
    2bd8:	81 50       	subi	r24, 0x01	; 1
    2bda:	8c 93       	st	X, r24
    2bdc:	1e c0       	rjmp	.+60     	; 0x2c1a <LCD_u8StringScroll+0xb00>

				/*else mean string > 16*/
				else
				{
					/*print with the copy of string size as X position*/
					LCD_u8GoToXY(Copy_u8StringSize, Copy_u8YPos);
    2bde:	fe 01       	movw	r30, r28
    2be0:	eb 5a       	subi	r30, 0xAB	; 171
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	de 01       	movw	r26, r28
    2be6:	a0 5a       	subi	r26, 0xA0	; 160
    2be8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bea:	80 81       	ld	r24, Z
    2bec:	6c 91       	ld	r22, X
    2bee:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	e6 5a       	subi	r30, 0xA6	; 166
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	80 81       	ld	r24, Z
    2bfa:	91 81       	ldd	r25, Z+1	; 0x01
    2bfc:	fe 01       	movw	r30, r28
    2bfe:	e4 5a       	subi	r30, 0xA4	; 164
    2c00:	ff 4f       	sbci	r31, 0xFF	; 255
    2c02:	60 81       	ld	r22, Z
    2c04:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_u8WriteString>

					/*de-crement the copy of the sting size*/
					Copy_u8StringSize--;
    2c08:	de 01       	movw	r26, r28
    2c0a:	ab 5a       	subi	r26, 0xAB	; 171
    2c0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c0e:	fe 01       	movw	r30, r28
    2c10:	eb 5a       	subi	r30, 0xAB	; 171
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	80 81       	ld	r24, Z
    2c16:	81 50       	subi	r24, 0x01	; 1
    2c18:	8c 93       	st	X, r24
//				LCD_u8WriteINT(Local_u8Move, 10, 0);
//				LCD_u8WriteINT(Copy_u8StrSize, 5, 0);
//				LCD_u8WriteINT(Copy_u8StringSize, 1, 0);

				/*Delay the Given time*/
				_delay_ms(Copy_u16Time);
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	e3 5a       	subi	r30, 0xA3	; 163
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	80 81       	ld	r24, Z
    2c22:	91 81       	ldd	r25, Z+1	; 0x01
    2c24:	cc 01       	movw	r24, r24
    2c26:	a0 e0       	ldi	r26, 0x00	; 0
    2c28:	b0 e0       	ldi	r27, 0x00	; 0
    2c2a:	bc 01       	movw	r22, r24
    2c2c:	cd 01       	movw	r24, r26
    2c2e:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	8b 87       	std	Y+11, r24	; 0x0b
    2c38:	9c 87       	std	Y+12, r25	; 0x0c
    2c3a:	ad 87       	std	Y+13, r26	; 0x0d
    2c3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	4a ef       	ldi	r20, 0xFA	; 250
    2c4c:	54 e4       	ldi	r21, 0x44	; 68
    2c4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	8f 83       	std	Y+7, r24	; 0x07
    2c58:	98 87       	std	Y+8, r25	; 0x08
    2c5a:	a9 87       	std	Y+9, r26	; 0x09
    2c5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c60:	78 85       	ldd	r23, Y+8	; 0x08
    2c62:	89 85       	ldd	r24, Y+9	; 0x09
    2c64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e8       	ldi	r20, 0x80	; 128
    2c6c:	5f e3       	ldi	r21, 0x3F	; 63
    2c6e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c72:	88 23       	and	r24, r24
    2c74:	2c f4       	brge	.+10     	; 0x2c80 <LCD_u8StringScroll+0xb66>
		__ticks = 1;
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	9e 83       	std	Y+6, r25	; 0x06
    2c7c:	8d 83       	std	Y+5, r24	; 0x05
    2c7e:	3f c0       	rjmp	.+126    	; 0x2cfe <LCD_u8StringScroll+0xbe4>
	else if (__tmp > 65535)
    2c80:	6f 81       	ldd	r22, Y+7	; 0x07
    2c82:	78 85       	ldd	r23, Y+8	; 0x08
    2c84:	89 85       	ldd	r24, Y+9	; 0x09
    2c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	3f ef       	ldi	r19, 0xFF	; 255
    2c8c:	4f e7       	ldi	r20, 0x7F	; 127
    2c8e:	57 e4       	ldi	r21, 0x47	; 71
    2c90:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c94:	18 16       	cp	r1, r24
    2c96:	4c f5       	brge	.+82     	; 0x2cea <LCD_u8StringScroll+0xbd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e2       	ldi	r20, 0x20	; 32
    2ca6:	51 e4       	ldi	r21, 0x41	; 65
    2ca8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	bc 01       	movw	r22, r24
    2cb2:	cd 01       	movw	r24, r26
    2cb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	9e 83       	std	Y+6, r25	; 0x06
    2cbe:	8d 83       	std	Y+5, r24	; 0x05
    2cc0:	0f c0       	rjmp	.+30     	; 0x2ce0 <LCD_u8StringScroll+0xbc6>
    2cc2:	88 ec       	ldi	r24, 0xC8	; 200
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	9c 83       	std	Y+4, r25	; 0x04
    2cc8:	8b 83       	std	Y+3, r24	; 0x03
    2cca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	f1 f7       	brne	.-4      	; 0x2cce <LCD_u8StringScroll+0xbb4>
    2cd2:	9c 83       	std	Y+4, r25	; 0x04
    2cd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cda:	01 97       	sbiw	r24, 0x01	; 1
    2cdc:	9e 83       	std	Y+6, r25	; 0x06
    2cde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce4:	00 97       	sbiw	r24, 0x00	; 0
    2ce6:	69 f7       	brne	.-38     	; 0x2cc2 <LCD_u8StringScroll+0xba8>
    2ce8:	14 c0       	rjmp	.+40     	; 0x2d12 <LCD_u8StringScroll+0xbf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cea:	6f 81       	ldd	r22, Y+7	; 0x07
    2cec:	78 85       	ldd	r23, Y+8	; 0x08
    2cee:	89 85       	ldd	r24, Y+9	; 0x09
    2cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	9e 83       	std	Y+6, r25	; 0x06
    2cfc:	8d 83       	std	Y+5, r24	; 0x05
    2cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2d00:	9e 81       	ldd	r25, Y+6	; 0x06
    2d02:	9a 83       	std	Y+2, r25	; 0x02
    2d04:	89 83       	std	Y+1, r24	; 0x01
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	f1 f7       	brne	.-4      	; 0x2d0a <LCD_u8StringScroll+0xbf0>
    2d0e:	9a 83       	std	Y+2, r25	; 0x02
    2d10:	89 83       	std	Y+1, r24	; 0x01

				/*Clear LCD*/
				LCD_voidClearLCD();
    2d12:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_voidClearLCD>

				/*if Move 3 = 0 or Copy of string size = 0 re-intiate their value and break the loop*/
				if(Local_u8Move3 == 0 || Copy_u8StringSize == 0)
    2d16:	fe 01       	movw	r30, r28
    2d18:	ea 5a       	subi	r30, 0xAA	; 170
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	80 81       	ld	r24, Z
    2d1e:	88 23       	and	r24, r24
    2d20:	31 f0       	breq	.+12     	; 0x2d2e <LCD_u8StringScroll+0xc14>
    2d22:	fe 01       	movw	r30, r28
    2d24:	eb 5a       	subi	r30, 0xAB	; 171
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	80 81       	ld	r24, Z
    2d2a:	88 23       	and	r24, r24
    2d2c:	71 f4       	brne	.+28     	; 0x2d4a <LCD_u8StringScroll+0xc30>
				{
					Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    2d2e:	fe 01       	movw	r30, r28
    2d30:	ea 5a       	subi	r30, 0xAA	; 170
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	80 e1       	ldi	r24, 0x10	; 16
    2d36:	80 83       	st	Z, r24
					Copy_u8StringSize = Copy_u8StrSize;
    2d38:	de 01       	movw	r26, r28
    2d3a:	ab 5a       	subi	r26, 0xAB	; 171
    2d3c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d3e:	fe 01       	movw	r30, r28
    2d40:	e4 5a       	subi	r30, 0xA4	; 164
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	80 81       	ld	r24, Z
    2d46:	8c 93       	st	X, r24
    2d48:	14 c0       	rjmp	.+40     	; 0x2d72 <LCD_u8StringScroll+0xc58>

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;

			/*make the Move = 232 (Over Flow) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_2); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    2d4a:	de 01       	movw	r26, r28
    2d4c:	a8 5a       	subi	r26, 0xA8	; 168
    2d4e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d50:	fe 01       	movw	r30, r28
    2d52:	e8 5a       	subi	r30, 0xA8	; 168
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	80 81       	ld	r24, Z
    2d58:	81 50       	subi	r24, 0x01	; 1
    2d5a:	8c 93       	st	X, r24
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	e8 5a       	subi	r30, 0xA8	; 168
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	de 01       	movw	r26, r28
    2d64:	a9 5a       	subi	r26, 0xA9	; 169
    2d66:	bf 4f       	sbci	r27, 0xFF	; 255
    2d68:	90 81       	ld	r25, Z
    2d6a:	8c 91       	ld	r24, X
    2d6c:	89 17       	cp	r24, r25
    2d6e:	08 f0       	brcs	.+2      	; 0x2d72 <LCD_u8StringScroll+0xc58>
    2d70:	fc ce       	rjmp	.-520    	; 0x2b6a <LCD_u8StringScroll+0xa50>
			}
		}
	}

	/*return the Error*/
	return Local_u8Error;
    2d72:	fe 01       	movw	r30, r28
    2d74:	e7 5a       	subi	r30, 0xA7	; 167
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	80 81       	ld	r24, Z
}
    2d7a:	c0 5a       	subi	r28, 0xA0	; 160
    2d7c:	df 4f       	sbci	r29, 0xFF	; 255
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61
    2d88:	cf 91       	pop	r28
    2d8a:	df 91       	pop	r29
    2d8c:	1f 91       	pop	r17
    2d8e:	0f 91       	pop	r16
    2d90:	08 95       	ret

00002d92 <main>:
#include <util/delay.h>
#include "DIO_interface.h"
#include "LCD_interface.h"

void main(void)
{
    2d92:	0f 93       	push	r16
    2d94:	df 93       	push	r29
    2d96:	cf 93       	push	r28
    2d98:	cd b7       	in	r28, 0x3d	; 61
    2d9a:	de b7       	in	r29, 0x3e	; 62
    2d9c:	c0 5a       	subi	r28, 0xA0	; 160
    2d9e:	d0 40       	sbci	r29, 0x00	; 0
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	f8 94       	cli
    2da4:	de bf       	out	0x3e, r29	; 62
    2da6:	0f be       	out	0x3f, r0	; 63
    2da8:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Iterator = 0;
    2daa:	1c ae       	std	Y+60, r1	; 0x3c
	u8 Local_u8GO[] = "Game Over";
    2dac:	ce 01       	movw	r24, r28
    2dae:	cd 96       	adiw	r24, 0x3d	; 61
    2db0:	ce 56       	subi	r28, 0x6E	; 110
    2db2:	df 4f       	sbci	r29, 0xFF	; 255
    2db4:	99 83       	std	Y+1, r25	; 0x01
    2db6:	88 83       	st	Y, r24
    2db8:	c2 59       	subi	r28, 0x92	; 146
    2dba:	d0 40       	sbci	r29, 0x00	; 0
    2dbc:	e0 e6       	ldi	r30, 0x60	; 96
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	cc 56       	subi	r28, 0x6C	; 108
    2dc2:	df 4f       	sbci	r29, 0xFF	; 255
    2dc4:	f9 83       	std	Y+1, r31	; 0x01
    2dc6:	e8 83       	st	Y, r30
    2dc8:	c4 59       	subi	r28, 0x94	; 148
    2dca:	d0 40       	sbci	r29, 0x00	; 0
    2dcc:	fa e0       	ldi	r31, 0x0A	; 10
    2dce:	ca 56       	subi	r28, 0x6A	; 106
    2dd0:	df 4f       	sbci	r29, 0xFF	; 255
    2dd2:	f8 83       	st	Y, r31
    2dd4:	c6 59       	subi	r28, 0x96	; 150
    2dd6:	d0 40       	sbci	r29, 0x00	; 0
    2dd8:	cc 56       	subi	r28, 0x6C	; 108
    2dda:	df 4f       	sbci	r29, 0xFF	; 255
    2ddc:	e8 81       	ld	r30, Y
    2dde:	f9 81       	ldd	r31, Y+1	; 0x01
    2de0:	c4 59       	subi	r28, 0x94	; 148
    2de2:	d0 40       	sbci	r29, 0x00	; 0
    2de4:	00 80       	ld	r0, Z
    2de6:	cc 56       	subi	r28, 0x6C	; 108
    2de8:	df 4f       	sbci	r29, 0xFF	; 255
    2dea:	88 81       	ld	r24, Y
    2dec:	99 81       	ldd	r25, Y+1	; 0x01
    2dee:	c4 59       	subi	r28, 0x94	; 148
    2df0:	d0 40       	sbci	r29, 0x00	; 0
    2df2:	01 96       	adiw	r24, 0x01	; 1
    2df4:	cc 56       	subi	r28, 0x6C	; 108
    2df6:	df 4f       	sbci	r29, 0xFF	; 255
    2df8:	99 83       	std	Y+1, r25	; 0x01
    2dfa:	88 83       	st	Y, r24
    2dfc:	c4 59       	subi	r28, 0x94	; 148
    2dfe:	d0 40       	sbci	r29, 0x00	; 0
    2e00:	ce 56       	subi	r28, 0x6E	; 110
    2e02:	df 4f       	sbci	r29, 0xFF	; 255
    2e04:	e8 81       	ld	r30, Y
    2e06:	f9 81       	ldd	r31, Y+1	; 0x01
    2e08:	c2 59       	subi	r28, 0x92	; 146
    2e0a:	d0 40       	sbci	r29, 0x00	; 0
    2e0c:	00 82       	st	Z, r0
    2e0e:	ce 56       	subi	r28, 0x6E	; 110
    2e10:	df 4f       	sbci	r29, 0xFF	; 255
    2e12:	88 81       	ld	r24, Y
    2e14:	99 81       	ldd	r25, Y+1	; 0x01
    2e16:	c2 59       	subi	r28, 0x92	; 146
    2e18:	d0 40       	sbci	r29, 0x00	; 0
    2e1a:	01 96       	adiw	r24, 0x01	; 1
    2e1c:	ce 56       	subi	r28, 0x6E	; 110
    2e1e:	df 4f       	sbci	r29, 0xFF	; 255
    2e20:	99 83       	std	Y+1, r25	; 0x01
    2e22:	88 83       	st	Y, r24
    2e24:	c2 59       	subi	r28, 0x92	; 146
    2e26:	d0 40       	sbci	r29, 0x00	; 0
    2e28:	ca 56       	subi	r28, 0x6A	; 106
    2e2a:	df 4f       	sbci	r29, 0xFF	; 255
    2e2c:	98 81       	ld	r25, Y
    2e2e:	c6 59       	subi	r28, 0x96	; 150
    2e30:	d0 40       	sbci	r29, 0x00	; 0
    2e32:	91 50       	subi	r25, 0x01	; 1
    2e34:	ca 56       	subi	r28, 0x6A	; 106
    2e36:	df 4f       	sbci	r29, 0xFF	; 255
    2e38:	98 83       	st	Y, r25
    2e3a:	c6 59       	subi	r28, 0x96	; 150
    2e3c:	d0 40       	sbci	r29, 0x00	; 0
    2e3e:	ca 56       	subi	r28, 0x6A	; 106
    2e40:	df 4f       	sbci	r29, 0xFF	; 255
    2e42:	e8 81       	ld	r30, Y
    2e44:	c6 59       	subi	r28, 0x96	; 150
    2e46:	d0 40       	sbci	r29, 0x00	; 0
    2e48:	ee 23       	and	r30, r30
    2e4a:	31 f6       	brne	.-116    	; 0x2dd8 <main+0x46>
	u8 Local_u8FatlaDead[] = "Fatla Man is Dead ";
    2e4c:	ce 01       	movw	r24, r28
    2e4e:	89 5b       	subi	r24, 0xB9	; 185
    2e50:	9f 4f       	sbci	r25, 0xFF	; 255
    2e52:	c9 56       	subi	r28, 0x69	; 105
    2e54:	df 4f       	sbci	r29, 0xFF	; 255
    2e56:	99 83       	std	Y+1, r25	; 0x01
    2e58:	88 83       	st	Y, r24
    2e5a:	c7 59       	subi	r28, 0x97	; 151
    2e5c:	d0 40       	sbci	r29, 0x00	; 0
    2e5e:	8a e6       	ldi	r24, 0x6A	; 106
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	c7 56       	subi	r28, 0x67	; 103
    2e64:	df 4f       	sbci	r29, 0xFF	; 255
    2e66:	99 83       	std	Y+1, r25	; 0x01
    2e68:	88 83       	st	Y, r24
    2e6a:	c9 59       	subi	r28, 0x99	; 153
    2e6c:	d0 40       	sbci	r29, 0x00	; 0
    2e6e:	93 e1       	ldi	r25, 0x13	; 19
    2e70:	c5 56       	subi	r28, 0x65	; 101
    2e72:	df 4f       	sbci	r29, 0xFF	; 255
    2e74:	98 83       	st	Y, r25
    2e76:	cb 59       	subi	r28, 0x9B	; 155
    2e78:	d0 40       	sbci	r29, 0x00	; 0
    2e7a:	c7 56       	subi	r28, 0x67	; 103
    2e7c:	df 4f       	sbci	r29, 0xFF	; 255
    2e7e:	e8 81       	ld	r30, Y
    2e80:	f9 81       	ldd	r31, Y+1	; 0x01
    2e82:	c9 59       	subi	r28, 0x99	; 153
    2e84:	d0 40       	sbci	r29, 0x00	; 0
    2e86:	00 80       	ld	r0, Z
    2e88:	c7 56       	subi	r28, 0x67	; 103
    2e8a:	df 4f       	sbci	r29, 0xFF	; 255
    2e8c:	88 81       	ld	r24, Y
    2e8e:	99 81       	ldd	r25, Y+1	; 0x01
    2e90:	c9 59       	subi	r28, 0x99	; 153
    2e92:	d0 40       	sbci	r29, 0x00	; 0
    2e94:	01 96       	adiw	r24, 0x01	; 1
    2e96:	c7 56       	subi	r28, 0x67	; 103
    2e98:	df 4f       	sbci	r29, 0xFF	; 255
    2e9a:	99 83       	std	Y+1, r25	; 0x01
    2e9c:	88 83       	st	Y, r24
    2e9e:	c9 59       	subi	r28, 0x99	; 153
    2ea0:	d0 40       	sbci	r29, 0x00	; 0
    2ea2:	c9 56       	subi	r28, 0x69	; 105
    2ea4:	df 4f       	sbci	r29, 0xFF	; 255
    2ea6:	e8 81       	ld	r30, Y
    2ea8:	f9 81       	ldd	r31, Y+1	; 0x01
    2eaa:	c7 59       	subi	r28, 0x97	; 151
    2eac:	d0 40       	sbci	r29, 0x00	; 0
    2eae:	00 82       	st	Z, r0
    2eb0:	c9 56       	subi	r28, 0x69	; 105
    2eb2:	df 4f       	sbci	r29, 0xFF	; 255
    2eb4:	88 81       	ld	r24, Y
    2eb6:	99 81       	ldd	r25, Y+1	; 0x01
    2eb8:	c7 59       	subi	r28, 0x97	; 151
    2eba:	d0 40       	sbci	r29, 0x00	; 0
    2ebc:	01 96       	adiw	r24, 0x01	; 1
    2ebe:	c9 56       	subi	r28, 0x69	; 105
    2ec0:	df 4f       	sbci	r29, 0xFF	; 255
    2ec2:	99 83       	std	Y+1, r25	; 0x01
    2ec4:	88 83       	st	Y, r24
    2ec6:	c7 59       	subi	r28, 0x97	; 151
    2ec8:	d0 40       	sbci	r29, 0x00	; 0
    2eca:	c5 56       	subi	r28, 0x65	; 101
    2ecc:	df 4f       	sbci	r29, 0xFF	; 255
    2ece:	98 81       	ld	r25, Y
    2ed0:	cb 59       	subi	r28, 0x9B	; 155
    2ed2:	d0 40       	sbci	r29, 0x00	; 0
    2ed4:	91 50       	subi	r25, 0x01	; 1
    2ed6:	c5 56       	subi	r28, 0x65	; 101
    2ed8:	df 4f       	sbci	r29, 0xFF	; 255
    2eda:	98 83       	st	Y, r25
    2edc:	cb 59       	subi	r28, 0x9B	; 155
    2ede:	d0 40       	sbci	r29, 0x00	; 0
    2ee0:	c5 56       	subi	r28, 0x65	; 101
    2ee2:	df 4f       	sbci	r29, 0xFF	; 255
    2ee4:	e8 81       	ld	r30, Y
    2ee6:	cb 59       	subi	r28, 0x9B	; 155
    2ee8:	d0 40       	sbci	r29, 0x00	; 0
    2eea:	ee 23       	and	r30, r30
    2eec:	31 f6       	brne	.-116    	; 0x2e7a <main+0xe8>
	u8 Local_u8GOSize = (sizeof(Local_u8GO) - 1);
    2eee:	89 e0       	ldi	r24, 0x09	; 9
    2ef0:	8b af       	std	Y+59, r24	; 0x3b
	u8 Local_u8FatlaSize = (sizeof(Local_u8FatlaDead) - 1);
    2ef2:	82 e1       	ldi	r24, 0x12	; 18
    2ef4:	8a af       	std	Y+58, r24	; 0x3a
							0b01110,
							0b00100,
							0b00100,
							0b01110,
							0b10001
									};
    2ef6:	ce 01       	movw	r24, r28
    2ef8:	86 5a       	subi	r24, 0xA6	; 166
    2efa:	9f 4f       	sbci	r25, 0xFF	; 255
    2efc:	c4 56       	subi	r28, 0x64	; 100
    2efe:	df 4f       	sbci	r29, 0xFF	; 255
    2f00:	99 83       	std	Y+1, r25	; 0x01
    2f02:	88 83       	st	Y, r24
    2f04:	cc 59       	subi	r28, 0x9C	; 156
    2f06:	d0 40       	sbci	r29, 0x00	; 0
    2f08:	85 e8       	ldi	r24, 0x85	; 133
    2f0a:	91 e0       	ldi	r25, 0x01	; 1
    2f0c:	c2 56       	subi	r28, 0x62	; 98
    2f0e:	df 4f       	sbci	r29, 0xFF	; 255
    2f10:	99 83       	std	Y+1, r25	; 0x01
    2f12:	88 83       	st	Y, r24
    2f14:	ce 59       	subi	r28, 0x9E	; 158
    2f16:	d0 40       	sbci	r29, 0x00	; 0
    2f18:	98 e3       	ldi	r25, 0x38	; 56
    2f1a:	c0 56       	subi	r28, 0x60	; 96
    2f1c:	df 4f       	sbci	r29, 0xFF	; 255
    2f1e:	98 83       	st	Y, r25
    2f20:	c0 5a       	subi	r28, 0xA0	; 160
    2f22:	d0 40       	sbci	r29, 0x00	; 0
    2f24:	c2 56       	subi	r28, 0x62	; 98
    2f26:	df 4f       	sbci	r29, 0xFF	; 255
    2f28:	e8 81       	ld	r30, Y
    2f2a:	f9 81       	ldd	r31, Y+1	; 0x01
    2f2c:	ce 59       	subi	r28, 0x9E	; 158
    2f2e:	d0 40       	sbci	r29, 0x00	; 0
    2f30:	00 80       	ld	r0, Z
    2f32:	c2 56       	subi	r28, 0x62	; 98
    2f34:	df 4f       	sbci	r29, 0xFF	; 255
    2f36:	88 81       	ld	r24, Y
    2f38:	99 81       	ldd	r25, Y+1	; 0x01
    2f3a:	ce 59       	subi	r28, 0x9E	; 158
    2f3c:	d0 40       	sbci	r29, 0x00	; 0
    2f3e:	01 96       	adiw	r24, 0x01	; 1
    2f40:	c2 56       	subi	r28, 0x62	; 98
    2f42:	df 4f       	sbci	r29, 0xFF	; 255
    2f44:	99 83       	std	Y+1, r25	; 0x01
    2f46:	88 83       	st	Y, r24
    2f48:	ce 59       	subi	r28, 0x9E	; 158
    2f4a:	d0 40       	sbci	r29, 0x00	; 0
    2f4c:	c4 56       	subi	r28, 0x64	; 100
    2f4e:	df 4f       	sbci	r29, 0xFF	; 255
    2f50:	e8 81       	ld	r30, Y
    2f52:	f9 81       	ldd	r31, Y+1	; 0x01
    2f54:	cc 59       	subi	r28, 0x9C	; 156
    2f56:	d0 40       	sbci	r29, 0x00	; 0
    2f58:	00 82       	st	Z, r0
    2f5a:	c4 56       	subi	r28, 0x64	; 100
    2f5c:	df 4f       	sbci	r29, 0xFF	; 255
    2f5e:	88 81       	ld	r24, Y
    2f60:	99 81       	ldd	r25, Y+1	; 0x01
    2f62:	cc 59       	subi	r28, 0x9C	; 156
    2f64:	d0 40       	sbci	r29, 0x00	; 0
    2f66:	01 96       	adiw	r24, 0x01	; 1
    2f68:	c4 56       	subi	r28, 0x64	; 100
    2f6a:	df 4f       	sbci	r29, 0xFF	; 255
    2f6c:	99 83       	std	Y+1, r25	; 0x01
    2f6e:	88 83       	st	Y, r24
    2f70:	cc 59       	subi	r28, 0x9C	; 156
    2f72:	d0 40       	sbci	r29, 0x00	; 0
    2f74:	c0 56       	subi	r28, 0x60	; 96
    2f76:	df 4f       	sbci	r29, 0xFF	; 255
    2f78:	98 81       	ld	r25, Y
    2f7a:	c0 5a       	subi	r28, 0xA0	; 160
    2f7c:	d0 40       	sbci	r29, 0x00	; 0
    2f7e:	91 50       	subi	r25, 0x01	; 1
    2f80:	c0 56       	subi	r28, 0x60	; 96
    2f82:	df 4f       	sbci	r29, 0xFF	; 255
    2f84:	98 83       	st	Y, r25
    2f86:	c0 5a       	subi	r28, 0xA0	; 160
    2f88:	d0 40       	sbci	r29, 0x00	; 0
    2f8a:	c0 56       	subi	r28, 0x60	; 96
    2f8c:	df 4f       	sbci	r29, 0xFF	; 255
    2f8e:	e8 81       	ld	r30, Y
    2f90:	c0 5a       	subi	r28, 0xA0	; 160
    2f92:	d0 40       	sbci	r29, 0x00	; 0
    2f94:	ee 23       	and	r30, r30
    2f96:	31 f6       	brne	.-116    	; 0x2f24 <main+0x192>
	u8 Local_u8StringSize = (sizeof(Local_u8String) - 1);
    2f98:	87 e3       	ldi	r24, 0x37	; 55
    2f9a:	89 af       	std	Y+57, r24	; 0x39

	DIO_u8SetPortDirection(LCD_DATA_PORT, DIO_MAX_PORT_VALUE);
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	6f ef       	ldi	r22, 0xFF	; 255
    2fa0:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_OUTPUT);
    2fa4:	82 e0       	ldi	r24, 0x02	; 2
    2fa6:	60 e0       	ldi	r22, 0x00	; 0
    2fa8:	41 e0       	ldi	r20, 0x01	; 1
    2faa:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_OUTPUT);
    2fae:	82 e0       	ldi	r24, 0x02	; 2
    2fb0:	61 e0       	ldi	r22, 0x01	; 1
    2fb2:	41 e0       	ldi	r20, 0x01	; 1
    2fb4:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_E_PIN, DIO_OUTPUT);
    2fb8:	82 e0       	ldi	r24, 0x02	; 2
    2fba:	62 e0       	ldi	r22, 0x02	; 2
    2fbc:	41 e0       	ldi	r20, 0x01	; 1
    2fbe:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinDirection>

	LCD_voidInitialization();
    2fc2:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LCD_voidInitialization>

	LCD_u8WriteSpecialChar(Local_u8String, Local_u8StringSize);
    2fc6:	ce 01       	movw	r24, r28
    2fc8:	86 5a       	subi	r24, 0xA6	; 166
    2fca:	9f 4f       	sbci	r25, 0xFF	; 255
    2fcc:	69 ad       	ldd	r22, Y+57	; 0x39
    2fce:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_u8WriteSpecialChar>

	while(1)
	{
		LCD_u8GoToXY(0, 0);	//Fatla Killer
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	60 e0       	ldi	r22, 0x00	; 0
    2fd6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
		LCD_voidWriteData(0);
    2fda:	80 e0       	ldi	r24, 0x00	; 0
    2fdc:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>

		LCD_u8GoToXY(1 , 0);	//PISTOL
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	60 e0       	ldi	r22, 0x00	; 0
    2fe4:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
		LCD_voidWriteData(1);
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>

		LCD_u8GoToXY(2, 0);		//First bullet
    2fee:	82 e0       	ldi	r24, 0x02	; 2
    2ff0:	60 e0       	ldi	r22, 0x00	; 0
    2ff2:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
		LCD_voidWriteData(2);
    2ff6:	82 e0       	ldi	r24, 0x02	; 2
    2ff8:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>

		LCD_u8GoToXY(15, 0);	//Fatla Incieont
    2ffc:	8f e0       	ldi	r24, 0x0F	; 15
    2ffe:	60 e0       	ldi	r22, 0x00	; 0
    3000:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
		LCD_voidWriteData(6);
    3004:	86 e0       	ldi	r24, 0x06	; 6
    3006:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	a6 e9       	ldi	r26, 0x96	; 150
    3010:	b3 e4       	ldi	r27, 0x43	; 67
    3012:	8d ab       	std	Y+53, r24	; 0x35
    3014:	9e ab       	std	Y+54, r25	; 0x36
    3016:	af ab       	std	Y+55, r26	; 0x37
    3018:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301a:	6d a9       	ldd	r22, Y+53	; 0x35
    301c:	7e a9       	ldd	r23, Y+54	; 0x36
    301e:	8f a9       	ldd	r24, Y+55	; 0x37
    3020:	98 ad       	ldd	r25, Y+56	; 0x38
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	4a ef       	ldi	r20, 0xFA	; 250
    3028:	54 e4       	ldi	r21, 0x44	; 68
    302a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	89 ab       	std	Y+49, r24	; 0x31
    3034:	9a ab       	std	Y+50, r25	; 0x32
    3036:	ab ab       	std	Y+51, r26	; 0x33
    3038:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    303a:	69 a9       	ldd	r22, Y+49	; 0x31
    303c:	7a a9       	ldd	r23, Y+50	; 0x32
    303e:	8b a9       	ldd	r24, Y+51	; 0x33
    3040:	9c a9       	ldd	r25, Y+52	; 0x34
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	40 e8       	ldi	r20, 0x80	; 128
    3048:	5f e3       	ldi	r21, 0x3F	; 63
    304a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    304e:	88 23       	and	r24, r24
    3050:	2c f4       	brge	.+10     	; 0x305c <main+0x2ca>
		__ticks = 1;
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	98 ab       	std	Y+48, r25	; 0x30
    3058:	8f a7       	std	Y+47, r24	; 0x2f
    305a:	3f c0       	rjmp	.+126    	; 0x30da <main+0x348>
	else if (__tmp > 65535)
    305c:	69 a9       	ldd	r22, Y+49	; 0x31
    305e:	7a a9       	ldd	r23, Y+50	; 0x32
    3060:	8b a9       	ldd	r24, Y+51	; 0x33
    3062:	9c a9       	ldd	r25, Y+52	; 0x34
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	3f ef       	ldi	r19, 0xFF	; 255
    3068:	4f e7       	ldi	r20, 0x7F	; 127
    306a:	57 e4       	ldi	r21, 0x47	; 71
    306c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3070:	18 16       	cp	r1, r24
    3072:	4c f5       	brge	.+82     	; 0x30c6 <main+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3074:	6d a9       	ldd	r22, Y+53	; 0x35
    3076:	7e a9       	ldd	r23, Y+54	; 0x36
    3078:	8f a9       	ldd	r24, Y+55	; 0x37
    307a:	98 ad       	ldd	r25, Y+56	; 0x38
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e2       	ldi	r20, 0x20	; 32
    3082:	51 e4       	ldi	r21, 0x41	; 65
    3084:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	bc 01       	movw	r22, r24
    308e:	cd 01       	movw	r24, r26
    3090:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	98 ab       	std	Y+48, r25	; 0x30
    309a:	8f a7       	std	Y+47, r24	; 0x2f
    309c:	0f c0       	rjmp	.+30     	; 0x30bc <main+0x32a>
    309e:	88 ec       	ldi	r24, 0xC8	; 200
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	9e a7       	std	Y+46, r25	; 0x2e
    30a4:	8d a7       	std	Y+45, r24	; 0x2d
    30a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    30a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	f1 f7       	brne	.-4      	; 0x30aa <main+0x318>
    30ae:	9e a7       	std	Y+46, r25	; 0x2e
    30b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    30b4:	98 a9       	ldd	r25, Y+48	; 0x30
    30b6:	01 97       	sbiw	r24, 0x01	; 1
    30b8:	98 ab       	std	Y+48, r25	; 0x30
    30ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    30be:	98 a9       	ldd	r25, Y+48	; 0x30
    30c0:	00 97       	sbiw	r24, 0x00	; 0
    30c2:	69 f7       	brne	.-38     	; 0x309e <main+0x30c>
    30c4:	14 c0       	rjmp	.+40     	; 0x30ee <main+0x35c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c6:	69 a9       	ldd	r22, Y+49	; 0x31
    30c8:	7a a9       	ldd	r23, Y+50	; 0x32
    30ca:	8b a9       	ldd	r24, Y+51	; 0x33
    30cc:	9c a9       	ldd	r25, Y+52	; 0x34
    30ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	98 ab       	std	Y+48, r25	; 0x30
    30d8:	8f a7       	std	Y+47, r24	; 0x2f
    30da:	8f a5       	ldd	r24, Y+47	; 0x2f
    30dc:	98 a9       	ldd	r25, Y+48	; 0x30
    30de:	9c a7       	std	Y+44, r25	; 0x2c
    30e0:	8b a7       	std	Y+43, r24	; 0x2b
    30e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    30e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	f1 f7       	brne	.-4      	; 0x30e6 <main+0x354>
    30ea:	9c a7       	std	Y+44, r25	; 0x2c
    30ec:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(300);

		for(Local_u8Iterator = 3; Local_u8Iterator < 14; Local_u8Iterator++)
    30ee:	83 e0       	ldi	r24, 0x03	; 3
    30f0:	8c af       	std	Y+60, r24	; 0x3c
    30f2:	93 c0       	rjmp	.+294    	; 0x321a <main+0x488>
		{
			LCD_voidClearLCD();
    30f4:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_voidClearLCD>



			LCD_u8GoToXY(0, 0);		//killer
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	60 e0       	ldi	r22, 0x00	; 0
    30fc:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
			LCD_voidWriteData(0);
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>

			LCD_u8GoToXY(1 , 0);	//pistol
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	60 e0       	ldi	r22, 0x00	; 0
    310a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
			LCD_voidWriteData(1);
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>

			LCD_u8GoToXY(15, 0);	//Fatla Incieont
    3114:	8f e0       	ldi	r24, 0x0F	; 15
    3116:	60 e0       	ldi	r22, 0x00	; 0
    3118:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
			LCD_voidWriteData(6);
    311c:	86 e0       	ldi	r24, 0x06	; 6
    311e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>

			LCD_u8GoToXY(Local_u8Iterator, 0);
    3122:	8c ad       	ldd	r24, Y+60	; 0x3c
    3124:	60 e0       	ldi	r22, 0x00	; 0
    3126:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
			LCD_voidWriteData(3);
    312a:	83 e0       	ldi	r24, 0x03	; 3
    312c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	a6 e9       	ldi	r26, 0x96	; 150
    3136:	b3 e4       	ldi	r27, 0x43	; 67
    3138:	8f a3       	std	Y+39, r24	; 0x27
    313a:	98 a7       	std	Y+40, r25	; 0x28
    313c:	a9 a7       	std	Y+41, r26	; 0x29
    313e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3140:	6f a1       	ldd	r22, Y+39	; 0x27
    3142:	78 a5       	ldd	r23, Y+40	; 0x28
    3144:	89 a5       	ldd	r24, Y+41	; 0x29
    3146:	9a a5       	ldd	r25, Y+42	; 0x2a
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	4a ef       	ldi	r20, 0xFA	; 250
    314e:	54 e4       	ldi	r21, 0x44	; 68
    3150:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	8b a3       	std	Y+35, r24	; 0x23
    315a:	9c a3       	std	Y+36, r25	; 0x24
    315c:	ad a3       	std	Y+37, r26	; 0x25
    315e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3160:	6b a1       	ldd	r22, Y+35	; 0x23
    3162:	7c a1       	ldd	r23, Y+36	; 0x24
    3164:	8d a1       	ldd	r24, Y+37	; 0x25
    3166:	9e a1       	ldd	r25, Y+38	; 0x26
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	40 e8       	ldi	r20, 0x80	; 128
    316e:	5f e3       	ldi	r21, 0x3F	; 63
    3170:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3174:	88 23       	and	r24, r24
    3176:	2c f4       	brge	.+10     	; 0x3182 <main+0x3f0>
		__ticks = 1;
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	9a a3       	std	Y+34, r25	; 0x22
    317e:	89 a3       	std	Y+33, r24	; 0x21
    3180:	3f c0       	rjmp	.+126    	; 0x3200 <main+0x46e>
	else if (__tmp > 65535)
    3182:	6b a1       	ldd	r22, Y+35	; 0x23
    3184:	7c a1       	ldd	r23, Y+36	; 0x24
    3186:	8d a1       	ldd	r24, Y+37	; 0x25
    3188:	9e a1       	ldd	r25, Y+38	; 0x26
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	3f ef       	ldi	r19, 0xFF	; 255
    318e:	4f e7       	ldi	r20, 0x7F	; 127
    3190:	57 e4       	ldi	r21, 0x47	; 71
    3192:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3196:	18 16       	cp	r1, r24
    3198:	4c f5       	brge	.+82     	; 0x31ec <main+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    319a:	6f a1       	ldd	r22, Y+39	; 0x27
    319c:	78 a5       	ldd	r23, Y+40	; 0x28
    319e:	89 a5       	ldd	r24, Y+41	; 0x29
    31a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    31a2:	20 e0       	ldi	r18, 0x00	; 0
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	40 e2       	ldi	r20, 0x20	; 32
    31a8:	51 e4       	ldi	r21, 0x41	; 65
    31aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	bc 01       	movw	r22, r24
    31b4:	cd 01       	movw	r24, r26
    31b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	9a a3       	std	Y+34, r25	; 0x22
    31c0:	89 a3       	std	Y+33, r24	; 0x21
    31c2:	0f c0       	rjmp	.+30     	; 0x31e2 <main+0x450>
    31c4:	88 ec       	ldi	r24, 0xC8	; 200
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	98 a3       	std	Y+32, r25	; 0x20
    31ca:	8f 8f       	std	Y+31, r24	; 0x1f
    31cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31ce:	98 a1       	ldd	r25, Y+32	; 0x20
    31d0:	01 97       	sbiw	r24, 0x01	; 1
    31d2:	f1 f7       	brne	.-4      	; 0x31d0 <main+0x43e>
    31d4:	98 a3       	std	Y+32, r25	; 0x20
    31d6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d8:	89 a1       	ldd	r24, Y+33	; 0x21
    31da:	9a a1       	ldd	r25, Y+34	; 0x22
    31dc:	01 97       	sbiw	r24, 0x01	; 1
    31de:	9a a3       	std	Y+34, r25	; 0x22
    31e0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e2:	89 a1       	ldd	r24, Y+33	; 0x21
    31e4:	9a a1       	ldd	r25, Y+34	; 0x22
    31e6:	00 97       	sbiw	r24, 0x00	; 0
    31e8:	69 f7       	brne	.-38     	; 0x31c4 <main+0x432>
    31ea:	14 c0       	rjmp	.+40     	; 0x3214 <main+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ec:	6b a1       	ldd	r22, Y+35	; 0x23
    31ee:	7c a1       	ldd	r23, Y+36	; 0x24
    31f0:	8d a1       	ldd	r24, Y+37	; 0x25
    31f2:	9e a1       	ldd	r25, Y+38	; 0x26
    31f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31f8:	dc 01       	movw	r26, r24
    31fa:	cb 01       	movw	r24, r22
    31fc:	9a a3       	std	Y+34, r25	; 0x22
    31fe:	89 a3       	std	Y+33, r24	; 0x21
    3200:	89 a1       	ldd	r24, Y+33	; 0x21
    3202:	9a a1       	ldd	r25, Y+34	; 0x22
    3204:	9e 8f       	std	Y+30, r25	; 0x1e
    3206:	8d 8f       	std	Y+29, r24	; 0x1d
    3208:	8d 8d       	ldd	r24, Y+29	; 0x1d
    320a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    320c:	01 97       	sbiw	r24, 0x01	; 1
    320e:	f1 f7       	brne	.-4      	; 0x320c <main+0x47a>
    3210:	9e 8f       	std	Y+30, r25	; 0x1e
    3212:	8d 8f       	std	Y+29, r24	; 0x1d

		LCD_u8GoToXY(15, 0);	//Fatla Incieont
		LCD_voidWriteData(6);
		_delay_ms(300);

		for(Local_u8Iterator = 3; Local_u8Iterator < 14; Local_u8Iterator++)
    3214:	8c ad       	ldd	r24, Y+60	; 0x3c
    3216:	8f 5f       	subi	r24, 0xFF	; 255
    3218:	8c af       	std	Y+60, r24	; 0x3c
    321a:	8c ad       	ldd	r24, Y+60	; 0x3c
    321c:	8e 30       	cpi	r24, 0x0E	; 14
    321e:	08 f4       	brcc	.+2      	; 0x3222 <main+0x490>
    3220:	69 cf       	rjmp	.-302    	; 0x30f4 <main+0x362>
			LCD_voidWriteData(3);

			_delay_ms(300);
		}

		if(Local_u8Iterator == 14)
    3222:	8c ad       	ldd	r24, Y+60	; 0x3c
    3224:	8e 30       	cpi	r24, 0x0E	; 14
    3226:	09 f0       	breq	.+2      	; 0x322a <main+0x498>
    3228:	22 c1       	rjmp	.+580    	; 0x346e <main+0x6dc>
		{
			LCD_voidClearLCD();
    322a:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_voidClearLCD>

			LCD_u8GoToXY(0, 0); //killer
    322e:	80 e0       	ldi	r24, 0x00	; 0
    3230:	60 e0       	ldi	r22, 0x00	; 0
    3232:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
			LCD_voidWriteData(0);
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>

			LCD_u8GoToXY(1 , 0);	//Pistol
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	60 e0       	ldi	r22, 0x00	; 0
    3240:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
			LCD_voidWriteData(1);
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>

			LCD_u8GoToXY(Local_u8Iterator, 0);
    324a:	8c ad       	ldd	r24, Y+60	; 0x3c
    324c:	60 e0       	ldi	r22, 0x00	; 0
    324e:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
			LCD_voidWriteData(2);
    3252:	82 e0       	ldi	r24, 0x02	; 2
    3254:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>

			LCD_u8GoToXY(15, 0);	//Fatla Incieont
    3258:	8f e0       	ldi	r24, 0x0F	; 15
    325a:	60 e0       	ldi	r22, 0x00	; 0
    325c:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
			LCD_voidWriteData(6);
    3260:	86 e0       	ldi	r24, 0x06	; 6
    3262:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	a6 e9       	ldi	r26, 0x96	; 150
    326c:	b3 e4       	ldi	r27, 0x43	; 67
    326e:	89 8f       	std	Y+25, r24	; 0x19
    3270:	9a 8f       	std	Y+26, r25	; 0x1a
    3272:	ab 8f       	std	Y+27, r26	; 0x1b
    3274:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3276:	69 8d       	ldd	r22, Y+25	; 0x19
    3278:	7a 8d       	ldd	r23, Y+26	; 0x1a
    327a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    327c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	4a ef       	ldi	r20, 0xFA	; 250
    3284:	54 e4       	ldi	r21, 0x44	; 68
    3286:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	8d 8b       	std	Y+21, r24	; 0x15
    3290:	9e 8b       	std	Y+22, r25	; 0x16
    3292:	af 8b       	std	Y+23, r26	; 0x17
    3294:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3296:	6d 89       	ldd	r22, Y+21	; 0x15
    3298:	7e 89       	ldd	r23, Y+22	; 0x16
    329a:	8f 89       	ldd	r24, Y+23	; 0x17
    329c:	98 8d       	ldd	r25, Y+24	; 0x18
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	40 e8       	ldi	r20, 0x80	; 128
    32a4:	5f e3       	ldi	r21, 0x3F	; 63
    32a6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    32aa:	88 23       	and	r24, r24
    32ac:	2c f4       	brge	.+10     	; 0x32b8 <main+0x526>
		__ticks = 1;
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	9c 8b       	std	Y+20, r25	; 0x14
    32b4:	8b 8b       	std	Y+19, r24	; 0x13
    32b6:	3f c0       	rjmp	.+126    	; 0x3336 <main+0x5a4>
	else if (__tmp > 65535)
    32b8:	6d 89       	ldd	r22, Y+21	; 0x15
    32ba:	7e 89       	ldd	r23, Y+22	; 0x16
    32bc:	8f 89       	ldd	r24, Y+23	; 0x17
    32be:	98 8d       	ldd	r25, Y+24	; 0x18
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	3f ef       	ldi	r19, 0xFF	; 255
    32c4:	4f e7       	ldi	r20, 0x7F	; 127
    32c6:	57 e4       	ldi	r21, 0x47	; 71
    32c8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    32cc:	18 16       	cp	r1, r24
    32ce:	4c f5       	brge	.+82     	; 0x3322 <main+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d0:	69 8d       	ldd	r22, Y+25	; 0x19
    32d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	40 e2       	ldi	r20, 0x20	; 32
    32de:	51 e4       	ldi	r21, 0x41	; 65
    32e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	bc 01       	movw	r22, r24
    32ea:	cd 01       	movw	r24, r26
    32ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	9c 8b       	std	Y+20, r25	; 0x14
    32f6:	8b 8b       	std	Y+19, r24	; 0x13
    32f8:	0f c0       	rjmp	.+30     	; 0x3318 <main+0x586>
    32fa:	88 ec       	ldi	r24, 0xC8	; 200
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	9a 8b       	std	Y+18, r25	; 0x12
    3300:	89 8b       	std	Y+17, r24	; 0x11
    3302:	89 89       	ldd	r24, Y+17	; 0x11
    3304:	9a 89       	ldd	r25, Y+18	; 0x12
    3306:	01 97       	sbiw	r24, 0x01	; 1
    3308:	f1 f7       	brne	.-4      	; 0x3306 <main+0x574>
    330a:	9a 8b       	std	Y+18, r25	; 0x12
    330c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    330e:	8b 89       	ldd	r24, Y+19	; 0x13
    3310:	9c 89       	ldd	r25, Y+20	; 0x14
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	9c 8b       	std	Y+20, r25	; 0x14
    3316:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3318:	8b 89       	ldd	r24, Y+19	; 0x13
    331a:	9c 89       	ldd	r25, Y+20	; 0x14
    331c:	00 97       	sbiw	r24, 0x00	; 0
    331e:	69 f7       	brne	.-38     	; 0x32fa <main+0x568>
    3320:	14 c0       	rjmp	.+40     	; 0x334a <main+0x5b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3322:	6d 89       	ldd	r22, Y+21	; 0x15
    3324:	7e 89       	ldd	r23, Y+22	; 0x16
    3326:	8f 89       	ldd	r24, Y+23	; 0x17
    3328:	98 8d       	ldd	r25, Y+24	; 0x18
    332a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	9c 8b       	std	Y+20, r25	; 0x14
    3334:	8b 8b       	std	Y+19, r24	; 0x13
    3336:	8b 89       	ldd	r24, Y+19	; 0x13
    3338:	9c 89       	ldd	r25, Y+20	; 0x14
    333a:	98 8b       	std	Y+16, r25	; 0x10
    333c:	8f 87       	std	Y+15, r24	; 0x0f
    333e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3340:	98 89       	ldd	r25, Y+16	; 0x10
    3342:	01 97       	sbiw	r24, 0x01	; 1
    3344:	f1 f7       	brne	.-4      	; 0x3342 <main+0x5b0>
    3346:	98 8b       	std	Y+16, r25	; 0x10
    3348:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(300);

			LCD_voidClearLCD();
    334a:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_voidClearLCD>

			LCD_u8GoToXY(0, 0); //killer
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	60 e0       	ldi	r22, 0x00	; 0
    3352:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
			LCD_voidWriteData(0);
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>

			LCD_u8GoToXY(1 , 0);	//Pistol
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	60 e0       	ldi	r22, 0x00	; 0
    3360:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
			LCD_voidWriteData(1);
    3364:	81 e0       	ldi	r24, 0x01	; 1
    3366:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>

			LCD_u8GoToXY(14, 0);
    336a:	8e e0       	ldi	r24, 0x0E	; 14
    336c:	60 e0       	ldi	r22, 0x00	; 0
    336e:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
			LCD_voidWriteData(4);
    3372:	84 e0       	ldi	r24, 0x04	; 4
    3374:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>

			LCD_u8GoToXY(15, 0);
    3378:	8f e0       	ldi	r24, 0x0F	; 15
    337a:	60 e0       	ldi	r22, 0x00	; 0
    337c:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_u8GoToXY>
			LCD_voidWriteData(5);
    3380:	85 e0       	ldi	r24, 0x05	; 5
    3382:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_voidWriteData>
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	a6 e9       	ldi	r26, 0x96	; 150
    338c:	b3 e4       	ldi	r27, 0x43	; 67
    338e:	8b 87       	std	Y+11, r24	; 0x0b
    3390:	9c 87       	std	Y+12, r25	; 0x0c
    3392:	ad 87       	std	Y+13, r26	; 0x0d
    3394:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3396:	6b 85       	ldd	r22, Y+11	; 0x0b
    3398:	7c 85       	ldd	r23, Y+12	; 0x0c
    339a:	8d 85       	ldd	r24, Y+13	; 0x0d
    339c:	9e 85       	ldd	r25, Y+14	; 0x0e
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	4a ef       	ldi	r20, 0xFA	; 250
    33a4:	54 e4       	ldi	r21, 0x44	; 68
    33a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	8f 83       	std	Y+7, r24	; 0x07
    33b0:	98 87       	std	Y+8, r25	; 0x08
    33b2:	a9 87       	std	Y+9, r26	; 0x09
    33b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33b6:	6f 81       	ldd	r22, Y+7	; 0x07
    33b8:	78 85       	ldd	r23, Y+8	; 0x08
    33ba:	89 85       	ldd	r24, Y+9	; 0x09
    33bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	40 e8       	ldi	r20, 0x80	; 128
    33c4:	5f e3       	ldi	r21, 0x3F	; 63
    33c6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    33ca:	88 23       	and	r24, r24
    33cc:	2c f4       	brge	.+10     	; 0x33d8 <main+0x646>
		__ticks = 1;
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	9e 83       	std	Y+6, r25	; 0x06
    33d4:	8d 83       	std	Y+5, r24	; 0x05
    33d6:	3f c0       	rjmp	.+126    	; 0x3456 <main+0x6c4>
	else if (__tmp > 65535)
    33d8:	6f 81       	ldd	r22, Y+7	; 0x07
    33da:	78 85       	ldd	r23, Y+8	; 0x08
    33dc:	89 85       	ldd	r24, Y+9	; 0x09
    33de:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	3f ef       	ldi	r19, 0xFF	; 255
    33e4:	4f e7       	ldi	r20, 0x7F	; 127
    33e6:	57 e4       	ldi	r21, 0x47	; 71
    33e8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    33ec:	18 16       	cp	r1, r24
    33ee:	4c f5       	brge	.+82     	; 0x3442 <main+0x6b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e2       	ldi	r20, 0x20	; 32
    33fe:	51 e4       	ldi	r21, 0x41	; 65
    3400:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	bc 01       	movw	r22, r24
    340a:	cd 01       	movw	r24, r26
    340c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	9e 83       	std	Y+6, r25	; 0x06
    3416:	8d 83       	std	Y+5, r24	; 0x05
    3418:	0f c0       	rjmp	.+30     	; 0x3438 <main+0x6a6>
    341a:	88 ec       	ldi	r24, 0xC8	; 200
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	9c 83       	std	Y+4, r25	; 0x04
    3420:	8b 83       	std	Y+3, r24	; 0x03
    3422:	8b 81       	ldd	r24, Y+3	; 0x03
    3424:	9c 81       	ldd	r25, Y+4	; 0x04
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <main+0x694>
    342a:	9c 83       	std	Y+4, r25	; 0x04
    342c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342e:	8d 81       	ldd	r24, Y+5	; 0x05
    3430:	9e 81       	ldd	r25, Y+6	; 0x06
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	9e 83       	std	Y+6, r25	; 0x06
    3436:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3438:	8d 81       	ldd	r24, Y+5	; 0x05
    343a:	9e 81       	ldd	r25, Y+6	; 0x06
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	69 f7       	brne	.-38     	; 0x341a <main+0x688>
    3440:	14 c0       	rjmp	.+40     	; 0x346a <main+0x6d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3442:	6f 81       	ldd	r22, Y+7	; 0x07
    3444:	78 85       	ldd	r23, Y+8	; 0x08
    3446:	89 85       	ldd	r24, Y+9	; 0x09
    3448:	9a 85       	ldd	r25, Y+10	; 0x0a
    344a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	9e 83       	std	Y+6, r25	; 0x06
    3454:	8d 83       	std	Y+5, r24	; 0x05
    3456:	8d 81       	ldd	r24, Y+5	; 0x05
    3458:	9e 81       	ldd	r25, Y+6	; 0x06
    345a:	9a 83       	std	Y+2, r25	; 0x02
    345c:	89 83       	std	Y+1, r24	; 0x01
    345e:	89 81       	ldd	r24, Y+1	; 0x01
    3460:	9a 81       	ldd	r25, Y+2	; 0x02
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <main+0x6d0>
    3466:	9a 83       	std	Y+2, r25	; 0x02
    3468:	89 83       	std	Y+1, r24	; 0x01

			_delay_ms(300);

			LCD_voidClearLCD();
    346a:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_voidClearLCD>
		}
		LCD_u8StringScroll(Local_u8FatlaDead, Local_u8FatlaSize, 300, LCD_SCROLL_TO_LEFT, 0);
    346e:	ce 01       	movw	r24, r28
    3470:	89 5b       	subi	r24, 0xB9	; 185
    3472:	9f 4f       	sbci	r25, 0xFF	; 255
    3474:	6a ad       	ldd	r22, Y+58	; 0x3a
    3476:	4c e2       	ldi	r20, 0x2C	; 44
    3478:	51 e0       	ldi	r21, 0x01	; 1
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	00 e0       	ldi	r16, 0x00	; 0
    347e:	0e 94 8d 10 	call	0x211a	; 0x211a <LCD_u8StringScroll>
		LCD_u8StringScroll(Local_u8GO, Local_u8GOSize, 300, LCD_SCROLL_TO_RIGHT, 1);
    3482:	ce 01       	movw	r24, r28
    3484:	cd 96       	adiw	r24, 0x3d	; 61
    3486:	6b ad       	ldd	r22, Y+59	; 0x3b
    3488:	4c e2       	ldi	r20, 0x2C	; 44
    348a:	51 e0       	ldi	r21, 0x01	; 1
    348c:	21 e0       	ldi	r18, 0x01	; 1
    348e:	01 e0       	ldi	r16, 0x01	; 1
    3490:	0e 94 8d 10 	call	0x211a	; 0x211a <LCD_u8StringScroll>
    3494:	9e cd       	rjmp	.-1220   	; 0x2fd2 <main+0x240>

00003496 <__udivmodsi4>:
    3496:	a1 e2       	ldi	r26, 0x21	; 33
    3498:	1a 2e       	mov	r1, r26
    349a:	aa 1b       	sub	r26, r26
    349c:	bb 1b       	sub	r27, r27
    349e:	fd 01       	movw	r30, r26
    34a0:	0d c0       	rjmp	.+26     	; 0x34bc <__udivmodsi4_ep>

000034a2 <__udivmodsi4_loop>:
    34a2:	aa 1f       	adc	r26, r26
    34a4:	bb 1f       	adc	r27, r27
    34a6:	ee 1f       	adc	r30, r30
    34a8:	ff 1f       	adc	r31, r31
    34aa:	a2 17       	cp	r26, r18
    34ac:	b3 07       	cpc	r27, r19
    34ae:	e4 07       	cpc	r30, r20
    34b0:	f5 07       	cpc	r31, r21
    34b2:	20 f0       	brcs	.+8      	; 0x34bc <__udivmodsi4_ep>
    34b4:	a2 1b       	sub	r26, r18
    34b6:	b3 0b       	sbc	r27, r19
    34b8:	e4 0b       	sbc	r30, r20
    34ba:	f5 0b       	sbc	r31, r21

000034bc <__udivmodsi4_ep>:
    34bc:	66 1f       	adc	r22, r22
    34be:	77 1f       	adc	r23, r23
    34c0:	88 1f       	adc	r24, r24
    34c2:	99 1f       	adc	r25, r25
    34c4:	1a 94       	dec	r1
    34c6:	69 f7       	brne	.-38     	; 0x34a2 <__udivmodsi4_loop>
    34c8:	60 95       	com	r22
    34ca:	70 95       	com	r23
    34cc:	80 95       	com	r24
    34ce:	90 95       	com	r25
    34d0:	9b 01       	movw	r18, r22
    34d2:	ac 01       	movw	r20, r24
    34d4:	bd 01       	movw	r22, r26
    34d6:	cf 01       	movw	r24, r30
    34d8:	08 95       	ret

000034da <__prologue_saves__>:
    34da:	2f 92       	push	r2
    34dc:	3f 92       	push	r3
    34de:	4f 92       	push	r4
    34e0:	5f 92       	push	r5
    34e2:	6f 92       	push	r6
    34e4:	7f 92       	push	r7
    34e6:	8f 92       	push	r8
    34e8:	9f 92       	push	r9
    34ea:	af 92       	push	r10
    34ec:	bf 92       	push	r11
    34ee:	cf 92       	push	r12
    34f0:	df 92       	push	r13
    34f2:	ef 92       	push	r14
    34f4:	ff 92       	push	r15
    34f6:	0f 93       	push	r16
    34f8:	1f 93       	push	r17
    34fa:	cf 93       	push	r28
    34fc:	df 93       	push	r29
    34fe:	cd b7       	in	r28, 0x3d	; 61
    3500:	de b7       	in	r29, 0x3e	; 62
    3502:	ca 1b       	sub	r28, r26
    3504:	db 0b       	sbc	r29, r27
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	f8 94       	cli
    350a:	de bf       	out	0x3e, r29	; 62
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	cd bf       	out	0x3d, r28	; 61
    3510:	09 94       	ijmp

00003512 <__epilogue_restores__>:
    3512:	2a 88       	ldd	r2, Y+18	; 0x12
    3514:	39 88       	ldd	r3, Y+17	; 0x11
    3516:	48 88       	ldd	r4, Y+16	; 0x10
    3518:	5f 84       	ldd	r5, Y+15	; 0x0f
    351a:	6e 84       	ldd	r6, Y+14	; 0x0e
    351c:	7d 84       	ldd	r7, Y+13	; 0x0d
    351e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3520:	9b 84       	ldd	r9, Y+11	; 0x0b
    3522:	aa 84       	ldd	r10, Y+10	; 0x0a
    3524:	b9 84       	ldd	r11, Y+9	; 0x09
    3526:	c8 84       	ldd	r12, Y+8	; 0x08
    3528:	df 80       	ldd	r13, Y+7	; 0x07
    352a:	ee 80       	ldd	r14, Y+6	; 0x06
    352c:	fd 80       	ldd	r15, Y+5	; 0x05
    352e:	0c 81       	ldd	r16, Y+4	; 0x04
    3530:	1b 81       	ldd	r17, Y+3	; 0x03
    3532:	aa 81       	ldd	r26, Y+2	; 0x02
    3534:	b9 81       	ldd	r27, Y+1	; 0x01
    3536:	ce 0f       	add	r28, r30
    3538:	d1 1d       	adc	r29, r1
    353a:	0f b6       	in	r0, 0x3f	; 63
    353c:	f8 94       	cli
    353e:	de bf       	out	0x3e, r29	; 62
    3540:	0f be       	out	0x3f, r0	; 63
    3542:	cd bf       	out	0x3d, r28	; 61
    3544:	ed 01       	movw	r28, r26
    3546:	08 95       	ret

00003548 <_exit>:
    3548:	f8 94       	cli

0000354a <__stop_program>:
    354a:	ff cf       	rjmp	.-2      	; 0x354a <__stop_program>
