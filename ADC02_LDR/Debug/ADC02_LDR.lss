
ADC02_LDR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  000033d8  0000344c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000025c8  00000000  00000000  0000355c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e62  00000000  00000000  00005b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00006986  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00006b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00006d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00009123  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000a4a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000b680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000b840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000bb36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c4a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f6 18 	call	0x31ec	; 0x31ec <main>
      7a:	0c 94 ea 19 	jmp	0x33d4	; 0x33d4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e6       	ldi	r26, 0x66	; 102
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 cf 19 	jmp	0x339e	; 0x339e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 bf 19 	jmp	0x337e	; 0x337e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 bf 19 	jmp	0x337e	; 0x337e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 e6       	ldi	r24, 0x66	; 102
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 cf 19 	jmp	0x339e	; 0x339e <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	66 e6       	ldi	r22, 0x66	; 102
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 bf 19 	jmp	0x337e	; 0x337e <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 bf 19 	jmp	0x337e	; 0x337e <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 bf 19 	jmp	0x337e	; 0x337e <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 df 19 	jmp	0x33be	; 0x33be <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e2 59       	subi	r30, 0x92	; 146
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <ADC_voidInitialization>:
/* Description	: Initializing all required (Voltage Reference, Prescaler and Resolution) then Enable ADC
 * Input		: Non
 * Output		: Non
 */
void ADC_voidInitialization(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	/*Choosing Reference Voltage*/
#if Voltage_REF == ADC_AVCC
	SET_BIT(ADMUX, ADMUX_REFS0);
     e26:	a7 e2       	ldi	r26, 0x27	; 39
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e7 e2       	ldi	r30, 0x27	; 39
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	80 64       	ori	r24, 0x40	; 64
     e32:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_REFS1);
     e34:	a7 e2       	ldi	r26, 0x27	; 39
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e7 e2       	ldi	r30, 0x27	; 39
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	8f 77       	andi	r24, 0x7F	; 127
     e40:	8c 93       	st	X, r24
#endif


	/*Choosing Prescaler*/
#if Prescaler == ADC_Prescaler_2
	CLR_BIT(ADCSRA, ADCSRA_ADPS0);
     e42:	a6 e2       	ldi	r26, 0x26	; 38
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e6 e2       	ldi	r30, 0x26	; 38
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8e 7f       	andi	r24, 0xFE	; 254
     e4e:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADCSRA_ADPS1);
     e50:	a6 e2       	ldi	r26, 0x26	; 38
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e6 e2       	ldi	r30, 0x26	; 38
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	8d 7f       	andi	r24, 0xFD	; 253
     e5c:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADCSRA_ADPS2);
     e5e:	a6 e2       	ldi	r26, 0x26	; 38
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e6 e2       	ldi	r30, 0x26	; 38
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8b 7f       	andi	r24, 0xFB	; 251
     e6a:	8c 93       	st	X, r24
	/*Choosing Left or Right Adjustment*/
#if Resolution == ADC_ADCL
	CLR_BIT(ADMUX, ADMUX_ADLAR);

#elif Resolution == ADC_ADCH
	SET_BIT(ADMUX, ADMUX_ADLAR);
     e6c:	a7 e2       	ldi	r26, 0x27	; 39
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e7 e2       	ldi	r30, 0x27	; 39
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	80 62       	ori	r24, 0x20	; 32
     e78:	8c 93       	st	X, r24
#endif


	/*Choosing Interrupt Enable or Disable*/
#if ADC_Interrupt == ADC_Interrupt_Enable
	SET_BIT(ADCSRA, ADCSRA_ADIE);
     e7a:	a6 e2       	ldi	r26, 0x26	; 38
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e6 e2       	ldi	r30, 0x26	; 38
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	88 60       	ori	r24, 0x08	; 8
     e86:	8c 93       	st	X, r24
#endif


	/*Enable or Disable ADC Peripheral*/
#if ADC_Enabling == ADC_Enable
	SET_BIT(ADCSRA, ADCSRA_ADEN);
     e88:	a6 e2       	ldi	r26, 0x26	; 38
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e6 e2       	ldi	r30, 0x26	; 38
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 68       	ori	r24, 0x80	; 128
     e94:	8c 93       	st	X, r24

#elif ADC_Enabling == ADC_Disable
	CLR_BIT(ADCSRA, ADCSRA_ADEN);
#endif
}
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <ADC_u8GetReading>:
 * Input		: Channel Number, Pointer to put the Value in
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 ADC_u8GetReading(u8 Copy_u8Channel, u16 *Copy_u16DigitalValue)
{
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	00 d0       	rcall	.+0      	; 0xea2 <ADC_u8GetReading+0x6>
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <ADC_u8GetReading+0x8>
     ea4:	0f 92       	push	r0
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	8b 83       	std	Y+3, r24	; 0x03
     eac:	7d 83       	std	Y+5, r23	; 0x05
     eae:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8Error = 0, Local_u8LowValue = 0;
     eb0:	1a 82       	std	Y+2, r1	; 0x02
     eb2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Channel > 31)
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	80 32       	cpi	r24, 0x20	; 32
     eb8:	18 f0       	brcs	.+6      	; 0xec0 <ADC_u8GetReading+0x24>
	{
		Local_u8Error = 1;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	8a 83       	std	Y+2, r24	; 0x02
     ebe:	31 c0       	rjmp	.+98     	; 0xf22 <ADC_u8GetReading+0x86>
	{
		/* the anding is for make the last 3 bits as it is with no change
		 * and make the first 5 bits with zeros
		 * then the ORing for add the value of first 3 bits according to the channel
		 */
		ADMUX &= 0xE0;
     ec0:	a7 e2       	ldi	r26, 0x27	; 39
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e7 e2       	ldi	r30, 0x27	; 39
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	80 7e       	andi	r24, 0xE0	; 224
     ecc:	8c 93       	st	X, r24
		ADMUX |= Copy_u8Channel;
     ece:	a7 e2       	ldi	r26, 0x27	; 39
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e7 e2       	ldi	r30, 0x27	; 39
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	90 81       	ld	r25, Z
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	89 2b       	or	r24, r25
     edc:	8c 93       	st	X, r24

		/*Start Conversion*/
		SET_BIT(ADCSRA, ADCSRA_ADSC);
     ede:	a6 e2       	ldi	r26, 0x26	; 38
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e6 e2       	ldi	r30, 0x26	; 38
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 64       	ori	r24, 0x40	; 64
     eea:	8c 93       	st	X, r24

		/* While we polling not Interrupting
		 * wait till the conversion be done
		 */
		while(!(GET_BIT(ADCSRA, ADCSRA_ADIF)));
     eec:	e6 e2       	ldi	r30, 0x26	; 38
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	82 95       	swap	r24
     ef4:	8f 70       	andi	r24, 0x0F	; 15
     ef6:	88 2f       	mov	r24, r24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	81 70       	andi	r24, 0x01	; 1
     efc:	90 70       	andi	r25, 0x00	; 0
     efe:	00 97       	sbiw	r24, 0x00	; 0
     f00:	a9 f3       	breq	.-22     	; 0xeec <ADC_u8GetReading+0x50>

		/*Set the Flag to Clear*/
		SET_BIT(ADCSRA, ADCSRA_ADIF);
     f02:	a6 e2       	ldi	r26, 0x26	; 38
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e6 e2       	ldi	r30, 0x26	; 38
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	80 61       	ori	r24, 0x10	; 16
     f0e:	8c 93       	st	X, r24
			*Copy_u16DigitalValue = (Local_u8LowValue) | (ADCH << 8);
		}
		else
		{
			/*This mean Ignoring ADCL and GET ADCH bits 2 - 9*/
			*Copy_u16DigitalValue = ADCH;
     f10:	e5 e2       	ldi	r30, 0x25	; 37
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	88 2f       	mov	r24, r24
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	ec 81       	ldd	r30, Y+4	; 0x04
     f1c:	fd 81       	ldd	r31, Y+5	; 0x05
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	80 83       	st	Z, r24
		}
	}

	return Local_u8Error;
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <DIO_u8SetPortDirection>:
 * Input		: Port Number, Direction
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPortDirection(u8 Copy_u8PortNB, u8 Copy_u8Dir)
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	00 d0       	rcall	.+0      	; 0xf3a <DIO_u8SetPortDirection+0x6>
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <DIO_u8SetPortDirection+0x8>
     f3c:	0f 92       	push	r0
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	8a 83       	std	Y+2, r24	; 0x02
     f44:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
     f46:	19 82       	std	Y+1, r1	; 0x01
	}

	else
		{
			/*Switch for the PORT Number if it 0 -> 3 it is OK else return Error*/
			switch(Copy_u8PortNB)
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	3d 83       	std	Y+5, r19	; 0x05
     f50:	2c 83       	std	Y+4, r18	; 0x04
     f52:	8c 81       	ldd	r24, Y+4	; 0x04
     f54:	9d 81       	ldd	r25, Y+5	; 0x05
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	91 05       	cpc	r25, r1
     f5a:	d1 f0       	breq	.+52     	; 0xf90 <DIO_u8SetPortDirection+0x5c>
     f5c:	2c 81       	ldd	r18, Y+4	; 0x04
     f5e:	3d 81       	ldd	r19, Y+5	; 0x05
     f60:	22 30       	cpi	r18, 0x02	; 2
     f62:	31 05       	cpc	r19, r1
     f64:	2c f4       	brge	.+10     	; 0xf70 <DIO_u8SetPortDirection+0x3c>
     f66:	8c 81       	ldd	r24, Y+4	; 0x04
     f68:	9d 81       	ldd	r25, Y+5	; 0x05
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	61 f0       	breq	.+24     	; 0xf86 <DIO_u8SetPortDirection+0x52>
     f6e:	1f c0       	rjmp	.+62     	; 0xfae <DIO_u8SetPortDirection+0x7a>
     f70:	2c 81       	ldd	r18, Y+4	; 0x04
     f72:	3d 81       	ldd	r19, Y+5	; 0x05
     f74:	22 30       	cpi	r18, 0x02	; 2
     f76:	31 05       	cpc	r19, r1
     f78:	81 f0       	breq	.+32     	; 0xf9a <DIO_u8SetPortDirection+0x66>
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	9d 81       	ldd	r25, Y+5	; 0x05
     f7e:	83 30       	cpi	r24, 0x03	; 3
     f80:	91 05       	cpc	r25, r1
     f82:	81 f0       	breq	.+32     	; 0xfa4 <DIO_u8SetPortDirection+0x70>
     f84:	14 c0       	rjmp	.+40     	; 0xfae <DIO_u8SetPortDirection+0x7a>
			{
			case DIO_PORT_0:
				DDRA = Copy_u8Dir;
     f86:	ea e3       	ldi	r30, 0x3A	; 58
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	80 83       	st	Z, r24
     f8e:	11 c0       	rjmp	.+34     	; 0xfb2 <DIO_u8SetPortDirection+0x7e>
				break;

			case DIO_PORT_1:
				DDRB = Copy_u8Dir;
     f90:	e7 e3       	ldi	r30, 0x37	; 55
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	80 83       	st	Z, r24
     f98:	0c c0       	rjmp	.+24     	; 0xfb2 <DIO_u8SetPortDirection+0x7e>
				break;

			case DIO_PORT_2:
				DDRC = Copy_u8Dir;
     f9a:	e4 e3       	ldi	r30, 0x34	; 52
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	80 83       	st	Z, r24
     fa2:	07 c0       	rjmp	.+14     	; 0xfb2 <DIO_u8SetPortDirection+0x7e>
				break;

			case DIO_PORT_3:
				DDRD = Copy_u8Dir;
     fa4:	e1 e3       	ldi	r30, 0x31	; 49
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	80 83       	st	Z, r24
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_u8SetPortDirection+0x7e>
				break;

			default:
				Local_u8Error = 1;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}

	return Local_u8Error;
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <DIO_u8SetPortValue>:
 * Input		: Port Number, Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPortValue(u8 Copy_u8PortNB, u8 Copy_u8Value)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	00 d0       	rcall	.+0      	; 0xfca <DIO_u8SetPortValue+0x6>
     fca:	00 d0       	rcall	.+0      	; 0xfcc <DIO_u8SetPortValue+0x8>
     fcc:	0f 92       	push	r0
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	8a 83       	std	Y+2, r24	; 0x02
     fd4:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
     fd6:	19 82       	std	Y+1, r1	; 0x01
		Local_u8Error = 1;
	}
	else
		{
			/*Switch for the PORT Number if it 0 -> 3 it is OK else return Error*/
			switch(Copy_u8PortNB)
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	3d 83       	std	Y+5, r19	; 0x05
     fe0:	2c 83       	std	Y+4, r18	; 0x04
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	9d 81       	ldd	r25, Y+5	; 0x05
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	91 05       	cpc	r25, r1
     fea:	d1 f0       	breq	.+52     	; 0x1020 <DIO_u8SetPortValue+0x5c>
     fec:	2c 81       	ldd	r18, Y+4	; 0x04
     fee:	3d 81       	ldd	r19, Y+5	; 0x05
     ff0:	22 30       	cpi	r18, 0x02	; 2
     ff2:	31 05       	cpc	r19, r1
     ff4:	2c f4       	brge	.+10     	; 0x1000 <DIO_u8SetPortValue+0x3c>
     ff6:	8c 81       	ldd	r24, Y+4	; 0x04
     ff8:	9d 81       	ldd	r25, Y+5	; 0x05
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	61 f0       	breq	.+24     	; 0x1016 <DIO_u8SetPortValue+0x52>
     ffe:	1f c0       	rjmp	.+62     	; 0x103e <DIO_u8SetPortValue+0x7a>
    1000:	2c 81       	ldd	r18, Y+4	; 0x04
    1002:	3d 81       	ldd	r19, Y+5	; 0x05
    1004:	22 30       	cpi	r18, 0x02	; 2
    1006:	31 05       	cpc	r19, r1
    1008:	81 f0       	breq	.+32     	; 0x102a <DIO_u8SetPortValue+0x66>
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	9d 81       	ldd	r25, Y+5	; 0x05
    100e:	83 30       	cpi	r24, 0x03	; 3
    1010:	91 05       	cpc	r25, r1
    1012:	81 f0       	breq	.+32     	; 0x1034 <DIO_u8SetPortValue+0x70>
    1014:	14 c0       	rjmp	.+40     	; 0x103e <DIO_u8SetPortValue+0x7a>
			{
			case DIO_PORT_0:
				PORTA = Copy_u8Value;
    1016:	eb e3       	ldi	r30, 0x3B	; 59
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	80 83       	st	Z, r24
    101e:	11 c0       	rjmp	.+34     	; 0x1042 <DIO_u8SetPortValue+0x7e>
				break;

			case DIO_PORT_1:
				PORTB = Copy_u8Value;
    1020:	e8 e3       	ldi	r30, 0x38	; 56
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	80 83       	st	Z, r24
    1028:	0c c0       	rjmp	.+24     	; 0x1042 <DIO_u8SetPortValue+0x7e>
				break;

			case DIO_PORT_2:
				PORTC = Copy_u8Value;
    102a:	e5 e3       	ldi	r30, 0x35	; 53
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	80 83       	st	Z, r24
    1032:	07 c0       	rjmp	.+14     	; 0x1042 <DIO_u8SetPortValue+0x7e>
				break;

			case DIO_PORT_3:
				PORTD = Copy_u8Value;
    1034:	e2 e3       	ldi	r30, 0x32	; 50
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	80 83       	st	Z, r24
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <DIO_u8SetPortValue+0x7e>
				break;

			default:
				Local_u8Error = 1;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}

	return Local_u8Error;
    1042:	89 81       	ldd	r24, Y+1	; 0x01
}
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <DIO_u8SetPinDirection>:
 * Input		: Port Number, Pin Number, Direction
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPinDirection(u8 Copy_u8PortNB, u8 Copy_u8PinNB, u8 Copy_u8Dir)
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	00 d0       	rcall	.+0      	; 0x105a <DIO_u8SetPinDirection+0x6>
    105a:	00 d0       	rcall	.+0      	; 0x105c <DIO_u8SetPinDirection+0x8>
    105c:	00 d0       	rcall	.+0      	; 0x105e <DIO_u8SetPinDirection+0xa>
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	8a 83       	std	Y+2, r24	; 0x02
    1064:	6b 83       	std	Y+3, r22	; 0x03
    1066:	4c 83       	std	Y+4, r20	; 0x04
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    1068:	19 82       	std	Y+1, r1	; 0x01

	/*Check that the PIN Number is between 0 -> 7 else Return Local Error with ONE*/
	if(Copy_u8PinNB > DIO_PIN_7)
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	88 30       	cpi	r24, 0x08	; 8
    106e:	10 f0       	brcs	.+4      	; 0x1074 <DIO_u8SetPinDirection+0x20>
	{
		Local_u8Error = 1;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Check if the Direction is Input or Output Else return Local Error with one*/
	if((Copy_u8Dir != DIO_INPUT) && (Copy_u8Dir != DIO_OUTPUT))
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
    1076:	88 23       	and	r24, r24
    1078:	31 f0       	breq	.+12     	; 0x1086 <DIO_u8SetPinDirection+0x32>
    107a:	8c 81       	ldd	r24, Y+4	; 0x04
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	19 f0       	breq	.+6      	; 0x1086 <DIO_u8SetPinDirection+0x32>
	{
		Local_u8Error = 1;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	ac c0       	rjmp	.+344    	; 0x11de <DIO_u8SetPinDirection+0x18a>
	}

	/*Else Check for the PORT number is between 0 -> 3*/
	else
	{
		switch(Copy_u8PortNB)
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	3e 83       	std	Y+6, r19	; 0x06
    108e:	2d 83       	std	Y+5, r18	; 0x05
    1090:	6d 81       	ldd	r22, Y+5	; 0x05
    1092:	7e 81       	ldd	r23, Y+6	; 0x06
    1094:	61 30       	cpi	r22, 0x01	; 1
    1096:	71 05       	cpc	r23, r1
    1098:	d1 f1       	breq	.+116    	; 0x110e <DIO_u8SetPinDirection+0xba>
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	9e 81       	ldd	r25, Y+6	; 0x06
    109e:	82 30       	cpi	r24, 0x02	; 2
    10a0:	91 05       	cpc	r25, r1
    10a2:	34 f4       	brge	.+12     	; 0x10b0 <DIO_u8SetPinDirection+0x5c>
    10a4:	2d 81       	ldd	r18, Y+5	; 0x05
    10a6:	3e 81       	ldd	r19, Y+6	; 0x06
    10a8:	21 15       	cp	r18, r1
    10aa:	31 05       	cpc	r19, r1
    10ac:	71 f0       	breq	.+28     	; 0x10ca <DIO_u8SetPinDirection+0x76>
    10ae:	95 c0       	rjmp	.+298    	; 0x11da <DIO_u8SetPinDirection+0x186>
    10b0:	6d 81       	ldd	r22, Y+5	; 0x05
    10b2:	7e 81       	ldd	r23, Y+6	; 0x06
    10b4:	62 30       	cpi	r22, 0x02	; 2
    10b6:	71 05       	cpc	r23, r1
    10b8:	09 f4       	brne	.+2      	; 0x10bc <DIO_u8SetPinDirection+0x68>
    10ba:	4b c0       	rjmp	.+150    	; 0x1152 <DIO_u8SetPinDirection+0xfe>
    10bc:	8d 81       	ldd	r24, Y+5	; 0x05
    10be:	9e 81       	ldd	r25, Y+6	; 0x06
    10c0:	83 30       	cpi	r24, 0x03	; 3
    10c2:	91 05       	cpc	r25, r1
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <DIO_u8SetPinDirection+0x74>
    10c6:	67 c0       	rjmp	.+206    	; 0x1196 <DIO_u8SetPinDirection+0x142>
    10c8:	88 c0       	rjmp	.+272    	; 0x11da <DIO_u8SetPinDirection+0x186>
		{
		case DIO_PORT_0:
			ASSIGN_BIT(DDRA, Copy_u8PinNB, Copy_u8Dir);
    10ca:	aa e3       	ldi	r26, 0x3A	; 58
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ea e3       	ldi	r30, 0x3A	; 58
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_u8SetPinDirection+0x92>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	2a 95       	dec	r18
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_u8SetPinDirection+0x8e>
    10ea:	80 95       	com	r24
    10ec:	48 23       	and	r20, r24
    10ee:	8c 81       	ldd	r24, Y+4	; 0x04
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	88 2f       	mov	r24, r24
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	b9 01       	movw	r22, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_u8SetPinDirection+0xae>
    10fe:	66 0f       	add	r22, r22
    1100:	77 1f       	adc	r23, r23
    1102:	8a 95       	dec	r24
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_u8SetPinDirection+0xaa>
    1106:	cb 01       	movw	r24, r22
    1108:	84 2b       	or	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	68 c0       	rjmp	.+208    	; 0x11de <DIO_u8SetPinDirection+0x18a>
			break;

		case DIO_PORT_1:
			ASSIGN_BIT(DDRB, Copy_u8PinNB, Copy_u8Dir);
    110e:	a7 e3       	ldi	r26, 0x37	; 55
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e7 e3       	ldi	r30, 0x37	; 55
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_u8SetPinDirection+0xd6>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	2a 95       	dec	r18
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_u8SetPinDirection+0xd2>
    112e:	80 95       	com	r24
    1130:	48 23       	and	r20, r24
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	b9 01       	movw	r22, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_u8SetPinDirection+0xf2>
    1142:	66 0f       	add	r22, r22
    1144:	77 1f       	adc	r23, r23
    1146:	8a 95       	dec	r24
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_u8SetPinDirection+0xee>
    114a:	cb 01       	movw	r24, r22
    114c:	84 2b       	or	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	46 c0       	rjmp	.+140    	; 0x11de <DIO_u8SetPinDirection+0x18a>
			break;

		case DIO_PORT_2:
			ASSIGN_BIT(DDRC, Copy_u8PinNB, Copy_u8Dir);
    1152:	a4 e3       	ldi	r26, 0x34	; 52
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e4 e3       	ldi	r30, 0x34	; 52
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_u8SetPinDirection+0x11a>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	2a 95       	dec	r18
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_u8SetPinDirection+0x116>
    1172:	80 95       	com	r24
    1174:	48 23       	and	r20, r24
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	b9 01       	movw	r22, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <DIO_u8SetPinDirection+0x136>
    1186:	66 0f       	add	r22, r22
    1188:	77 1f       	adc	r23, r23
    118a:	8a 95       	dec	r24
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <DIO_u8SetPinDirection+0x132>
    118e:	cb 01       	movw	r24, r22
    1190:	84 2b       	or	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	24 c0       	rjmp	.+72     	; 0x11de <DIO_u8SetPinDirection+0x18a>
			break;

		case DIO_PORT_3:
			ASSIGN_BIT(DDRD, Copy_u8PinNB, Copy_u8Dir);
    1196:	a1 e3       	ldi	r26, 0x31	; 49
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e1 e3       	ldi	r30, 0x31	; 49
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	48 2f       	mov	r20, r24
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <DIO_u8SetPinDirection+0x15e>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	2a 95       	dec	r18
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <DIO_u8SetPinDirection+0x15a>
    11b6:	80 95       	com	r24
    11b8:	48 23       	and	r20, r24
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	b9 01       	movw	r22, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_u8SetPinDirection+0x17a>
    11ca:	66 0f       	add	r22, r22
    11cc:	77 1f       	adc	r23, r23
    11ce:	8a 95       	dec	r24
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_u8SetPinDirection+0x176>
    11d2:	cb 01       	movw	r24, r22
    11d4:	84 2b       	or	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <DIO_u8SetPinDirection+0x18a>
			break;

		default:
			Local_u8Error = 1;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_u8Error;
    11de:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e0:	26 96       	adiw	r28, 0x06	; 6
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <DIO_u8SetPinValue>:
 * Input		: Port Number, Pin Number, Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8SetPinValue(u8 Copy_u8PortNB, u8 Copy_u8PinNB, u8 Copy_u8Value)
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <DIO_u8SetPinValue+0x6>
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <DIO_u8SetPinValue+0x8>
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <DIO_u8SetPinValue+0xa>
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	8a 83       	std	Y+2, r24	; 0x02
    1202:	6b 83       	std	Y+3, r22	; 0x03
    1204:	4c 83       	std	Y+4, r20	; 0x04
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    1206:	19 82       	std	Y+1, r1	; 0x01

	/*Check that the PIN Number is between 0 -> 7 else Return Local Error with ONE*/
	if(Copy_u8PinNB > DIO_PIN_7)
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	88 30       	cpi	r24, 0x08	; 8
    120c:	10 f0       	brcs	.+4      	; 0x1212 <DIO_u8SetPinValue+0x20>
	{
		Local_u8Error = 1;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Check if the Direction is Input or Output Else return Local Error with one*/
	if((Copy_u8Value != DIO_HIGH) && (Copy_u8Value != DIO_LOW))
    1212:	8c 81       	ldd	r24, Y+4	; 0x04
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	31 f0       	breq	.+12     	; 0x1224 <DIO_u8SetPinValue+0x32>
    1218:	8c 81       	ldd	r24, Y+4	; 0x04
    121a:	88 23       	and	r24, r24
    121c:	19 f0       	breq	.+6      	; 0x1224 <DIO_u8SetPinValue+0x32>
	{
		Local_u8Error = 1;
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	ac c0       	rjmp	.+344    	; 0x137c <DIO_u8SetPinValue+0x18a>
	}

	/*Else Check for the PORT number is between 0 -> 3*/
	else
	{
		switch(Copy_u8PortNB)
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	3e 83       	std	Y+6, r19	; 0x06
    122c:	2d 83       	std	Y+5, r18	; 0x05
    122e:	6d 81       	ldd	r22, Y+5	; 0x05
    1230:	7e 81       	ldd	r23, Y+6	; 0x06
    1232:	61 30       	cpi	r22, 0x01	; 1
    1234:	71 05       	cpc	r23, r1
    1236:	d1 f1       	breq	.+116    	; 0x12ac <DIO_u8SetPinValue+0xba>
    1238:	8d 81       	ldd	r24, Y+5	; 0x05
    123a:	9e 81       	ldd	r25, Y+6	; 0x06
    123c:	82 30       	cpi	r24, 0x02	; 2
    123e:	91 05       	cpc	r25, r1
    1240:	34 f4       	brge	.+12     	; 0x124e <DIO_u8SetPinValue+0x5c>
    1242:	2d 81       	ldd	r18, Y+5	; 0x05
    1244:	3e 81       	ldd	r19, Y+6	; 0x06
    1246:	21 15       	cp	r18, r1
    1248:	31 05       	cpc	r19, r1
    124a:	71 f0       	breq	.+28     	; 0x1268 <DIO_u8SetPinValue+0x76>
    124c:	95 c0       	rjmp	.+298    	; 0x1378 <DIO_u8SetPinValue+0x186>
    124e:	6d 81       	ldd	r22, Y+5	; 0x05
    1250:	7e 81       	ldd	r23, Y+6	; 0x06
    1252:	62 30       	cpi	r22, 0x02	; 2
    1254:	71 05       	cpc	r23, r1
    1256:	09 f4       	brne	.+2      	; 0x125a <DIO_u8SetPinValue+0x68>
    1258:	4b c0       	rjmp	.+150    	; 0x12f0 <DIO_u8SetPinValue+0xfe>
    125a:	8d 81       	ldd	r24, Y+5	; 0x05
    125c:	9e 81       	ldd	r25, Y+6	; 0x06
    125e:	83 30       	cpi	r24, 0x03	; 3
    1260:	91 05       	cpc	r25, r1
    1262:	09 f4       	brne	.+2      	; 0x1266 <DIO_u8SetPinValue+0x74>
    1264:	67 c0       	rjmp	.+206    	; 0x1334 <DIO_u8SetPinValue+0x142>
    1266:	88 c0       	rjmp	.+272    	; 0x1378 <DIO_u8SetPinValue+0x186>
		{
		case DIO_PORT_0:
			ASSIGN_BIT(PORTA, Copy_u8PinNB, Copy_u8Value);
    1268:	ab e3       	ldi	r26, 0x3B	; 59
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	eb e3       	ldi	r30, 0x3B	; 59
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_u8SetPinValue+0x92>
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	2a 95       	dec	r18
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <DIO_u8SetPinValue+0x8e>
    1288:	80 95       	com	r24
    128a:	48 23       	and	r20, r24
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	88 2f       	mov	r24, r24
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	b9 01       	movw	r22, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <DIO_u8SetPinValue+0xae>
    129c:	66 0f       	add	r22, r22
    129e:	77 1f       	adc	r23, r23
    12a0:	8a 95       	dec	r24
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <DIO_u8SetPinValue+0xaa>
    12a4:	cb 01       	movw	r24, r22
    12a6:	84 2b       	or	r24, r20
    12a8:	8c 93       	st	X, r24
    12aa:	68 c0       	rjmp	.+208    	; 0x137c <DIO_u8SetPinValue+0x18a>
			break;

		case DIO_PORT_1:
			ASSIGN_BIT(PORTB, Copy_u8PinNB, Copy_u8Value);
    12ac:	a8 e3       	ldi	r26, 0x38	; 56
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e8 e3       	ldi	r30, 0x38	; 56
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_u8SetPinValue+0xd6>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	2a 95       	dec	r18
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO_u8SetPinValue+0xd2>
    12cc:	80 95       	com	r24
    12ce:	48 23       	and	r20, r24
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	b9 01       	movw	r22, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO_u8SetPinValue+0xf2>
    12e0:	66 0f       	add	r22, r22
    12e2:	77 1f       	adc	r23, r23
    12e4:	8a 95       	dec	r24
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <DIO_u8SetPinValue+0xee>
    12e8:	cb 01       	movw	r24, r22
    12ea:	84 2b       	or	r24, r20
    12ec:	8c 93       	st	X, r24
    12ee:	46 c0       	rjmp	.+140    	; 0x137c <DIO_u8SetPinValue+0x18a>
			break;

		case DIO_PORT_2:
			ASSIGN_BIT(PORTC, Copy_u8PinNB, Copy_u8Value);
    12f0:	a5 e3       	ldi	r26, 0x35	; 53
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e5 e3       	ldi	r30, 0x35	; 53
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	48 2f       	mov	r20, r24
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	02 c0       	rjmp	.+4      	; 0x130c <DIO_u8SetPinValue+0x11a>
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	2a 95       	dec	r18
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <DIO_u8SetPinValue+0x116>
    1310:	80 95       	com	r24
    1312:	48 23       	and	r20, r24
    1314:	8c 81       	ldd	r24, Y+4	; 0x04
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	b9 01       	movw	r22, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <DIO_u8SetPinValue+0x136>
    1324:	66 0f       	add	r22, r22
    1326:	77 1f       	adc	r23, r23
    1328:	8a 95       	dec	r24
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <DIO_u8SetPinValue+0x132>
    132c:	cb 01       	movw	r24, r22
    132e:	84 2b       	or	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	24 c0       	rjmp	.+72     	; 0x137c <DIO_u8SetPinValue+0x18a>
			break;

		case DIO_PORT_3:
			ASSIGN_BIT(PORTD, Copy_u8PinNB, Copy_u8Value);
    1334:	a2 e3       	ldi	r26, 0x32	; 50
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e2 e3       	ldi	r30, 0x32	; 50
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <DIO_u8SetPinValue+0x15e>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	2a 95       	dec	r18
    1352:	e2 f7       	brpl	.-8      	; 0x134c <DIO_u8SetPinValue+0x15a>
    1354:	80 95       	com	r24
    1356:	48 23       	and	r20, r24
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	88 2f       	mov	r24, r24
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	b9 01       	movw	r22, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_u8SetPinValue+0x17a>
    1368:	66 0f       	add	r22, r22
    136a:	77 1f       	adc	r23, r23
    136c:	8a 95       	dec	r24
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <DIO_u8SetPinValue+0x176>
    1370:	cb 01       	movw	r24, r22
    1372:	84 2b       	or	r24, r20
    1374:	8c 93       	st	X, r24
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_u8SetPinValue+0x18a>
			break;

		default:
			Local_u8Error = 1;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_u8Error;
    137c:	89 81       	ldd	r24, Y+1	; 0x01
}
    137e:	26 96       	adiw	r28, 0x06	; 6
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <DIO_u8GetPortValue>:
 * Input		: Port Number, Pointer for a Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8GetPortValue(u8 Copy_u8PortNB, u8 * Copy_u8Value)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	00 d0       	rcall	.+0      	; 0x1396 <DIO_u8GetPortValue+0x6>
    1396:	00 d0       	rcall	.+0      	; 0x1398 <DIO_u8GetPortValue+0x8>
    1398:	00 d0       	rcall	.+0      	; 0x139a <DIO_u8GetPortValue+0xa>
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	8a 83       	std	Y+2, r24	; 0x02
    13a0:	7c 83       	std	Y+4, r23	; 0x04
    13a2:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    13a4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Value == NULL_POINTER)
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	9c 81       	ldd	r25, Y+4	; 0x04
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	19 f4       	brne	.+6      	; 0x13b4 <DIO_u8GetPortValue+0x24>
	{
		Local_u8Error = 1;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	3d c0       	rjmp	.+122    	; 0x142e <DIO_u8GetPortValue+0x9e>
	}

	else
	{
		/*Switch for the PORT Number if it 0 -> 3 it is OK else return Error*/
		switch(Copy_u8PortNB)
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	3e 83       	std	Y+6, r19	; 0x06
    13bc:	2d 83       	std	Y+5, r18	; 0x05
    13be:	8d 81       	ldd	r24, Y+5	; 0x05
    13c0:	9e 81       	ldd	r25, Y+6	; 0x06
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	91 05       	cpc	r25, r1
    13c6:	e1 f0       	breq	.+56     	; 0x1400 <DIO_u8GetPortValue+0x70>
    13c8:	2d 81       	ldd	r18, Y+5	; 0x05
    13ca:	3e 81       	ldd	r19, Y+6	; 0x06
    13cc:	22 30       	cpi	r18, 0x02	; 2
    13ce:	31 05       	cpc	r19, r1
    13d0:	2c f4       	brge	.+10     	; 0x13dc <DIO_u8GetPortValue+0x4c>
    13d2:	8d 81       	ldd	r24, Y+5	; 0x05
    13d4:	9e 81       	ldd	r25, Y+6	; 0x06
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	61 f0       	breq	.+24     	; 0x13f2 <DIO_u8GetPortValue+0x62>
    13da:	27 c0       	rjmp	.+78     	; 0x142a <DIO_u8GetPortValue+0x9a>
    13dc:	2d 81       	ldd	r18, Y+5	; 0x05
    13de:	3e 81       	ldd	r19, Y+6	; 0x06
    13e0:	22 30       	cpi	r18, 0x02	; 2
    13e2:	31 05       	cpc	r19, r1
    13e4:	a1 f0       	breq	.+40     	; 0x140e <DIO_u8GetPortValue+0x7e>
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	91 05       	cpc	r25, r1
    13ee:	b1 f0       	breq	.+44     	; 0x141c <DIO_u8GetPortValue+0x8c>
    13f0:	1c c0       	rjmp	.+56     	; 0x142a <DIO_u8GetPortValue+0x9a>
		{
		case DIO_PORT_0:
			*Copy_u8Value = PINA;
    13f2:	e9 e3       	ldi	r30, 0x39	; 57
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	eb 81       	ldd	r30, Y+3	; 0x03
    13fa:	fc 81       	ldd	r31, Y+4	; 0x04
    13fc:	80 83       	st	Z, r24
    13fe:	17 c0       	rjmp	.+46     	; 0x142e <DIO_u8GetPortValue+0x9e>
			break;

		case DIO_PORT_1:
			*Copy_u8Value = PINB;
    1400:	e6 e3       	ldi	r30, 0x36	; 54
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	eb 81       	ldd	r30, Y+3	; 0x03
    1408:	fc 81       	ldd	r31, Y+4	; 0x04
    140a:	80 83       	st	Z, r24
    140c:	10 c0       	rjmp	.+32     	; 0x142e <DIO_u8GetPortValue+0x9e>
			break;

		case DIO_PORT_2:
			*Copy_u8Value = PINC;
    140e:	e3 e3       	ldi	r30, 0x33	; 51
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	eb 81       	ldd	r30, Y+3	; 0x03
    1416:	fc 81       	ldd	r31, Y+4	; 0x04
    1418:	80 83       	st	Z, r24
    141a:	09 c0       	rjmp	.+18     	; 0x142e <DIO_u8GetPortValue+0x9e>
			break;

		case DIO_PORT_3:
			*Copy_u8Value = PIND;
    141c:	e0 e3       	ldi	r30, 0x30	; 48
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	eb 81       	ldd	r30, Y+3	; 0x03
    1424:	fc 81       	ldd	r31, Y+4	; 0x04
    1426:	80 83       	st	Z, r24
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_u8GetPortValue+0x9e>
			break;

		default:
			Local_u8Error = 1;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

	}
	return Local_u8Error;
    142e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1430:	26 96       	adiw	r28, 0x06	; 6
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <DIO_u8GetPinValue>:
 * Input		: Port Number, Pin Number, Pointer for a Value
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8GetPinValue(u8 Copy_u8PortNB, u8 Copy_u8PinNB, u8 * Copy_u8Value)
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	27 97       	sbiw	r28, 0x07	; 7
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	8a 83       	std	Y+2, r24	; 0x02
    1458:	6b 83       	std	Y+3, r22	; 0x03
    145a:	5d 83       	std	Y+5, r21	; 0x05
    145c:	4c 83       	std	Y+4, r20	; 0x04
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    145e:	19 82       	std	Y+1, r1	; 0x01

	/*Check that the PIN Number is between 0 -> 7 else Return Local Error with ONE*/
	if(Copy_u8Value == NULL_POINTER)
    1460:	8c 81       	ldd	r24, Y+4	; 0x04
    1462:	9d 81       	ldd	r25, Y+5	; 0x05
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	11 f4       	brne	.+4      	; 0x146c <DIO_u8GetPinValue+0x2a>
	{
		Local_u8Error = 1;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	89 83       	std	Y+1, r24	; 0x01
	}
	if(Copy_u8PinNB > DIO_PIN_7)
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	88 30       	cpi	r24, 0x08	; 8
    1470:	18 f0       	brcs	.+6      	; 0x1478 <DIO_u8GetPinValue+0x36>
	{
		Local_u8Error = 1;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	73 c0       	rjmp	.+230    	; 0x155e <DIO_u8GetPinValue+0x11c>
	}

	else
	{
		switch(Copy_u8PortNB)
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	3f 83       	std	Y+7, r19	; 0x07
    1480:	2e 83       	std	Y+6, r18	; 0x06
    1482:	4e 81       	ldd	r20, Y+6	; 0x06
    1484:	5f 81       	ldd	r21, Y+7	; 0x07
    1486:	41 30       	cpi	r20, 0x01	; 1
    1488:	51 05       	cpc	r21, r1
    148a:	59 f1       	breq	.+86     	; 0x14e2 <DIO_u8GetPinValue+0xa0>
    148c:	8e 81       	ldd	r24, Y+6	; 0x06
    148e:	9f 81       	ldd	r25, Y+7	; 0x07
    1490:	82 30       	cpi	r24, 0x02	; 2
    1492:	91 05       	cpc	r25, r1
    1494:	34 f4       	brge	.+12     	; 0x14a2 <DIO_u8GetPinValue+0x60>
    1496:	2e 81       	ldd	r18, Y+6	; 0x06
    1498:	3f 81       	ldd	r19, Y+7	; 0x07
    149a:	21 15       	cp	r18, r1
    149c:	31 05       	cpc	r19, r1
    149e:	69 f0       	breq	.+26     	; 0x14ba <DIO_u8GetPinValue+0x78>
    14a0:	5c c0       	rjmp	.+184    	; 0x155a <DIO_u8GetPinValue+0x118>
    14a2:	4e 81       	ldd	r20, Y+6	; 0x06
    14a4:	5f 81       	ldd	r21, Y+7	; 0x07
    14a6:	42 30       	cpi	r20, 0x02	; 2
    14a8:	51 05       	cpc	r21, r1
    14aa:	79 f1       	breq	.+94     	; 0x150a <DIO_u8GetPinValue+0xc8>
    14ac:	8e 81       	ldd	r24, Y+6	; 0x06
    14ae:	9f 81       	ldd	r25, Y+7	; 0x07
    14b0:	83 30       	cpi	r24, 0x03	; 3
    14b2:	91 05       	cpc	r25, r1
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <DIO_u8GetPinValue+0x76>
    14b6:	3d c0       	rjmp	.+122    	; 0x1532 <DIO_u8GetPinValue+0xf0>
    14b8:	50 c0       	rjmp	.+160    	; 0x155a <DIO_u8GetPinValue+0x118>
		{
		case DIO_PORT_0:
			*Copy_u8Value = GET_BIT(PINA, Copy_u8PinNB);
    14ba:	e9 e3       	ldi	r30, 0x39	; 57
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	88 2f       	mov	r24, r24
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	a9 01       	movw	r20, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <DIO_u8GetPinValue+0x90>
    14ce:	55 95       	asr	r21
    14d0:	47 95       	ror	r20
    14d2:	8a 95       	dec	r24
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <DIO_u8GetPinValue+0x8c>
    14d6:	ca 01       	movw	r24, r20
    14d8:	81 70       	andi	r24, 0x01	; 1
    14da:	ec 81       	ldd	r30, Y+4	; 0x04
    14dc:	fd 81       	ldd	r31, Y+5	; 0x05
    14de:	80 83       	st	Z, r24
    14e0:	3e c0       	rjmp	.+124    	; 0x155e <DIO_u8GetPinValue+0x11c>
			break;

		case DIO_PORT_1:
			*Copy_u8Value = GET_BIT(PINB, Copy_u8PinNB);
    14e2:	e6 e3       	ldi	r30, 0x36	; 54
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	a9 01       	movw	r20, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <DIO_u8GetPinValue+0xb8>
    14f6:	55 95       	asr	r21
    14f8:	47 95       	ror	r20
    14fa:	8a 95       	dec	r24
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <DIO_u8GetPinValue+0xb4>
    14fe:	ca 01       	movw	r24, r20
    1500:	81 70       	andi	r24, 0x01	; 1
    1502:	ec 81       	ldd	r30, Y+4	; 0x04
    1504:	fd 81       	ldd	r31, Y+5	; 0x05
    1506:	80 83       	st	Z, r24
    1508:	2a c0       	rjmp	.+84     	; 0x155e <DIO_u8GetPinValue+0x11c>
			break;

		case DIO_PORT_2:
			*Copy_u8Value = GET_BIT(PINC, Copy_u8PinNB);
    150a:	e3 e3       	ldi	r30, 0x33	; 51
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	88 2f       	mov	r24, r24
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	a9 01       	movw	r20, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <DIO_u8GetPinValue+0xe0>
    151e:	55 95       	asr	r21
    1520:	47 95       	ror	r20
    1522:	8a 95       	dec	r24
    1524:	e2 f7       	brpl	.-8      	; 0x151e <DIO_u8GetPinValue+0xdc>
    1526:	ca 01       	movw	r24, r20
    1528:	81 70       	andi	r24, 0x01	; 1
    152a:	ec 81       	ldd	r30, Y+4	; 0x04
    152c:	fd 81       	ldd	r31, Y+5	; 0x05
    152e:	80 83       	st	Z, r24
    1530:	16 c0       	rjmp	.+44     	; 0x155e <DIO_u8GetPinValue+0x11c>
			break;

		case DIO_PORT_3:
			*Copy_u8Value = GET_BIT(PIND, Copy_u8PinNB);
    1532:	e0 e3       	ldi	r30, 0x30	; 48
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	a9 01       	movw	r20, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <DIO_u8GetPinValue+0x108>
    1546:	55 95       	asr	r21
    1548:	47 95       	ror	r20
    154a:	8a 95       	dec	r24
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <DIO_u8GetPinValue+0x104>
    154e:	ca 01       	movw	r24, r20
    1550:	81 70       	andi	r24, 0x01	; 1
    1552:	ec 81       	ldd	r30, Y+4	; 0x04
    1554:	fd 81       	ldd	r31, Y+5	; 0x05
    1556:	80 83       	st	Z, r24
    1558:	02 c0       	rjmp	.+4      	; 0x155e <DIO_u8GetPinValue+0x11c>
			break;

		default:
			Local_u8Error = 1;
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return Local_u8Error;
    155e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1560:	27 96       	adiw	r28, 0x07	; 7
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <DIO_u8TogglePinValue>:
 * Input		: Port Number, Pin Number
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 DIO_u8TogglePinValue(u8 Copy_u8PortNB, u8 Copy_u8PinNB)
{
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	00 d0       	rcall	.+0      	; 0x1578 <DIO_u8TogglePinValue+0x6>
    1578:	00 d0       	rcall	.+0      	; 0x157a <DIO_u8TogglePinValue+0x8>
    157a:	0f 92       	push	r0
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	8a 83       	std	Y+2, r24	; 0x02
    1582:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
    1584:	19 82       	std	Y+1, r1	; 0x01

	/*Check that the PIN Number is between 0 -> 7 else Return Local Error with ONE*/
	if(Copy_u8PinNB > DIO_PIN_7 || Copy_u8PortNB > 3)
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	88 30       	cpi	r24, 0x08	; 8
    158a:	18 f4       	brcc	.+6      	; 0x1592 <DIO_u8TogglePinValue+0x20>
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	84 30       	cpi	r24, 0x04	; 4
    1590:	18 f0       	brcs	.+6      	; 0x1598 <DIO_u8TogglePinValue+0x26>
	{
		Local_u8Error = 1;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	71 c0       	rjmp	.+226    	; 0x167a <DIO_u8TogglePinValue+0x108>
	}

	/*Else Check for the PORT number is between 0 -> 3*/
	else
	{
		switch(Copy_u8PortNB)
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	3d 83       	std	Y+5, r19	; 0x05
    15a0:	2c 83       	std	Y+4, r18	; 0x04
    15a2:	8c 81       	ldd	r24, Y+4	; 0x04
    15a4:	9d 81       	ldd	r25, Y+5	; 0x05
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	91 05       	cpc	r25, r1
    15aa:	49 f1       	breq	.+82     	; 0x15fe <DIO_u8TogglePinValue+0x8c>
    15ac:	2c 81       	ldd	r18, Y+4	; 0x04
    15ae:	3d 81       	ldd	r19, Y+5	; 0x05
    15b0:	22 30       	cpi	r18, 0x02	; 2
    15b2:	31 05       	cpc	r19, r1
    15b4:	2c f4       	brge	.+10     	; 0x15c0 <DIO_u8TogglePinValue+0x4e>
    15b6:	8c 81       	ldd	r24, Y+4	; 0x04
    15b8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	61 f0       	breq	.+24     	; 0x15d6 <DIO_u8TogglePinValue+0x64>
    15be:	5b c0       	rjmp	.+182    	; 0x1676 <DIO_u8TogglePinValue+0x104>
    15c0:	2c 81       	ldd	r18, Y+4	; 0x04
    15c2:	3d 81       	ldd	r19, Y+5	; 0x05
    15c4:	22 30       	cpi	r18, 0x02	; 2
    15c6:	31 05       	cpc	r19, r1
    15c8:	71 f1       	breq	.+92     	; 0x1626 <DIO_u8TogglePinValue+0xb4>
    15ca:	8c 81       	ldd	r24, Y+4	; 0x04
    15cc:	9d 81       	ldd	r25, Y+5	; 0x05
    15ce:	83 30       	cpi	r24, 0x03	; 3
    15d0:	91 05       	cpc	r25, r1
    15d2:	e9 f1       	breq	.+122    	; 0x164e <DIO_u8TogglePinValue+0xdc>
    15d4:	50 c0       	rjmp	.+160    	; 0x1676 <DIO_u8TogglePinValue+0x104>
		{
		case DIO_PORT_0:
			TOGGLE_BIT(PORTA, Copy_u8PinNB);
    15d6:	ab e3       	ldi	r26, 0x3B	; 59
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	eb e3       	ldi	r30, 0x3B	; 59
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	48 2f       	mov	r20, r24
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 2e       	mov	r0, r18
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <DIO_u8TogglePinValue+0x82>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	0a 94       	dec	r0
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <DIO_u8TogglePinValue+0x7e>
    15f8:	84 27       	eor	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	3e c0       	rjmp	.+124    	; 0x167a <DIO_u8TogglePinValue+0x108>
			break;

		case DIO_PORT_1:
			TOGGLE_BIT(PORTB, Copy_u8PinNB);
    15fe:	a8 e3       	ldi	r26, 0x38	; 56
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e8 e3       	ldi	r30, 0x38	; 56
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_u8TogglePinValue+0xaa>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_u8TogglePinValue+0xa6>
    1620:	84 27       	eor	r24, r20
    1622:	8c 93       	st	X, r24
    1624:	2a c0       	rjmp	.+84     	; 0x167a <DIO_u8TogglePinValue+0x108>
			break;

		case DIO_PORT_2:
			TOGGLE_BIT(PORTC, Copy_u8PinNB);
    1626:	a5 e3       	ldi	r26, 0x35	; 53
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e5 e3       	ldi	r30, 0x35	; 53
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <DIO_u8TogglePinValue+0xd2>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <DIO_u8TogglePinValue+0xce>
    1648:	84 27       	eor	r24, r20
    164a:	8c 93       	st	X, r24
    164c:	16 c0       	rjmp	.+44     	; 0x167a <DIO_u8TogglePinValue+0x108>
			break;

		case DIO_PORT_3:
			TOGGLE_BIT(PORTD, Copy_u8PinNB);
    164e:	a2 e3       	ldi	r26, 0x32	; 50
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e2 e3       	ldi	r30, 0x32	; 50
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	48 2f       	mov	r20, r24
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	02 2e       	mov	r0, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <DIO_u8TogglePinValue+0xfa>
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	0a 94       	dec	r0
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <DIO_u8TogglePinValue+0xf6>
    1670:	84 27       	eor	r24, r20
    1672:	8c 93       	st	X, r24
    1674:	02 c0       	rjmp	.+4      	; 0x167a <DIO_u8TogglePinValue+0x108>
			break;

		default:
			Local_u8Error = 1;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_u8Error;
    167a:	89 81       	ldd	r24, Y+1	; 0x01
}
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <LCD_voidWriteCommand>:
/* Description	: Send a Command to LCD through the Data PORT
 * Input		: Command
 * Output		: Non
 */
void LCD_voidWriteCommand(u8 Copy_u8Command)
{
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	2f 97       	sbiw	r28, 0x0f	; 15
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	8f 87       	std	Y+15, r24	; 0x0f
	/*Make Sure that the Enable PIN is LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    16a2:	82 e0       	ldi	r24, 0x02	; 2
    16a4:	62 e0       	ldi	r22, 0x02	; 2
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_u8SetPinValue>

	/*Make Sure that the Register Select PIN is LOW as (RS -> LOW for Command) (RS -> HIGH for Data)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_LOW);
    16ac:	82 e0       	ldi	r24, 0x02	; 2
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	40 e0       	ldi	r20, 0x00	; 0
    16b2:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_u8SetPinValue>

	/*Make Sure that the Read Write PIN is LOW as (RW -> LOW for Write) (RW -> HIGH for Read)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_LOW);
    16b6:	82 e0       	ldi	r24, 0x02	; 2
    16b8:	61 e0       	ldi	r22, 0x01	; 1
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_u8SetPinValue>

	/*Send the Command on Data Pins D0 -> D7*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Command);
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	6f 85       	ldd	r22, Y+15	; 0x0f
    16c4:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_u8SetPortValue>

	/*Enable Sequence*/
	/*Make the Enable Pin HIGH*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_HIGH);
    16c8:	82 e0       	ldi	r24, 0x02	; 2
    16ca:	62 e0       	ldi	r22, 0x02	; 2
    16cc:	41 e0       	ldi	r20, 0x01	; 1
    16ce:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_u8SetPinValue>
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	a0 e0       	ldi	r26, 0x00	; 0
    16d8:	b0 e4       	ldi	r27, 0x40	; 64
    16da:	8b 87       	std	Y+11, r24	; 0x0b
    16dc:	9c 87       	std	Y+12, r25	; 0x0c
    16de:	ad 87       	std	Y+13, r26	; 0x0d
    16e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	4a ef       	ldi	r20, 0xFA	; 250
    16f0:	54 e4       	ldi	r21, 0x44	; 68
    16f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	8f 83       	std	Y+7, r24	; 0x07
    16fc:	98 87       	std	Y+8, r25	; 0x08
    16fe:	a9 87       	std	Y+9, r26	; 0x09
    1700:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1702:	6f 81       	ldd	r22, Y+7	; 0x07
    1704:	78 85       	ldd	r23, Y+8	; 0x08
    1706:	89 85       	ldd	r24, Y+9	; 0x09
    1708:	9a 85       	ldd	r25, Y+10	; 0x0a
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e8       	ldi	r20, 0x80	; 128
    1710:	5f e3       	ldi	r21, 0x3F	; 63
    1712:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1716:	88 23       	and	r24, r24
    1718:	2c f4       	brge	.+10     	; 0x1724 <LCD_voidWriteCommand+0x98>
		__ticks = 1;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	9e 83       	std	Y+6, r25	; 0x06
    1720:	8d 83       	std	Y+5, r24	; 0x05
    1722:	3f c0       	rjmp	.+126    	; 0x17a2 <LCD_voidWriteCommand+0x116>
	else if (__tmp > 65535)
    1724:	6f 81       	ldd	r22, Y+7	; 0x07
    1726:	78 85       	ldd	r23, Y+8	; 0x08
    1728:	89 85       	ldd	r24, Y+9	; 0x09
    172a:	9a 85       	ldd	r25, Y+10	; 0x0a
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	3f ef       	ldi	r19, 0xFF	; 255
    1730:	4f e7       	ldi	r20, 0x7F	; 127
    1732:	57 e4       	ldi	r21, 0x47	; 71
    1734:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1738:	18 16       	cp	r1, r24
    173a:	4c f5       	brge	.+82     	; 0x178e <LCD_voidWriteCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173c:	6b 85       	ldd	r22, Y+11	; 0x0b
    173e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1740:	8d 85       	ldd	r24, Y+13	; 0x0d
    1742:	9e 85       	ldd	r25, Y+14	; 0x0e
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e2       	ldi	r20, 0x20	; 32
    174a:	51 e4       	ldi	r21, 0x41	; 65
    174c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	bc 01       	movw	r22, r24
    1756:	cd 01       	movw	r24, r26
    1758:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	9e 83       	std	Y+6, r25	; 0x06
    1762:	8d 83       	std	Y+5, r24	; 0x05
    1764:	0f c0       	rjmp	.+30     	; 0x1784 <LCD_voidWriteCommand+0xf8>
    1766:	88 ec       	ldi	r24, 0xC8	; 200
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	9c 83       	std	Y+4, r25	; 0x04
    176c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	9c 81       	ldd	r25, Y+4	; 0x04
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <LCD_voidWriteCommand+0xe6>
    1776:	9c 83       	std	Y+4, r25	; 0x04
    1778:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177a:	8d 81       	ldd	r24, Y+5	; 0x05
    177c:	9e 81       	ldd	r25, Y+6	; 0x06
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	9e 83       	std	Y+6, r25	; 0x06
    1782:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
    1786:	9e 81       	ldd	r25, Y+6	; 0x06
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	69 f7       	brne	.-38     	; 0x1766 <LCD_voidWriteCommand+0xda>
    178c:	14 c0       	rjmp	.+40     	; 0x17b6 <LCD_voidWriteCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178e:	6f 81       	ldd	r22, Y+7	; 0x07
    1790:	78 85       	ldd	r23, Y+8	; 0x08
    1792:	89 85       	ldd	r24, Y+9	; 0x09
    1794:	9a 85       	ldd	r25, Y+10	; 0x0a
    1796:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	9e 83       	std	Y+6, r25	; 0x06
    17a0:	8d 83       	std	Y+5, r24	; 0x05
    17a2:	8d 81       	ldd	r24, Y+5	; 0x05
    17a4:	9e 81       	ldd	r25, Y+6	; 0x06
    17a6:	9a 83       	std	Y+2, r25	; 0x02
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	9a 81       	ldd	r25, Y+2	; 0x02
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <LCD_voidWriteCommand+0x122>
    17b2:	9a 83       	std	Y+2, r25	; 0x02
    17b4:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for 2 msec.*/
	_delay_ms(2);

	/*Re-Make Enable Pin as LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    17b6:	82 e0       	ldi	r24, 0x02	; 2
    17b8:	62 e0       	ldi	r22, 0x02	; 2
    17ba:	40 e0       	ldi	r20, 0x00	; 0
    17bc:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_u8SetPinValue>
}
    17c0:	2f 96       	adiw	r28, 0x0f	; 15
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	de bf       	out	0x3e, r29	; 62
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	cd bf       	out	0x3d, r28	; 61
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <LCD_voidWriteData>:
/* Description	: Send a Data to LCD through the Data PORT
 * Input		: Data
 * Output		: Non
 */
void LCD_voidWriteData(u8 Copy_u8Data)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	2f 97       	sbiw	r28, 0x0f	; 15
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	8f 87       	std	Y+15, r24	; 0x0f
	/*Make Sure that the Enable PIN is LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    17e8:	82 e0       	ldi	r24, 0x02	; 2
    17ea:	62 e0       	ldi	r22, 0x02	; 2
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_u8SetPinValue>

	/*Make Sure that the Register Select PIN is LOW as (RS -> LOW for Command) (RS -> HIGH for Data)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_HIGH);
    17f2:	82 e0       	ldi	r24, 0x02	; 2
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	41 e0       	ldi	r20, 0x01	; 1
    17f8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_u8SetPinValue>

	/*Make Sure that the Read Write PIN is LOW as (RW -> LOW for Write) (RW -> HIGH for Read)*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_LOW);
    17fc:	82 e0       	ldi	r24, 0x02	; 2
    17fe:	61 e0       	ldi	r22, 0x01	; 1
    1800:	40 e0       	ldi	r20, 0x00	; 0
    1802:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_u8SetPinValue>

	/*Send the Command on Data Pins D0 -> D7*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Data);
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	6f 85       	ldd	r22, Y+15	; 0x0f
    180a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_u8SetPortValue>

	/*Enable Sequence*/
	/*Make the Enable Pin HIGH*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_HIGH);
    180e:	82 e0       	ldi	r24, 0x02	; 2
    1810:	62 e0       	ldi	r22, 0x02	; 2
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_u8SetPinValue>
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	a0 e0       	ldi	r26, 0x00	; 0
    181e:	b0 e4       	ldi	r27, 0x40	; 64
    1820:	8b 87       	std	Y+11, r24	; 0x0b
    1822:	9c 87       	std	Y+12, r25	; 0x0c
    1824:	ad 87       	std	Y+13, r26	; 0x0d
    1826:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1828:	6b 85       	ldd	r22, Y+11	; 0x0b
    182a:	7c 85       	ldd	r23, Y+12	; 0x0c
    182c:	8d 85       	ldd	r24, Y+13	; 0x0d
    182e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	4a ef       	ldi	r20, 0xFA	; 250
    1836:	54 e4       	ldi	r21, 0x44	; 68
    1838:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	8f 83       	std	Y+7, r24	; 0x07
    1842:	98 87       	std	Y+8, r25	; 0x08
    1844:	a9 87       	std	Y+9, r26	; 0x09
    1846:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1848:	6f 81       	ldd	r22, Y+7	; 0x07
    184a:	78 85       	ldd	r23, Y+8	; 0x08
    184c:	89 85       	ldd	r24, Y+9	; 0x09
    184e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e8       	ldi	r20, 0x80	; 128
    1856:	5f e3       	ldi	r21, 0x3F	; 63
    1858:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    185c:	88 23       	and	r24, r24
    185e:	2c f4       	brge	.+10     	; 0x186a <LCD_voidWriteData+0x98>
		__ticks = 1;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9e 83       	std	Y+6, r25	; 0x06
    1866:	8d 83       	std	Y+5, r24	; 0x05
    1868:	3f c0       	rjmp	.+126    	; 0x18e8 <LCD_voidWriteData+0x116>
	else if (__tmp > 65535)
    186a:	6f 81       	ldd	r22, Y+7	; 0x07
    186c:	78 85       	ldd	r23, Y+8	; 0x08
    186e:	89 85       	ldd	r24, Y+9	; 0x09
    1870:	9a 85       	ldd	r25, Y+10	; 0x0a
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	3f ef       	ldi	r19, 0xFF	; 255
    1876:	4f e7       	ldi	r20, 0x7F	; 127
    1878:	57 e4       	ldi	r21, 0x47	; 71
    187a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    187e:	18 16       	cp	r1, r24
    1880:	4c f5       	brge	.+82     	; 0x18d4 <LCD_voidWriteData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1882:	6b 85       	ldd	r22, Y+11	; 0x0b
    1884:	7c 85       	ldd	r23, Y+12	; 0x0c
    1886:	8d 85       	ldd	r24, Y+13	; 0x0d
    1888:	9e 85       	ldd	r25, Y+14	; 0x0e
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e2       	ldi	r20, 0x20	; 32
    1890:	51 e4       	ldi	r21, 0x41	; 65
    1892:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	bc 01       	movw	r22, r24
    189c:	cd 01       	movw	r24, r26
    189e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
    18aa:	0f c0       	rjmp	.+30     	; 0x18ca <LCD_voidWriteData+0xf8>
    18ac:	88 ec       	ldi	r24, 0xC8	; 200
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	9c 83       	std	Y+4, r25	; 0x04
    18b2:	8b 83       	std	Y+3, r24	; 0x03
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <LCD_voidWriteData+0xe6>
    18bc:	9c 83       	std	Y+4, r25	; 0x04
    18be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c0:	8d 81       	ldd	r24, Y+5	; 0x05
    18c2:	9e 81       	ldd	r25, Y+6	; 0x06
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	9e 83       	std	Y+6, r25	; 0x06
    18c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ca:	8d 81       	ldd	r24, Y+5	; 0x05
    18cc:	9e 81       	ldd	r25, Y+6	; 0x06
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	69 f7       	brne	.-38     	; 0x18ac <LCD_voidWriteData+0xda>
    18d2:	14 c0       	rjmp	.+40     	; 0x18fc <LCD_voidWriteData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d4:	6f 81       	ldd	r22, Y+7	; 0x07
    18d6:	78 85       	ldd	r23, Y+8	; 0x08
    18d8:	89 85       	ldd	r24, Y+9	; 0x09
    18da:	9a 85       	ldd	r25, Y+10	; 0x0a
    18dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	9e 83       	std	Y+6, r25	; 0x06
    18e6:	8d 83       	std	Y+5, r24	; 0x05
    18e8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ea:	9e 81       	ldd	r25, Y+6	; 0x06
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	9a 81       	ldd	r25, Y+2	; 0x02
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <LCD_voidWriteData+0x122>
    18f8:	9a 83       	std	Y+2, r25	; 0x02
    18fa:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for 2 msec.*/
	_delay_ms(2);

	/*Re-Make Enable Pin as LOW*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_LOW);
    18fc:	82 e0       	ldi	r24, 0x02	; 2
    18fe:	62 e0       	ldi	r22, 0x02	; 2
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_u8SetPinValue>
}
    1906:	2f 96       	adiw	r28, 0x0f	; 15
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	de bf       	out	0x3e, r29	; 62
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	cd bf       	out	0x3d, r28	; 61
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <LCD_voidInitialization>:
/* Description	: Initializing the LCD
 * Input		: Non
 * Output		: Non
 */
void LCD_voidInitialization(void)
{
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	c6 55       	subi	r28, 0x56	; 86
    1926:	d0 40       	sbci	r29, 0x00	; 0
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	de bf       	out	0x3e, r29	; 62
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	cd bf       	out	0x3d, r28	; 61
    1932:	fe 01       	movw	r30, r28
    1934:	ed 5a       	subi	r30, 0xAD	; 173
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	ac e0       	ldi	r26, 0x0C	; 12
    193e:	b2 e4       	ldi	r27, 0x42	; 66
    1940:	80 83       	st	Z, r24
    1942:	91 83       	std	Z+1, r25	; 0x01
    1944:	a2 83       	std	Z+2, r26	; 0x02
    1946:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1948:	8e 01       	movw	r16, r28
    194a:	01 5b       	subi	r16, 0xB1	; 177
    194c:	1f 4f       	sbci	r17, 0xFF	; 255
    194e:	fe 01       	movw	r30, r28
    1950:	ed 5a       	subi	r30, 0xAD	; 173
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	60 81       	ld	r22, Z
    1956:	71 81       	ldd	r23, Z+1	; 0x01
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	4a ef       	ldi	r20, 0xFA	; 250
    1962:	54 e4       	ldi	r21, 0x44	; 68
    1964:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	f8 01       	movw	r30, r16
    196e:	80 83       	st	Z, r24
    1970:	91 83       	std	Z+1, r25	; 0x01
    1972:	a2 83       	std	Z+2, r26	; 0x02
    1974:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1976:	fe 01       	movw	r30, r28
    1978:	e1 5b       	subi	r30, 0xB1	; 177
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	60 81       	ld	r22, Z
    197e:	71 81       	ldd	r23, Z+1	; 0x01
    1980:	82 81       	ldd	r24, Z+2	; 0x02
    1982:	93 81       	ldd	r25, Z+3	; 0x03
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e8       	ldi	r20, 0x80	; 128
    198a:	5f e3       	ldi	r21, 0x3F	; 63
    198c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1990:	88 23       	and	r24, r24
    1992:	44 f4       	brge	.+16     	; 0x19a4 <LCD_voidInitialization+0x8c>
		__ticks = 1;
    1994:	fe 01       	movw	r30, r28
    1996:	e3 5b       	subi	r30, 0xB3	; 179
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
    19a2:	64 c0       	rjmp	.+200    	; 0x1a6c <LCD_voidInitialization+0x154>
	else if (__tmp > 65535)
    19a4:	fe 01       	movw	r30, r28
    19a6:	e1 5b       	subi	r30, 0xB1	; 177
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	60 81       	ld	r22, Z
    19ac:	71 81       	ldd	r23, Z+1	; 0x01
    19ae:	82 81       	ldd	r24, Z+2	; 0x02
    19b0:	93 81       	ldd	r25, Z+3	; 0x03
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	3f ef       	ldi	r19, 0xFF	; 255
    19b6:	4f e7       	ldi	r20, 0x7F	; 127
    19b8:	57 e4       	ldi	r21, 0x47	; 71
    19ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19be:	18 16       	cp	r1, r24
    19c0:	0c f0       	brlt	.+2      	; 0x19c4 <LCD_voidInitialization+0xac>
    19c2:	43 c0       	rjmp	.+134    	; 0x1a4a <LCD_voidInitialization+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c4:	fe 01       	movw	r30, r28
    19c6:	ed 5a       	subi	r30, 0xAD	; 173
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	60 81       	ld	r22, Z
    19cc:	71 81       	ldd	r23, Z+1	; 0x01
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e2       	ldi	r20, 0x20	; 32
    19d8:	51 e4       	ldi	r21, 0x41	; 65
    19da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	8e 01       	movw	r16, r28
    19e4:	03 5b       	subi	r16, 0xB3	; 179
    19e6:	1f 4f       	sbci	r17, 0xFF	; 255
    19e8:	bc 01       	movw	r22, r24
    19ea:	cd 01       	movw	r24, r26
    19ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	f8 01       	movw	r30, r16
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
    19fa:	1f c0       	rjmp	.+62     	; 0x1a3a <LCD_voidInitialization+0x122>
    19fc:	fe 01       	movw	r30, r28
    19fe:	e5 5b       	subi	r30, 0xB5	; 181
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	88 ec       	ldi	r24, 0xC8	; 200
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	91 83       	std	Z+1, r25	; 0x01
    1a08:	80 83       	st	Z, r24
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	e5 5b       	subi	r30, 0xB5	; 181
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 81       	ld	r24, Z
    1a12:	91 81       	ldd	r25, Z+1	; 0x01
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <LCD_voidInitialization+0xfc>
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e5 5b       	subi	r30, 0xB5	; 181
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	91 83       	std	Z+1, r25	; 0x01
    1a20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a22:	de 01       	movw	r26, r28
    1a24:	a3 5b       	subi	r26, 0xB3	; 179
    1a26:	bf 4f       	sbci	r27, 0xFF	; 255
    1a28:	fe 01       	movw	r30, r28
    1a2a:	e3 5b       	subi	r30, 0xB3	; 179
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	11 96       	adiw	r26, 0x01	; 1
    1a36:	9c 93       	st	X, r25
    1a38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	e3 5b       	subi	r30, 0xB3	; 179
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	80 81       	ld	r24, Z
    1a42:	91 81       	ldd	r25, Z+1	; 0x01
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	d1 f6       	brne	.-76     	; 0x19fc <LCD_voidInitialization+0xe4>
    1a48:	27 c0       	rjmp	.+78     	; 0x1a98 <LCD_voidInitialization+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4a:	8e 01       	movw	r16, r28
    1a4c:	03 5b       	subi	r16, 0xB3	; 179
    1a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a50:	fe 01       	movw	r30, r28
    1a52:	e1 5b       	subi	r30, 0xB1	; 177
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	60 81       	ld	r22, Z
    1a58:	71 81       	ldd	r23, Z+1	; 0x01
    1a5a:	82 81       	ldd	r24, Z+2	; 0x02
    1a5c:	93 81       	ldd	r25, Z+3	; 0x03
    1a5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	f8 01       	movw	r30, r16
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	80 83       	st	Z, r24
    1a6c:	de 01       	movw	r26, r28
    1a6e:	a7 5b       	subi	r26, 0xB7	; 183
    1a70:	bf 4f       	sbci	r27, 0xFF	; 255
    1a72:	fe 01       	movw	r30, r28
    1a74:	e3 5b       	subi	r30, 0xB3	; 179
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	80 81       	ld	r24, Z
    1a7a:	91 81       	ldd	r25, Z+1	; 0x01
    1a7c:	8d 93       	st	X+, r24
    1a7e:	9c 93       	st	X, r25
    1a80:	fe 01       	movw	r30, r28
    1a82:	e7 5b       	subi	r30, 0xB7	; 183
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	80 81       	ld	r24, Z
    1a88:	91 81       	ldd	r25, Z+1	; 0x01
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <LCD_voidInitialization+0x172>
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e7 5b       	subi	r30, 0xB7	; 183
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	80 83       	st	Z, r24
	 *				-> 5*8  -> 0
	 *
	 *DB3	Number of Lines(N) -> 1 Line  -> 0
	 *						   -> 2 Lines -> 1
	 */
	LCD_voidWriteCommand(0b00111100);
    1a98:	8c e3       	ldi	r24, 0x3C	; 60
    1a9a:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_voidWriteCommand>
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	eb 5b       	subi	r30, 0xBB	; 187
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a4 e3       	ldi	r26, 0x34	; 52
    1aaa:	b2 e4       	ldi	r27, 0x42	; 66
    1aac:	80 83       	st	Z, r24
    1aae:	91 83       	std	Z+1, r25	; 0x01
    1ab0:	a2 83       	std	Z+2, r26	; 0x02
    1ab2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ab4:	8e 01       	movw	r16, r28
    1ab6:	0f 5b       	subi	r16, 0xBF	; 191
    1ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aba:	fe 01       	movw	r30, r28
    1abc:	eb 5b       	subi	r30, 0xBB	; 187
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	60 81       	ld	r22, Z
    1ac2:	71 81       	ldd	r23, Z+1	; 0x01
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	93 81       	ldd	r25, Z+3	; 0x03
    1ac8:	2b ea       	ldi	r18, 0xAB	; 171
    1aca:	3a ea       	ldi	r19, 0xAA	; 170
    1acc:	4a e2       	ldi	r20, 0x2A	; 42
    1ace:	50 e4       	ldi	r21, 0x40	; 64
    1ad0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	f8 01       	movw	r30, r16
    1ada:	80 83       	st	Z, r24
    1adc:	91 83       	std	Z+1, r25	; 0x01
    1ade:	a2 83       	std	Z+2, r26	; 0x02
    1ae0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	ef 5b       	subi	r30, 0xBF	; 191
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	60 81       	ld	r22, Z
    1aea:	71 81       	ldd	r23, Z+1	; 0x01
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e8       	ldi	r20, 0x80	; 128
    1af6:	5f e3       	ldi	r21, 0x3F	; 63
    1af8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1afc:	88 23       	and	r24, r24
    1afe:	34 f4       	brge	.+12     	; 0x1b0c <LCD_voidInitialization+0x1f4>
		__ticks = 1;
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	fe 01       	movw	r30, r28
    1b04:	e0 5c       	subi	r30, 0xC0	; 192
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	80 83       	st	Z, r24
    1b0a:	9d c0       	rjmp	.+314    	; 0x1c46 <LCD_voidInitialization+0x32e>
	else if (__tmp > 255)
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	ef 5b       	subi	r30, 0xBF	; 191
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	60 81       	ld	r22, Z
    1b14:	71 81       	ldd	r23, Z+1	; 0x01
    1b16:	82 81       	ldd	r24, Z+2	; 0x02
    1b18:	93 81       	ldd	r25, Z+3	; 0x03
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	4f e7       	ldi	r20, 0x7F	; 127
    1b20:	53 e4       	ldi	r21, 0x43	; 67
    1b22:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b26:	18 16       	cp	r1, r24
    1b28:	0c f0       	brlt	.+2      	; 0x1b2c <LCD_voidInitialization+0x214>
    1b2a:	7e c0       	rjmp	.+252    	; 0x1c28 <LCD_voidInitialization+0x310>
	{
		_delay_ms(__us / 1000.0);
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	eb 5b       	subi	r30, 0xBB	; 187
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	60 81       	ld	r22, Z
    1b34:	71 81       	ldd	r23, Z+1	; 0x01
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	93 81       	ldd	r25, Z+3	; 0x03
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	4a e7       	ldi	r20, 0x7A	; 122
    1b40:	54 e4       	ldi	r21, 0x44	; 68
    1b42:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	8c af       	std	Y+60, r24	; 0x3c
    1b4c:	9d af       	std	Y+61, r25	; 0x3d
    1b4e:	ae af       	std	Y+62, r26	; 0x3e
    1b50:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b52:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b54:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b56:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b58:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	4a ef       	ldi	r20, 0xFA	; 250
    1b60:	54 e4       	ldi	r21, 0x44	; 68
    1b62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	88 af       	std	Y+56, r24	; 0x38
    1b6c:	99 af       	std	Y+57, r25	; 0x39
    1b6e:	aa af       	std	Y+58, r26	; 0x3a
    1b70:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1b72:	68 ad       	ldd	r22, Y+56	; 0x38
    1b74:	79 ad       	ldd	r23, Y+57	; 0x39
    1b76:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b78:	9b ad       	ldd	r25, Y+59	; 0x3b
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e8       	ldi	r20, 0x80	; 128
    1b80:	5f e3       	ldi	r21, 0x3F	; 63
    1b82:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b86:	88 23       	and	r24, r24
    1b88:	2c f4       	brge	.+10     	; 0x1b94 <LCD_voidInitialization+0x27c>
		__ticks = 1;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	9f ab       	std	Y+55, r25	; 0x37
    1b90:	8e ab       	std	Y+54, r24	; 0x36
    1b92:	3f c0       	rjmp	.+126    	; 0x1c12 <LCD_voidInitialization+0x2fa>
	else if (__tmp > 65535)
    1b94:	68 ad       	ldd	r22, Y+56	; 0x38
    1b96:	79 ad       	ldd	r23, Y+57	; 0x39
    1b98:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b9a:	9b ad       	ldd	r25, Y+59	; 0x3b
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ba0:	4f e7       	ldi	r20, 0x7F	; 127
    1ba2:	57 e4       	ldi	r21, 0x47	; 71
    1ba4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ba8:	18 16       	cp	r1, r24
    1baa:	4c f5       	brge	.+82     	; 0x1bfe <LCD_voidInitialization+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bac:	6c ad       	ldd	r22, Y+60	; 0x3c
    1bae:	7d ad       	ldd	r23, Y+61	; 0x3d
    1bb0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bb2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e2       	ldi	r20, 0x20	; 32
    1bba:	51 e4       	ldi	r21, 0x41	; 65
    1bbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	bc 01       	movw	r22, r24
    1bc6:	cd 01       	movw	r24, r26
    1bc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	9f ab       	std	Y+55, r25	; 0x37
    1bd2:	8e ab       	std	Y+54, r24	; 0x36
    1bd4:	0f c0       	rjmp	.+30     	; 0x1bf4 <LCD_voidInitialization+0x2dc>
    1bd6:	88 ec       	ldi	r24, 0xC8	; 200
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	9d ab       	std	Y+53, r25	; 0x35
    1bdc:	8c ab       	std	Y+52, r24	; 0x34
    1bde:	8c a9       	ldd	r24, Y+52	; 0x34
    1be0:	9d a9       	ldd	r25, Y+53	; 0x35
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <LCD_voidInitialization+0x2ca>
    1be6:	9d ab       	std	Y+53, r25	; 0x35
    1be8:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bea:	8e a9       	ldd	r24, Y+54	; 0x36
    1bec:	9f a9       	ldd	r25, Y+55	; 0x37
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	9f ab       	std	Y+55, r25	; 0x37
    1bf2:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf4:	8e a9       	ldd	r24, Y+54	; 0x36
    1bf6:	9f a9       	ldd	r25, Y+55	; 0x37
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	69 f7       	brne	.-38     	; 0x1bd6 <LCD_voidInitialization+0x2be>
    1bfc:	2d c0       	rjmp	.+90     	; 0x1c58 <LCD_voidInitialization+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfe:	68 ad       	ldd	r22, Y+56	; 0x38
    1c00:	79 ad       	ldd	r23, Y+57	; 0x39
    1c02:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c04:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	9f ab       	std	Y+55, r25	; 0x37
    1c10:	8e ab       	std	Y+54, r24	; 0x36
    1c12:	8e a9       	ldd	r24, Y+54	; 0x36
    1c14:	9f a9       	ldd	r25, Y+55	; 0x37
    1c16:	9b ab       	std	Y+51, r25	; 0x33
    1c18:	8a ab       	std	Y+50, r24	; 0x32
    1c1a:	8a a9       	ldd	r24, Y+50	; 0x32
    1c1c:	9b a9       	ldd	r25, Y+51	; 0x33
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_voidInitialization+0x306>
    1c22:	9b ab       	std	Y+51, r25	; 0x33
    1c24:	8a ab       	std	Y+50, r24	; 0x32
    1c26:	18 c0       	rjmp	.+48     	; 0x1c58 <LCD_voidInitialization+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c28:	fe 01       	movw	r30, r28
    1c2a:	ef 5b       	subi	r30, 0xBF	; 191
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e0 5c       	subi	r30, 0xC0	; 192
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	80 83       	st	Z, r24
    1c46:	fe 01       	movw	r30, r28
    1c48:	e0 5c       	subi	r30, 0xC0	; 192
    1c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4c:	80 81       	ld	r24, Z
    1c4e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c50:	89 a9       	ldd	r24, Y+49	; 0x31
    1c52:	8a 95       	dec	r24
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <LCD_voidInitialization+0x33a>
    1c56:	89 ab       	std	Y+49, r24	; 0x31
	 * 				  -> OFF -> 0
	 *
	 * DB2 	Display(D) -> ON  -> 1
	 * 				   -> OFF -> 0
	 */
	LCD_voidWriteCommand(0b00001100);
    1c58:	8c e0       	ldi	r24, 0x0C	; 12
    1c5a:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_voidWriteCommand>
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	a0 e8       	ldi	r26, 0x80	; 128
    1c64:	b0 e4       	ldi	r27, 0x40	; 64
    1c66:	8d a7       	std	Y+45, r24	; 0x2d
    1c68:	9e a7       	std	Y+46, r25	; 0x2e
    1c6a:	af a7       	std	Y+47, r26	; 0x2f
    1c6c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c6e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c70:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c74:	98 a9       	ldd	r25, Y+48	; 0x30
    1c76:	2b ea       	ldi	r18, 0xAB	; 171
    1c78:	3a ea       	ldi	r19, 0xAA	; 170
    1c7a:	4a e2       	ldi	r20, 0x2A	; 42
    1c7c:	50 e4       	ldi	r21, 0x40	; 64
    1c7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	89 a7       	std	Y+41, r24	; 0x29
    1c88:	9a a7       	std	Y+42, r25	; 0x2a
    1c8a:	ab a7       	std	Y+43, r26	; 0x2b
    1c8c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1c8e:	69 a5       	ldd	r22, Y+41	; 0x29
    1c90:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c92:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c94:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e8       	ldi	r20, 0x80	; 128
    1c9c:	5f e3       	ldi	r21, 0x3F	; 63
    1c9e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ca2:	88 23       	and	r24, r24
    1ca4:	1c f4       	brge	.+6      	; 0x1cac <LCD_voidInitialization+0x394>
		__ticks = 1;
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	88 a7       	std	Y+40, r24	; 0x28
    1caa:	91 c0       	rjmp	.+290    	; 0x1dce <LCD_voidInitialization+0x4b6>
	else if (__tmp > 255)
    1cac:	69 a5       	ldd	r22, Y+41	; 0x29
    1cae:	7a a5       	ldd	r23, Y+42	; 0x2a
    1cb0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cb2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	4f e7       	ldi	r20, 0x7F	; 127
    1cba:	53 e4       	ldi	r21, 0x43	; 67
    1cbc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cc0:	18 16       	cp	r1, r24
    1cc2:	0c f0       	brlt	.+2      	; 0x1cc6 <LCD_voidInitialization+0x3ae>
    1cc4:	7b c0       	rjmp	.+246    	; 0x1dbc <LCD_voidInitialization+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    1cc6:	6d a5       	ldd	r22, Y+45	; 0x2d
    1cc8:	7e a5       	ldd	r23, Y+46	; 0x2e
    1cca:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ccc:	98 a9       	ldd	r25, Y+48	; 0x30
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	4a e7       	ldi	r20, 0x7A	; 122
    1cd4:	54 e4       	ldi	r21, 0x44	; 68
    1cd6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	8c a3       	std	Y+36, r24	; 0x24
    1ce0:	9d a3       	std	Y+37, r25	; 0x25
    1ce2:	ae a3       	std	Y+38, r26	; 0x26
    1ce4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce6:	6c a1       	ldd	r22, Y+36	; 0x24
    1ce8:	7d a1       	ldd	r23, Y+37	; 0x25
    1cea:	8e a1       	ldd	r24, Y+38	; 0x26
    1cec:	9f a1       	ldd	r25, Y+39	; 0x27
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	4a ef       	ldi	r20, 0xFA	; 250
    1cf4:	54 e4       	ldi	r21, 0x44	; 68
    1cf6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	88 a3       	std	Y+32, r24	; 0x20
    1d00:	99 a3       	std	Y+33, r25	; 0x21
    1d02:	aa a3       	std	Y+34, r26	; 0x22
    1d04:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1d06:	68 a1       	ldd	r22, Y+32	; 0x20
    1d08:	79 a1       	ldd	r23, Y+33	; 0x21
    1d0a:	8a a1       	ldd	r24, Y+34	; 0x22
    1d0c:	9b a1       	ldd	r25, Y+35	; 0x23
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e8       	ldi	r20, 0x80	; 128
    1d14:	5f e3       	ldi	r21, 0x3F	; 63
    1d16:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d1a:	88 23       	and	r24, r24
    1d1c:	2c f4       	brge	.+10     	; 0x1d28 <LCD_voidInitialization+0x410>
		__ticks = 1;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9f 8f       	std	Y+31, r25	; 0x1f
    1d24:	8e 8f       	std	Y+30, r24	; 0x1e
    1d26:	3f c0       	rjmp	.+126    	; 0x1da6 <LCD_voidInitialization+0x48e>
	else if (__tmp > 65535)
    1d28:	68 a1       	ldd	r22, Y+32	; 0x20
    1d2a:	79 a1       	ldd	r23, Y+33	; 0x21
    1d2c:	8a a1       	ldd	r24, Y+34	; 0x22
    1d2e:	9b a1       	ldd	r25, Y+35	; 0x23
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	3f ef       	ldi	r19, 0xFF	; 255
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	57 e4       	ldi	r21, 0x47	; 71
    1d38:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d3c:	18 16       	cp	r1, r24
    1d3e:	4c f5       	brge	.+82     	; 0x1d92 <LCD_voidInitialization+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d40:	6c a1       	ldd	r22, Y+36	; 0x24
    1d42:	7d a1       	ldd	r23, Y+37	; 0x25
    1d44:	8e a1       	ldd	r24, Y+38	; 0x26
    1d46:	9f a1       	ldd	r25, Y+39	; 0x27
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e2       	ldi	r20, 0x20	; 32
    1d4e:	51 e4       	ldi	r21, 0x41	; 65
    1d50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	9f 8f       	std	Y+31, r25	; 0x1f
    1d66:	8e 8f       	std	Y+30, r24	; 0x1e
    1d68:	0f c0       	rjmp	.+30     	; 0x1d88 <LCD_voidInitialization+0x470>
    1d6a:	88 ec       	ldi	r24, 0xC8	; 200
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9d 8f       	std	Y+29, r25	; 0x1d
    1d70:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d72:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d74:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <LCD_voidInitialization+0x45e>
    1d7a:	9d 8f       	std	Y+29, r25	; 0x1d
    1d7c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d80:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	9f 8f       	std	Y+31, r25	; 0x1f
    1d86:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d8a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	69 f7       	brne	.-38     	; 0x1d6a <LCD_voidInitialization+0x452>
    1d90:	24 c0       	rjmp	.+72     	; 0x1dda <LCD_voidInitialization+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d92:	68 a1       	ldd	r22, Y+32	; 0x20
    1d94:	79 a1       	ldd	r23, Y+33	; 0x21
    1d96:	8a a1       	ldd	r24, Y+34	; 0x22
    1d98:	9b a1       	ldd	r25, Y+35	; 0x23
    1d9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	9f 8f       	std	Y+31, r25	; 0x1f
    1da4:	8e 8f       	std	Y+30, r24	; 0x1e
    1da6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1da8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1daa:	9b 8f       	std	Y+27, r25	; 0x1b
    1dac:	8a 8f       	std	Y+26, r24	; 0x1a
    1dae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1db0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <LCD_voidInitialization+0x49a>
    1db6:	9b 8f       	std	Y+27, r25	; 0x1b
    1db8:	8a 8f       	std	Y+26, r24	; 0x1a
    1dba:	0f c0       	rjmp	.+30     	; 0x1dda <LCD_voidInitialization+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dbc:	69 a5       	ldd	r22, Y+41	; 0x29
    1dbe:	7a a5       	ldd	r23, Y+42	; 0x2a
    1dc0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dc2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	88 a7       	std	Y+40, r24	; 0x28
    1dce:	88 a5       	ldd	r24, Y+40	; 0x28
    1dd0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dd2:	89 8d       	ldd	r24, Y+25	; 0x19
    1dd4:	8a 95       	dec	r24
    1dd6:	f1 f7       	brne	.-4      	; 0x1dd4 <LCD_voidInitialization+0x4bc>
    1dd8:	89 8f       	std	Y+25, r24	; 0x19

	/*Delay to Process Display ON/OFF Control*/
	_delay_us(4);

	/*Clear LCD*/
	LCD_voidWriteCommand(0b00000001);
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_voidWriteCommand>
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	a8 ec       	ldi	r26, 0xC8	; 200
    1de6:	b4 e4       	ldi	r27, 0x44	; 68
    1de8:	8d 8b       	std	Y+21, r24	; 0x15
    1dea:	9e 8b       	std	Y+22, r25	; 0x16
    1dec:	af 8b       	std	Y+23, r26	; 0x17
    1dee:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1df0:	6d 89       	ldd	r22, Y+21	; 0x15
    1df2:	7e 89       	ldd	r23, Y+22	; 0x16
    1df4:	8f 89       	ldd	r24, Y+23	; 0x17
    1df6:	98 8d       	ldd	r25, Y+24	; 0x18
    1df8:	2b ea       	ldi	r18, 0xAB	; 171
    1dfa:	3a ea       	ldi	r19, 0xAA	; 170
    1dfc:	4a e2       	ldi	r20, 0x2A	; 42
    1dfe:	50 e4       	ldi	r21, 0x40	; 64
    1e00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	89 8b       	std	Y+17, r24	; 0x11
    1e0a:	9a 8b       	std	Y+18, r25	; 0x12
    1e0c:	ab 8b       	std	Y+19, r26	; 0x13
    1e0e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e10:	69 89       	ldd	r22, Y+17	; 0x11
    1e12:	7a 89       	ldd	r23, Y+18	; 0x12
    1e14:	8b 89       	ldd	r24, Y+19	; 0x13
    1e16:	9c 89       	ldd	r25, Y+20	; 0x14
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e8       	ldi	r20, 0x80	; 128
    1e1e:	5f e3       	ldi	r21, 0x3F	; 63
    1e20:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e24:	88 23       	and	r24, r24
    1e26:	1c f4       	brge	.+6      	; 0x1e2e <LCD_voidInitialization+0x516>
		__ticks = 1;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	88 8b       	std	Y+16, r24	; 0x10
    1e2c:	91 c0       	rjmp	.+290    	; 0x1f50 <LCD_voidInitialization+0x638>
	else if (__tmp > 255)
    1e2e:	69 89       	ldd	r22, Y+17	; 0x11
    1e30:	7a 89       	ldd	r23, Y+18	; 0x12
    1e32:	8b 89       	ldd	r24, Y+19	; 0x13
    1e34:	9c 89       	ldd	r25, Y+20	; 0x14
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	4f e7       	ldi	r20, 0x7F	; 127
    1e3c:	53 e4       	ldi	r21, 0x43	; 67
    1e3e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e42:	18 16       	cp	r1, r24
    1e44:	0c f0       	brlt	.+2      	; 0x1e48 <LCD_voidInitialization+0x530>
    1e46:	7b c0       	rjmp	.+246    	; 0x1f3e <LCD_voidInitialization+0x626>
	{
		_delay_ms(__us / 1000.0);
    1e48:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	4a e7       	ldi	r20, 0x7A	; 122
    1e56:	54 e4       	ldi	r21, 0x44	; 68
    1e58:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	8c 87       	std	Y+12, r24	; 0x0c
    1e62:	9d 87       	std	Y+13, r25	; 0x0d
    1e64:	ae 87       	std	Y+14, r26	; 0x0e
    1e66:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e68:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e6a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e6c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e6e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4a ef       	ldi	r20, 0xFA	; 250
    1e76:	54 e4       	ldi	r21, 0x44	; 68
    1e78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	88 87       	std	Y+8, r24	; 0x08
    1e82:	99 87       	std	Y+9, r25	; 0x09
    1e84:	aa 87       	std	Y+10, r26	; 0x0a
    1e86:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e88:	68 85       	ldd	r22, Y+8	; 0x08
    1e8a:	79 85       	ldd	r23, Y+9	; 0x09
    1e8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	40 e8       	ldi	r20, 0x80	; 128
    1e96:	5f e3       	ldi	r21, 0x3F	; 63
    1e98:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e9c:	88 23       	and	r24, r24
    1e9e:	2c f4       	brge	.+10     	; 0x1eaa <LCD_voidInitialization+0x592>
		__ticks = 1;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9f 83       	std	Y+7, r25	; 0x07
    1ea6:	8e 83       	std	Y+6, r24	; 0x06
    1ea8:	3f c0       	rjmp	.+126    	; 0x1f28 <LCD_voidInitialization+0x610>
	else if (__tmp > 65535)
    1eaa:	68 85       	ldd	r22, Y+8	; 0x08
    1eac:	79 85       	ldd	r23, Y+9	; 0x09
    1eae:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eb0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	3f ef       	ldi	r19, 0xFF	; 255
    1eb6:	4f e7       	ldi	r20, 0x7F	; 127
    1eb8:	57 e4       	ldi	r21, 0x47	; 71
    1eba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ebe:	18 16       	cp	r1, r24
    1ec0:	4c f5       	brge	.+82     	; 0x1f14 <LCD_voidInitialization+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ec4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ec6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ec8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e2       	ldi	r20, 0x20	; 32
    1ed0:	51 e4       	ldi	r21, 0x41	; 65
    1ed2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	bc 01       	movw	r22, r24
    1edc:	cd 01       	movw	r24, r26
    1ede:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	9f 83       	std	Y+7, r25	; 0x07
    1ee8:	8e 83       	std	Y+6, r24	; 0x06
    1eea:	0f c0       	rjmp	.+30     	; 0x1f0a <LCD_voidInitialization+0x5f2>
    1eec:	88 ec       	ldi	r24, 0xC8	; 200
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	9d 83       	std	Y+5, r25	; 0x05
    1ef2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <LCD_voidInitialization+0x5e0>
    1efc:	9d 83       	std	Y+5, r25	; 0x05
    1efe:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f00:	8e 81       	ldd	r24, Y+6	; 0x06
    1f02:	9f 81       	ldd	r25, Y+7	; 0x07
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	9f 83       	std	Y+7, r25	; 0x07
    1f08:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	69 f7       	brne	.-38     	; 0x1eec <LCD_voidInitialization+0x5d4>
    1f12:	24 c0       	rjmp	.+72     	; 0x1f5c <LCD_voidInitialization+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f14:	68 85       	ldd	r22, Y+8	; 0x08
    1f16:	79 85       	ldd	r23, Y+9	; 0x09
    1f18:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	9f 83       	std	Y+7, r25	; 0x07
    1f26:	8e 83       	std	Y+6, r24	; 0x06
    1f28:	8e 81       	ldd	r24, Y+6	; 0x06
    1f2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f2c:	9b 83       	std	Y+3, r25	; 0x03
    1f2e:	8a 83       	std	Y+2, r24	; 0x02
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	9b 81       	ldd	r25, Y+3	; 0x03
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <LCD_voidInitialization+0x61c>
    1f38:	9b 83       	std	Y+3, r25	; 0x03
    1f3a:	8a 83       	std	Y+2, r24	; 0x02
    1f3c:	0f c0       	rjmp	.+30     	; 0x1f5c <LCD_voidInitialization+0x644>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f3e:	69 89       	ldd	r22, Y+17	; 0x11
    1f40:	7a 89       	ldd	r23, Y+18	; 0x12
    1f42:	8b 89       	ldd	r24, Y+19	; 0x13
    1f44:	9c 89       	ldd	r25, Y+20	; 0x14
    1f46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	88 8b       	std	Y+16, r24	; 0x10
    1f50:	88 89       	ldd	r24, Y+16	; 0x10
    1f52:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	8a 95       	dec	r24
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <LCD_voidInitialization+0x63e>
    1f5a:	89 83       	std	Y+1, r24	; 0x01

	/*Delay for Process Clearing LCD*/
	_delay_us(1600);
}
    1f5c:	ca 5a       	subi	r28, 0xAA	; 170
    1f5e:	df 4f       	sbci	r29, 0xFF	; 255
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	1f 91       	pop	r17
    1f70:	0f 91       	pop	r16
    1f72:	08 95       	ret

00001f74 <LCD_voidClearLCD>:
/* Description	: Clear LCD
 * Input		: Non
 * Output		: Non
 */
void LCD_voidClearLCD(void)
{
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
	/*Clear LCD*/
	LCD_voidWriteCommand(0b00000001);
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_voidWriteCommand>
}
    1f82:	cf 91       	pop	r28
    1f84:	df 91       	pop	r29
    1f86:	08 95       	ret

00001f88 <LCD_u8WriteString>:
 * Input		: Array of Strings, Size of this Array
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8WriteString(u8 *Copy_u8String, u8 Copy_u8StrSize)
{
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	00 d0       	rcall	.+0      	; 0x1f8e <LCD_u8WriteString+0x6>
    1f8e:	00 d0       	rcall	.+0      	; 0x1f90 <LCD_u8WriteString+0x8>
    1f90:	0f 92       	push	r0
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	9c 83       	std	Y+4, r25	; 0x04
    1f98:	8b 83       	std	Y+3, r24	; 0x03
    1f9a:	6d 83       	std	Y+5, r22	; 0x05
	/*Local Variables*/
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0;
    1f9c:	1a 82       	std	Y+2, r1	; 0x02
    1f9e:	19 82       	std	Y+1, r1	; 0x01

	/*Loop on the Array of the Strings and print it one by one*/
	for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Copy_u8StrSize; Local_u8LoopCtr++)
    1fa0:	19 82       	std	Y+1, r1	; 0x01
    1fa2:	0e c0       	rjmp	.+28     	; 0x1fc0 <LCD_u8WriteString+0x38>
	{
		LCD_voidWriteData(Copy_u8String[Local_u8LoopCtr]);
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	fc 01       	movw	r30, r24
    1fb0:	e2 0f       	add	r30, r18
    1fb2:	f3 1f       	adc	r31, r19
    1fb4:	80 81       	ld	r24, Z
    1fb6:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <LCD_voidWriteData>
{
	/*Local Variables*/
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0;

	/*Loop on the Array of the Strings and print it one by one*/
	for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Copy_u8StrSize; Local_u8LoopCtr++)
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	8f 5f       	subi	r24, 0xFF	; 255
    1fbe:	89 83       	std	Y+1, r24	; 0x01
    1fc0:	99 81       	ldd	r25, Y+1	; 0x01
    1fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc4:	98 17       	cp	r25, r24
    1fc6:	70 f3       	brcs	.-36     	; 0x1fa4 <LCD_u8WriteString+0x1c>
	{
		LCD_voidWriteData(Copy_u8String[Local_u8LoopCtr]);
	}

	return Local_u8Error;
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <LCD_u8GoToXY>:
 * Input		: X Position, Y Position
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8GoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <LCD_u8GoToXY+0x6>
    1fe0:	00 d0       	rcall	.+0      	; 0x1fe2 <LCD_u8GoToXY+0x8>
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	8b 83       	std	Y+3, r24	; 0x03
    1fe8:	6c 83       	std	Y+4, r22	; 0x04
	/*Local Variables*/
	u8 Local_u8Error = 0, Local_u8Address = 0;
    1fea:	1a 82       	std	Y+2, r1	; 0x02
    1fec:	19 82       	std	Y+1, r1	; 0x01
//			 * of the Memory and the X position we need and the Command for AC eight's Bit 0b1(128)
//			 */
//			Local_u8Address = DDRAM_LINE2_FIRST_LOCATION + Copy_u8XPos + AC_REG_COMMAND;
//		}

		Local_u8Address = Copy_u8XPos + (Copy_u8YPos * DDRAM_LINE2_FIRST_LOCATION) +  AC_REG_COMMAND;
    1fee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff0:	88 2f       	mov	r24, r24
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	00 24       	eor	r0, r0
    1ff6:	96 95       	lsr	r25
    1ff8:	87 95       	ror	r24
    1ffa:	07 94       	ror	r0
    1ffc:	96 95       	lsr	r25
    1ffe:	87 95       	ror	r24
    2000:	07 94       	ror	r0
    2002:	98 2f       	mov	r25, r24
    2004:	80 2d       	mov	r24, r0
    2006:	98 2f       	mov	r25, r24
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	89 0f       	add	r24, r25
    200c:	80 58       	subi	r24, 0x80	; 128
    200e:	89 83       	std	Y+1, r24	; 0x01

		/*Send the Command with the Needed Position*/
		LCD_voidWriteCommand(Local_u8Address);
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_voidWriteCommand>
//	}

	return Local_u8Error;
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <LCD_u8WriteSpecialChar>:
 * Input		: An Array of the Special Characters we have only 8 Positions
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8WriteSpecialChar(u8 *Copy_u8SpecialChar, u8 Copy_ArraySize)
{
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	00 d0       	rcall	.+0      	; 0x202c <LCD_u8WriteSpecialChar+0x6>
    202c:	00 d0       	rcall	.+0      	; 0x202e <LCD_u8WriteSpecialChar+0x8>
    202e:	0f 92       	push	r0
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	9c 83       	std	Y+4, r25	; 0x04
    2036:	8b 83       	std	Y+3, r24	; 0x03
    2038:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0;
    203a:	1a 82       	std	Y+2, r1	; 0x02
    203c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_ArraySize > MAX_NB_BITS_SPECIAL_CHAR)
    203e:	8d 81       	ldd	r24, Y+5	; 0x05
    2040:	81 34       	cpi	r24, 0x41	; 65
    2042:	18 f0       	brcs	.+6      	; 0x204a <LCD_u8WriteSpecialChar+0x24>
	{
		Local_u8Error = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	8a 83       	std	Y+2, r24	; 0x02
    2048:	1a c0       	rjmp	.+52     	; 0x207e <LCD_u8WriteSpecialChar+0x58>
	}

	else
	{
		/*Move the AC Register to Points to CGRAM command = 0b01 and the other 6 bits are the Position in CGRAM memory*/
		LCD_voidWriteCommand(0b01000000);
    204a:	80 e4       	ldi	r24, 0x40	; 64
    204c:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_voidWriteCommand>

		/*Looping on the Array of the Special Char and Write it in CGRAM*/
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < MAX_NB_BITS_SPECIAL_CHAR; Local_u8LoopCtr++)
    2050:	19 82       	std	Y+1, r1	; 0x01
    2052:	0e c0       	rjmp	.+28     	; 0x2070 <LCD_u8WriteSpecialChar+0x4a>
		{
			LCD_voidWriteData(Copy_u8SpecialChar[Local_u8LoopCtr]);
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	9c 81       	ldd	r25, Y+4	; 0x04
    205e:	fc 01       	movw	r30, r24
    2060:	e2 0f       	add	r30, r18
    2062:	f3 1f       	adc	r31, r19
    2064:	80 81       	ld	r24, Z
    2066:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <LCD_voidWriteData>
	{
		/*Move the AC Register to Points to CGRAM command = 0b01 and the other 6 bits are the Position in CGRAM memory*/
		LCD_voidWriteCommand(0b01000000);

		/*Looping on the Array of the Special Char and Write it in CGRAM*/
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < MAX_NB_BITS_SPECIAL_CHAR; Local_u8LoopCtr++)
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	8f 5f       	subi	r24, 0xFF	; 255
    206e:	89 83       	std	Y+1, r24	; 0x01
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	80 34       	cpi	r24, 0x40	; 64
    2074:	78 f3       	brcs	.-34     	; 0x2054 <LCD_u8WriteSpecialChar+0x2e>
		{
			LCD_voidWriteData(Copy_u8SpecialChar[Local_u8LoopCtr]);
		}

		/*Back AC Register to points to the DDRAM*/
		LCD_u8GoToXY(0, 0);
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	60 e0       	ldi	r22, 0x00	; 0
    207a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
	}
	return Local_u8Error;
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <LCD_u8WriteINT>:
 * Input		: The Integer Number, X position, Y Position
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8WriteINT(u32 Copy_u32INT, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	61 97       	sbiw	r28, 0x11	; 17
    209a:	0f b6       	in	r0, 0x3f	; 63
    209c:	f8 94       	cli
    209e:	de bf       	out	0x3e, r29	; 62
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	cd bf       	out	0x3d, r28	; 61
    20a4:	6a 87       	std	Y+10, r22	; 0x0a
    20a6:	7b 87       	std	Y+11, r23	; 0x0b
    20a8:	8c 87       	std	Y+12, r24	; 0x0c
    20aa:	9d 87       	std	Y+13, r25	; 0x0d
    20ac:	4e 87       	std	Y+14, r20	; 0x0e
    20ae:	2f 87       	std	Y+15, r18	; 0x0f
	/* Local_u8LoopCtr: 	to Iterator for the loop
	 * Local_u8NOD: 		Number of Digits to make the positions of ones, tens, ...
	 * Local_u8CopyNOD: 	Copy of Number of Digits for the iteration in loop
	 * Local_u8Reminder: 	to save the Reminder (%) and check on it
	 */
	u8 Local_u8Error = 0, Local_u8LoopCtr = 0, Local_u8NOD = 0, Local_u8CopyNOD = 0, Local_u8Reminder = 0;
    20b0:	19 86       	std	Y+9, r1	; 0x09
    20b2:	18 86       	std	Y+8, r1	; 0x08
    20b4:	1f 82       	std	Y+7, r1	; 0x07
    20b6:	1e 82       	std	Y+6, r1	; 0x06
    20b8:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Temp = 0;
    20ba:	19 82       	std	Y+1, r1	; 0x01
    20bc:	1a 82       	std	Y+2, r1	; 0x02
    20be:	1b 82       	std	Y+3, r1	; 0x03
    20c0:	1c 82       	std	Y+4, r1	; 0x04

	/*Checking on the Integer Number if it within the u32 range
	 * Check on the X position as we have 0 -> 15 position
	 * Check on the Y Position as we have 0 -> 1
	 */
	if(Copy_u32INT > MAX_U32_NB || Copy_u8XPos > 15 || Copy_u8YPos > 1)
    20c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    20c4:	80 31       	cpi	r24, 0x10	; 16
    20c6:	18 f4       	brcc	.+6      	; 0x20ce <LCD_u8WriteINT+0x3e>
    20c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ca:	82 30       	cpi	r24, 0x02	; 2
    20cc:	18 f0       	brcs	.+6      	; 0x20d4 <LCD_u8WriteINT+0x44>
	{
		Local_u8Error = 1;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	89 87       	std	Y+9, r24	; 0x09
    20d2:	31 c1       	rjmp	.+610    	; 0x2336 <LCD_u8WriteINT+0x2a6>

	/*if the Check is Okay with no problems*/
	else
	{
		/*Putting the Integer Value in a temporary Variable to use in our calculation without losing it*/
		Local_u32Temp = Copy_u32INT;
    20d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d8:	ac 85       	ldd	r26, Y+12	; 0x0c
    20da:	bd 85       	ldd	r27, Y+13	; 0x0d
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	9a 83       	std	Y+2, r25	; 0x02
    20e0:	ab 83       	std	Y+3, r26	; 0x03
    20e2:	bc 83       	std	Y+4, r27	; 0x04
    20e4:	15 c0       	rjmp	.+42     	; 0x2110 <LCD_u8WriteINT+0x80>

		/*Loop to get the Number of Digits*/
		while(Local_u32Temp != 0)
		{
			/*Dividing the Integer number by 10 till we have a result of Division Zero*/
			Local_u32Temp /= 10;
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ea:	ab 81       	ldd	r26, Y+3	; 0x03
    20ec:	bc 81       	ldd	r27, Y+4	; 0x04
    20ee:	2a e0       	ldi	r18, 0x0A	; 10
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e0       	ldi	r20, 0x00	; 0
    20f4:	50 e0       	ldi	r21, 0x00	; 0
    20f6:	bc 01       	movw	r22, r24
    20f8:	cd 01       	movw	r24, r26
    20fa:	0e 94 91 19 	call	0x3322	; 0x3322 <__udivmodsi4>
    20fe:	da 01       	movw	r26, r20
    2100:	c9 01       	movw	r24, r18
    2102:	89 83       	std	Y+1, r24	; 0x01
    2104:	9a 83       	std	Y+2, r25	; 0x02
    2106:	ab 83       	std	Y+3, r26	; 0x03
    2108:	bc 83       	std	Y+4, r27	; 0x04

			/*With each Division Add 1 to Number of Digits*/
			Local_u8NOD++;
    210a:	8f 81       	ldd	r24, Y+7	; 0x07
    210c:	8f 5f       	subi	r24, 0xFF	; 255
    210e:	8f 83       	std	Y+7, r24	; 0x07
	{
		/*Putting the Integer Value in a temporary Variable to use in our calculation without losing it*/
		Local_u32Temp = Copy_u32INT;

		/*Loop to get the Number of Digits*/
		while(Local_u32Temp != 0)
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	9a 81       	ldd	r25, Y+2	; 0x02
    2114:	ab 81       	ldd	r26, Y+3	; 0x03
    2116:	bc 81       	ldd	r27, Y+4	; 0x04
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	a1 05       	cpc	r26, r1
    211c:	b1 05       	cpc	r27, r1
    211e:	19 f7       	brne	.-58     	; 0x20e6 <LCD_u8WriteINT+0x56>
			/*With each Division Add 1 to Number of Digits*/
			Local_u8NOD++;
		}

		/*Make a Copy from the Number of Digits to use it in looping*/
		Local_u8CopyNOD = Local_u8NOD;
    2120:	8f 81       	ldd	r24, Y+7	; 0x07
    2122:	8e 83       	std	Y+6, r24	; 0x06

		/*Re-Make a copy of the Integer Number*/
		Local_u32Temp = Copy_u32INT;
    2124:	8a 85       	ldd	r24, Y+10	; 0x0a
    2126:	9b 85       	ldd	r25, Y+11	; 0x0b
    2128:	ac 85       	ldd	r26, Y+12	; 0x0c
    212a:	bd 85       	ldd	r27, Y+13	; 0x0d
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	9a 83       	std	Y+2, r25	; 0x02
    2130:	ab 83       	std	Y+3, r26	; 0x03
    2132:	bc 83       	std	Y+4, r27	; 0x04

		/*Now we have the Integer number and the Number of Digits so we will loop and in each loop
		 * we will make a Reminder from ones, tens and so on till our reminder be Zero
		 * and loop to print this number with the position on LCD
		 */
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Local_u8CopyNOD; Local_u8LoopCtr++)
    2134:	18 86       	std	Y+8, r1	; 0x08
    2136:	fa c0       	rjmp	.+500    	; 0x232c <LCD_u8WriteINT+0x29c>
		{
			/*Getting the Ones at first time and in second iteration tens and so on*/
			Local_u8Reminder = Local_u32Temp % 10;
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	9a 81       	ldd	r25, Y+2	; 0x02
    213c:	ab 81       	ldd	r26, Y+3	; 0x03
    213e:	bc 81       	ldd	r27, Y+4	; 0x04
    2140:	2a e0       	ldi	r18, 0x0A	; 10
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e0       	ldi	r20, 0x00	; 0
    2146:	50 e0       	ldi	r21, 0x00	; 0
    2148:	bc 01       	movw	r22, r24
    214a:	cd 01       	movw	r24, r26
    214c:	0e 94 91 19 	call	0x3322	; 0x3322 <__udivmodsi4>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	8d 83       	std	Y+5, r24	; 0x05

			/*By Switch we will print the number by the ASCII Code*/
			switch(Local_u8Reminder)
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	39 8b       	std	Y+17, r19	; 0x11
    215e:	28 8b       	std	Y+16, r18	; 0x10
    2160:	88 89       	ldd	r24, Y+16	; 0x10
    2162:	99 89       	ldd	r25, Y+17	; 0x11
    2164:	84 30       	cpi	r24, 0x04	; 4
    2166:	91 05       	cpc	r25, r1
    2168:	09 f4       	brne	.+2      	; 0x216c <LCD_u8WriteINT+0xdc>
    216a:	7b c0       	rjmp	.+246    	; 0x2262 <LCD_u8WriteINT+0x1d2>
    216c:	28 89       	ldd	r18, Y+16	; 0x10
    216e:	39 89       	ldd	r19, Y+17	; 0x11
    2170:	25 30       	cpi	r18, 0x05	; 5
    2172:	31 05       	cpc	r19, r1
    2174:	ec f4       	brge	.+58     	; 0x21b0 <LCD_u8WriteINT+0x120>
    2176:	88 89       	ldd	r24, Y+16	; 0x10
    2178:	99 89       	ldd	r25, Y+17	; 0x11
    217a:	81 30       	cpi	r24, 0x01	; 1
    217c:	91 05       	cpc	r25, r1
    217e:	09 f4       	brne	.+2      	; 0x2182 <LCD_u8WriteINT+0xf2>
    2180:	49 c0       	rjmp	.+146    	; 0x2214 <LCD_u8WriteINT+0x184>
    2182:	28 89       	ldd	r18, Y+16	; 0x10
    2184:	39 89       	ldd	r19, Y+17	; 0x11
    2186:	22 30       	cpi	r18, 0x02	; 2
    2188:	31 05       	cpc	r19, r1
    218a:	2c f4       	brge	.+10     	; 0x2196 <LCD_u8WriteINT+0x106>
    218c:	88 89       	ldd	r24, Y+16	; 0x10
    218e:	99 89       	ldd	r25, Y+17	; 0x11
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	99 f1       	breq	.+102    	; 0x21fa <LCD_u8WriteINT+0x16a>
    2194:	b4 c0       	rjmp	.+360    	; 0x22fe <LCD_u8WriteINT+0x26e>
    2196:	28 89       	ldd	r18, Y+16	; 0x10
    2198:	39 89       	ldd	r19, Y+17	; 0x11
    219a:	22 30       	cpi	r18, 0x02	; 2
    219c:	31 05       	cpc	r19, r1
    219e:	09 f4       	brne	.+2      	; 0x21a2 <LCD_u8WriteINT+0x112>
    21a0:	46 c0       	rjmp	.+140    	; 0x222e <LCD_u8WriteINT+0x19e>
    21a2:	88 89       	ldd	r24, Y+16	; 0x10
    21a4:	99 89       	ldd	r25, Y+17	; 0x11
    21a6:	83 30       	cpi	r24, 0x03	; 3
    21a8:	91 05       	cpc	r25, r1
    21aa:	09 f4       	brne	.+2      	; 0x21ae <LCD_u8WriteINT+0x11e>
    21ac:	4d c0       	rjmp	.+154    	; 0x2248 <LCD_u8WriteINT+0x1b8>
    21ae:	a7 c0       	rjmp	.+334    	; 0x22fe <LCD_u8WriteINT+0x26e>
    21b0:	28 89       	ldd	r18, Y+16	; 0x10
    21b2:	39 89       	ldd	r19, Y+17	; 0x11
    21b4:	27 30       	cpi	r18, 0x07	; 7
    21b6:	31 05       	cpc	r19, r1
    21b8:	09 f4       	brne	.+2      	; 0x21bc <LCD_u8WriteINT+0x12c>
    21ba:	7a c0       	rjmp	.+244    	; 0x22b0 <LCD_u8WriteINT+0x220>
    21bc:	88 89       	ldd	r24, Y+16	; 0x10
    21be:	99 89       	ldd	r25, Y+17	; 0x11
    21c0:	88 30       	cpi	r24, 0x08	; 8
    21c2:	91 05       	cpc	r25, r1
    21c4:	6c f4       	brge	.+26     	; 0x21e0 <LCD_u8WriteINT+0x150>
    21c6:	28 89       	ldd	r18, Y+16	; 0x10
    21c8:	39 89       	ldd	r19, Y+17	; 0x11
    21ca:	25 30       	cpi	r18, 0x05	; 5
    21cc:	31 05       	cpc	r19, r1
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <LCD_u8WriteINT+0x142>
    21d0:	55 c0       	rjmp	.+170    	; 0x227c <LCD_u8WriteINT+0x1ec>
    21d2:	88 89       	ldd	r24, Y+16	; 0x10
    21d4:	99 89       	ldd	r25, Y+17	; 0x11
    21d6:	86 30       	cpi	r24, 0x06	; 6
    21d8:	91 05       	cpc	r25, r1
    21da:	09 f4       	brne	.+2      	; 0x21de <LCD_u8WriteINT+0x14e>
    21dc:	5c c0       	rjmp	.+184    	; 0x2296 <LCD_u8WriteINT+0x206>
    21de:	8f c0       	rjmp	.+286    	; 0x22fe <LCD_u8WriteINT+0x26e>
    21e0:	28 89       	ldd	r18, Y+16	; 0x10
    21e2:	39 89       	ldd	r19, Y+17	; 0x11
    21e4:	28 30       	cpi	r18, 0x08	; 8
    21e6:	31 05       	cpc	r19, r1
    21e8:	09 f4       	brne	.+2      	; 0x21ec <LCD_u8WriteINT+0x15c>
    21ea:	6f c0       	rjmp	.+222    	; 0x22ca <LCD_u8WriteINT+0x23a>
    21ec:	88 89       	ldd	r24, Y+16	; 0x10
    21ee:	99 89       	ldd	r25, Y+17	; 0x11
    21f0:	89 30       	cpi	r24, 0x09	; 9
    21f2:	91 05       	cpc	r25, r1
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <LCD_u8WriteINT+0x168>
    21f6:	76 c0       	rjmp	.+236    	; 0x22e4 <LCD_u8WriteINT+0x254>
    21f8:	82 c0       	rjmp	.+260    	; 0x22fe <LCD_u8WriteINT+0x26e>
			 * (2 - 1) + 6 = 7 in space 7 will be 5 //TENS
			 * (1 - 1) + 6 = 6 in Space 6 will be 5 //Hundreds
			 * and so on
			 */
			case 0:		//ZERO ASCII Code is 48
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    21fa:	8f 81       	ldd	r24, Y+7	; 0x07
    21fc:	81 50       	subi	r24, 0x01	; 1
    21fe:	8f 83       	std	Y+7, r24	; 0x07
    2200:	9f 81       	ldd	r25, Y+7	; 0x07
    2202:	8e 85       	ldd	r24, Y+14	; 0x0e
    2204:	89 0f       	add	r24, r25
    2206:	6f 85       	ldd	r22, Y+15	; 0x0f
    2208:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
				LCD_voidWriteData(48);
    220c:	80 e3       	ldi	r24, 0x30	; 48
    220e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <LCD_voidWriteData>
    2212:	77 c0       	rjmp	.+238    	; 0x2302 <LCD_u8WriteINT+0x272>
				break;

			case 1:		//ONE ASCII Code is 49
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    2214:	8f 81       	ldd	r24, Y+7	; 0x07
    2216:	81 50       	subi	r24, 0x01	; 1
    2218:	8f 83       	std	Y+7, r24	; 0x07
    221a:	9f 81       	ldd	r25, Y+7	; 0x07
    221c:	8e 85       	ldd	r24, Y+14	; 0x0e
    221e:	89 0f       	add	r24, r25
    2220:	6f 85       	ldd	r22, Y+15	; 0x0f
    2222:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
				LCD_voidWriteData(49);
    2226:	81 e3       	ldi	r24, 0x31	; 49
    2228:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <LCD_voidWriteData>
    222c:	6a c0       	rjmp	.+212    	; 0x2302 <LCD_u8WriteINT+0x272>
				break;

			case 2:		//TWO ASCII Code is 50
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    222e:	8f 81       	ldd	r24, Y+7	; 0x07
    2230:	81 50       	subi	r24, 0x01	; 1
    2232:	8f 83       	std	Y+7, r24	; 0x07
    2234:	9f 81       	ldd	r25, Y+7	; 0x07
    2236:	8e 85       	ldd	r24, Y+14	; 0x0e
    2238:	89 0f       	add	r24, r25
    223a:	6f 85       	ldd	r22, Y+15	; 0x0f
    223c:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
				LCD_voidWriteData(50);
    2240:	82 e3       	ldi	r24, 0x32	; 50
    2242:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <LCD_voidWriteData>
    2246:	5d c0       	rjmp	.+186    	; 0x2302 <LCD_u8WriteINT+0x272>
				break;

			case 3:		//THREE ASCII Code is 51
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    2248:	8f 81       	ldd	r24, Y+7	; 0x07
    224a:	81 50       	subi	r24, 0x01	; 1
    224c:	8f 83       	std	Y+7, r24	; 0x07
    224e:	9f 81       	ldd	r25, Y+7	; 0x07
    2250:	8e 85       	ldd	r24, Y+14	; 0x0e
    2252:	89 0f       	add	r24, r25
    2254:	6f 85       	ldd	r22, Y+15	; 0x0f
    2256:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
				LCD_voidWriteData(51);
    225a:	83 e3       	ldi	r24, 0x33	; 51
    225c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <LCD_voidWriteData>
    2260:	50 c0       	rjmp	.+160    	; 0x2302 <LCD_u8WriteINT+0x272>
				break;

			case 4:		//FOUR ASCII Code is 52
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    2262:	8f 81       	ldd	r24, Y+7	; 0x07
    2264:	81 50       	subi	r24, 0x01	; 1
    2266:	8f 83       	std	Y+7, r24	; 0x07
    2268:	9f 81       	ldd	r25, Y+7	; 0x07
    226a:	8e 85       	ldd	r24, Y+14	; 0x0e
    226c:	89 0f       	add	r24, r25
    226e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2270:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
				LCD_voidWriteData(52);
    2274:	84 e3       	ldi	r24, 0x34	; 52
    2276:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <LCD_voidWriteData>
    227a:	43 c0       	rjmp	.+134    	; 0x2302 <LCD_u8WriteINT+0x272>
				break;

			case 5:		//FIVE ASCII Code is 53
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    227c:	8f 81       	ldd	r24, Y+7	; 0x07
    227e:	81 50       	subi	r24, 0x01	; 1
    2280:	8f 83       	std	Y+7, r24	; 0x07
    2282:	9f 81       	ldd	r25, Y+7	; 0x07
    2284:	8e 85       	ldd	r24, Y+14	; 0x0e
    2286:	89 0f       	add	r24, r25
    2288:	6f 85       	ldd	r22, Y+15	; 0x0f
    228a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
				LCD_voidWriteData(53);
    228e:	85 e3       	ldi	r24, 0x35	; 53
    2290:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <LCD_voidWriteData>
    2294:	36 c0       	rjmp	.+108    	; 0x2302 <LCD_u8WriteINT+0x272>
				break;

			case 6:		//SIX ASCII Code is 54
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    2296:	8f 81       	ldd	r24, Y+7	; 0x07
    2298:	81 50       	subi	r24, 0x01	; 1
    229a:	8f 83       	std	Y+7, r24	; 0x07
    229c:	9f 81       	ldd	r25, Y+7	; 0x07
    229e:	8e 85       	ldd	r24, Y+14	; 0x0e
    22a0:	89 0f       	add	r24, r25
    22a2:	6f 85       	ldd	r22, Y+15	; 0x0f
    22a4:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
				LCD_voidWriteData(54);
    22a8:	86 e3       	ldi	r24, 0x36	; 54
    22aa:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <LCD_voidWriteData>
    22ae:	29 c0       	rjmp	.+82     	; 0x2302 <LCD_u8WriteINT+0x272>
				break;

			case 7:		//SEVEN ASCII Code is 55
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    22b0:	8f 81       	ldd	r24, Y+7	; 0x07
    22b2:	81 50       	subi	r24, 0x01	; 1
    22b4:	8f 83       	std	Y+7, r24	; 0x07
    22b6:	9f 81       	ldd	r25, Y+7	; 0x07
    22b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    22ba:	89 0f       	add	r24, r25
    22bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    22be:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
				LCD_voidWriteData(55);
    22c2:	87 e3       	ldi	r24, 0x37	; 55
    22c4:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <LCD_voidWriteData>
    22c8:	1c c0       	rjmp	.+56     	; 0x2302 <LCD_u8WriteINT+0x272>
				break;

			case 8:		//EIGHT ASCII Code is 56
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    22ca:	8f 81       	ldd	r24, Y+7	; 0x07
    22cc:	81 50       	subi	r24, 0x01	; 1
    22ce:	8f 83       	std	Y+7, r24	; 0x07
    22d0:	9f 81       	ldd	r25, Y+7	; 0x07
    22d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    22d4:	89 0f       	add	r24, r25
    22d6:	6f 85       	ldd	r22, Y+15	; 0x0f
    22d8:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
				LCD_voidWriteData(56);
    22dc:	88 e3       	ldi	r24, 0x38	; 56
    22de:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <LCD_voidWriteData>
    22e2:	0f c0       	rjmp	.+30     	; 0x2302 <LCD_u8WriteINT+0x272>
				break;

			case 9:		//NINE ASCII Code is 57
				LCD_u8GoToXY(((Local_u8NOD -= 1) + Copy_u8XPos), Copy_u8YPos);
    22e4:	8f 81       	ldd	r24, Y+7	; 0x07
    22e6:	81 50       	subi	r24, 0x01	; 1
    22e8:	8f 83       	std	Y+7, r24	; 0x07
    22ea:	9f 81       	ldd	r25, Y+7	; 0x07
    22ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    22ee:	89 0f       	add	r24, r25
    22f0:	6f 85       	ldd	r22, Y+15	; 0x0f
    22f2:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
				LCD_voidWriteData(57);
    22f6:	89 e3       	ldi	r24, 0x39	; 57
    22f8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <LCD_voidWriteData>
    22fc:	02 c0       	rjmp	.+4      	; 0x2302 <LCD_u8WriteINT+0x272>
				break;

			default:
				Local_u8Error = 1;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	89 87       	std	Y+9, r24	; 0x09
				break;
			}

			/*Dividing The Temp by 10 to get the Tens, Hundreds ... in every Iteration*/
			Local_u32Temp /= 10;
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	9a 81       	ldd	r25, Y+2	; 0x02
    2306:	ab 81       	ldd	r26, Y+3	; 0x03
    2308:	bc 81       	ldd	r27, Y+4	; 0x04
    230a:	2a e0       	ldi	r18, 0x0A	; 10
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e0       	ldi	r20, 0x00	; 0
    2310:	50 e0       	ldi	r21, 0x00	; 0
    2312:	bc 01       	movw	r22, r24
    2314:	cd 01       	movw	r24, r26
    2316:	0e 94 91 19 	call	0x3322	; 0x3322 <__udivmodsi4>
    231a:	da 01       	movw	r26, r20
    231c:	c9 01       	movw	r24, r18
    231e:	89 83       	std	Y+1, r24	; 0x01
    2320:	9a 83       	std	Y+2, r25	; 0x02
    2322:	ab 83       	std	Y+3, r26	; 0x03
    2324:	bc 83       	std	Y+4, r27	; 0x04

		/*Now we have the Integer number and the Number of Digits so we will loop and in each loop
		 * we will make a Reminder from ones, tens and so on till our reminder be Zero
		 * and loop to print this number with the position on LCD
		 */
		for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Local_u8CopyNOD; Local_u8LoopCtr++)
    2326:	88 85       	ldd	r24, Y+8	; 0x08
    2328:	8f 5f       	subi	r24, 0xFF	; 255
    232a:	88 87       	std	Y+8, r24	; 0x08
    232c:	98 85       	ldd	r25, Y+8	; 0x08
    232e:	8e 81       	ldd	r24, Y+6	; 0x06
    2330:	98 17       	cp	r25, r24
    2332:	08 f4       	brcc	.+2      	; 0x2336 <LCD_u8WriteINT+0x2a6>
    2334:	01 cf       	rjmp	.-510    	; 0x2138 <LCD_u8WriteINT+0xa8>
			/*Dividing The Temp by 10 to get the Tens, Hundreds ... in every Iteration*/
			Local_u32Temp /= 10;
		}
	}

	return Local_u8Error;
    2336:	89 85       	ldd	r24, Y+9	; 0x09
}
    2338:	61 96       	adiw	r28, 0x11	; 17
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <LCD_u8StringScroll>:
 * Input		: The String, String size, Time in between, Left or Right, First Line or Second one
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8StringScroll(u8 *Copy_u8String, u8 Copy_u8StrSize, u16 Copy_u16Time, u8 Copy_u8RorL, u8 Copy_u8YPos)
{
    234a:	0f 93       	push	r16
    234c:	1f 93       	push	r17
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	c0 56       	subi	r28, 0x60	; 96
    2358:	d0 40       	sbci	r29, 0x00	; 0
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	fe 01       	movw	r30, r28
    2366:	e6 5a       	subi	r30, 0xA6	; 166
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	91 83       	std	Z+1, r25	; 0x01
    236c:	80 83       	st	Z, r24
    236e:	fe 01       	movw	r30, r28
    2370:	e4 5a       	subi	r30, 0xA4	; 164
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	60 83       	st	Z, r22
    2376:	fe 01       	movw	r30, r28
    2378:	e3 5a       	subi	r30, 0xA3	; 163
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	51 83       	std	Z+1, r21	; 0x01
    237e:	40 83       	st	Z, r20
    2380:	fe 01       	movw	r30, r28
    2382:	e1 5a       	subi	r30, 0xA1	; 161
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	20 83       	st	Z, r18
    2388:	fe 01       	movw	r30, r28
    238a:	e0 5a       	subi	r30, 0xA0	; 160
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	00 83       	st	Z, r16
	/*Local Variables*/
	u8 Local_u8Error = 0;
    2390:	fe 01       	movw	r30, r28
    2392:	e7 5a       	subi	r30, 0xA7	; 167
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	10 82       	st	Z, r1
	u8 Local_u8Move = 0, Local_u8Move2 = 0, Local_u8Move3 = 0;
    2398:	fe 01       	movw	r30, r28
    239a:	e8 5a       	subi	r30, 0xA8	; 168
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	10 82       	st	Z, r1
    23a0:	fe 01       	movw	r30, r28
    23a2:	e9 5a       	subi	r30, 0xA9	; 169
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	10 82       	st	Z, r1
    23a8:	fe 01       	movw	r30, r28
    23aa:	ea 5a       	subi	r30, 0xAA	; 170
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	10 82       	st	Z, r1
	u8 Copy_u8StringSize = Copy_u8StrSize;
    23b0:	de 01       	movw	r26, r28
    23b2:	ab 5a       	subi	r26, 0xAB	; 171
    23b4:	bf 4f       	sbci	r27, 0xFF	; 255
    23b6:	fe 01       	movw	r30, r28
    23b8:	e4 5a       	subi	r30, 0xA4	; 164
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	80 81       	ld	r24, Z
    23be:	8c 93       	st	X, r24

	/* Check for String Size as the maximum is 20 Char
	 * Check for the Y Position 0 or 1
	 * Check for the Scrolling Direction Left Or Right
	 */
	if(Copy_u8StrSize > LCD_MAX_CHAR || Copy_u8YPos > 1 || Copy_u8RorL > 1)
    23c0:	fe 01       	movw	r30, r28
    23c2:	e4 5a       	subi	r30, 0xA4	; 164
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	80 81       	ld	r24, Z
    23c8:	85 31       	cpi	r24, 0x15	; 21
    23ca:	60 f4       	brcc	.+24     	; 0x23e4 <LCD_u8StringScroll+0x9a>
    23cc:	fe 01       	movw	r30, r28
    23ce:	e0 5a       	subi	r30, 0xA0	; 160
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	80 81       	ld	r24, Z
    23d4:	82 30       	cpi	r24, 0x02	; 2
    23d6:	30 f4       	brcc	.+12     	; 0x23e4 <LCD_u8StringScroll+0x9a>
    23d8:	fe 01       	movw	r30, r28
    23da:	e1 5a       	subi	r30, 0xA1	; 161
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	80 81       	ld	r24, Z
    23e0:	82 30       	cpi	r24, 0x02	; 2
    23e2:	30 f0       	brcs	.+12     	; 0x23f0 <LCD_u8StringScroll+0xa6>
	{
		Local_u8Error = 1;
    23e4:	fe 01       	movw	r30, r28
    23e6:	e7 5a       	subi	r30, 0xA7	; 167
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	80 83       	st	Z, r24
    23ee:	d9 c5       	rjmp	.+2994   	; 0x2fa2 <LCD_u8StringScroll+0xc58>
	}

	else
	{
		/*This if Scrolling is to Right in Line 1*/
		if(Copy_u8RorL == LCD_SCROLL_TO_RIGHT && Copy_u8YPos == 0)
    23f0:	fe 01       	movw	r30, r28
    23f2:	e1 5a       	subi	r30, 0xA1	; 161
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	80 81       	ld	r24, Z
    23f8:	81 30       	cpi	r24, 0x01	; 1
    23fa:	09 f0       	breq	.+2      	; 0x23fe <LCD_u8StringScroll+0xb4>
    23fc:	e9 c1       	rjmp	.+978    	; 0x27d0 <LCD_u8StringScroll+0x486>
    23fe:	fe 01       	movw	r30, r28
    2400:	e0 5a       	subi	r30, 0xA0	; 160
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	88 23       	and	r24, r24
    2408:	09 f0       	breq	.+2      	; 0x240c <LCD_u8StringScroll+0xc2>
    240a:	e2 c1       	rjmp	.+964    	; 0x27d0 <LCD_u8StringScroll+0x486>
		{
			/*Make the Move2 = Over flow of the first lone - string size*/
			Local_u8Move2 = LCD_OV_LINE_1 - (Copy_u8StrSize);
    240c:	de 01       	movw	r26, r28
    240e:	a9 5a       	subi	r26, 0xA9	; 169
    2410:	bf 4f       	sbci	r27, 0xFF	; 255
    2412:	fe 01       	movw	r30, r28
    2414:	e4 5a       	subi	r30, 0xA4	; 164
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	97 e6       	ldi	r25, 0x67	; 103
    241a:	80 81       	ld	r24, Z
    241c:	29 2f       	mov	r18, r25
    241e:	28 1b       	sub	r18, r24
    2420:	82 2f       	mov	r24, r18
    2422:	8c 93       	st	X, r24

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move <= LCD_MAX_SCROLL_LINE; Local_u8Move++)
    2424:	fe 01       	movw	r30, r28
    2426:	e8 5a       	subi	r30, 0xA8	; 168
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	10 82       	st	Z, r1
    242c:	c9 c1       	rjmp	.+914    	; 0x27c0 <LCD_u8StringScroll+0x476>
			{
				/*if string bigger than 16*/
				if(Local_u8Move >= (LCD_LINE_NB_OF_DIGITS - Copy_u8StrSize))
    242e:	fe 01       	movw	r30, r28
    2430:	e8 5a       	subi	r30, 0xA8	; 168
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 81       	ld	r24, Z
    2436:	48 2f       	mov	r20, r24
    2438:	50 e0       	ldi	r21, 0x00	; 0
    243a:	fe 01       	movw	r30, r28
    243c:	e4 5a       	subi	r30, 0xA4	; 164
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 81       	ld	r24, Z
    2442:	28 2f       	mov	r18, r24
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	80 e1       	ldi	r24, 0x10	; 16
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	82 1b       	sub	r24, r18
    244c:	93 0b       	sbc	r25, r19
    244e:	48 17       	cp	r20, r24
    2450:	59 07       	cpc	r21, r25
    2452:	0c f4       	brge	.+2      	; 0x2456 <LCD_u8StringScroll+0x10c>
    2454:	06 c1       	rjmp	.+524    	; 0x2662 <LCD_u8StringScroll+0x318>
				{
					/*first print the string in the shown position in 16*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2456:	fe 01       	movw	r30, r28
    2458:	e8 5a       	subi	r30, 0xA8	; 168
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	de 01       	movw	r26, r28
    245e:	a0 5a       	subi	r26, 0xA0	; 160
    2460:	bf 4f       	sbci	r27, 0xFF	; 255
    2462:	80 81       	ld	r24, Z
    2464:	6c 91       	ld	r22, X
    2466:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    246a:	fe 01       	movw	r30, r28
    246c:	e6 5a       	subi	r30, 0xA6	; 166
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	80 81       	ld	r24, Z
    2472:	91 81       	ldd	r25, Z+1	; 0x01
    2474:	fe 01       	movw	r30, r28
    2476:	e4 5a       	subi	r30, 0xA4	; 164
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	60 81       	ld	r22, Z
    247c:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <LCD_u8WriteString>

					/*print the string in un-shown position */
					LCD_u8GoToXY(Local_u8Move2, Copy_u8YPos);
    2480:	fe 01       	movw	r30, r28
    2482:	e9 5a       	subi	r30, 0xA9	; 169
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	de 01       	movw	r26, r28
    2488:	a0 5a       	subi	r26, 0xA0	; 160
    248a:	bf 4f       	sbci	r27, 0xFF	; 255
    248c:	80 81       	ld	r24, Z
    248e:	6c 91       	ld	r22, X
    2490:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2494:	fe 01       	movw	r30, r28
    2496:	e6 5a       	subi	r30, 0xA6	; 166
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	80 81       	ld	r24, Z
    249c:	91 81       	ldd	r25, Z+1	; 0x01
    249e:	fe 01       	movw	r30, r28
    24a0:	e4 5a       	subi	r30, 0xA4	; 164
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	60 81       	ld	r22, Z
    24a6:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <LCD_u8WriteString>

//					LCD_u8WriteINT(Local_u8Move, 10, 1);
//					LCD_u8WriteINT(Copy_u8StrSize, 5, 1);

					/*delay with the given time*/
					_delay_ms(Copy_u16Time);
    24aa:	fe 01       	movw	r30, r28
    24ac:	e3 5a       	subi	r30, 0xA3	; 163
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	80 81       	ld	r24, Z
    24b2:	91 81       	ldd	r25, Z+1	; 0x01
    24b4:	cc 01       	movw	r24, r24
    24b6:	a0 e0       	ldi	r26, 0x00	; 0
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	fe 01       	movw	r30, r28
    24c8:	ef 5a       	subi	r30, 0xAF	; 175
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	80 83       	st	Z, r24
    24ce:	91 83       	std	Z+1, r25	; 0x01
    24d0:	a2 83       	std	Z+2, r26	; 0x02
    24d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d4:	8e 01       	movw	r16, r28
    24d6:	03 5b       	subi	r16, 0xB3	; 179
    24d8:	1f 4f       	sbci	r17, 0xFF	; 255
    24da:	fe 01       	movw	r30, r28
    24dc:	ef 5a       	subi	r30, 0xAF	; 175
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	60 81       	ld	r22, Z
    24e2:	71 81       	ldd	r23, Z+1	; 0x01
    24e4:	82 81       	ldd	r24, Z+2	; 0x02
    24e6:	93 81       	ldd	r25, Z+3	; 0x03
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	4a ef       	ldi	r20, 0xFA	; 250
    24ee:	54 e4       	ldi	r21, 0x44	; 68
    24f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	f8 01       	movw	r30, r16
    24fa:	80 83       	st	Z, r24
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	a2 83       	std	Z+2, r26	; 0x02
    2500:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2502:	fe 01       	movw	r30, r28
    2504:	e3 5b       	subi	r30, 0xB3	; 179
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	60 81       	ld	r22, Z
    250a:	71 81       	ldd	r23, Z+1	; 0x01
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	93 81       	ldd	r25, Z+3	; 0x03
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e8       	ldi	r20, 0x80	; 128
    2516:	5f e3       	ldi	r21, 0x3F	; 63
    2518:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    251c:	88 23       	and	r24, r24
    251e:	44 f4       	brge	.+16     	; 0x2530 <LCD_u8StringScroll+0x1e6>
		__ticks = 1;
    2520:	fe 01       	movw	r30, r28
    2522:	e5 5b       	subi	r30, 0xB5	; 181
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	91 83       	std	Z+1, r25	; 0x01
    252c:	80 83       	st	Z, r24
    252e:	64 c0       	rjmp	.+200    	; 0x25f8 <LCD_u8StringScroll+0x2ae>
	else if (__tmp > 65535)
    2530:	fe 01       	movw	r30, r28
    2532:	e3 5b       	subi	r30, 0xB3	; 179
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	60 81       	ld	r22, Z
    2538:	71 81       	ldd	r23, Z+1	; 0x01
    253a:	82 81       	ldd	r24, Z+2	; 0x02
    253c:	93 81       	ldd	r25, Z+3	; 0x03
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	3f ef       	ldi	r19, 0xFF	; 255
    2542:	4f e7       	ldi	r20, 0x7F	; 127
    2544:	57 e4       	ldi	r21, 0x47	; 71
    2546:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    254a:	18 16       	cp	r1, r24
    254c:	0c f0       	brlt	.+2      	; 0x2550 <LCD_u8StringScroll+0x206>
    254e:	43 c0       	rjmp	.+134    	; 0x25d6 <LCD_u8StringScroll+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2550:	fe 01       	movw	r30, r28
    2552:	ef 5a       	subi	r30, 0xAF	; 175
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	60 81       	ld	r22, Z
    2558:	71 81       	ldd	r23, Z+1	; 0x01
    255a:	82 81       	ldd	r24, Z+2	; 0x02
    255c:	93 81       	ldd	r25, Z+3	; 0x03
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e2       	ldi	r20, 0x20	; 32
    2564:	51 e4       	ldi	r21, 0x41	; 65
    2566:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	8e 01       	movw	r16, r28
    2570:	05 5b       	subi	r16, 0xB5	; 181
    2572:	1f 4f       	sbci	r17, 0xFF	; 255
    2574:	bc 01       	movw	r22, r24
    2576:	cd 01       	movw	r24, r26
    2578:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	f8 01       	movw	r30, r16
    2582:	91 83       	std	Z+1, r25	; 0x01
    2584:	80 83       	st	Z, r24
    2586:	1f c0       	rjmp	.+62     	; 0x25c6 <LCD_u8StringScroll+0x27c>
    2588:	fe 01       	movw	r30, r28
    258a:	e7 5b       	subi	r30, 0xB7	; 183
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	88 ec       	ldi	r24, 0xC8	; 200
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	91 83       	std	Z+1, r25	; 0x01
    2594:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2596:	fe 01       	movw	r30, r28
    2598:	e7 5b       	subi	r30, 0xB7	; 183
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	80 81       	ld	r24, Z
    259e:	91 81       	ldd	r25, Z+1	; 0x01
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <LCD_u8StringScroll+0x256>
    25a4:	fe 01       	movw	r30, r28
    25a6:	e7 5b       	subi	r30, 0xB7	; 183
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	91 83       	std	Z+1, r25	; 0x01
    25ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ae:	de 01       	movw	r26, r28
    25b0:	a5 5b       	subi	r26, 0xB5	; 181
    25b2:	bf 4f       	sbci	r27, 0xFF	; 255
    25b4:	fe 01       	movw	r30, r28
    25b6:	e5 5b       	subi	r30, 0xB5	; 181
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 81       	ld	r24, Z
    25bc:	91 81       	ldd	r25, Z+1	; 0x01
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	11 96       	adiw	r26, 0x01	; 1
    25c2:	9c 93       	st	X, r25
    25c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c6:	fe 01       	movw	r30, r28
    25c8:	e5 5b       	subi	r30, 0xB5	; 181
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	80 81       	ld	r24, Z
    25ce:	91 81       	ldd	r25, Z+1	; 0x01
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	d1 f6       	brne	.-76     	; 0x2588 <LCD_u8StringScroll+0x23e>
    25d4:	27 c0       	rjmp	.+78     	; 0x2624 <LCD_u8StringScroll+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d6:	8e 01       	movw	r16, r28
    25d8:	05 5b       	subi	r16, 0xB5	; 181
    25da:	1f 4f       	sbci	r17, 0xFF	; 255
    25dc:	fe 01       	movw	r30, r28
    25de:	e3 5b       	subi	r30, 0xB3	; 179
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	60 81       	ld	r22, Z
    25e4:	71 81       	ldd	r23, Z+1	; 0x01
    25e6:	82 81       	ldd	r24, Z+2	; 0x02
    25e8:	93 81       	ldd	r25, Z+3	; 0x03
    25ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	f8 01       	movw	r30, r16
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	80 83       	st	Z, r24
    25f8:	de 01       	movw	r26, r28
    25fa:	a9 5b       	subi	r26, 0xB9	; 185
    25fc:	bf 4f       	sbci	r27, 0xFF	; 255
    25fe:	fe 01       	movw	r30, r28
    2600:	e5 5b       	subi	r30, 0xB5	; 181
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	80 81       	ld	r24, Z
    2606:	91 81       	ldd	r25, Z+1	; 0x01
    2608:	8d 93       	st	X+, r24
    260a:	9c 93       	st	X, r25
    260c:	fe 01       	movw	r30, r28
    260e:	e9 5b       	subi	r30, 0xB9	; 185
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	80 81       	ld	r24, Z
    2614:	91 81       	ldd	r25, Z+1	; 0x01
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	f1 f7       	brne	.-4      	; 0x2616 <LCD_u8StringScroll+0x2cc>
    261a:	fe 01       	movw	r30, r28
    261c:	e9 5b       	subi	r30, 0xB9	; 185
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	91 83       	std	Z+1, r25	; 0x01
    2622:	80 83       	st	Z, r24

					/*Clear the LCD*/
					LCD_voidClearLCD();
    2624:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <LCD_voidClearLCD>

					/*increment Move 2*/
					Local_u8Move2++;
    2628:	de 01       	movw	r26, r28
    262a:	a9 5a       	subi	r26, 0xA9	; 169
    262c:	bf 4f       	sbci	r27, 0xFF	; 255
    262e:	fe 01       	movw	r30, r28
    2630:	e9 5a       	subi	r30, 0xA9	; 169
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	80 81       	ld	r24, Z
    2636:	8f 5f       	subi	r24, 0xFF	; 255
    2638:	8c 93       	st	X, r24

					/*if Move 2 = 16 give it its initial value and break the loop*/
					if(Local_u8Move2 == LCD_OV_LINE_1)
    263a:	fe 01       	movw	r30, r28
    263c:	e9 5a       	subi	r30, 0xA9	; 169
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	80 81       	ld	r24, Z
    2642:	87 36       	cpi	r24, 0x67	; 103
    2644:	09 f0       	breq	.+2      	; 0x2648 <LCD_u8StringScroll+0x2fe>
    2646:	b3 c0       	rjmp	.+358    	; 0x27ae <LCD_u8StringScroll+0x464>
					{
						Local_u8Move2 = LCD_OV_LINE_1 - (Copy_u8StrSize);
    2648:	de 01       	movw	r26, r28
    264a:	a9 5a       	subi	r26, 0xA9	; 169
    264c:	bf 4f       	sbci	r27, 0xFF	; 255
    264e:	fe 01       	movw	r30, r28
    2650:	e4 5a       	subi	r30, 0xA4	; 164
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	97 e6       	ldi	r25, 0x67	; 103
    2656:	80 81       	ld	r24, Z
    2658:	f9 2f       	mov	r31, r25
    265a:	f8 1b       	sub	r31, r24
    265c:	8f 2f       	mov	r24, r31
    265e:	8c 93       	st	X, r24
    2660:	a0 c4       	rjmp	.+2368   	; 0x2fa2 <LCD_u8StringScroll+0xc58>

				/*else mean string < 16*/
				else
				{
					/*Print the string*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2662:	fe 01       	movw	r30, r28
    2664:	e8 5a       	subi	r30, 0xA8	; 168
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	de 01       	movw	r26, r28
    266a:	a0 5a       	subi	r26, 0xA0	; 160
    266c:	bf 4f       	sbci	r27, 0xFF	; 255
    266e:	80 81       	ld	r24, Z
    2670:	6c 91       	ld	r22, X
    2672:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2676:	fe 01       	movw	r30, r28
    2678:	e6 5a       	subi	r30, 0xA6	; 166
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	80 81       	ld	r24, Z
    267e:	91 81       	ldd	r25, Z+1	; 0x01
    2680:	fe 01       	movw	r30, r28
    2682:	e4 5a       	subi	r30, 0xA4	; 164
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	60 81       	ld	r22, Z
    2688:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <LCD_u8WriteString>

//					LCD_u8WriteINT(Local_u8Move, 10, 1);
//					LCD_u8WriteINT(Copy_u8StrSize, 5, 1);

					/*Delay the given time*/
					_delay_ms(Copy_u16Time);
    268c:	fe 01       	movw	r30, r28
    268e:	e3 5a       	subi	r30, 0xA3	; 163
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	80 81       	ld	r24, Z
    2694:	91 81       	ldd	r25, Z+1	; 0x01
    2696:	cc 01       	movw	r24, r24
    2698:	a0 e0       	ldi	r26, 0x00	; 0
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	fe 01       	movw	r30, r28
    26aa:	ed 5b       	subi	r30, 0xBD	; 189
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	80 83       	st	Z, r24
    26b0:	91 83       	std	Z+1, r25	; 0x01
    26b2:	a2 83       	std	Z+2, r26	; 0x02
    26b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b6:	8e 01       	movw	r16, r28
    26b8:	01 5c       	subi	r16, 0xC1	; 193
    26ba:	1f 4f       	sbci	r17, 0xFF	; 255
    26bc:	fe 01       	movw	r30, r28
    26be:	ed 5b       	subi	r30, 0xBD	; 189
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	60 81       	ld	r22, Z
    26c4:	71 81       	ldd	r23, Z+1	; 0x01
    26c6:	82 81       	ldd	r24, Z+2	; 0x02
    26c8:	93 81       	ldd	r25, Z+3	; 0x03
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4a ef       	ldi	r20, 0xFA	; 250
    26d0:	54 e4       	ldi	r21, 0x44	; 68
    26d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	f8 01       	movw	r30, r16
    26dc:	80 83       	st	Z, r24
    26de:	91 83       	std	Z+1, r25	; 0x01
    26e0:	a2 83       	std	Z+2, r26	; 0x02
    26e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26e4:	fe 01       	movw	r30, r28
    26e6:	ff 96       	adiw	r30, 0x3f	; 63
    26e8:	60 81       	ld	r22, Z
    26ea:	71 81       	ldd	r23, Z+1	; 0x01
    26ec:	82 81       	ldd	r24, Z+2	; 0x02
    26ee:	93 81       	ldd	r25, Z+3	; 0x03
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	40 e8       	ldi	r20, 0x80	; 128
    26f6:	5f e3       	ldi	r21, 0x3F	; 63
    26f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26fc:	88 23       	and	r24, r24
    26fe:	2c f4       	brge	.+10     	; 0x270a <LCD_u8StringScroll+0x3c0>
		__ticks = 1;
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	9e af       	std	Y+62, r25	; 0x3e
    2706:	8d af       	std	Y+61, r24	; 0x3d
    2708:	46 c0       	rjmp	.+140    	; 0x2796 <LCD_u8StringScroll+0x44c>
	else if (__tmp > 65535)
    270a:	fe 01       	movw	r30, r28
    270c:	ff 96       	adiw	r30, 0x3f	; 63
    270e:	60 81       	ld	r22, Z
    2710:	71 81       	ldd	r23, Z+1	; 0x01
    2712:	82 81       	ldd	r24, Z+2	; 0x02
    2714:	93 81       	ldd	r25, Z+3	; 0x03
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	3f ef       	ldi	r19, 0xFF	; 255
    271a:	4f e7       	ldi	r20, 0x7F	; 127
    271c:	57 e4       	ldi	r21, 0x47	; 71
    271e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2722:	18 16       	cp	r1, r24
    2724:	64 f5       	brge	.+88     	; 0x277e <LCD_u8StringScroll+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2726:	fe 01       	movw	r30, r28
    2728:	ed 5b       	subi	r30, 0xBD	; 189
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	60 81       	ld	r22, Z
    272e:	71 81       	ldd	r23, Z+1	; 0x01
    2730:	82 81       	ldd	r24, Z+2	; 0x02
    2732:	93 81       	ldd	r25, Z+3	; 0x03
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e2       	ldi	r20, 0x20	; 32
    273a:	51 e4       	ldi	r21, 0x41	; 65
    273c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	bc 01       	movw	r22, r24
    2746:	cd 01       	movw	r24, r26
    2748:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	9e af       	std	Y+62, r25	; 0x3e
    2752:	8d af       	std	Y+61, r24	; 0x3d
    2754:	0f c0       	rjmp	.+30     	; 0x2774 <LCD_u8StringScroll+0x42a>
    2756:	88 ec       	ldi	r24, 0xC8	; 200
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	9c af       	std	Y+60, r25	; 0x3c
    275c:	8b af       	std	Y+59, r24	; 0x3b
    275e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2760:	9c ad       	ldd	r25, Y+60	; 0x3c
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <LCD_u8StringScroll+0x418>
    2766:	9c af       	std	Y+60, r25	; 0x3c
    2768:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276a:	8d ad       	ldd	r24, Y+61	; 0x3d
    276c:	9e ad       	ldd	r25, Y+62	; 0x3e
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	9e af       	std	Y+62, r25	; 0x3e
    2772:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2774:	8d ad       	ldd	r24, Y+61	; 0x3d
    2776:	9e ad       	ldd	r25, Y+62	; 0x3e
    2778:	00 97       	sbiw	r24, 0x00	; 0
    277a:	69 f7       	brne	.-38     	; 0x2756 <LCD_u8StringScroll+0x40c>
    277c:	16 c0       	rjmp	.+44     	; 0x27aa <LCD_u8StringScroll+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277e:	fe 01       	movw	r30, r28
    2780:	ff 96       	adiw	r30, 0x3f	; 63
    2782:	60 81       	ld	r22, Z
    2784:	71 81       	ldd	r23, Z+1	; 0x01
    2786:	82 81       	ldd	r24, Z+2	; 0x02
    2788:	93 81       	ldd	r25, Z+3	; 0x03
    278a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	9e af       	std	Y+62, r25	; 0x3e
    2794:	8d af       	std	Y+61, r24	; 0x3d
    2796:	8d ad       	ldd	r24, Y+61	; 0x3d
    2798:	9e ad       	ldd	r25, Y+62	; 0x3e
    279a:	9a af       	std	Y+58, r25	; 0x3a
    279c:	89 af       	std	Y+57, r24	; 0x39
    279e:	89 ad       	ldd	r24, Y+57	; 0x39
    27a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <LCD_u8StringScroll+0x458>
    27a6:	9a af       	std	Y+58, r25	; 0x3a
    27a8:	89 af       	std	Y+57, r24	; 0x39

					/*Clear LCD*/
					LCD_voidClearLCD();
    27aa:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <LCD_voidClearLCD>
		{
			/*Make the Move2 = Over flow of the first lone - string size*/
			Local_u8Move2 = LCD_OV_LINE_1 - (Copy_u8StrSize);

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move <= LCD_MAX_SCROLL_LINE; Local_u8Move++)
    27ae:	de 01       	movw	r26, r28
    27b0:	a8 5a       	subi	r26, 0xA8	; 168
    27b2:	bf 4f       	sbci	r27, 0xFF	; 255
    27b4:	fe 01       	movw	r30, r28
    27b6:	e8 5a       	subi	r30, 0xA8	; 168
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	80 81       	ld	r24, Z
    27bc:	8f 5f       	subi	r24, 0xFF	; 255
    27be:	8c 93       	st	X, r24
    27c0:	fe 01       	movw	r30, r28
    27c2:	e8 5a       	subi	r30, 0xA8	; 168
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	80 81       	ld	r24, Z
    27c8:	8a 32       	cpi	r24, 0x2A	; 42
    27ca:	08 f4       	brcc	.+2      	; 0x27ce <LCD_u8StringScroll+0x484>
    27cc:	30 ce       	rjmp	.-928    	; 0x242e <LCD_u8StringScroll+0xe4>
    27ce:	e9 c3       	rjmp	.+2002   	; 0x2fa2 <LCD_u8StringScroll+0xc58>
				}
			}
		}

		/*else mean scroll to left in Line 1*/
		else if(Copy_u8RorL == LCD_SCROLL_TO_LEFT && Copy_u8YPos == 0)
    27d0:	fe 01       	movw	r30, r28
    27d2:	e1 5a       	subi	r30, 0xA1	; 161
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	80 81       	ld	r24, Z
    27d8:	88 23       	and	r24, r24
    27da:	09 f0       	breq	.+2      	; 0x27de <LCD_u8StringScroll+0x494>
    27dc:	20 c1       	rjmp	.+576    	; 0x2a1e <LCD_u8StringScroll+0x6d4>
    27de:	fe 01       	movw	r30, r28
    27e0:	e0 5a       	subi	r30, 0xA0	; 160
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	80 81       	ld	r24, Z
    27e6:	88 23       	and	r24, r24
    27e8:	09 f0       	breq	.+2      	; 0x27ec <LCD_u8StringScroll+0x4a2>
    27ea:	19 c1       	rjmp	.+562    	; 0x2a1e <LCD_u8StringScroll+0x6d4>
		{
			/*Move2 = over flow + string size + 1 to make space between the last and first char in string */
			Local_u8Move2 = LCD_OV_LINE_1 + (Copy_u8StrSize + 1);
    27ec:	de 01       	movw	r26, r28
    27ee:	a9 5a       	subi	r26, 0xA9	; 169
    27f0:	bf 4f       	sbci	r27, 0xFF	; 255
    27f2:	fe 01       	movw	r30, r28
    27f4:	e4 5a       	subi	r30, 0xA4	; 164
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 81       	ld	r24, Z
    27fa:	88 59       	subi	r24, 0x98	; 152
    27fc:	8c 93       	st	X, r24

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    27fe:	fe 01       	movw	r30, r28
    2800:	ea 5a       	subi	r30, 0xAA	; 170
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	80 e1       	ldi	r24, 0x10	; 16
    2806:	80 83       	st	Z, r24

			/*make the Move = 104 (Over Flow + 1 (First char on LCD)) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_1 + 1); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    2808:	fe 01       	movw	r30, r28
    280a:	e8 5a       	subi	r30, 0xA8	; 168
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	88 e6       	ldi	r24, 0x68	; 104
    2810:	80 83       	st	Z, r24
    2812:	f9 c0       	rjmp	.+498    	; 0x2a06 <LCD_u8StringScroll+0x6bc>
			{
				/*Print LCD with the Move as X position*/
				LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2814:	fe 01       	movw	r30, r28
    2816:	e8 5a       	subi	r30, 0xA8	; 168
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	de 01       	movw	r26, r28
    281c:	a0 5a       	subi	r26, 0xA0	; 160
    281e:	bf 4f       	sbci	r27, 0xFF	; 255
    2820:	80 81       	ld	r24, Z
    2822:	6c 91       	ld	r22, X
    2824:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
				LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2828:	fe 01       	movw	r30, r28
    282a:	e6 5a       	subi	r30, 0xA6	; 166
    282c:	ff 4f       	sbci	r31, 0xFF	; 255
    282e:	80 81       	ld	r24, Z
    2830:	91 81       	ldd	r25, Z+1	; 0x01
    2832:	fe 01       	movw	r30, r28
    2834:	e4 5a       	subi	r30, 0xA4	; 164
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	60 81       	ld	r22, Z
    283a:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <LCD_u8WriteString>

				/*if String size less than 16*/
				if(Copy_u8StrSize < LCD_LINE_NB_OF_DIGITS)
    283e:	fe 01       	movw	r30, r28
    2840:	e4 5a       	subi	r30, 0xA4	; 164
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	80 81       	ld	r24, Z
    2846:	80 31       	cpi	r24, 0x10	; 16
    2848:	f8 f4       	brcc	.+62     	; 0x2888 <LCD_u8StringScroll+0x53e>
				{
					/*print with move 3 as X position*/
					LCD_u8GoToXY(Local_u8Move3 , Copy_u8YPos);
    284a:	fe 01       	movw	r30, r28
    284c:	ea 5a       	subi	r30, 0xAA	; 170
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	de 01       	movw	r26, r28
    2852:	a0 5a       	subi	r26, 0xA0	; 160
    2854:	bf 4f       	sbci	r27, 0xFF	; 255
    2856:	80 81       	ld	r24, Z
    2858:	6c 91       	ld	r22, X
    285a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    285e:	fe 01       	movw	r30, r28
    2860:	e6 5a       	subi	r30, 0xA6	; 166
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	80 81       	ld	r24, Z
    2866:	91 81       	ldd	r25, Z+1	; 0x01
    2868:	fe 01       	movw	r30, r28
    286a:	e4 5a       	subi	r30, 0xA4	; 164
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	60 81       	ld	r22, Z
    2870:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <LCD_u8WriteString>

					/*De-crement move 3*/
					Local_u8Move3--;
    2874:	de 01       	movw	r26, r28
    2876:	aa 5a       	subi	r26, 0xAA	; 170
    2878:	bf 4f       	sbci	r27, 0xFF	; 255
    287a:	fe 01       	movw	r30, r28
    287c:	ea 5a       	subi	r30, 0xAA	; 170
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	80 81       	ld	r24, Z
    2882:	81 50       	subi	r24, 0x01	; 1
    2884:	8c 93       	st	X, r24
    2886:	1e c0       	rjmp	.+60     	; 0x28c4 <LCD_u8StringScroll+0x57a>

				/*else mean string > 16*/
				else
				{
					/*print with the copy of string size as X position*/
					LCD_u8GoToXY(Copy_u8StringSize, Copy_u8YPos);
    2888:	fe 01       	movw	r30, r28
    288a:	eb 5a       	subi	r30, 0xAB	; 171
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	de 01       	movw	r26, r28
    2890:	a0 5a       	subi	r26, 0xA0	; 160
    2892:	bf 4f       	sbci	r27, 0xFF	; 255
    2894:	80 81       	ld	r24, Z
    2896:	6c 91       	ld	r22, X
    2898:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    289c:	fe 01       	movw	r30, r28
    289e:	e6 5a       	subi	r30, 0xA6	; 166
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	80 81       	ld	r24, Z
    28a4:	91 81       	ldd	r25, Z+1	; 0x01
    28a6:	fe 01       	movw	r30, r28
    28a8:	e4 5a       	subi	r30, 0xA4	; 164
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	60 81       	ld	r22, Z
    28ae:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <LCD_u8WriteString>

					/*de-crement the copy of the sting size*/
					Copy_u8StringSize--;
    28b2:	de 01       	movw	r26, r28
    28b4:	ab 5a       	subi	r26, 0xAB	; 171
    28b6:	bf 4f       	sbci	r27, 0xFF	; 255
    28b8:	fe 01       	movw	r30, r28
    28ba:	eb 5a       	subi	r30, 0xAB	; 171
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	80 81       	ld	r24, Z
    28c0:	81 50       	subi	r24, 0x01	; 1
    28c2:	8c 93       	st	X, r24
//				LCD_u8WriteINT(Local_u8Move, 10, 1);
//				LCD_u8WriteINT(Copy_u8StrSize, 5, 1);
//				LCD_u8WriteINT(Copy_u8StringSize, 1, 1);

				/*Delay with the given time*/
				_delay_ms(Copy_u16Time);
    28c4:	fe 01       	movw	r30, r28
    28c6:	e3 5a       	subi	r30, 0xA3	; 163
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	80 81       	ld	r24, Z
    28cc:	91 81       	ldd	r25, Z+1	; 0x01
    28ce:	cc 01       	movw	r24, r24
    28d0:	a0 e0       	ldi	r26, 0x00	; 0
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	8d ab       	std	Y+53, r24	; 0x35
    28e2:	9e ab       	std	Y+54, r25	; 0x36
    28e4:	af ab       	std	Y+55, r26	; 0x37
    28e6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e8:	6d a9       	ldd	r22, Y+53	; 0x35
    28ea:	7e a9       	ldd	r23, Y+54	; 0x36
    28ec:	8f a9       	ldd	r24, Y+55	; 0x37
    28ee:	98 ad       	ldd	r25, Y+56	; 0x38
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	4a ef       	ldi	r20, 0xFA	; 250
    28f6:	54 e4       	ldi	r21, 0x44	; 68
    28f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	89 ab       	std	Y+49, r24	; 0x31
    2902:	9a ab       	std	Y+50, r25	; 0x32
    2904:	ab ab       	std	Y+51, r26	; 0x33
    2906:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2908:	69 a9       	ldd	r22, Y+49	; 0x31
    290a:	7a a9       	ldd	r23, Y+50	; 0x32
    290c:	8b a9       	ldd	r24, Y+51	; 0x33
    290e:	9c a9       	ldd	r25, Y+52	; 0x34
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e8       	ldi	r20, 0x80	; 128
    2916:	5f e3       	ldi	r21, 0x3F	; 63
    2918:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    291c:	88 23       	and	r24, r24
    291e:	2c f4       	brge	.+10     	; 0x292a <LCD_u8StringScroll+0x5e0>
		__ticks = 1;
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	98 ab       	std	Y+48, r25	; 0x30
    2926:	8f a7       	std	Y+47, r24	; 0x2f
    2928:	3f c0       	rjmp	.+126    	; 0x29a8 <LCD_u8StringScroll+0x65e>
	else if (__tmp > 65535)
    292a:	69 a9       	ldd	r22, Y+49	; 0x31
    292c:	7a a9       	ldd	r23, Y+50	; 0x32
    292e:	8b a9       	ldd	r24, Y+51	; 0x33
    2930:	9c a9       	ldd	r25, Y+52	; 0x34
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	3f ef       	ldi	r19, 0xFF	; 255
    2936:	4f e7       	ldi	r20, 0x7F	; 127
    2938:	57 e4       	ldi	r21, 0x47	; 71
    293a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    293e:	18 16       	cp	r1, r24
    2940:	4c f5       	brge	.+82     	; 0x2994 <LCD_u8StringScroll+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2942:	6d a9       	ldd	r22, Y+53	; 0x35
    2944:	7e a9       	ldd	r23, Y+54	; 0x36
    2946:	8f a9       	ldd	r24, Y+55	; 0x37
    2948:	98 ad       	ldd	r25, Y+56	; 0x38
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e2       	ldi	r20, 0x20	; 32
    2950:	51 e4       	ldi	r21, 0x41	; 65
    2952:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	bc 01       	movw	r22, r24
    295c:	cd 01       	movw	r24, r26
    295e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	98 ab       	std	Y+48, r25	; 0x30
    2968:	8f a7       	std	Y+47, r24	; 0x2f
    296a:	0f c0       	rjmp	.+30     	; 0x298a <LCD_u8StringScroll+0x640>
    296c:	88 ec       	ldi	r24, 0xC8	; 200
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	9e a7       	std	Y+46, r25	; 0x2e
    2972:	8d a7       	std	Y+45, r24	; 0x2d
    2974:	8d a5       	ldd	r24, Y+45	; 0x2d
    2976:	9e a5       	ldd	r25, Y+46	; 0x2e
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <LCD_u8StringScroll+0x62e>
    297c:	9e a7       	std	Y+46, r25	; 0x2e
    297e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2980:	8f a5       	ldd	r24, Y+47	; 0x2f
    2982:	98 a9       	ldd	r25, Y+48	; 0x30
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	98 ab       	std	Y+48, r25	; 0x30
    2988:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298a:	8f a5       	ldd	r24, Y+47	; 0x2f
    298c:	98 a9       	ldd	r25, Y+48	; 0x30
    298e:	00 97       	sbiw	r24, 0x00	; 0
    2990:	69 f7       	brne	.-38     	; 0x296c <LCD_u8StringScroll+0x622>
    2992:	14 c0       	rjmp	.+40     	; 0x29bc <LCD_u8StringScroll+0x672>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2994:	69 a9       	ldd	r22, Y+49	; 0x31
    2996:	7a a9       	ldd	r23, Y+50	; 0x32
    2998:	8b a9       	ldd	r24, Y+51	; 0x33
    299a:	9c a9       	ldd	r25, Y+52	; 0x34
    299c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	98 ab       	std	Y+48, r25	; 0x30
    29a6:	8f a7       	std	Y+47, r24	; 0x2f
    29a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    29aa:	98 a9       	ldd	r25, Y+48	; 0x30
    29ac:	9c a7       	std	Y+44, r25	; 0x2c
    29ae:	8b a7       	std	Y+43, r24	; 0x2b
    29b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    29b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <LCD_u8StringScroll+0x66a>
    29b8:	9c a7       	std	Y+44, r25	; 0x2c
    29ba:	8b a7       	std	Y+43, r24	; 0x2b

				/*Clear LCD*/
				LCD_voidClearLCD();
    29bc:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <LCD_voidClearLCD>

				/*if Move 3 = 0 or Copy of string size = 0 re-intiate their value and break the loop*/
				if(Local_u8Move3 == 0 || Copy_u8StringSize == 0)
    29c0:	fe 01       	movw	r30, r28
    29c2:	ea 5a       	subi	r30, 0xAA	; 170
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	80 81       	ld	r24, Z
    29c8:	88 23       	and	r24, r24
    29ca:	31 f0       	breq	.+12     	; 0x29d8 <LCD_u8StringScroll+0x68e>
    29cc:	fe 01       	movw	r30, r28
    29ce:	eb 5a       	subi	r30, 0xAB	; 171
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	80 81       	ld	r24, Z
    29d4:	88 23       	and	r24, r24
    29d6:	71 f4       	brne	.+28     	; 0x29f4 <LCD_u8StringScroll+0x6aa>
				{
					Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    29d8:	fe 01       	movw	r30, r28
    29da:	ea 5a       	subi	r30, 0xAA	; 170
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	80 e1       	ldi	r24, 0x10	; 16
    29e0:	80 83       	st	Z, r24
					Copy_u8StringSize = Copy_u8StrSize;
    29e2:	de 01       	movw	r26, r28
    29e4:	ab 5a       	subi	r26, 0xAB	; 171
    29e6:	bf 4f       	sbci	r27, 0xFF	; 255
    29e8:	fe 01       	movw	r30, r28
    29ea:	e4 5a       	subi	r30, 0xA4	; 164
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	80 81       	ld	r24, Z
    29f0:	8c 93       	st	X, r24
    29f2:	d7 c2       	rjmp	.+1454   	; 0x2fa2 <LCD_u8StringScroll+0xc58>

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;

			/*make the Move = 104 (Over Flow + 1 (First char on LCD)) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_1 + 1); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    29f4:	de 01       	movw	r26, r28
    29f6:	a8 5a       	subi	r26, 0xA8	; 168
    29f8:	bf 4f       	sbci	r27, 0xFF	; 255
    29fa:	fe 01       	movw	r30, r28
    29fc:	e8 5a       	subi	r30, 0xA8	; 168
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	80 81       	ld	r24, Z
    2a02:	81 50       	subi	r24, 0x01	; 1
    2a04:	8c 93       	st	X, r24
    2a06:	fe 01       	movw	r30, r28
    2a08:	e8 5a       	subi	r30, 0xA8	; 168
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	de 01       	movw	r26, r28
    2a0e:	a9 5a       	subi	r26, 0xA9	; 169
    2a10:	bf 4f       	sbci	r27, 0xFF	; 255
    2a12:	90 81       	ld	r25, Z
    2a14:	8c 91       	ld	r24, X
    2a16:	89 17       	cp	r24, r25
    2a18:	08 f0       	brcs	.+2      	; 0x2a1c <LCD_u8StringScroll+0x6d2>
    2a1a:	fc ce       	rjmp	.-520    	; 0x2814 <LCD_u8StringScroll+0x4ca>
    2a1c:	c2 c2       	rjmp	.+1412   	; 0x2fa2 <LCD_u8StringScroll+0xc58>
				}
			}
		}

		/*This if Scrolling is to Right in Line 2*/
		else if(Copy_u8RorL == LCD_SCROLL_TO_RIGHT && Copy_u8YPos == 1)
    2a1e:	fe 01       	movw	r30, r28
    2a20:	e1 5a       	subi	r30, 0xA1	; 161
    2a22:	ff 4f       	sbci	r31, 0xFF	; 255
    2a24:	80 81       	ld	r24, Z
    2a26:	81 30       	cpi	r24, 0x01	; 1
    2a28:	09 f0       	breq	.+2      	; 0x2a2c <LCD_u8StringScroll+0x6e2>
    2a2a:	95 c1       	rjmp	.+810    	; 0x2d56 <LCD_u8StringScroll+0xa0c>
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	e0 5a       	subi	r30, 0xA0	; 160
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	80 81       	ld	r24, Z
    2a34:	81 30       	cpi	r24, 0x01	; 1
    2a36:	09 f0       	breq	.+2      	; 0x2a3a <LCD_u8StringScroll+0x6f0>
    2a38:	8e c1       	rjmp	.+796    	; 0x2d56 <LCD_u8StringScroll+0xa0c>
		{
			/*Make the Move2 = Over flow of the second line - string size*/
			Local_u8Move2 = LCD_OV_LINE_2 - Copy_u8StrSize;
    2a3a:	de 01       	movw	r26, r28
    2a3c:	a9 5a       	subi	r26, 0xA9	; 169
    2a3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a40:	fe 01       	movw	r30, r28
    2a42:	e4 5a       	subi	r30, 0xA4	; 164
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	98 ee       	ldi	r25, 0xE8	; 232
    2a48:	80 81       	ld	r24, Z
    2a4a:	f9 2f       	mov	r31, r25
    2a4c:	f8 1b       	sub	r31, r24
    2a4e:	8f 2f       	mov	r24, r31
    2a50:	8c 93       	st	X, r24

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move < LCD_MAX_SCROLL_LINE; Local_u8Move++)
    2a52:	fe 01       	movw	r30, r28
    2a54:	e8 5a       	subi	r30, 0xA8	; 168
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	10 82       	st	Z, r1
    2a5a:	75 c1       	rjmp	.+746    	; 0x2d46 <LCD_u8StringScroll+0x9fc>
			{
				/*if string bigger than 16*/
				if(Local_u8Move >= (LCD_LINE_NB_OF_DIGITS - Copy_u8StrSize))
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e8 5a       	subi	r30, 0xA8	; 168
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	80 81       	ld	r24, Z
    2a64:	48 2f       	mov	r20, r24
    2a66:	50 e0       	ldi	r21, 0x00	; 0
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e4 5a       	subi	r30, 0xA4	; 164
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	80 81       	ld	r24, Z
    2a70:	28 2f       	mov	r18, r24
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	80 e1       	ldi	r24, 0x10	; 16
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	82 1b       	sub	r24, r18
    2a7a:	93 0b       	sbc	r25, r19
    2a7c:	48 17       	cp	r20, r24
    2a7e:	59 07       	cpc	r21, r25
    2a80:	0c f4       	brge	.+2      	; 0x2a84 <LCD_u8StringScroll+0x73a>
    2a82:	c5 c0       	rjmp	.+394    	; 0x2c0e <LCD_u8StringScroll+0x8c4>
				{
					/*first print the string in the shown position in 16*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2a84:	fe 01       	movw	r30, r28
    2a86:	e8 5a       	subi	r30, 0xA8	; 168
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	de 01       	movw	r26, r28
    2a8c:	a0 5a       	subi	r26, 0xA0	; 160
    2a8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a90:	80 81       	ld	r24, Z
    2a92:	6c 91       	ld	r22, X
    2a94:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2a98:	fe 01       	movw	r30, r28
    2a9a:	e6 5a       	subi	r30, 0xA6	; 166
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	80 81       	ld	r24, Z
    2aa0:	91 81       	ldd	r25, Z+1	; 0x01
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	e4 5a       	subi	r30, 0xA4	; 164
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	60 81       	ld	r22, Z
    2aaa:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <LCD_u8WriteString>

					/*print the string in un-shown position */
					LCD_u8GoToXY(Local_u8Move2, Copy_u8YPos);
    2aae:	fe 01       	movw	r30, r28
    2ab0:	e9 5a       	subi	r30, 0xA9	; 169
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	de 01       	movw	r26, r28
    2ab6:	a0 5a       	subi	r26, 0xA0	; 160
    2ab8:	bf 4f       	sbci	r27, 0xFF	; 255
    2aba:	80 81       	ld	r24, Z
    2abc:	6c 91       	ld	r22, X
    2abe:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	e6 5a       	subi	r30, 0xA6	; 166
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	80 81       	ld	r24, Z
    2aca:	91 81       	ldd	r25, Z+1	; 0x01
    2acc:	fe 01       	movw	r30, r28
    2ace:	e4 5a       	subi	r30, 0xA4	; 164
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	60 81       	ld	r22, Z
    2ad4:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <LCD_u8WriteString>
//					LCD_u8WriteINT(Local_u8Move, 0, 0);
//					LCD_u8WriteINT(Local_u8Move2, 5, 0);
//					LCD_u8WriteINT(Copy_u8StrSize, 10, 0);

					/*delay with the given time*/
					_delay_ms(Copy_u16Time);
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e3 5a       	subi	r30, 0xA3	; 163
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	80 81       	ld	r24, Z
    2ae0:	91 81       	ldd	r25, Z+1	; 0x01
    2ae2:	cc 01       	movw	r24, r24
    2ae4:	a0 e0       	ldi	r26, 0x00	; 0
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	bc 01       	movw	r22, r24
    2aea:	cd 01       	movw	r24, r26
    2aec:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	8f a3       	std	Y+39, r24	; 0x27
    2af6:	98 a7       	std	Y+40, r25	; 0x28
    2af8:	a9 a7       	std	Y+41, r26	; 0x29
    2afa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afc:	6f a1       	ldd	r22, Y+39	; 0x27
    2afe:	78 a5       	ldd	r23, Y+40	; 0x28
    2b00:	89 a5       	ldd	r24, Y+41	; 0x29
    2b02:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	4a ef       	ldi	r20, 0xFA	; 250
    2b0a:	54 e4       	ldi	r21, 0x44	; 68
    2b0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	8b a3       	std	Y+35, r24	; 0x23
    2b16:	9c a3       	std	Y+36, r25	; 0x24
    2b18:	ad a3       	std	Y+37, r26	; 0x25
    2b1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b20:	8d a1       	ldd	r24, Y+37	; 0x25
    2b22:	9e a1       	ldd	r25, Y+38	; 0x26
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e8       	ldi	r20, 0x80	; 128
    2b2a:	5f e3       	ldi	r21, 0x3F	; 63
    2b2c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b30:	88 23       	and	r24, r24
    2b32:	2c f4       	brge	.+10     	; 0x2b3e <LCD_u8StringScroll+0x7f4>
		__ticks = 1;
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	9a a3       	std	Y+34, r25	; 0x22
    2b3a:	89 a3       	std	Y+33, r24	; 0x21
    2b3c:	3f c0       	rjmp	.+126    	; 0x2bbc <LCD_u8StringScroll+0x872>
	else if (__tmp > 65535)
    2b3e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b40:	7c a1       	ldd	r23, Y+36	; 0x24
    2b42:	8d a1       	ldd	r24, Y+37	; 0x25
    2b44:	9e a1       	ldd	r25, Y+38	; 0x26
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	3f ef       	ldi	r19, 0xFF	; 255
    2b4a:	4f e7       	ldi	r20, 0x7F	; 127
    2b4c:	57 e4       	ldi	r21, 0x47	; 71
    2b4e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b52:	18 16       	cp	r1, r24
    2b54:	4c f5       	brge	.+82     	; 0x2ba8 <LCD_u8StringScroll+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b56:	6f a1       	ldd	r22, Y+39	; 0x27
    2b58:	78 a5       	ldd	r23, Y+40	; 0x28
    2b5a:	89 a5       	ldd	r24, Y+41	; 0x29
    2b5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	40 e2       	ldi	r20, 0x20	; 32
    2b64:	51 e4       	ldi	r21, 0x41	; 65
    2b66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	bc 01       	movw	r22, r24
    2b70:	cd 01       	movw	r24, r26
    2b72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	9a a3       	std	Y+34, r25	; 0x22
    2b7c:	89 a3       	std	Y+33, r24	; 0x21
    2b7e:	0f c0       	rjmp	.+30     	; 0x2b9e <LCD_u8StringScroll+0x854>
    2b80:	88 ec       	ldi	r24, 0xC8	; 200
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	98 a3       	std	Y+32, r25	; 0x20
    2b86:	8f 8f       	std	Y+31, r24	; 0x1f
    2b88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b8a:	98 a1       	ldd	r25, Y+32	; 0x20
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	f1 f7       	brne	.-4      	; 0x2b8c <LCD_u8StringScroll+0x842>
    2b90:	98 a3       	std	Y+32, r25	; 0x20
    2b92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b94:	89 a1       	ldd	r24, Y+33	; 0x21
    2b96:	9a a1       	ldd	r25, Y+34	; 0x22
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	9a a3       	std	Y+34, r25	; 0x22
    2b9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b9e:	89 a1       	ldd	r24, Y+33	; 0x21
    2ba0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ba2:	00 97       	sbiw	r24, 0x00	; 0
    2ba4:	69 f7       	brne	.-38     	; 0x2b80 <LCD_u8StringScroll+0x836>
    2ba6:	14 c0       	rjmp	.+40     	; 0x2bd0 <LCD_u8StringScroll+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba8:	6b a1       	ldd	r22, Y+35	; 0x23
    2baa:	7c a1       	ldd	r23, Y+36	; 0x24
    2bac:	8d a1       	ldd	r24, Y+37	; 0x25
    2bae:	9e a1       	ldd	r25, Y+38	; 0x26
    2bb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	9a a3       	std	Y+34, r25	; 0x22
    2bba:	89 a3       	std	Y+33, r24	; 0x21
    2bbc:	89 a1       	ldd	r24, Y+33	; 0x21
    2bbe:	9a a1       	ldd	r25, Y+34	; 0x22
    2bc0:	9e 8f       	std	Y+30, r25	; 0x1e
    2bc2:	8d 8f       	std	Y+29, r24	; 0x1d
    2bc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	f1 f7       	brne	.-4      	; 0x2bc8 <LCD_u8StringScroll+0x87e>
    2bcc:	9e 8f       	std	Y+30, r25	; 0x1e
    2bce:	8d 8f       	std	Y+29, r24	; 0x1d

					/*Clear the LCD*/
					LCD_voidClearLCD();
    2bd0:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <LCD_voidClearLCD>

					/*Increment Move 2*/
					Local_u8Move2++;
    2bd4:	de 01       	movw	r26, r28
    2bd6:	a9 5a       	subi	r26, 0xA9	; 169
    2bd8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bda:	fe 01       	movw	r30, r28
    2bdc:	e9 5a       	subi	r30, 0xA9	; 169
    2bde:	ff 4f       	sbci	r31, 0xFF	; 255
    2be0:	80 81       	ld	r24, Z
    2be2:	8f 5f       	subi	r24, 0xFF	; 255
    2be4:	8c 93       	st	X, r24

					/*if Move 2 = 323 the over flow of line two give it its initial value and break the loop*/
					if(Local_u8Move2 == LCD_OV_LINE_2)
    2be6:	fe 01       	movw	r30, r28
    2be8:	e9 5a       	subi	r30, 0xA9	; 169
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	80 81       	ld	r24, Z
    2bee:	88 3e       	cpi	r24, 0xE8	; 232
    2bf0:	09 f0       	breq	.+2      	; 0x2bf4 <LCD_u8StringScroll+0x8aa>
    2bf2:	a0 c0       	rjmp	.+320    	; 0x2d34 <LCD_u8StringScroll+0x9ea>
					{
						Local_u8Move2 = LCD_OV_LINE_2 - Copy_u8StrSize;
    2bf4:	de 01       	movw	r26, r28
    2bf6:	a9 5a       	subi	r26, 0xA9	; 169
    2bf8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e4 5a       	subi	r30, 0xA4	; 164
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	98 ee       	ldi	r25, 0xE8	; 232
    2c02:	80 81       	ld	r24, Z
    2c04:	29 2f       	mov	r18, r25
    2c06:	28 1b       	sub	r18, r24
    2c08:	82 2f       	mov	r24, r18
    2c0a:	8c 93       	st	X, r24
    2c0c:	ca c1       	rjmp	.+916    	; 0x2fa2 <LCD_u8StringScroll+0xc58>

				/*else mean string < 16*/
				else
				{
					/*Print the string*/
					LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2c0e:	fe 01       	movw	r30, r28
    2c10:	e8 5a       	subi	r30, 0xA8	; 168
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	de 01       	movw	r26, r28
    2c16:	a0 5a       	subi	r26, 0xA0	; 160
    2c18:	bf 4f       	sbci	r27, 0xFF	; 255
    2c1a:	80 81       	ld	r24, Z
    2c1c:	6c 91       	ld	r22, X
    2c1e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2c22:	fe 01       	movw	r30, r28
    2c24:	e6 5a       	subi	r30, 0xA6	; 166
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	80 81       	ld	r24, Z
    2c2a:	91 81       	ldd	r25, Z+1	; 0x01
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e4 5a       	subi	r30, 0xA4	; 164
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	60 81       	ld	r22, Z
    2c34:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <LCD_u8WriteString>
//					LCD_u8WriteINT(Local_u8Move, 0, 0);
//					LCD_u8WriteINT(Local_u8Move2, 5, 0);
//					LCD_u8WriteINT(Copy_u8StrSize, 10, 0);

					/*Delay the given time*/
					_delay_ms(Copy_u16Time);
    2c38:	fe 01       	movw	r30, r28
    2c3a:	e3 5a       	subi	r30, 0xA3	; 163
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	80 81       	ld	r24, Z
    2c40:	91 81       	ldd	r25, Z+1	; 0x01
    2c42:	cc 01       	movw	r24, r24
    2c44:	a0 e0       	ldi	r26, 0x00	; 0
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	bc 01       	movw	r22, r24
    2c4a:	cd 01       	movw	r24, r26
    2c4c:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	89 8f       	std	Y+25, r24	; 0x19
    2c56:	9a 8f       	std	Y+26, r25	; 0x1a
    2c58:	ab 8f       	std	Y+27, r26	; 0x1b
    2c5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	4a ef       	ldi	r20, 0xFA	; 250
    2c6a:	54 e4       	ldi	r21, 0x44	; 68
    2c6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	8d 8b       	std	Y+21, r24	; 0x15
    2c76:	9e 8b       	std	Y+22, r25	; 0x16
    2c78:	af 8b       	std	Y+23, r26	; 0x17
    2c7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c80:	8f 89       	ldd	r24, Y+23	; 0x17
    2c82:	98 8d       	ldd	r25, Y+24	; 0x18
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 e8       	ldi	r20, 0x80	; 128
    2c8a:	5f e3       	ldi	r21, 0x3F	; 63
    2c8c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c90:	88 23       	and	r24, r24
    2c92:	2c f4       	brge	.+10     	; 0x2c9e <LCD_u8StringScroll+0x954>
		__ticks = 1;
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	9c 8b       	std	Y+20, r25	; 0x14
    2c9a:	8b 8b       	std	Y+19, r24	; 0x13
    2c9c:	3f c0       	rjmp	.+126    	; 0x2d1c <LCD_u8StringScroll+0x9d2>
	else if (__tmp > 65535)
    2c9e:	6d 89       	ldd	r22, Y+21	; 0x15
    2ca0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ca2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ca4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	3f ef       	ldi	r19, 0xFF	; 255
    2caa:	4f e7       	ldi	r20, 0x7F	; 127
    2cac:	57 e4       	ldi	r21, 0x47	; 71
    2cae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2cb2:	18 16       	cp	r1, r24
    2cb4:	4c f5       	brge	.+82     	; 0x2d08 <LCD_u8StringScroll+0x9be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb6:	69 8d       	ldd	r22, Y+25	; 0x19
    2cb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	40 e2       	ldi	r20, 0x20	; 32
    2cc4:	51 e4       	ldi	r21, 0x41	; 65
    2cc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	bc 01       	movw	r22, r24
    2cd0:	cd 01       	movw	r24, r26
    2cd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	9c 8b       	std	Y+20, r25	; 0x14
    2cdc:	8b 8b       	std	Y+19, r24	; 0x13
    2cde:	0f c0       	rjmp	.+30     	; 0x2cfe <LCD_u8StringScroll+0x9b4>
    2ce0:	88 ec       	ldi	r24, 0xC8	; 200
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	9a 8b       	std	Y+18, r25	; 0x12
    2ce6:	89 8b       	std	Y+17, r24	; 0x11
    2ce8:	89 89       	ldd	r24, Y+17	; 0x11
    2cea:	9a 89       	ldd	r25, Y+18	; 0x12
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <LCD_u8StringScroll+0x9a2>
    2cf0:	9a 8b       	std	Y+18, r25	; 0x12
    2cf2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf4:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf6:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	9c 8b       	std	Y+20, r25	; 0x14
    2cfc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfe:	8b 89       	ldd	r24, Y+19	; 0x13
    2d00:	9c 89       	ldd	r25, Y+20	; 0x14
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	69 f7       	brne	.-38     	; 0x2ce0 <LCD_u8StringScroll+0x996>
    2d06:	14 c0       	rjmp	.+40     	; 0x2d30 <LCD_u8StringScroll+0x9e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d08:	6d 89       	ldd	r22, Y+21	; 0x15
    2d0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	9c 8b       	std	Y+20, r25	; 0x14
    2d1a:	8b 8b       	std	Y+19, r24	; 0x13
    2d1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d20:	98 8b       	std	Y+16, r25	; 0x10
    2d22:	8f 87       	std	Y+15, r24	; 0x0f
    2d24:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d26:	98 89       	ldd	r25, Y+16	; 0x10
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	f1 f7       	brne	.-4      	; 0x2d28 <LCD_u8StringScroll+0x9de>
    2d2c:	98 8b       	std	Y+16, r25	; 0x10
    2d2e:	8f 87       	std	Y+15, r24	; 0x0f

					/*Clear LCD*/
					LCD_voidClearLCD();
    2d30:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <LCD_voidClearLCD>
		{
			/*Make the Move2 = Over flow of the second line - string size*/
			Local_u8Move2 = LCD_OV_LINE_2 - Copy_u8StrSize;

			/*loop for the LCD MAximum Scrolling witch is 41*/
			for(Local_u8Move = 0; Local_u8Move < LCD_MAX_SCROLL_LINE; Local_u8Move++)
    2d34:	de 01       	movw	r26, r28
    2d36:	a8 5a       	subi	r26, 0xA8	; 168
    2d38:	bf 4f       	sbci	r27, 0xFF	; 255
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	e8 5a       	subi	r30, 0xA8	; 168
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	80 81       	ld	r24, Z
    2d42:	8f 5f       	subi	r24, 0xFF	; 255
    2d44:	8c 93       	st	X, r24
    2d46:	fe 01       	movw	r30, r28
    2d48:	e8 5a       	subi	r30, 0xA8	; 168
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	80 81       	ld	r24, Z
    2d4e:	89 32       	cpi	r24, 0x29	; 41
    2d50:	08 f4       	brcc	.+2      	; 0x2d54 <LCD_u8StringScroll+0xa0a>
    2d52:	84 ce       	rjmp	.-760    	; 0x2a5c <LCD_u8StringScroll+0x712>
    2d54:	26 c1       	rjmp	.+588    	; 0x2fa2 <LCD_u8StringScroll+0xc58>
				}
			}
		}

		/*This if Scrolling is to Left in Line 2*/
		else if(Copy_u8RorL == LCD_SCROLL_TO_LEFT && Copy_u8YPos == 1)
    2d56:	fe 01       	movw	r30, r28
    2d58:	e1 5a       	subi	r30, 0xA1	; 161
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	80 81       	ld	r24, Z
    2d5e:	88 23       	and	r24, r24
    2d60:	09 f0       	breq	.+2      	; 0x2d64 <LCD_u8StringScroll+0xa1a>
    2d62:	1f c1       	rjmp	.+574    	; 0x2fa2 <LCD_u8StringScroll+0xc58>
    2d64:	fe 01       	movw	r30, r28
    2d66:	e0 5a       	subi	r30, 0xA0	; 160
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	80 81       	ld	r24, Z
    2d6c:	81 30       	cpi	r24, 0x01	; 1
    2d6e:	09 f0       	breq	.+2      	; 0x2d72 <LCD_u8StringScroll+0xa28>
    2d70:	18 c1       	rjmp	.+560    	; 0x2fa2 <LCD_u8StringScroll+0xc58>
		{
			/*Move2 = over flow line 2 + string size + 1 to make space between the last and first char in string */
			Local_u8Move2 = LCD_OV_LINE_2 + (Copy_u8StrSize + 1);
    2d72:	de 01       	movw	r26, r28
    2d74:	a9 5a       	subi	r26, 0xA9	; 169
    2d76:	bf 4f       	sbci	r27, 0xFF	; 255
    2d78:	fe 01       	movw	r30, r28
    2d7a:	e4 5a       	subi	r30, 0xA4	; 164
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	80 81       	ld	r24, Z
    2d80:	87 51       	subi	r24, 0x17	; 23
    2d82:	8c 93       	st	X, r24

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    2d84:	fe 01       	movw	r30, r28
    2d86:	ea 5a       	subi	r30, 0xAA	; 170
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	80 e1       	ldi	r24, 0x10	; 16
    2d8c:	80 83       	st	Z, r24

			/*make the Move = 232 (Over Flow) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_2); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    2d8e:	fe 01       	movw	r30, r28
    2d90:	e8 5a       	subi	r30, 0xA8	; 168
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	88 ee       	ldi	r24, 0xE8	; 232
    2d96:	80 83       	st	Z, r24
    2d98:	f9 c0       	rjmp	.+498    	; 0x2f8c <LCD_u8StringScroll+0xc42>
			{
				/*Print LCD with the Move as X position*/
				LCD_u8GoToXY(Local_u8Move, Copy_u8YPos);
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	e8 5a       	subi	r30, 0xA8	; 168
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	de 01       	movw	r26, r28
    2da2:	a0 5a       	subi	r26, 0xA0	; 160
    2da4:	bf 4f       	sbci	r27, 0xFF	; 255
    2da6:	80 81       	ld	r24, Z
    2da8:	6c 91       	ld	r22, X
    2daa:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
				LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2dae:	fe 01       	movw	r30, r28
    2db0:	e6 5a       	subi	r30, 0xA6	; 166
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	80 81       	ld	r24, Z
    2db6:	91 81       	ldd	r25, Z+1	; 0x01
    2db8:	fe 01       	movw	r30, r28
    2dba:	e4 5a       	subi	r30, 0xA4	; 164
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	60 81       	ld	r22, Z
    2dc0:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <LCD_u8WriteString>

				/*if String size less than 16*/
				if(Copy_u8StrSize < LCD_LINE_NB_OF_DIGITS)
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e4 5a       	subi	r30, 0xA4	; 164
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	80 81       	ld	r24, Z
    2dcc:	80 31       	cpi	r24, 0x10	; 16
    2dce:	f8 f4       	brcc	.+62     	; 0x2e0e <LCD_u8StringScroll+0xac4>
				{
					/*print with move 3 as X position*/
					LCD_u8GoToXY(Local_u8Move3 , Copy_u8YPos);
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	ea 5a       	subi	r30, 0xAA	; 170
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	de 01       	movw	r26, r28
    2dd8:	a0 5a       	subi	r26, 0xA0	; 160
    2dda:	bf 4f       	sbci	r27, 0xFF	; 255
    2ddc:	80 81       	ld	r24, Z
    2dde:	6c 91       	ld	r22, X
    2de0:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2de4:	fe 01       	movw	r30, r28
    2de6:	e6 5a       	subi	r30, 0xA6	; 166
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	80 81       	ld	r24, Z
    2dec:	91 81       	ldd	r25, Z+1	; 0x01
    2dee:	fe 01       	movw	r30, r28
    2df0:	e4 5a       	subi	r30, 0xA4	; 164
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	60 81       	ld	r22, Z
    2df6:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <LCD_u8WriteString>

					/*Decrement Move 3*/
					Local_u8Move3--;
    2dfa:	de 01       	movw	r26, r28
    2dfc:	aa 5a       	subi	r26, 0xAA	; 170
    2dfe:	bf 4f       	sbci	r27, 0xFF	; 255
    2e00:	fe 01       	movw	r30, r28
    2e02:	ea 5a       	subi	r30, 0xAA	; 170
    2e04:	ff 4f       	sbci	r31, 0xFF	; 255
    2e06:	80 81       	ld	r24, Z
    2e08:	81 50       	subi	r24, 0x01	; 1
    2e0a:	8c 93       	st	X, r24
    2e0c:	1e c0       	rjmp	.+60     	; 0x2e4a <LCD_u8StringScroll+0xb00>

				/*else mean string > 16*/
				else
				{
					/*print with the copy of string size as X position*/
					LCD_u8GoToXY(Copy_u8StringSize, Copy_u8YPos);
    2e0e:	fe 01       	movw	r30, r28
    2e10:	eb 5a       	subi	r30, 0xAB	; 171
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	de 01       	movw	r26, r28
    2e16:	a0 5a       	subi	r26, 0xA0	; 160
    2e18:	bf 4f       	sbci	r27, 0xFF	; 255
    2e1a:	80 81       	ld	r24, Z
    2e1c:	6c 91       	ld	r22, X
    2e1e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
					LCD_u8WriteString(Copy_u8String, Copy_u8StrSize);
    2e22:	fe 01       	movw	r30, r28
    2e24:	e6 5a       	subi	r30, 0xA6	; 166
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	80 81       	ld	r24, Z
    2e2a:	91 81       	ldd	r25, Z+1	; 0x01
    2e2c:	fe 01       	movw	r30, r28
    2e2e:	e4 5a       	subi	r30, 0xA4	; 164
    2e30:	ff 4f       	sbci	r31, 0xFF	; 255
    2e32:	60 81       	ld	r22, Z
    2e34:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <LCD_u8WriteString>

					/*de-crement the copy of the sting size*/
					Copy_u8StringSize--;
    2e38:	de 01       	movw	r26, r28
    2e3a:	ab 5a       	subi	r26, 0xAB	; 171
    2e3c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e3e:	fe 01       	movw	r30, r28
    2e40:	eb 5a       	subi	r30, 0xAB	; 171
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	80 81       	ld	r24, Z
    2e46:	81 50       	subi	r24, 0x01	; 1
    2e48:	8c 93       	st	X, r24
//				LCD_u8WriteINT(Local_u8Move, 10, 0);
//				LCD_u8WriteINT(Copy_u8StrSize, 5, 0);
//				LCD_u8WriteINT(Copy_u8StringSize, 1, 0);

				/*Delay the Given time*/
				_delay_ms(Copy_u16Time);
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	e3 5a       	subi	r30, 0xA3	; 163
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	80 81       	ld	r24, Z
    2e52:	91 81       	ldd	r25, Z+1	; 0x01
    2e54:	cc 01       	movw	r24, r24
    2e56:	a0 e0       	ldi	r26, 0x00	; 0
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	bc 01       	movw	r22, r24
    2e5c:	cd 01       	movw	r24, r26
    2e5e:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	8b 87       	std	Y+11, r24	; 0x0b
    2e68:	9c 87       	std	Y+12, r25	; 0x0c
    2e6a:	ad 87       	std	Y+13, r26	; 0x0d
    2e6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	4a ef       	ldi	r20, 0xFA	; 250
    2e7c:	54 e4       	ldi	r21, 0x44	; 68
    2e7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	8f 83       	std	Y+7, r24	; 0x07
    2e88:	98 87       	std	Y+8, r25	; 0x08
    2e8a:	a9 87       	std	Y+9, r26	; 0x09
    2e8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e90:	78 85       	ldd	r23, Y+8	; 0x08
    2e92:	89 85       	ldd	r24, Y+9	; 0x09
    2e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	40 e8       	ldi	r20, 0x80	; 128
    2e9c:	5f e3       	ldi	r21, 0x3F	; 63
    2e9e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ea2:	88 23       	and	r24, r24
    2ea4:	2c f4       	brge	.+10     	; 0x2eb0 <LCD_u8StringScroll+0xb66>
		__ticks = 1;
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	9e 83       	std	Y+6, r25	; 0x06
    2eac:	8d 83       	std	Y+5, r24	; 0x05
    2eae:	3f c0       	rjmp	.+126    	; 0x2f2e <LCD_u8StringScroll+0xbe4>
	else if (__tmp > 65535)
    2eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb2:	78 85       	ldd	r23, Y+8	; 0x08
    2eb4:	89 85       	ldd	r24, Y+9	; 0x09
    2eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	3f ef       	ldi	r19, 0xFF	; 255
    2ebc:	4f e7       	ldi	r20, 0x7F	; 127
    2ebe:	57 e4       	ldi	r21, 0x47	; 71
    2ec0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2ec4:	18 16       	cp	r1, r24
    2ec6:	4c f5       	brge	.+82     	; 0x2f1a <LCD_u8StringScroll+0xbd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ece:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	40 e2       	ldi	r20, 0x20	; 32
    2ed6:	51 e4       	ldi	r21, 0x41	; 65
    2ed8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	bc 01       	movw	r22, r24
    2ee2:	cd 01       	movw	r24, r26
    2ee4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	9e 83       	std	Y+6, r25	; 0x06
    2eee:	8d 83       	std	Y+5, r24	; 0x05
    2ef0:	0f c0       	rjmp	.+30     	; 0x2f10 <LCD_u8StringScroll+0xbc6>
    2ef2:	88 ec       	ldi	r24, 0xC8	; 200
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	9c 83       	std	Y+4, r25	; 0x04
    2ef8:	8b 83       	std	Y+3, r24	; 0x03
    2efa:	8b 81       	ldd	r24, Y+3	; 0x03
    2efc:	9c 81       	ldd	r25, Y+4	; 0x04
    2efe:	01 97       	sbiw	r24, 0x01	; 1
    2f00:	f1 f7       	brne	.-4      	; 0x2efe <LCD_u8StringScroll+0xbb4>
    2f02:	9c 83       	std	Y+4, r25	; 0x04
    2f04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f06:	8d 81       	ldd	r24, Y+5	; 0x05
    2f08:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	9e 83       	std	Y+6, r25	; 0x06
    2f0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f10:	8d 81       	ldd	r24, Y+5	; 0x05
    2f12:	9e 81       	ldd	r25, Y+6	; 0x06
    2f14:	00 97       	sbiw	r24, 0x00	; 0
    2f16:	69 f7       	brne	.-38     	; 0x2ef2 <LCD_u8StringScroll+0xba8>
    2f18:	14 c0       	rjmp	.+40     	; 0x2f42 <LCD_u8StringScroll+0xbf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f1c:	78 85       	ldd	r23, Y+8	; 0x08
    2f1e:	89 85       	ldd	r24, Y+9	; 0x09
    2f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	9e 83       	std	Y+6, r25	; 0x06
    2f2c:	8d 83       	std	Y+5, r24	; 0x05
    2f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f30:	9e 81       	ldd	r25, Y+6	; 0x06
    2f32:	9a 83       	std	Y+2, r25	; 0x02
    2f34:	89 83       	std	Y+1, r24	; 0x01
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
    2f38:	9a 81       	ldd	r25, Y+2	; 0x02
    2f3a:	01 97       	sbiw	r24, 0x01	; 1
    2f3c:	f1 f7       	brne	.-4      	; 0x2f3a <LCD_u8StringScroll+0xbf0>
    2f3e:	9a 83       	std	Y+2, r25	; 0x02
    2f40:	89 83       	std	Y+1, r24	; 0x01

				/*Clear LCD*/
				LCD_voidClearLCD();
    2f42:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <LCD_voidClearLCD>

				/*if Move 3 = 0 or Copy of string size = 0 re-intiate their value and break the loop*/
				if(Local_u8Move3 == 0 || Copy_u8StringSize == 0)
    2f46:	fe 01       	movw	r30, r28
    2f48:	ea 5a       	subi	r30, 0xAA	; 170
    2f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4c:	80 81       	ld	r24, Z
    2f4e:	88 23       	and	r24, r24
    2f50:	31 f0       	breq	.+12     	; 0x2f5e <LCD_u8StringScroll+0xc14>
    2f52:	fe 01       	movw	r30, r28
    2f54:	eb 5a       	subi	r30, 0xAB	; 171
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	80 81       	ld	r24, Z
    2f5a:	88 23       	and	r24, r24
    2f5c:	71 f4       	brne	.+28     	; 0x2f7a <LCD_u8StringScroll+0xc30>
				{
					Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;
    2f5e:	fe 01       	movw	r30, r28
    2f60:	ea 5a       	subi	r30, 0xAA	; 170
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	80 e1       	ldi	r24, 0x10	; 16
    2f66:	80 83       	st	Z, r24
					Copy_u8StringSize = Copy_u8StrSize;
    2f68:	de 01       	movw	r26, r28
    2f6a:	ab 5a       	subi	r26, 0xAB	; 171
    2f6c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f6e:	fe 01       	movw	r30, r28
    2f70:	e4 5a       	subi	r30, 0xA4	; 164
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	80 81       	ld	r24, Z
    2f76:	8c 93       	st	X, r24
    2f78:	14 c0       	rjmp	.+40     	; 0x2fa2 <LCD_u8StringScroll+0xc58>

			/*Move 3 = 16*/
			Local_u8Move3 = LCD_LINE_NB_OF_DIGITS;

			/*make the Move = 232 (Over Flow) and loop with --*/
			for(Local_u8Move = (LCD_OV_LINE_2); Local_u8Move <= Local_u8Move2; Local_u8Move--)
    2f7a:	de 01       	movw	r26, r28
    2f7c:	a8 5a       	subi	r26, 0xA8	; 168
    2f7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f80:	fe 01       	movw	r30, r28
    2f82:	e8 5a       	subi	r30, 0xA8	; 168
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	80 81       	ld	r24, Z
    2f88:	81 50       	subi	r24, 0x01	; 1
    2f8a:	8c 93       	st	X, r24
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	e8 5a       	subi	r30, 0xA8	; 168
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	de 01       	movw	r26, r28
    2f94:	a9 5a       	subi	r26, 0xA9	; 169
    2f96:	bf 4f       	sbci	r27, 0xFF	; 255
    2f98:	90 81       	ld	r25, Z
    2f9a:	8c 91       	ld	r24, X
    2f9c:	89 17       	cp	r24, r25
    2f9e:	08 f0       	brcs	.+2      	; 0x2fa2 <LCD_u8StringScroll+0xc58>
    2fa0:	fc ce       	rjmp	.-520    	; 0x2d9a <LCD_u8StringScroll+0xa50>
			}
		}
	}

	/*return the Error*/
	return Local_u8Error;
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e7 5a       	subi	r30, 0xA7	; 167
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	80 81       	ld	r24, Z
}
    2faa:	c0 5a       	subi	r28, 0xA0	; 160
    2fac:	df 4f       	sbci	r29, 0xFF	; 255
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	f8 94       	cli
    2fb2:	de bf       	out	0x3e, r29	; 62
    2fb4:	0f be       	out	0x3f, r0	; 63
    2fb6:	cd bf       	out	0x3d, r28	; 61
    2fb8:	cf 91       	pop	r28
    2fba:	df 91       	pop	r29
    2fbc:	1f 91       	pop	r17
    2fbe:	0f 91       	pop	r16
    2fc0:	08 95       	ret

00002fc2 <LCD_u8FloatNB>:
 * Input		: The Float Number, Number of float Digits, X Position and Y Position
 * Output		: Error State -> 0 No Error
 * 								 1 Error
 */
u8 LCD_u8FloatNB(f32 Copy_f32Float, u8 Local_u8FloatDigits, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    2fc2:	ef 92       	push	r14
    2fc4:	ff 92       	push	r15
    2fc6:	0f 93       	push	r16
    2fc8:	1f 93       	push	r17
    2fca:	df 93       	push	r29
    2fcc:	cf 93       	push	r28
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
    2fd2:	6a 97       	sbiw	r28, 0x1a	; 26
    2fd4:	0f b6       	in	r0, 0x3f	; 63
    2fd6:	f8 94       	cli
    2fd8:	de bf       	out	0x3e, r29	; 62
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	cd bf       	out	0x3d, r28	; 61
    2fde:	6c 8b       	std	Y+20, r22	; 0x14
    2fe0:	7d 8b       	std	Y+21, r23	; 0x15
    2fe2:	8e 8b       	std	Y+22, r24	; 0x16
    2fe4:	9f 8b       	std	Y+23, r25	; 0x17
    2fe6:	48 8f       	std	Y+24, r20	; 0x18
    2fe8:	29 8f       	std	Y+25, r18	; 0x19
    2fea:	0a 8f       	std	Y+26, r16	; 0x1a
	/*Local Variables*/
	u8 Local_u8Error = 0, Local_u8NOD = 0, Local_u8Iterator = 0;
    2fec:	1b 8a       	std	Y+19, r1	; 0x13
    2fee:	1a 8a       	std	Y+18, r1	; 0x12
    2ff0:	19 8a       	std	Y+17, r1	; 0x11
	u32 Local_u32IPart = 0, Local_u32Temp = 0, Local_u32FNOD = 1, Lcal_u32FPart = 0;
    2ff2:	1d 86       	std	Y+13, r1	; 0x0d
    2ff4:	1e 86       	std	Y+14, r1	; 0x0e
    2ff6:	1f 86       	std	Y+15, r1	; 0x0f
    2ff8:	18 8a       	std	Y+16, r1	; 0x10
    2ffa:	19 86       	std	Y+9, r1	; 0x09
    2ffc:	1a 86       	std	Y+10, r1	; 0x0a
    2ffe:	1b 86       	std	Y+11, r1	; 0x0b
    3000:	1c 86       	std	Y+12, r1	; 0x0c
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	a0 e0       	ldi	r26, 0x00	; 0
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	8d 83       	std	Y+5, r24	; 0x05
    300c:	9e 83       	std	Y+6, r25	; 0x06
    300e:	af 83       	std	Y+7, r26	; 0x07
    3010:	b8 87       	std	Y+8, r27	; 0x08
    3012:	19 82       	std	Y+1, r1	; 0x01
    3014:	1a 82       	std	Y+2, r1	; 0x02
    3016:	1b 82       	std	Y+3, r1	; 0x03
    3018:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_u8XPos > 15 || Copy_u8YPos > 1)
    301a:	89 8d       	ldd	r24, Y+25	; 0x19
    301c:	80 31       	cpi	r24, 0x10	; 16
    301e:	18 f4       	brcc	.+6      	; 0x3026 <LCD_u8FloatNB+0x64>
    3020:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3022:	82 30       	cpi	r24, 0x02	; 2
    3024:	18 f0       	brcs	.+6      	; 0x302c <LCD_u8FloatNB+0x6a>
	{
		Local_u8Error = 1;
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	8b 8b       	std	Y+19, r24	; 0x13
    302a:	99 c0       	rjmp	.+306    	; 0x315e <LCD_u8FloatNB+0x19c>
	}
	else
	{
		Local_u32IPart = Copy_f32Float;
    302c:	6c 89       	ldd	r22, Y+20	; 0x14
    302e:	7d 89       	ldd	r23, Y+21	; 0x15
    3030:	8e 89       	ldd	r24, Y+22	; 0x16
    3032:	9f 89       	ldd	r25, Y+23	; 0x17
    3034:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3038:	dc 01       	movw	r26, r24
    303a:	cb 01       	movw	r24, r22
    303c:	8d 87       	std	Y+13, r24	; 0x0d
    303e:	9e 87       	std	Y+14, r25	; 0x0e
    3040:	af 87       	std	Y+15, r26	; 0x0f
    3042:	b8 8b       	std	Y+16, r27	; 0x10
		Local_u32Temp = Local_u32IPart;
    3044:	8d 85       	ldd	r24, Y+13	; 0x0d
    3046:	9e 85       	ldd	r25, Y+14	; 0x0e
    3048:	af 85       	ldd	r26, Y+15	; 0x0f
    304a:	b8 89       	ldd	r27, Y+16	; 0x10
    304c:	89 87       	std	Y+9, r24	; 0x09
    304e:	9a 87       	std	Y+10, r25	; 0x0a
    3050:	ab 87       	std	Y+11, r26	; 0x0b
    3052:	bc 87       	std	Y+12, r27	; 0x0c
    3054:	15 c0       	rjmp	.+42     	; 0x3080 <LCD_u8FloatNB+0xbe>

		/*Loop to get the Number of Digits*/
		while(Local_u32Temp != 0)
		{
			/*Dividing the Integer number by 10 till we have a result of Division Zero*/
			Local_u32Temp /= 10;
    3056:	89 85       	ldd	r24, Y+9	; 0x09
    3058:	9a 85       	ldd	r25, Y+10	; 0x0a
    305a:	ab 85       	ldd	r26, Y+11	; 0x0b
    305c:	bc 85       	ldd	r27, Y+12	; 0x0c
    305e:	2a e0       	ldi	r18, 0x0A	; 10
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e0       	ldi	r20, 0x00	; 0
    3064:	50 e0       	ldi	r21, 0x00	; 0
    3066:	bc 01       	movw	r22, r24
    3068:	cd 01       	movw	r24, r26
    306a:	0e 94 91 19 	call	0x3322	; 0x3322 <__udivmodsi4>
    306e:	da 01       	movw	r26, r20
    3070:	c9 01       	movw	r24, r18
    3072:	89 87       	std	Y+9, r24	; 0x09
    3074:	9a 87       	std	Y+10, r25	; 0x0a
    3076:	ab 87       	std	Y+11, r26	; 0x0b
    3078:	bc 87       	std	Y+12, r27	; 0x0c

			/*With each Division Add 1 to Number of Digits*/
			Local_u8NOD++;
    307a:	8a 89       	ldd	r24, Y+18	; 0x12
    307c:	8f 5f       	subi	r24, 0xFF	; 255
    307e:	8a 8b       	std	Y+18, r24	; 0x12
	{
		Local_u32IPart = Copy_f32Float;
		Local_u32Temp = Local_u32IPart;

		/*Loop to get the Number of Digits*/
		while(Local_u32Temp != 0)
    3080:	89 85       	ldd	r24, Y+9	; 0x09
    3082:	9a 85       	ldd	r25, Y+10	; 0x0a
    3084:	ab 85       	ldd	r26, Y+11	; 0x0b
    3086:	bc 85       	ldd	r27, Y+12	; 0x0c
    3088:	00 97       	sbiw	r24, 0x00	; 0
    308a:	a1 05       	cpc	r26, r1
    308c:	b1 05       	cpc	r27, r1
    308e:	19 f7       	brne	.-58     	; 0x3056 <LCD_u8FloatNB+0x94>

			/*With each Division Add 1 to Number of Digits*/
			Local_u8NOD++;
		}

		for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8FloatDigits; Local_u8Iterator++)
    3090:	19 8a       	std	Y+17, r1	; 0x11
    3092:	15 c0       	rjmp	.+42     	; 0x30be <LCD_u8FloatNB+0xfc>
		{
			Local_u32FNOD = Local_u32FNOD * 10;
    3094:	8d 81       	ldd	r24, Y+5	; 0x05
    3096:	9e 81       	ldd	r25, Y+6	; 0x06
    3098:	af 81       	ldd	r26, Y+7	; 0x07
    309a:	b8 85       	ldd	r27, Y+8	; 0x08
    309c:	2a e0       	ldi	r18, 0x0A	; 10
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e0       	ldi	r20, 0x00	; 0
    30a2:	50 e0       	ldi	r21, 0x00	; 0
    30a4:	bc 01       	movw	r22, r24
    30a6:	cd 01       	movw	r24, r26
    30a8:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__mulsi3>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	8d 83       	std	Y+5, r24	; 0x05
    30b2:	9e 83       	std	Y+6, r25	; 0x06
    30b4:	af 83       	std	Y+7, r26	; 0x07
    30b6:	b8 87       	std	Y+8, r27	; 0x08

			/*With each Division Add 1 to Number of Digits*/
			Local_u8NOD++;
		}

		for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8FloatDigits; Local_u8Iterator++)
    30b8:	89 89       	ldd	r24, Y+17	; 0x11
    30ba:	8f 5f       	subi	r24, 0xFF	; 255
    30bc:	89 8b       	std	Y+17, r24	; 0x11
    30be:	99 89       	ldd	r25, Y+17	; 0x11
    30c0:	88 8d       	ldd	r24, Y+24	; 0x18
    30c2:	98 17       	cp	r25, r24
    30c4:	38 f3       	brcs	.-50     	; 0x3094 <LCD_u8FloatNB+0xd2>
		{
			Local_u32FNOD = Local_u32FNOD * 10;
		}

		Lcal_u32FPart = ((Copy_f32Float - Local_u32IPart) * Local_u32FNOD);
    30c6:	6d 85       	ldd	r22, Y+13	; 0x0d
    30c8:	7e 85       	ldd	r23, Y+14	; 0x0e
    30ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    30cc:	98 89       	ldd	r25, Y+16	; 0x10
    30ce:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    30d2:	9b 01       	movw	r18, r22
    30d4:	ac 01       	movw	r20, r24
    30d6:	6c 89       	ldd	r22, Y+20	; 0x14
    30d8:	7d 89       	ldd	r23, Y+21	; 0x15
    30da:	8e 89       	ldd	r24, Y+22	; 0x16
    30dc:	9f 89       	ldd	r25, Y+23	; 0x17
    30de:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	7c 01       	movw	r14, r24
    30e8:	8d 01       	movw	r16, r26
    30ea:	6d 81       	ldd	r22, Y+5	; 0x05
    30ec:	7e 81       	ldd	r23, Y+6	; 0x06
    30ee:	8f 81       	ldd	r24, Y+7	; 0x07
    30f0:	98 85       	ldd	r25, Y+8	; 0x08
    30f2:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    30f6:	9b 01       	movw	r18, r22
    30f8:	ac 01       	movw	r20, r24
    30fa:	c8 01       	movw	r24, r16
    30fc:	b7 01       	movw	r22, r14
    30fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	bc 01       	movw	r22, r24
    3108:	cd 01       	movw	r24, r26
    310a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	89 83       	std	Y+1, r24	; 0x01
    3114:	9a 83       	std	Y+2, r25	; 0x02
    3116:	ab 83       	std	Y+3, r26	; 0x03
    3118:	bc 83       	std	Y+4, r27	; 0x04

		LCD_u8WriteINT(Local_u32IPart, Copy_u8XPos, Copy_u8YPos);
    311a:	8d 85       	ldd	r24, Y+13	; 0x0d
    311c:	9e 85       	ldd	r25, Y+14	; 0x0e
    311e:	af 85       	ldd	r26, Y+15	; 0x0f
    3120:	b8 89       	ldd	r27, Y+16	; 0x10
    3122:	bc 01       	movw	r22, r24
    3124:	cd 01       	movw	r24, r26
    3126:	49 8d       	ldd	r20, Y+25	; 0x19
    3128:	2a 8d       	ldd	r18, Y+26	; 0x1a
    312a:	0e 94 48 10 	call	0x2090	; 0x2090 <LCD_u8WriteINT>

		LCD_u8GoToXY((Copy_u8XPos + Local_u8NOD), Copy_u8YPos);
    312e:	99 8d       	ldd	r25, Y+25	; 0x19
    3130:	8a 89       	ldd	r24, Y+18	; 0x12
    3132:	89 0f       	add	r24, r25
    3134:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3136:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
		LCD_voidWriteData('.');
    313a:	8e e2       	ldi	r24, 0x2E	; 46
    313c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <LCD_voidWriteData>

		LCD_u8WriteINT(Lcal_u32FPart, (Copy_u8XPos + Local_u8NOD + 1), Copy_u8YPos);
    3140:	99 8d       	ldd	r25, Y+25	; 0x19
    3142:	8a 89       	ldd	r24, Y+18	; 0x12
    3144:	89 0f       	add	r24, r25
    3146:	28 2f       	mov	r18, r24
    3148:	2f 5f       	subi	r18, 0xFF	; 255
    314a:	89 81       	ldd	r24, Y+1	; 0x01
    314c:	9a 81       	ldd	r25, Y+2	; 0x02
    314e:	ab 81       	ldd	r26, Y+3	; 0x03
    3150:	bc 81       	ldd	r27, Y+4	; 0x04
    3152:	bc 01       	movw	r22, r24
    3154:	cd 01       	movw	r24, r26
    3156:	42 2f       	mov	r20, r18
    3158:	2a 8d       	ldd	r18, Y+26	; 0x1a
    315a:	0e 94 48 10 	call	0x2090	; 0x2090 <LCD_u8WriteINT>
	}
		return Local_u8Error;
    315e:	8b 89       	ldd	r24, Y+19	; 0x13
}
    3160:	6a 96       	adiw	r28, 0x1a	; 26
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	f8 94       	cli
    3166:	de bf       	out	0x3e, r29	; 62
    3168:	0f be       	out	0x3f, r0	; 63
    316a:	cd bf       	out	0x3d, r28	; 61
    316c:	cf 91       	pop	r28
    316e:	df 91       	pop	r29
    3170:	1f 91       	pop	r17
    3172:	0f 91       	pop	r16
    3174:	ff 90       	pop	r15
    3176:	ef 90       	pop	r14
    3178:	08 95       	ret

0000317a <LDR_u8LDRValue>:
#include "ADC_interface.h"
#include "LDR_interface.h"
#include "LCD_interface.h"

u8 LDR_u8LDRValue(u16 Copy_u16SensorRead, u32 *Copy_u32ActualLDR)
{
    317a:	df 93       	push	r29
    317c:	cf 93       	push	r28
    317e:	cd b7       	in	r28, 0x3d	; 61
    3180:	de b7       	in	r29, 0x3e	; 62
    3182:	28 97       	sbiw	r28, 0x08	; 8
    3184:	0f b6       	in	r0, 0x3f	; 63
    3186:	f8 94       	cli
    3188:	de bf       	out	0x3e, r29	; 62
    318a:	0f be       	out	0x3f, r0	; 63
    318c:	cd bf       	out	0x3d, r28	; 61
    318e:	9e 83       	std	Y+6, r25	; 0x06
    3190:	8d 83       	std	Y+5, r24	; 0x05
    3192:	78 87       	std	Y+8, r23	; 0x08
    3194:	6f 83       	std	Y+7, r22	; 0x07


	u32 Local_u32Actual;

	/*Convert the Value to Digital*/
	Local_u32Actual = ((u32)(Copy_u16SensorRead * (u32) 5000) / (u32) 256);//*50   /1023
    3196:	8d 81       	ldd	r24, Y+5	; 0x05
    3198:	9e 81       	ldd	r25, Y+6	; 0x06
    319a:	cc 01       	movw	r24, r24
    319c:	a0 e0       	ldi	r26, 0x00	; 0
    319e:	b0 e0       	ldi	r27, 0x00	; 0
    31a0:	28 e8       	ldi	r18, 0x88	; 136
    31a2:	33 e1       	ldi	r19, 0x13	; 19
    31a4:	40 e0       	ldi	r20, 0x00	; 0
    31a6:	50 e0       	ldi	r21, 0x00	; 0
    31a8:	bc 01       	movw	r22, r24
    31aa:	cd 01       	movw	r24, r26
    31ac:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__mulsi3>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	89 2f       	mov	r24, r25
    31b6:	9a 2f       	mov	r25, r26
    31b8:	ab 2f       	mov	r26, r27
    31ba:	bb 27       	eor	r27, r27
    31bc:	89 83       	std	Y+1, r24	; 0x01
    31be:	9a 83       	std	Y+2, r25	; 0x02
    31c0:	ab 83       	std	Y+3, r26	; 0x03
    31c2:	bc 83       	std	Y+4, r27	; 0x04

	*Copy_u32ActualLDR = Local_u32Actual;
    31c4:	ef 81       	ldd	r30, Y+7	; 0x07
    31c6:	f8 85       	ldd	r31, Y+8	; 0x08
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	9a 81       	ldd	r25, Y+2	; 0x02
    31cc:	ab 81       	ldd	r26, Y+3	; 0x03
    31ce:	bc 81       	ldd	r27, Y+4	; 0x04
    31d0:	80 83       	st	Z, r24
    31d2:	91 83       	std	Z+1, r25	; 0x01
    31d4:	a2 83       	std	Z+2, r26	; 0x02
    31d6:	b3 83       	std	Z+3, r27	; 0x03
	return 0;
    31d8:	80 e0       	ldi	r24, 0x00	; 0
}
    31da:	28 96       	adiw	r28, 0x08	; 8
    31dc:	0f b6       	in	r0, 0x3f	; 63
    31de:	f8 94       	cli
    31e0:	de bf       	out	0x3e, r29	; 62
    31e2:	0f be       	out	0x3f, r0	; 63
    31e4:	cd bf       	out	0x3d, r28	; 61
    31e6:	cf 91       	pop	r28
    31e8:	df 91       	pop	r29
    31ea:	08 95       	ret

000031ec <main>:
#include "ADC_interface.h"
#include "LDR_interface.h"
#include <avr/delay.h>

void main(void)
{
    31ec:	df 93       	push	r29
    31ee:	cf 93       	push	r28
    31f0:	cd b7       	in	r28, 0x3d	; 61
    31f2:	de b7       	in	r29, 0x3e	; 62
    31f4:	62 97       	sbiw	r28, 0x12	; 18
    31f6:	0f b6       	in	r0, 0x3f	; 63
    31f8:	f8 94       	cli
    31fa:	de bf       	out	0x3e, r29	; 62
    31fc:	0f be       	out	0x3f, r0	; 63
    31fe:	cd bf       	out	0x3d, r28	; 61
	/*Local Variables*/
	u8 Local_u8String[] = "LDR: "; //Max 20 Char
    3200:	ce 01       	movw	r24, r28
    3202:	02 96       	adiw	r24, 0x02	; 2
    3204:	9f 87       	std	Y+15, r25	; 0x0f
    3206:	8e 87       	std	Y+14, r24	; 0x0e
    3208:	e0 e6       	ldi	r30, 0x60	; 96
    320a:	f0 e0       	ldi	r31, 0x00	; 0
    320c:	f9 8b       	std	Y+17, r31	; 0x11
    320e:	e8 8b       	std	Y+16, r30	; 0x10
    3210:	f6 e0       	ldi	r31, 0x06	; 6
    3212:	fa 8b       	std	Y+18, r31	; 0x12
    3214:	e8 89       	ldd	r30, Y+16	; 0x10
    3216:	f9 89       	ldd	r31, Y+17	; 0x11
    3218:	00 80       	ld	r0, Z
    321a:	88 89       	ldd	r24, Y+16	; 0x10
    321c:	99 89       	ldd	r25, Y+17	; 0x11
    321e:	01 96       	adiw	r24, 0x01	; 1
    3220:	99 8b       	std	Y+17, r25	; 0x11
    3222:	88 8b       	std	Y+16, r24	; 0x10
    3224:	ee 85       	ldd	r30, Y+14	; 0x0e
    3226:	ff 85       	ldd	r31, Y+15	; 0x0f
    3228:	00 82       	st	Z, r0
    322a:	8e 85       	ldd	r24, Y+14	; 0x0e
    322c:	9f 85       	ldd	r25, Y+15	; 0x0f
    322e:	01 96       	adiw	r24, 0x01	; 1
    3230:	9f 87       	std	Y+15, r25	; 0x0f
    3232:	8e 87       	std	Y+14, r24	; 0x0e
    3234:	9a 89       	ldd	r25, Y+18	; 0x12
    3236:	91 50       	subi	r25, 0x01	; 1
    3238:	9a 8b       	std	Y+18, r25	; 0x12
    323a:	ea 89       	ldd	r30, Y+18	; 0x12
    323c:	ee 23       	and	r30, r30
    323e:	51 f7       	brne	.-44     	; 0x3214 <main+0x28>
	u8 Local_u8StringSize = (sizeof(Local_u8String) - 1);
    3240:	85 e0       	ldi	r24, 0x05	; 5
    3242:	89 83       	std	Y+1, r24	; 0x01
	u16 Local_u16ADCValue = 0;
    3244:	19 86       	std	Y+9, r1	; 0x09
    3246:	18 86       	std	Y+8, r1	; 0x08
	u32 Local_u32ActualLDR = 0;
    3248:	1a 86       	std	Y+10, r1	; 0x0a
    324a:	1b 86       	std	Y+11, r1	; 0x0b
    324c:	1c 86       	std	Y+12, r1	; 0x0c
    324e:	1d 86       	std	Y+13, r1	; 0x0d

	DIO_u8SetPortDirection(LCD_DATA_PORT, DIO_MAX_PORT_VALUE);
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	6f ef       	ldi	r22, 0xFF	; 255
    3254:	0e 94 9a 07 	call	0xf34	; 0xf34 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_OUTPUT);
    3258:	82 e0       	ldi	r24, 0x02	; 2
    325a:	60 e0       	ldi	r22, 0x00	; 0
    325c:	41 e0       	ldi	r20, 0x01	; 1
    325e:	0e 94 2a 08 	call	0x1054	; 0x1054 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_OUTPUT);
    3262:	82 e0       	ldi	r24, 0x02	; 2
    3264:	61 e0       	ldi	r22, 0x01	; 1
    3266:	41 e0       	ldi	r20, 0x01	; 1
    3268:	0e 94 2a 08 	call	0x1054	; 0x1054 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_E_PIN, DIO_OUTPUT);
    326c:	82 e0       	ldi	r24, 0x02	; 2
    326e:	62 e0       	ldi	r22, 0x02	; 2
    3270:	41 e0       	ldi	r20, 0x01	; 1
    3272:	0e 94 2a 08 	call	0x1054	; 0x1054 <DIO_u8SetPinDirection>

	/*LCD Initialization*/
	LCD_voidInitialization();
    3276:	0e 94 8c 0c 	call	0x1918	; 0x1918 <LCD_voidInitialization>

	/*ADC Initialization*/
	ADC_voidInitialization();
    327a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <ADC_voidInitialization>

	/*ADC PIN Direction*/
	DIO_u8SetPinDirection(DIO_PORT_0, DIO_PIN_0, DIO_INPUT);
    327e:	80 e0       	ldi	r24, 0x00	; 0
    3280:	60 e0       	ldi	r22, 0x00	; 0
    3282:	40 e0       	ldi	r20, 0x00	; 0
    3284:	0e 94 2a 08 	call	0x1054	; 0x1054 <DIO_u8SetPinDirection>

	while(1)
	{
		/*Get the Digital Reading from ADC*/
		ADC_u8GetReading(Channel_0, &Local_u16ADCValue);
    3288:	9e 01       	movw	r18, r28
    328a:	28 5f       	subi	r18, 0xF8	; 248
    328c:	3f 4f       	sbci	r19, 0xFF	; 255
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	b9 01       	movw	r22, r18
    3292:	0e 94 4e 07 	call	0xe9c	; 0xe9c <ADC_u8GetReading>

		/*Convert the Value to Actual TEMP*/
		LDR_u8LDRValue(Local_u16ADCValue, &Local_u32ActualLDR);
    3296:	88 85       	ldd	r24, Y+8	; 0x08
    3298:	99 85       	ldd	r25, Y+9	; 0x09
    329a:	9e 01       	movw	r18, r28
    329c:	26 5f       	subi	r18, 0xF6	; 246
    329e:	3f 4f       	sbci	r19, 0xFF	; 255
    32a0:	b9 01       	movw	r22, r18
    32a2:	0e 94 bd 18 	call	0x317a	; 0x317a <LDR_u8LDRValue>

		/*Print the Actual TEMP on LCD*/
		LCD_u8GoToXY(0, 0);
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	60 e0       	ldi	r22, 0x00	; 0
    32aa:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
		LCD_u8WriteString(Local_u8String, Local_u8StringSize);
    32ae:	ce 01       	movw	r24, r28
    32b0:	02 96       	adiw	r24, 0x02	; 2
    32b2:	69 81       	ldd	r22, Y+1	; 0x01
    32b4:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <LCD_u8WriteString>

		LCD_u8WriteINT(Local_u32ActualLDR, 0, 1);
    32b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    32ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    32bc:	ac 85       	ldd	r26, Y+12	; 0x0c
    32be:	bd 85       	ldd	r27, Y+13	; 0x0d
    32c0:	bc 01       	movw	r22, r24
    32c2:	cd 01       	movw	r24, r26
    32c4:	40 e0       	ldi	r20, 0x00	; 0
    32c6:	21 e0       	ldi	r18, 0x01	; 1
    32c8:	0e 94 48 10 	call	0x2090	; 0x2090 <LCD_u8WriteINT>
		LCD_u8WriteINT(Local_u16ADCValue, 10, 0);
    32cc:	88 85       	ldd	r24, Y+8	; 0x08
    32ce:	99 85       	ldd	r25, Y+9	; 0x09
    32d0:	cc 01       	movw	r24, r24
    32d2:	a0 e0       	ldi	r26, 0x00	; 0
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	bc 01       	movw	r22, r24
    32d8:	cd 01       	movw	r24, r26
    32da:	4a e0       	ldi	r20, 0x0A	; 10
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	0e 94 48 10 	call	0x2090	; 0x2090 <LCD_u8WriteINT>
    32e2:	d2 cf       	rjmp	.-92     	; 0x3288 <main+0x9c>

000032e4 <__mulsi3>:
    32e4:	62 9f       	mul	r22, r18
    32e6:	d0 01       	movw	r26, r0
    32e8:	73 9f       	mul	r23, r19
    32ea:	f0 01       	movw	r30, r0
    32ec:	82 9f       	mul	r24, r18
    32ee:	e0 0d       	add	r30, r0
    32f0:	f1 1d       	adc	r31, r1
    32f2:	64 9f       	mul	r22, r20
    32f4:	e0 0d       	add	r30, r0
    32f6:	f1 1d       	adc	r31, r1
    32f8:	92 9f       	mul	r25, r18
    32fa:	f0 0d       	add	r31, r0
    32fc:	83 9f       	mul	r24, r19
    32fe:	f0 0d       	add	r31, r0
    3300:	74 9f       	mul	r23, r20
    3302:	f0 0d       	add	r31, r0
    3304:	65 9f       	mul	r22, r21
    3306:	f0 0d       	add	r31, r0
    3308:	99 27       	eor	r25, r25
    330a:	72 9f       	mul	r23, r18
    330c:	b0 0d       	add	r27, r0
    330e:	e1 1d       	adc	r30, r1
    3310:	f9 1f       	adc	r31, r25
    3312:	63 9f       	mul	r22, r19
    3314:	b0 0d       	add	r27, r0
    3316:	e1 1d       	adc	r30, r1
    3318:	f9 1f       	adc	r31, r25
    331a:	bd 01       	movw	r22, r26
    331c:	cf 01       	movw	r24, r30
    331e:	11 24       	eor	r1, r1
    3320:	08 95       	ret

00003322 <__udivmodsi4>:
    3322:	a1 e2       	ldi	r26, 0x21	; 33
    3324:	1a 2e       	mov	r1, r26
    3326:	aa 1b       	sub	r26, r26
    3328:	bb 1b       	sub	r27, r27
    332a:	fd 01       	movw	r30, r26
    332c:	0d c0       	rjmp	.+26     	; 0x3348 <__udivmodsi4_ep>

0000332e <__udivmodsi4_loop>:
    332e:	aa 1f       	adc	r26, r26
    3330:	bb 1f       	adc	r27, r27
    3332:	ee 1f       	adc	r30, r30
    3334:	ff 1f       	adc	r31, r31
    3336:	a2 17       	cp	r26, r18
    3338:	b3 07       	cpc	r27, r19
    333a:	e4 07       	cpc	r30, r20
    333c:	f5 07       	cpc	r31, r21
    333e:	20 f0       	brcs	.+8      	; 0x3348 <__udivmodsi4_ep>
    3340:	a2 1b       	sub	r26, r18
    3342:	b3 0b       	sbc	r27, r19
    3344:	e4 0b       	sbc	r30, r20
    3346:	f5 0b       	sbc	r31, r21

00003348 <__udivmodsi4_ep>:
    3348:	66 1f       	adc	r22, r22
    334a:	77 1f       	adc	r23, r23
    334c:	88 1f       	adc	r24, r24
    334e:	99 1f       	adc	r25, r25
    3350:	1a 94       	dec	r1
    3352:	69 f7       	brne	.-38     	; 0x332e <__udivmodsi4_loop>
    3354:	60 95       	com	r22
    3356:	70 95       	com	r23
    3358:	80 95       	com	r24
    335a:	90 95       	com	r25
    335c:	9b 01       	movw	r18, r22
    335e:	ac 01       	movw	r20, r24
    3360:	bd 01       	movw	r22, r26
    3362:	cf 01       	movw	r24, r30
    3364:	08 95       	ret

00003366 <__prologue_saves__>:
    3366:	2f 92       	push	r2
    3368:	3f 92       	push	r3
    336a:	4f 92       	push	r4
    336c:	5f 92       	push	r5
    336e:	6f 92       	push	r6
    3370:	7f 92       	push	r7
    3372:	8f 92       	push	r8
    3374:	9f 92       	push	r9
    3376:	af 92       	push	r10
    3378:	bf 92       	push	r11
    337a:	cf 92       	push	r12
    337c:	df 92       	push	r13
    337e:	ef 92       	push	r14
    3380:	ff 92       	push	r15
    3382:	0f 93       	push	r16
    3384:	1f 93       	push	r17
    3386:	cf 93       	push	r28
    3388:	df 93       	push	r29
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	ca 1b       	sub	r28, r26
    3390:	db 0b       	sbc	r29, r27
    3392:	0f b6       	in	r0, 0x3f	; 63
    3394:	f8 94       	cli
    3396:	de bf       	out	0x3e, r29	; 62
    3398:	0f be       	out	0x3f, r0	; 63
    339a:	cd bf       	out	0x3d, r28	; 61
    339c:	09 94       	ijmp

0000339e <__epilogue_restores__>:
    339e:	2a 88       	ldd	r2, Y+18	; 0x12
    33a0:	39 88       	ldd	r3, Y+17	; 0x11
    33a2:	48 88       	ldd	r4, Y+16	; 0x10
    33a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    33a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    33a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    33aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    33ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    33ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    33b0:	b9 84       	ldd	r11, Y+9	; 0x09
    33b2:	c8 84       	ldd	r12, Y+8	; 0x08
    33b4:	df 80       	ldd	r13, Y+7	; 0x07
    33b6:	ee 80       	ldd	r14, Y+6	; 0x06
    33b8:	fd 80       	ldd	r15, Y+5	; 0x05
    33ba:	0c 81       	ldd	r16, Y+4	; 0x04
    33bc:	1b 81       	ldd	r17, Y+3	; 0x03
    33be:	aa 81       	ldd	r26, Y+2	; 0x02
    33c0:	b9 81       	ldd	r27, Y+1	; 0x01
    33c2:	ce 0f       	add	r28, r30
    33c4:	d1 1d       	adc	r29, r1
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	f8 94       	cli
    33ca:	de bf       	out	0x3e, r29	; 62
    33cc:	0f be       	out	0x3f, r0	; 63
    33ce:	cd bf       	out	0x3d, r28	; 61
    33d0:	ed 01       	movw	r28, r26
    33d2:	08 95       	ret

000033d4 <_exit>:
    33d4:	f8 94       	cli

000033d6 <__stop_program>:
    33d6:	ff cf       	rjmp	.-2      	; 0x33d6 <__stop_program>
